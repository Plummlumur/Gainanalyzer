
002_E_GA.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cf0c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000c20  0800d0a0  0800d0a0  0001d0a0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800dcc0  0800dcc0  0001dcc0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800dcc8  0800dcc8  0001dcc8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800dccc  0800dccc  0001dccc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000688  20000000  0800dcd0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .ccmram       00000000  10000000  10000000  00020688  2**0
                  CONTENTS
  8 .bss          0000eab8  20000688  20000688  00020688  2**2
                  ALLOC
  9 ._user_heap_stack 00006000  2000f140  2000f140  00020688  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  00020688  2**0
                  CONTENTS, READONLY
 11 .debug_info   00035edd  00000000  00000000  000206b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 00006018  00000000  00000000  00056595  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    000139a3  00000000  00000000  0005c5ad  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000013e8  00000000  00000000  0006ff50  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001fb0  00000000  00000000  00071338  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   0000c45b  00000000  00000000  000732e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    00006b13  00000000  00000000  0007f743  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .comment      0000007c  00000000  00000000  00086256  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00004c38  00000000  00000000  000862d4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000688 	.word	0x20000688
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800d084 	.word	0x0800d084

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000068c 	.word	0x2000068c
 80001cc:	0800d084 	.word	0x0800d084

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003be:	f1a4 0401 	sub.w	r4, r4, #1
 80003c2:	d1e9      	bne.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f092 0f00 	teq	r2, #0
 800056a:	bf14      	ite	ne
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	4770      	bxeq	lr
 8000572:	b530      	push	{r4, r5, lr}
 8000574:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000578:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800057c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000580:	e720      	b.n	80003c4 <__adddf3+0x138>
 8000582:	bf00      	nop

08000584 <__aeabi_ul2d>:
 8000584:	ea50 0201 	orrs.w	r2, r0, r1
 8000588:	bf08      	it	eq
 800058a:	4770      	bxeq	lr
 800058c:	b530      	push	{r4, r5, lr}
 800058e:	f04f 0500 	mov.w	r5, #0
 8000592:	e00a      	b.n	80005aa <__aeabi_l2d+0x16>

08000594 <__aeabi_l2d>:
 8000594:	ea50 0201 	orrs.w	r2, r0, r1
 8000598:	bf08      	it	eq
 800059a:	4770      	bxeq	lr
 800059c:	b530      	push	{r4, r5, lr}
 800059e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005a2:	d502      	bpl.n	80005aa <__aeabi_l2d+0x16>
 80005a4:	4240      	negs	r0, r0
 80005a6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005aa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005ae:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005b2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005b6:	f43f aedc 	beq.w	8000372 <__adddf3+0xe6>
 80005ba:	f04f 0203 	mov.w	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005d2:	f1c2 0320 	rsb	r3, r2, #32
 80005d6:	fa00 fc03 	lsl.w	ip, r0, r3
 80005da:	fa20 f002 	lsr.w	r0, r0, r2
 80005de:	fa01 fe03 	lsl.w	lr, r1, r3
 80005e2:	ea40 000e 	orr.w	r0, r0, lr
 80005e6:	fa21 f102 	lsr.w	r1, r1, r2
 80005ea:	4414      	add	r4, r2
 80005ec:	e6c1      	b.n	8000372 <__adddf3+0xe6>
 80005ee:	bf00      	nop

080005f0 <__aeabi_dmul>:
 80005f0:	b570      	push	{r4, r5, r6, lr}
 80005f2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005f6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005fa:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005fe:	bf1d      	ittte	ne
 8000600:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000604:	ea94 0f0c 	teqne	r4, ip
 8000608:	ea95 0f0c 	teqne	r5, ip
 800060c:	f000 f8de 	bleq	80007cc <__aeabi_dmul+0x1dc>
 8000610:	442c      	add	r4, r5
 8000612:	ea81 0603 	eor.w	r6, r1, r3
 8000616:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800061a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800061e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000622:	bf18      	it	ne
 8000624:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000628:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800062c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000630:	d038      	beq.n	80006a4 <__aeabi_dmul+0xb4>
 8000632:	fba0 ce02 	umull	ip, lr, r0, r2
 8000636:	f04f 0500 	mov.w	r5, #0
 800063a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800063e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000642:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000646:	f04f 0600 	mov.w	r6, #0
 800064a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800064e:	f09c 0f00 	teq	ip, #0
 8000652:	bf18      	it	ne
 8000654:	f04e 0e01 	orrne.w	lr, lr, #1
 8000658:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800065c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000660:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000664:	d204      	bcs.n	8000670 <__aeabi_dmul+0x80>
 8000666:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800066a:	416d      	adcs	r5, r5
 800066c:	eb46 0606 	adc.w	r6, r6, r6
 8000670:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000674:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000678:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800067c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000680:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000684:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000688:	bf88      	it	hi
 800068a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800068e:	d81e      	bhi.n	80006ce <__aeabi_dmul+0xde>
 8000690:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000694:	bf08      	it	eq
 8000696:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800069a:	f150 0000 	adcs.w	r0, r0, #0
 800069e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006a8:	ea46 0101 	orr.w	r1, r6, r1
 80006ac:	ea40 0002 	orr.w	r0, r0, r2
 80006b0:	ea81 0103 	eor.w	r1, r1, r3
 80006b4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b8:	bfc2      	ittt	gt
 80006ba:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006be:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006c2:	bd70      	popgt	{r4, r5, r6, pc}
 80006c4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006c8:	f04f 0e00 	mov.w	lr, #0
 80006cc:	3c01      	subs	r4, #1
 80006ce:	f300 80ab 	bgt.w	8000828 <__aeabi_dmul+0x238>
 80006d2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006d6:	bfde      	ittt	le
 80006d8:	2000      	movle	r0, #0
 80006da:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006de:	bd70      	pople	{r4, r5, r6, pc}
 80006e0:	f1c4 0400 	rsb	r4, r4, #0
 80006e4:	3c20      	subs	r4, #32
 80006e6:	da35      	bge.n	8000754 <__aeabi_dmul+0x164>
 80006e8:	340c      	adds	r4, #12
 80006ea:	dc1b      	bgt.n	8000724 <__aeabi_dmul+0x134>
 80006ec:	f104 0414 	add.w	r4, r4, #20
 80006f0:	f1c4 0520 	rsb	r5, r4, #32
 80006f4:	fa00 f305 	lsl.w	r3, r0, r5
 80006f8:	fa20 f004 	lsr.w	r0, r0, r4
 80006fc:	fa01 f205 	lsl.w	r2, r1, r5
 8000700:	ea40 0002 	orr.w	r0, r0, r2
 8000704:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000708:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800070c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000710:	fa21 f604 	lsr.w	r6, r1, r4
 8000714:	eb42 0106 	adc.w	r1, r2, r6
 8000718:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800071c:	bf08      	it	eq
 800071e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000722:	bd70      	pop	{r4, r5, r6, pc}
 8000724:	f1c4 040c 	rsb	r4, r4, #12
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f304 	lsl.w	r3, r0, r4
 8000730:	fa20 f005 	lsr.w	r0, r0, r5
 8000734:	fa01 f204 	lsl.w	r2, r1, r4
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000744:	f141 0100 	adc.w	r1, r1, #0
 8000748:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800074c:	bf08      	it	eq
 800074e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000752:	bd70      	pop	{r4, r5, r6, pc}
 8000754:	f1c4 0520 	rsb	r5, r4, #32
 8000758:	fa00 f205 	lsl.w	r2, r0, r5
 800075c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000760:	fa20 f304 	lsr.w	r3, r0, r4
 8000764:	fa01 f205 	lsl.w	r2, r1, r5
 8000768:	ea43 0302 	orr.w	r3, r3, r2
 800076c:	fa21 f004 	lsr.w	r0, r1, r4
 8000770:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000774:	fa21 f204 	lsr.w	r2, r1, r4
 8000778:	ea20 0002 	bic.w	r0, r0, r2
 800077c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f094 0f00 	teq	r4, #0
 8000790:	d10f      	bne.n	80007b2 <__aeabi_dmul+0x1c2>
 8000792:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000796:	0040      	lsls	r0, r0, #1
 8000798:	eb41 0101 	adc.w	r1, r1, r1
 800079c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a0:	bf08      	it	eq
 80007a2:	3c01      	subeq	r4, #1
 80007a4:	d0f7      	beq.n	8000796 <__aeabi_dmul+0x1a6>
 80007a6:	ea41 0106 	orr.w	r1, r1, r6
 80007aa:	f095 0f00 	teq	r5, #0
 80007ae:	bf18      	it	ne
 80007b0:	4770      	bxne	lr
 80007b2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007b6:	0052      	lsls	r2, r2, #1
 80007b8:	eb43 0303 	adc.w	r3, r3, r3
 80007bc:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c0:	bf08      	it	eq
 80007c2:	3d01      	subeq	r5, #1
 80007c4:	d0f7      	beq.n	80007b6 <__aeabi_dmul+0x1c6>
 80007c6:	ea43 0306 	orr.w	r3, r3, r6
 80007ca:	4770      	bx	lr
 80007cc:	ea94 0f0c 	teq	r4, ip
 80007d0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007d4:	bf18      	it	ne
 80007d6:	ea95 0f0c 	teqne	r5, ip
 80007da:	d00c      	beq.n	80007f6 <__aeabi_dmul+0x206>
 80007dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e0:	bf18      	it	ne
 80007e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007e6:	d1d1      	bne.n	800078c <__aeabi_dmul+0x19c>
 80007e8:	ea81 0103 	eor.w	r1, r1, r3
 80007ec:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f0:	f04f 0000 	mov.w	r0, #0
 80007f4:	bd70      	pop	{r4, r5, r6, pc}
 80007f6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007fa:	bf06      	itte	eq
 80007fc:	4610      	moveq	r0, r2
 80007fe:	4619      	moveq	r1, r3
 8000800:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000804:	d019      	beq.n	800083a <__aeabi_dmul+0x24a>
 8000806:	ea94 0f0c 	teq	r4, ip
 800080a:	d102      	bne.n	8000812 <__aeabi_dmul+0x222>
 800080c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000810:	d113      	bne.n	800083a <__aeabi_dmul+0x24a>
 8000812:	ea95 0f0c 	teq	r5, ip
 8000816:	d105      	bne.n	8000824 <__aeabi_dmul+0x234>
 8000818:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800081c:	bf1c      	itt	ne
 800081e:	4610      	movne	r0, r2
 8000820:	4619      	movne	r1, r3
 8000822:	d10a      	bne.n	800083a <__aeabi_dmul+0x24a>
 8000824:	ea81 0103 	eor.w	r1, r1, r3
 8000828:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800082c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000830:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000834:	f04f 0000 	mov.w	r0, #0
 8000838:	bd70      	pop	{r4, r5, r6, pc}
 800083a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800083e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000842:	bd70      	pop	{r4, r5, r6, pc}

08000844 <__aeabi_ddiv>:
 8000844:	b570      	push	{r4, r5, r6, lr}
 8000846:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800084a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800084e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000852:	bf1d      	ittte	ne
 8000854:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000858:	ea94 0f0c 	teqne	r4, ip
 800085c:	ea95 0f0c 	teqne	r5, ip
 8000860:	f000 f8a7 	bleq	80009b2 <__aeabi_ddiv+0x16e>
 8000864:	eba4 0405 	sub.w	r4, r4, r5
 8000868:	ea81 0e03 	eor.w	lr, r1, r3
 800086c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000870:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000874:	f000 8088 	beq.w	8000988 <__aeabi_ddiv+0x144>
 8000878:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800087c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000880:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000884:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000888:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800088c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000890:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000894:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000898:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800089c:	429d      	cmp	r5, r3
 800089e:	bf08      	it	eq
 80008a0:	4296      	cmpeq	r6, r2
 80008a2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008a6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008aa:	d202      	bcs.n	80008b2 <__aeabi_ddiv+0x6e>
 80008ac:	085b      	lsrs	r3, r3, #1
 80008ae:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b2:	1ab6      	subs	r6, r6, r2
 80008b4:	eb65 0503 	sbc.w	r5, r5, r3
 80008b8:	085b      	lsrs	r3, r3, #1
 80008ba:	ea4f 0232 	mov.w	r2, r2, rrx
 80008be:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008c2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ce:	bf22      	ittt	cs
 80008d0:	1ab6      	subcs	r6, r6, r2
 80008d2:	4675      	movcs	r5, lr
 80008d4:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d8:	085b      	lsrs	r3, r3, #1
 80008da:	ea4f 0232 	mov.w	r2, r2, rrx
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000920:	ea55 0e06 	orrs.w	lr, r5, r6
 8000924:	d018      	beq.n	8000958 <__aeabi_ddiv+0x114>
 8000926:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800092a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800092e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000932:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000936:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800093a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800093e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000942:	d1c0      	bne.n	80008c6 <__aeabi_ddiv+0x82>
 8000944:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000948:	d10b      	bne.n	8000962 <__aeabi_ddiv+0x11e>
 800094a:	ea41 0100 	orr.w	r1, r1, r0
 800094e:	f04f 0000 	mov.w	r0, #0
 8000952:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000956:	e7b6      	b.n	80008c6 <__aeabi_ddiv+0x82>
 8000958:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800095c:	bf04      	itt	eq
 800095e:	4301      	orreq	r1, r0
 8000960:	2000      	moveq	r0, #0
 8000962:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000966:	bf88      	it	hi
 8000968:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800096c:	f63f aeaf 	bhi.w	80006ce <__aeabi_dmul+0xde>
 8000970:	ebb5 0c03 	subs.w	ip, r5, r3
 8000974:	bf04      	itt	eq
 8000976:	ebb6 0c02 	subseq.w	ip, r6, r2
 800097a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800097e:	f150 0000 	adcs.w	r0, r0, #0
 8000982:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000986:	bd70      	pop	{r4, r5, r6, pc}
 8000988:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800098c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000990:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000994:	bfc2      	ittt	gt
 8000996:	ebd4 050c 	rsbsgt	r5, r4, ip
 800099a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800099e:	bd70      	popgt	{r4, r5, r6, pc}
 80009a0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009a4:	f04f 0e00 	mov.w	lr, #0
 80009a8:	3c01      	subs	r4, #1
 80009aa:	e690      	b.n	80006ce <__aeabi_dmul+0xde>
 80009ac:	ea45 0e06 	orr.w	lr, r5, r6
 80009b0:	e68d      	b.n	80006ce <__aeabi_dmul+0xde>
 80009b2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009b6:	ea94 0f0c 	teq	r4, ip
 80009ba:	bf08      	it	eq
 80009bc:	ea95 0f0c 	teqeq	r5, ip
 80009c0:	f43f af3b 	beq.w	800083a <__aeabi_dmul+0x24a>
 80009c4:	ea94 0f0c 	teq	r4, ip
 80009c8:	d10a      	bne.n	80009e0 <__aeabi_ddiv+0x19c>
 80009ca:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009ce:	f47f af34 	bne.w	800083a <__aeabi_dmul+0x24a>
 80009d2:	ea95 0f0c 	teq	r5, ip
 80009d6:	f47f af25 	bne.w	8000824 <__aeabi_dmul+0x234>
 80009da:	4610      	mov	r0, r2
 80009dc:	4619      	mov	r1, r3
 80009de:	e72c      	b.n	800083a <__aeabi_dmul+0x24a>
 80009e0:	ea95 0f0c 	teq	r5, ip
 80009e4:	d106      	bne.n	80009f4 <__aeabi_ddiv+0x1b0>
 80009e6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009ea:	f43f aefd 	beq.w	80007e8 <__aeabi_dmul+0x1f8>
 80009ee:	4610      	mov	r0, r2
 80009f0:	4619      	mov	r1, r3
 80009f2:	e722      	b.n	800083a <__aeabi_dmul+0x24a>
 80009f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f8:	bf18      	it	ne
 80009fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009fe:	f47f aec5 	bne.w	800078c <__aeabi_dmul+0x19c>
 8000a02:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a06:	f47f af0d 	bne.w	8000824 <__aeabi_dmul+0x234>
 8000a0a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a0e:	f47f aeeb 	bne.w	80007e8 <__aeabi_dmul+0x1f8>
 8000a12:	e712      	b.n	800083a <__aeabi_dmul+0x24a>

08000a14 <__gedf2>:
 8000a14:	f04f 3cff 	mov.w	ip, #4294967295
 8000a18:	e006      	b.n	8000a28 <__cmpdf2+0x4>
 8000a1a:	bf00      	nop

08000a1c <__ledf2>:
 8000a1c:	f04f 0c01 	mov.w	ip, #1
 8000a20:	e002      	b.n	8000a28 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__cmpdf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a34:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a38:	bf18      	it	ne
 8000a3a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a3e:	d01b      	beq.n	8000a78 <__cmpdf2+0x54>
 8000a40:	b001      	add	sp, #4
 8000a42:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a46:	bf0c      	ite	eq
 8000a48:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a4c:	ea91 0f03 	teqne	r1, r3
 8000a50:	bf02      	ittt	eq
 8000a52:	ea90 0f02 	teqeq	r0, r2
 8000a56:	2000      	moveq	r0, #0
 8000a58:	4770      	bxeq	lr
 8000a5a:	f110 0f00 	cmn.w	r0, #0
 8000a5e:	ea91 0f03 	teq	r1, r3
 8000a62:	bf58      	it	pl
 8000a64:	4299      	cmppl	r1, r3
 8000a66:	bf08      	it	eq
 8000a68:	4290      	cmpeq	r0, r2
 8000a6a:	bf2c      	ite	cs
 8000a6c:	17d8      	asrcs	r0, r3, #31
 8000a6e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a72:	f040 0001 	orr.w	r0, r0, #1
 8000a76:	4770      	bx	lr
 8000a78:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a7c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a80:	d102      	bne.n	8000a88 <__cmpdf2+0x64>
 8000a82:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a86:	d107      	bne.n	8000a98 <__cmpdf2+0x74>
 8000a88:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a8c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a90:	d1d6      	bne.n	8000a40 <__cmpdf2+0x1c>
 8000a92:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a96:	d0d3      	beq.n	8000a40 <__cmpdf2+0x1c>
 8000a98:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a9c:	4770      	bx	lr
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_cdrcmple>:
 8000aa0:	4684      	mov	ip, r0
 8000aa2:	4610      	mov	r0, r2
 8000aa4:	4662      	mov	r2, ip
 8000aa6:	468c      	mov	ip, r1
 8000aa8:	4619      	mov	r1, r3
 8000aaa:	4663      	mov	r3, ip
 8000aac:	e000      	b.n	8000ab0 <__aeabi_cdcmpeq>
 8000aae:	bf00      	nop

08000ab0 <__aeabi_cdcmpeq>:
 8000ab0:	b501      	push	{r0, lr}
 8000ab2:	f7ff ffb7 	bl	8000a24 <__cmpdf2>
 8000ab6:	2800      	cmp	r0, #0
 8000ab8:	bf48      	it	mi
 8000aba:	f110 0f00 	cmnmi.w	r0, #0
 8000abe:	bd01      	pop	{r0, pc}

08000ac0 <__aeabi_dcmpeq>:
 8000ac0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac4:	f7ff fff4 	bl	8000ab0 <__aeabi_cdcmpeq>
 8000ac8:	bf0c      	ite	eq
 8000aca:	2001      	moveq	r0, #1
 8000acc:	2000      	movne	r0, #0
 8000ace:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ad2:	bf00      	nop

08000ad4 <__aeabi_dcmplt>:
 8000ad4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad8:	f7ff ffea 	bl	8000ab0 <__aeabi_cdcmpeq>
 8000adc:	bf34      	ite	cc
 8000ade:	2001      	movcc	r0, #1
 8000ae0:	2000      	movcs	r0, #0
 8000ae2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_dcmple>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff ffe0 	bl	8000ab0 <__aeabi_cdcmpeq>
 8000af0:	bf94      	ite	ls
 8000af2:	2001      	movls	r0, #1
 8000af4:	2000      	movhi	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmpge>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffce 	bl	8000aa0 <__aeabi_cdrcmple>
 8000b04:	bf94      	ite	ls
 8000b06:	2001      	movls	r0, #1
 8000b08:	2000      	movhi	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmpgt>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffc4 	bl	8000aa0 <__aeabi_cdrcmple>
 8000b18:	bf34      	ite	cc
 8000b1a:	2001      	movcc	r0, #1
 8000b1c:	2000      	movcs	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpun>:
 8000b24:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b28:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b2c:	d102      	bne.n	8000b34 <__aeabi_dcmpun+0x10>
 8000b2e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b32:	d10a      	bne.n	8000b4a <__aeabi_dcmpun+0x26>
 8000b34:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b3c:	d102      	bne.n	8000b44 <__aeabi_dcmpun+0x20>
 8000b3e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b42:	d102      	bne.n	8000b4a <__aeabi_dcmpun+0x26>
 8000b44:	f04f 0000 	mov.w	r0, #0
 8000b48:	4770      	bx	lr
 8000b4a:	f04f 0001 	mov.w	r0, #1
 8000b4e:	4770      	bx	lr

08000b50 <__aeabi_d2iz>:
 8000b50:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b54:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b58:	d215      	bcs.n	8000b86 <__aeabi_d2iz+0x36>
 8000b5a:	d511      	bpl.n	8000b80 <__aeabi_d2iz+0x30>
 8000b5c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b60:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b64:	d912      	bls.n	8000b8c <__aeabi_d2iz+0x3c>
 8000b66:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b6a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b6e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b72:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b76:	fa23 f002 	lsr.w	r0, r3, r2
 8000b7a:	bf18      	it	ne
 8000b7c:	4240      	negne	r0, r0
 8000b7e:	4770      	bx	lr
 8000b80:	f04f 0000 	mov.w	r0, #0
 8000b84:	4770      	bx	lr
 8000b86:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b8a:	d105      	bne.n	8000b98 <__aeabi_d2iz+0x48>
 8000b8c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b90:	bf08      	it	eq
 8000b92:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	bf00      	nop

08000ba0 <__aeabi_d2uiz>:
 8000ba0:	004a      	lsls	r2, r1, #1
 8000ba2:	d211      	bcs.n	8000bc8 <__aeabi_d2uiz+0x28>
 8000ba4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba8:	d211      	bcs.n	8000bce <__aeabi_d2uiz+0x2e>
 8000baa:	d50d      	bpl.n	8000bc8 <__aeabi_d2uiz+0x28>
 8000bac:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bb4:	d40e      	bmi.n	8000bd4 <__aeabi_d2uiz+0x34>
 8000bb6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bba:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bbe:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bc2:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d102      	bne.n	8000bda <__aeabi_d2uiz+0x3a>
 8000bd4:	f04f 30ff 	mov.w	r0, #4294967295
 8000bd8:	4770      	bx	lr
 8000bda:	f04f 0000 	mov.w	r0, #0
 8000bde:	4770      	bx	lr

08000be0 <__aeabi_d2f>:
 8000be0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000be4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000be8:	bf24      	itt	cs
 8000bea:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bee:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bf2:	d90d      	bls.n	8000c10 <__aeabi_d2f+0x30>
 8000bf4:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bf8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bfc:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c00:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c04:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c08:	bf08      	it	eq
 8000c0a:	f020 0001 	biceq.w	r0, r0, #1
 8000c0e:	4770      	bx	lr
 8000c10:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c14:	d121      	bne.n	8000c5a <__aeabi_d2f+0x7a>
 8000c16:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c1a:	bfbc      	itt	lt
 8000c1c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c20:	4770      	bxlt	lr
 8000c22:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c26:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c2a:	f1c2 0218 	rsb	r2, r2, #24
 8000c2e:	f1c2 0c20 	rsb	ip, r2, #32
 8000c32:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c36:	fa20 f002 	lsr.w	r0, r0, r2
 8000c3a:	bf18      	it	ne
 8000c3c:	f040 0001 	orrne.w	r0, r0, #1
 8000c40:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c44:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c48:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c4c:	ea40 000c 	orr.w	r0, r0, ip
 8000c50:	fa23 f302 	lsr.w	r3, r3, r2
 8000c54:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c58:	e7cc      	b.n	8000bf4 <__aeabi_d2f+0x14>
 8000c5a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c5e:	d107      	bne.n	8000c70 <__aeabi_d2f+0x90>
 8000c60:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c64:	bf1e      	ittt	ne
 8000c66:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c6a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c6e:	4770      	bxne	lr
 8000c70:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c74:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c78:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c7c:	4770      	bx	lr
 8000c7e:	bf00      	nop

08000c80 <__aeabi_uldivmod>:
 8000c80:	b953      	cbnz	r3, 8000c98 <__aeabi_uldivmod+0x18>
 8000c82:	b94a      	cbnz	r2, 8000c98 <__aeabi_uldivmod+0x18>
 8000c84:	2900      	cmp	r1, #0
 8000c86:	bf08      	it	eq
 8000c88:	2800      	cmpeq	r0, #0
 8000c8a:	bf1c      	itt	ne
 8000c8c:	f04f 31ff 	movne.w	r1, #4294967295
 8000c90:	f04f 30ff 	movne.w	r0, #4294967295
 8000c94:	f000 b97a 	b.w	8000f8c <__aeabi_idiv0>
 8000c98:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c9c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca0:	f000 f806 	bl	8000cb0 <__udivmoddi4>
 8000ca4:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ca8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cac:	b004      	add	sp, #16
 8000cae:	4770      	bx	lr

08000cb0 <__udivmoddi4>:
 8000cb0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cb4:	468c      	mov	ip, r1
 8000cb6:	460d      	mov	r5, r1
 8000cb8:	4604      	mov	r4, r0
 8000cba:	9e08      	ldr	r6, [sp, #32]
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	d151      	bne.n	8000d64 <__udivmoddi4+0xb4>
 8000cc0:	428a      	cmp	r2, r1
 8000cc2:	4617      	mov	r7, r2
 8000cc4:	d96d      	bls.n	8000da2 <__udivmoddi4+0xf2>
 8000cc6:	fab2 fe82 	clz	lr, r2
 8000cca:	f1be 0f00 	cmp.w	lr, #0
 8000cce:	d00b      	beq.n	8000ce8 <__udivmoddi4+0x38>
 8000cd0:	f1ce 0c20 	rsb	ip, lr, #32
 8000cd4:	fa01 f50e 	lsl.w	r5, r1, lr
 8000cd8:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000cdc:	fa02 f70e 	lsl.w	r7, r2, lr
 8000ce0:	ea4c 0c05 	orr.w	ip, ip, r5
 8000ce4:	fa00 f40e 	lsl.w	r4, r0, lr
 8000ce8:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 8000cec:	0c25      	lsrs	r5, r4, #16
 8000cee:	fbbc f8fa 	udiv	r8, ip, sl
 8000cf2:	fa1f f987 	uxth.w	r9, r7
 8000cf6:	fb0a cc18 	mls	ip, sl, r8, ip
 8000cfa:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000cfe:	fb08 f309 	mul.w	r3, r8, r9
 8000d02:	42ab      	cmp	r3, r5
 8000d04:	d90a      	bls.n	8000d1c <__udivmoddi4+0x6c>
 8000d06:	19ed      	adds	r5, r5, r7
 8000d08:	f108 32ff 	add.w	r2, r8, #4294967295
 8000d0c:	f080 8123 	bcs.w	8000f56 <__udivmoddi4+0x2a6>
 8000d10:	42ab      	cmp	r3, r5
 8000d12:	f240 8120 	bls.w	8000f56 <__udivmoddi4+0x2a6>
 8000d16:	f1a8 0802 	sub.w	r8, r8, #2
 8000d1a:	443d      	add	r5, r7
 8000d1c:	1aed      	subs	r5, r5, r3
 8000d1e:	b2a4      	uxth	r4, r4
 8000d20:	fbb5 f0fa 	udiv	r0, r5, sl
 8000d24:	fb0a 5510 	mls	r5, sl, r0, r5
 8000d28:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000d2c:	fb00 f909 	mul.w	r9, r0, r9
 8000d30:	45a1      	cmp	r9, r4
 8000d32:	d909      	bls.n	8000d48 <__udivmoddi4+0x98>
 8000d34:	19e4      	adds	r4, r4, r7
 8000d36:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d3a:	f080 810a 	bcs.w	8000f52 <__udivmoddi4+0x2a2>
 8000d3e:	45a1      	cmp	r9, r4
 8000d40:	f240 8107 	bls.w	8000f52 <__udivmoddi4+0x2a2>
 8000d44:	3802      	subs	r0, #2
 8000d46:	443c      	add	r4, r7
 8000d48:	eba4 0409 	sub.w	r4, r4, r9
 8000d4c:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000d50:	2100      	movs	r1, #0
 8000d52:	2e00      	cmp	r6, #0
 8000d54:	d061      	beq.n	8000e1a <__udivmoddi4+0x16a>
 8000d56:	fa24 f40e 	lsr.w	r4, r4, lr
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	6034      	str	r4, [r6, #0]
 8000d5e:	6073      	str	r3, [r6, #4]
 8000d60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d64:	428b      	cmp	r3, r1
 8000d66:	d907      	bls.n	8000d78 <__udivmoddi4+0xc8>
 8000d68:	2e00      	cmp	r6, #0
 8000d6a:	d054      	beq.n	8000e16 <__udivmoddi4+0x166>
 8000d6c:	2100      	movs	r1, #0
 8000d6e:	e886 0021 	stmia.w	r6, {r0, r5}
 8000d72:	4608      	mov	r0, r1
 8000d74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d78:	fab3 f183 	clz	r1, r3
 8000d7c:	2900      	cmp	r1, #0
 8000d7e:	f040 808e 	bne.w	8000e9e <__udivmoddi4+0x1ee>
 8000d82:	42ab      	cmp	r3, r5
 8000d84:	d302      	bcc.n	8000d8c <__udivmoddi4+0xdc>
 8000d86:	4282      	cmp	r2, r0
 8000d88:	f200 80fa 	bhi.w	8000f80 <__udivmoddi4+0x2d0>
 8000d8c:	1a84      	subs	r4, r0, r2
 8000d8e:	eb65 0503 	sbc.w	r5, r5, r3
 8000d92:	2001      	movs	r0, #1
 8000d94:	46ac      	mov	ip, r5
 8000d96:	2e00      	cmp	r6, #0
 8000d98:	d03f      	beq.n	8000e1a <__udivmoddi4+0x16a>
 8000d9a:	e886 1010 	stmia.w	r6, {r4, ip}
 8000d9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000da2:	b912      	cbnz	r2, 8000daa <__udivmoddi4+0xfa>
 8000da4:	2701      	movs	r7, #1
 8000da6:	fbb7 f7f2 	udiv	r7, r7, r2
 8000daa:	fab7 fe87 	clz	lr, r7
 8000dae:	f1be 0f00 	cmp.w	lr, #0
 8000db2:	d134      	bne.n	8000e1e <__udivmoddi4+0x16e>
 8000db4:	1beb      	subs	r3, r5, r7
 8000db6:	0c3a      	lsrs	r2, r7, #16
 8000db8:	fa1f fc87 	uxth.w	ip, r7
 8000dbc:	2101      	movs	r1, #1
 8000dbe:	fbb3 f8f2 	udiv	r8, r3, r2
 8000dc2:	0c25      	lsrs	r5, r4, #16
 8000dc4:	fb02 3318 	mls	r3, r2, r8, r3
 8000dc8:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000dcc:	fb0c f308 	mul.w	r3, ip, r8
 8000dd0:	42ab      	cmp	r3, r5
 8000dd2:	d907      	bls.n	8000de4 <__udivmoddi4+0x134>
 8000dd4:	19ed      	adds	r5, r5, r7
 8000dd6:	f108 30ff 	add.w	r0, r8, #4294967295
 8000dda:	d202      	bcs.n	8000de2 <__udivmoddi4+0x132>
 8000ddc:	42ab      	cmp	r3, r5
 8000dde:	f200 80d1 	bhi.w	8000f84 <__udivmoddi4+0x2d4>
 8000de2:	4680      	mov	r8, r0
 8000de4:	1aed      	subs	r5, r5, r3
 8000de6:	b2a3      	uxth	r3, r4
 8000de8:	fbb5 f0f2 	udiv	r0, r5, r2
 8000dec:	fb02 5510 	mls	r5, r2, r0, r5
 8000df0:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000df4:	fb0c fc00 	mul.w	ip, ip, r0
 8000df8:	45a4      	cmp	ip, r4
 8000dfa:	d907      	bls.n	8000e0c <__udivmoddi4+0x15c>
 8000dfc:	19e4      	adds	r4, r4, r7
 8000dfe:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e02:	d202      	bcs.n	8000e0a <__udivmoddi4+0x15a>
 8000e04:	45a4      	cmp	ip, r4
 8000e06:	f200 80b8 	bhi.w	8000f7a <__udivmoddi4+0x2ca>
 8000e0a:	4618      	mov	r0, r3
 8000e0c:	eba4 040c 	sub.w	r4, r4, ip
 8000e10:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e14:	e79d      	b.n	8000d52 <__udivmoddi4+0xa2>
 8000e16:	4631      	mov	r1, r6
 8000e18:	4630      	mov	r0, r6
 8000e1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e1e:	f1ce 0420 	rsb	r4, lr, #32
 8000e22:	fa05 f30e 	lsl.w	r3, r5, lr
 8000e26:	fa07 f70e 	lsl.w	r7, r7, lr
 8000e2a:	fa20 f804 	lsr.w	r8, r0, r4
 8000e2e:	0c3a      	lsrs	r2, r7, #16
 8000e30:	fa25 f404 	lsr.w	r4, r5, r4
 8000e34:	ea48 0803 	orr.w	r8, r8, r3
 8000e38:	fbb4 f1f2 	udiv	r1, r4, r2
 8000e3c:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000e40:	fb02 4411 	mls	r4, r2, r1, r4
 8000e44:	fa1f fc87 	uxth.w	ip, r7
 8000e48:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 8000e4c:	fb01 f30c 	mul.w	r3, r1, ip
 8000e50:	42ab      	cmp	r3, r5
 8000e52:	fa00 f40e 	lsl.w	r4, r0, lr
 8000e56:	d909      	bls.n	8000e6c <__udivmoddi4+0x1bc>
 8000e58:	19ed      	adds	r5, r5, r7
 8000e5a:	f101 30ff 	add.w	r0, r1, #4294967295
 8000e5e:	f080 808a 	bcs.w	8000f76 <__udivmoddi4+0x2c6>
 8000e62:	42ab      	cmp	r3, r5
 8000e64:	f240 8087 	bls.w	8000f76 <__udivmoddi4+0x2c6>
 8000e68:	3902      	subs	r1, #2
 8000e6a:	443d      	add	r5, r7
 8000e6c:	1aeb      	subs	r3, r5, r3
 8000e6e:	fa1f f588 	uxth.w	r5, r8
 8000e72:	fbb3 f0f2 	udiv	r0, r3, r2
 8000e76:	fb02 3310 	mls	r3, r2, r0, r3
 8000e7a:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000e7e:	fb00 f30c 	mul.w	r3, r0, ip
 8000e82:	42ab      	cmp	r3, r5
 8000e84:	d907      	bls.n	8000e96 <__udivmoddi4+0x1e6>
 8000e86:	19ed      	adds	r5, r5, r7
 8000e88:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e8c:	d26f      	bcs.n	8000f6e <__udivmoddi4+0x2be>
 8000e8e:	42ab      	cmp	r3, r5
 8000e90:	d96d      	bls.n	8000f6e <__udivmoddi4+0x2be>
 8000e92:	3802      	subs	r0, #2
 8000e94:	443d      	add	r5, r7
 8000e96:	1aeb      	subs	r3, r5, r3
 8000e98:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e9c:	e78f      	b.n	8000dbe <__udivmoddi4+0x10e>
 8000e9e:	f1c1 0720 	rsb	r7, r1, #32
 8000ea2:	fa22 f807 	lsr.w	r8, r2, r7
 8000ea6:	408b      	lsls	r3, r1
 8000ea8:	fa05 f401 	lsl.w	r4, r5, r1
 8000eac:	ea48 0303 	orr.w	r3, r8, r3
 8000eb0:	fa20 fe07 	lsr.w	lr, r0, r7
 8000eb4:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000eb8:	40fd      	lsrs	r5, r7
 8000eba:	ea4e 0e04 	orr.w	lr, lr, r4
 8000ebe:	fbb5 f9fc 	udiv	r9, r5, ip
 8000ec2:	ea4f 441e 	mov.w	r4, lr, lsr #16
 8000ec6:	fb0c 5519 	mls	r5, ip, r9, r5
 8000eca:	fa1f f883 	uxth.w	r8, r3
 8000ece:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000ed2:	fb09 f408 	mul.w	r4, r9, r8
 8000ed6:	42ac      	cmp	r4, r5
 8000ed8:	fa02 f201 	lsl.w	r2, r2, r1
 8000edc:	fa00 fa01 	lsl.w	sl, r0, r1
 8000ee0:	d908      	bls.n	8000ef4 <__udivmoddi4+0x244>
 8000ee2:	18ed      	adds	r5, r5, r3
 8000ee4:	f109 30ff 	add.w	r0, r9, #4294967295
 8000ee8:	d243      	bcs.n	8000f72 <__udivmoddi4+0x2c2>
 8000eea:	42ac      	cmp	r4, r5
 8000eec:	d941      	bls.n	8000f72 <__udivmoddi4+0x2c2>
 8000eee:	f1a9 0902 	sub.w	r9, r9, #2
 8000ef2:	441d      	add	r5, r3
 8000ef4:	1b2d      	subs	r5, r5, r4
 8000ef6:	fa1f fe8e 	uxth.w	lr, lr
 8000efa:	fbb5 f0fc 	udiv	r0, r5, ip
 8000efe:	fb0c 5510 	mls	r5, ip, r0, r5
 8000f02:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8000f06:	fb00 f808 	mul.w	r8, r0, r8
 8000f0a:	45a0      	cmp	r8, r4
 8000f0c:	d907      	bls.n	8000f1e <__udivmoddi4+0x26e>
 8000f0e:	18e4      	adds	r4, r4, r3
 8000f10:	f100 35ff 	add.w	r5, r0, #4294967295
 8000f14:	d229      	bcs.n	8000f6a <__udivmoddi4+0x2ba>
 8000f16:	45a0      	cmp	r8, r4
 8000f18:	d927      	bls.n	8000f6a <__udivmoddi4+0x2ba>
 8000f1a:	3802      	subs	r0, #2
 8000f1c:	441c      	add	r4, r3
 8000f1e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000f22:	eba4 0408 	sub.w	r4, r4, r8
 8000f26:	fba0 8902 	umull	r8, r9, r0, r2
 8000f2a:	454c      	cmp	r4, r9
 8000f2c:	46c6      	mov	lr, r8
 8000f2e:	464d      	mov	r5, r9
 8000f30:	d315      	bcc.n	8000f5e <__udivmoddi4+0x2ae>
 8000f32:	d012      	beq.n	8000f5a <__udivmoddi4+0x2aa>
 8000f34:	b156      	cbz	r6, 8000f4c <__udivmoddi4+0x29c>
 8000f36:	ebba 030e 	subs.w	r3, sl, lr
 8000f3a:	eb64 0405 	sbc.w	r4, r4, r5
 8000f3e:	fa04 f707 	lsl.w	r7, r4, r7
 8000f42:	40cb      	lsrs	r3, r1
 8000f44:	431f      	orrs	r7, r3
 8000f46:	40cc      	lsrs	r4, r1
 8000f48:	6037      	str	r7, [r6, #0]
 8000f4a:	6074      	str	r4, [r6, #4]
 8000f4c:	2100      	movs	r1, #0
 8000f4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f52:	4618      	mov	r0, r3
 8000f54:	e6f8      	b.n	8000d48 <__udivmoddi4+0x98>
 8000f56:	4690      	mov	r8, r2
 8000f58:	e6e0      	b.n	8000d1c <__udivmoddi4+0x6c>
 8000f5a:	45c2      	cmp	sl, r8
 8000f5c:	d2ea      	bcs.n	8000f34 <__udivmoddi4+0x284>
 8000f5e:	ebb8 0e02 	subs.w	lr, r8, r2
 8000f62:	eb69 0503 	sbc.w	r5, r9, r3
 8000f66:	3801      	subs	r0, #1
 8000f68:	e7e4      	b.n	8000f34 <__udivmoddi4+0x284>
 8000f6a:	4628      	mov	r0, r5
 8000f6c:	e7d7      	b.n	8000f1e <__udivmoddi4+0x26e>
 8000f6e:	4640      	mov	r0, r8
 8000f70:	e791      	b.n	8000e96 <__udivmoddi4+0x1e6>
 8000f72:	4681      	mov	r9, r0
 8000f74:	e7be      	b.n	8000ef4 <__udivmoddi4+0x244>
 8000f76:	4601      	mov	r1, r0
 8000f78:	e778      	b.n	8000e6c <__udivmoddi4+0x1bc>
 8000f7a:	3802      	subs	r0, #2
 8000f7c:	443c      	add	r4, r7
 8000f7e:	e745      	b.n	8000e0c <__udivmoddi4+0x15c>
 8000f80:	4608      	mov	r0, r1
 8000f82:	e708      	b.n	8000d96 <__udivmoddi4+0xe6>
 8000f84:	f1a8 0802 	sub.w	r8, r8, #2
 8000f88:	443d      	add	r5, r7
 8000f8a:	e72b      	b.n	8000de4 <__udivmoddi4+0x134>

08000f8c <__aeabi_idiv0>:
 8000f8c:	4770      	bx	lr
 8000f8e:	bf00      	nop

08000f90 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f90:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f92:	4a0e      	ldr	r2, [pc, #56]	; (8000fcc <HAL_InitTick+0x3c>)
 8000f94:	4b0e      	ldr	r3, [pc, #56]	; (8000fd0 <HAL_InitTick+0x40>)
{
 8000f96:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f98:	7818      	ldrb	r0, [r3, #0]
 8000f9a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f9e:	fbb3 f3f0 	udiv	r3, r3, r0
 8000fa2:	6810      	ldr	r0, [r2, #0]
 8000fa4:	fbb0 f0f3 	udiv	r0, r0, r3
 8000fa8:	f000 faa4 	bl	80014f4 <HAL_SYSTICK_Config>
 8000fac:	4604      	mov	r4, r0
 8000fae:	b958      	cbnz	r0, 8000fc8 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000fb0:	2d0f      	cmp	r5, #15
 8000fb2:	d809      	bhi.n	8000fc8 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000fb4:	4602      	mov	r2, r0
 8000fb6:	4629      	mov	r1, r5
 8000fb8:	f04f 30ff 	mov.w	r0, #4294967295
 8000fbc:	f000 fa5a 	bl	8001474 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000fc0:	4b04      	ldr	r3, [pc, #16]	; (8000fd4 <HAL_InitTick+0x44>)
 8000fc2:	4620      	mov	r0, r4
 8000fc4:	601d      	str	r5, [r3, #0]
 8000fc6:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8000fc8:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8000fca:	bd38      	pop	{r3, r4, r5, pc}
 8000fcc:	20000010 	.word	0x20000010
 8000fd0:	20000000 	.word	0x20000000
 8000fd4:	20000004 	.word	0x20000004

08000fd8 <HAL_Init>:
{
 8000fd8:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000fda:	4b0b      	ldr	r3, [pc, #44]	; (8001008 <HAL_Init+0x30>)
 8000fdc:	681a      	ldr	r2, [r3, #0]
 8000fde:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000fe2:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000fe4:	681a      	ldr	r2, [r3, #0]
 8000fe6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000fea:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000fec:	681a      	ldr	r2, [r3, #0]
 8000fee:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000ff2:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ff4:	2003      	movs	r0, #3
 8000ff6:	f000 fa2b 	bl	8001450 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ffa:	2000      	movs	r0, #0
 8000ffc:	f7ff ffc8 	bl	8000f90 <HAL_InitTick>
  HAL_MspInit();
 8001000:	f006 fbe0 	bl	80077c4 <HAL_MspInit>
}
 8001004:	2000      	movs	r0, #0
 8001006:	bd08      	pop	{r3, pc}
 8001008:	40023c00 	.word	0x40023c00

0800100c <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 800100c:	4a03      	ldr	r2, [pc, #12]	; (800101c <HAL_IncTick+0x10>)
 800100e:	4b04      	ldr	r3, [pc, #16]	; (8001020 <HAL_IncTick+0x14>)
 8001010:	6811      	ldr	r1, [r2, #0]
 8001012:	781b      	ldrb	r3, [r3, #0]
 8001014:	440b      	add	r3, r1
 8001016:	6013      	str	r3, [r2, #0]
 8001018:	4770      	bx	lr
 800101a:	bf00      	nop
 800101c:	20006784 	.word	0x20006784
 8001020:	20000000 	.word	0x20000000

08001024 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8001024:	4b01      	ldr	r3, [pc, #4]	; (800102c <HAL_GetTick+0x8>)
 8001026:	6818      	ldr	r0, [r3, #0]
}
 8001028:	4770      	bx	lr
 800102a:	bf00      	nop
 800102c:	20006784 	.word	0x20006784

08001030 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001030:	b538      	push	{r3, r4, r5, lr}
 8001032:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8001034:	f7ff fff6 	bl	8001024 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001038:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 800103a:	bf1c      	itt	ne
 800103c:	4b05      	ldrne	r3, [pc, #20]	; (8001054 <HAL_Delay+0x24>)
 800103e:	781b      	ldrbne	r3, [r3, #0]
  uint32_t tickstart = HAL_GetTick();
 8001040:	4605      	mov	r5, r0
    wait += (uint32_t)(uwTickFreq);
 8001042:	bf18      	it	ne
 8001044:	18e4      	addne	r4, r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001046:	f7ff ffed 	bl	8001024 <HAL_GetTick>
 800104a:	1b40      	subs	r0, r0, r5
 800104c:	4284      	cmp	r4, r0
 800104e:	d8fa      	bhi.n	8001046 <HAL_Delay+0x16>
  {
  }
}
 8001050:	bd38      	pop	{r3, r4, r5, pc}
 8001052:	bf00      	nop
 8001054:	20000000 	.word	0x20000000

08001058 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001058:	b510      	push	{r4, lr}
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  
  /* Check ADC handle */
  if(hadc == NULL)
 800105a:	4604      	mov	r4, r0
 800105c:	2800      	cmp	r0, #0
 800105e:	f000 8099 	beq.w	8001194 <HAL_ADC_Init+0x13c>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001062:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8001064:	b923      	cbnz	r3, 8001070 <HAL_ADC_Init+0x18>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001066:	6443      	str	r3, [r0, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001068:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800106c:	f004 f96c 	bl	8005348 <HAL_ADC_MspInit>
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001070:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001072:	06db      	lsls	r3, r3, #27
 8001074:	f100 808c 	bmi.w	8001190 <HAL_ADC_Init+0x138>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001078:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800107a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800107e:	f023 0302 	bic.w	r3, r3, #2
 8001082:	f043 0302 	orr.w	r3, r3, #2
 8001086:	6423      	str	r3, [r4, #64]	; 0x40
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001088:	4b43      	ldr	r3, [pc, #268]	; (8001198 <HAL_ADC_Init+0x140>)
 800108a:	685a      	ldr	r2, [r3, #4]
 800108c:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 8001090:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001092:	685a      	ldr	r2, [r3, #4]
 8001094:	6861      	ldr	r1, [r4, #4]
 8001096:	430a      	orrs	r2, r1
 8001098:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800109a:	6823      	ldr	r3, [r4, #0]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800109c:	6921      	ldr	r1, [r4, #16]
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800109e:	685a      	ldr	r2, [r3, #4]
 80010a0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80010a4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80010a6:	685a      	ldr	r2, [r3, #4]
 80010a8:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80010ac:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80010ae:	685a      	ldr	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80010b0:	68a1      	ldr	r1, [r4, #8]
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80010b2:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80010b6:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80010b8:	685a      	ldr	r2, [r3, #4]
 80010ba:	430a      	orrs	r2, r1
 80010bc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80010be:	689a      	ldr	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80010c0:	68e1      	ldr	r1, [r4, #12]
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80010c2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80010c6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80010c8:	689a      	ldr	r2, [r3, #8]
 80010ca:	430a      	orrs	r2, r1
 80010cc:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80010ce:	4933      	ldr	r1, [pc, #204]	; (800119c <HAL_ADC_Init+0x144>)
 80010d0:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80010d2:	428a      	cmp	r2, r1
 80010d4:	d050      	beq.n	8001178 <HAL_ADC_Init+0x120>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80010d6:	6899      	ldr	r1, [r3, #8]
 80010d8:	f021 6170 	bic.w	r1, r1, #251658240	; 0xf000000
 80010dc:	6099      	str	r1, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80010de:	6899      	ldr	r1, [r3, #8]
 80010e0:	430a      	orrs	r2, r1
 80010e2:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80010e4:	689a      	ldr	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80010e6:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80010e8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80010ec:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80010ee:	689a      	ldr	r2, [r3, #8]
 80010f0:	430a      	orrs	r2, r1
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80010f2:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80010f4:	689a      	ldr	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS(hadc->Init.ContinuousConvMode);
 80010f6:	69a1      	ldr	r1, [r4, #24]
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80010f8:	f022 0202 	bic.w	r2, r2, #2
 80010fc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS(hadc->Init.ContinuousConvMode);
 80010fe:	689a      	ldr	r2, [r3, #8]
 8001100:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 8001104:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001106:	6a22      	ldr	r2, [r4, #32]
 8001108:	2a00      	cmp	r2, #0
 800110a:	d03d      	beq.n	8001188 <HAL_ADC_Init+0x130>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800110c:	685a      	ldr	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800110e:	6a61      	ldr	r1, [r4, #36]	; 0x24
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001110:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001114:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001116:	685a      	ldr	r2, [r3, #4]
 8001118:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800111c:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800111e:	685a      	ldr	r2, [r3, #4]
 8001120:	3901      	subs	r1, #1
 8001122:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001126:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001128:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800112a:	69e1      	ldr	r1, [r4, #28]
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800112c:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001130:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001132:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001134:	3901      	subs	r1, #1
 8001136:	ea42 5201 	orr.w	r2, r2, r1, lsl #20
 800113a:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800113c:	689a      	ldr	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq(hadc->Init.DMAContinuousRequests);
 800113e:	6b21      	ldr	r1, [r4, #48]	; 0x30
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001140:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001144:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq(hadc->Init.DMAContinuousRequests);
 8001146:	689a      	ldr	r2, [r3, #8]
 8001148:	ea42 2241 	orr.w	r2, r2, r1, lsl #9
 800114c:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800114e:	689a      	ldr	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001150:	6961      	ldr	r1, [r4, #20]
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001152:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001156:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001158:	689a      	ldr	r2, [r3, #8]
    ADC_CLEAR_ERRORCODE(hadc);
 800115a:	2000      	movs	r0, #0
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800115c:	ea42 2281 	orr.w	r2, r2, r1, lsl #10
 8001160:	609a      	str	r2, [r3, #8]
    ADC_CLEAR_ERRORCODE(hadc);
 8001162:	6460      	str	r0, [r4, #68]	; 0x44
    ADC_STATE_CLR_SET(hadc->State,
 8001164:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001166:	f023 0303 	bic.w	r3, r3, #3
 800116a:	f043 0301 	orr.w	r3, r3, #1
 800116e:	6423      	str	r3, [r4, #64]	; 0x40
  __HAL_UNLOCK(hadc);
 8001170:	2300      	movs	r3, #0
 8001172:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  return tmp_hal_status;
 8001176:	bd10      	pop	{r4, pc}
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001178:	689a      	ldr	r2, [r3, #8]
 800117a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800117e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001180:	689a      	ldr	r2, [r3, #8]
 8001182:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001186:	e7b4      	b.n	80010f2 <HAL_ADC_Init+0x9a>
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001188:	685a      	ldr	r2, [r3, #4]
 800118a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800118e:	e7ca      	b.n	8001126 <HAL_ADC_Init+0xce>
    tmp_hal_status = HAL_ERROR;
 8001190:	2001      	movs	r0, #1
 8001192:	e7ed      	b.n	8001170 <HAL_ADC_Init+0x118>
    return HAL_ERROR;
 8001194:	2001      	movs	r0, #1
}
 8001196:	bd10      	pop	{r4, pc}
 8001198:	40012300 	.word	0x40012300
 800119c:	0f000001 	.word	0x0f000001

080011a0 <HAL_ADC_Start_DMA>:
{
 80011a0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80011a2:	4613      	mov	r3, r2
  __IO uint32_t counter = 0U;
 80011a4:	2200      	movs	r2, #0
 80011a6:	9201      	str	r2, [sp, #4]
  __HAL_LOCK(hadc);
 80011a8:	f890 203c 	ldrb.w	r2, [r0, #60]	; 0x3c
 80011ac:	2a01      	cmp	r2, #1
{
 80011ae:	4604      	mov	r4, r0
  __HAL_LOCK(hadc);
 80011b0:	d065      	beq.n	800127e <HAL_ADC_Start_DMA+0xde>
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80011b2:	6805      	ldr	r5, [r0, #0]
  __HAL_LOCK(hadc);
 80011b4:	2201      	movs	r2, #1
 80011b6:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80011ba:	68aa      	ldr	r2, [r5, #8]
 80011bc:	07d2      	lsls	r2, r2, #31
 80011be:	d505      	bpl.n	80011cc <HAL_ADC_Start_DMA+0x2c>
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80011c0:	68aa      	ldr	r2, [r5, #8]
 80011c2:	07d0      	lsls	r0, r2, #31
 80011c4:	d415      	bmi.n	80011f2 <HAL_ADC_Start_DMA+0x52>
  return HAL_OK;
 80011c6:	2000      	movs	r0, #0
}
 80011c8:	b003      	add	sp, #12
 80011ca:	bd30      	pop	{r4, r5, pc}
    __HAL_ADC_ENABLE(hadc);
 80011cc:	68aa      	ldr	r2, [r5, #8]
 80011ce:	f042 0201 	orr.w	r2, r2, #1
 80011d2:	60aa      	str	r2, [r5, #8]
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80011d4:	4a2b      	ldr	r2, [pc, #172]	; (8001284 <HAL_ADC_Start_DMA+0xe4>)
 80011d6:	6810      	ldr	r0, [r2, #0]
 80011d8:	4a2b      	ldr	r2, [pc, #172]	; (8001288 <HAL_ADC_Start_DMA+0xe8>)
 80011da:	fbb0 f0f2 	udiv	r0, r0, r2
 80011de:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80011e2:	9001      	str	r0, [sp, #4]
    while(counter != 0U)
 80011e4:	9a01      	ldr	r2, [sp, #4]
 80011e6:	2a00      	cmp	r2, #0
 80011e8:	d0ea      	beq.n	80011c0 <HAL_ADC_Start_DMA+0x20>
      counter--;
 80011ea:	9a01      	ldr	r2, [sp, #4]
 80011ec:	3a01      	subs	r2, #1
 80011ee:	9201      	str	r2, [sp, #4]
 80011f0:	e7f8      	b.n	80011e4 <HAL_ADC_Start_DMA+0x44>
    ADC_STATE_CLR_SET(hadc->State,
 80011f2:	6c20      	ldr	r0, [r4, #64]	; 0x40
 80011f4:	f420 60e0 	bic.w	r0, r0, #1792	; 0x700
 80011f8:	f020 0001 	bic.w	r0, r0, #1
 80011fc:	f440 7080 	orr.w	r0, r0, #256	; 0x100
 8001200:	6420      	str	r0, [r4, #64]	; 0x40
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001202:	686a      	ldr	r2, [r5, #4]
 8001204:	0552      	lsls	r2, r2, #21
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001206:	bf41      	itttt	mi
 8001208:	6c20      	ldrmi	r0, [r4, #64]	; 0x40
 800120a:	f420 5040 	bicmi.w	r0, r0, #12288	; 0x3000
 800120e:	f440 5080 	orrmi.w	r0, r0, #4096	; 0x1000
 8001212:	6420      	strmi	r0, [r4, #64]	; 0x40
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001214:	6c22      	ldr	r2, [r4, #64]	; 0x40
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001216:	6ba0      	ldr	r0, [r4, #56]	; 0x38
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001218:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800121c:	bf1c      	itt	ne
 800121e:	6c62      	ldrne	r2, [r4, #68]	; 0x44
 8001220:	f022 0206 	bicne.w	r2, r2, #6
      ADC_CLEAR_ERRORCODE(hadc);
 8001224:	6462      	str	r2, [r4, #68]	; 0x44
    __HAL_UNLOCK(hadc);   
 8001226:	2200      	movs	r2, #0
 8001228:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800122c:	4a17      	ldr	r2, [pc, #92]	; (800128c <HAL_ADC_Start_DMA+0xec>)
 800122e:	63c2      	str	r2, [r0, #60]	; 0x3c
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001230:	4a17      	ldr	r2, [pc, #92]	; (8001290 <HAL_ADC_Start_DMA+0xf0>)
 8001232:	6402      	str	r2, [r0, #64]	; 0x40
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001234:	4a17      	ldr	r2, [pc, #92]	; (8001294 <HAL_ADC_Start_DMA+0xf4>)
 8001236:	64c2      	str	r2, [r0, #76]	; 0x4c
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001238:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800123c:	602a      	str	r2, [r5, #0]
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800123e:	686a      	ldr	r2, [r5, #4]
 8001240:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8001244:	606a      	str	r2, [r5, #4]
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8001246:	68aa      	ldr	r2, [r5, #8]
 8001248:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800124c:	60aa      	str	r2, [r5, #8]
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800124e:	460a      	mov	r2, r1
 8001250:	f105 014c 	add.w	r1, r5, #76	; 0x4c
 8001254:	f000 fb22 	bl	800189c <HAL_DMA_Start_IT>
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001258:	4b0f      	ldr	r3, [pc, #60]	; (8001298 <HAL_ADC_Start_DMA+0xf8>)
 800125a:	685b      	ldr	r3, [r3, #4]
 800125c:	f013 0f1f 	tst.w	r3, #31
 8001260:	6823      	ldr	r3, [r4, #0]
 8001262:	d108      	bne.n	8001276 <HAL_ADC_Start_DMA+0xd6>
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001264:	6898      	ldr	r0, [r3, #8]
 8001266:	f010 5040 	ands.w	r0, r0, #805306368	; 0x30000000
 800126a:	d1ac      	bne.n	80011c6 <HAL_ADC_Start_DMA+0x26>
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800126c:	689a      	ldr	r2, [r3, #8]
 800126e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001272:	609a      	str	r2, [r3, #8]
 8001274:	e7a8      	b.n	80011c8 <HAL_ADC_Start_DMA+0x28>
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001276:	4a09      	ldr	r2, [pc, #36]	; (800129c <HAL_ADC_Start_DMA+0xfc>)
 8001278:	4293      	cmp	r3, r2
 800127a:	d1a4      	bne.n	80011c6 <HAL_ADC_Start_DMA+0x26>
 800127c:	e7f2      	b.n	8001264 <HAL_ADC_Start_DMA+0xc4>
  __HAL_LOCK(hadc);
 800127e:	2002      	movs	r0, #2
 8001280:	e7a2      	b.n	80011c8 <HAL_ADC_Start_DMA+0x28>
 8001282:	bf00      	nop
 8001284:	20000010 	.word	0x20000010
 8001288:	000f4240 	.word	0x000f4240
 800128c:	080012a1 	.word	0x080012a1
 8001290:	08001303 	.word	0x08001303
 8001294:	0800130f 	.word	0x0800130f
 8001298:	40012300 	.word	0x40012300
 800129c:	40012000 	.word	0x40012000

080012a0 <ADC_DMAConvCplt>:
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80012a0:	6b83      	ldr	r3, [r0, #56]	; 0x38
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80012a2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80012a4:	f012 0f50 	tst.w	r2, #80	; 0x50
{
 80012a8:	b510      	push	{r4, lr}
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80012aa:	d124      	bne.n	80012f6 <ADC_DMAConvCplt+0x56>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80012ac:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80012ae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80012b2:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80012b4:	681a      	ldr	r2, [r3, #0]
 80012b6:	6891      	ldr	r1, [r2, #8]
 80012b8:	f011 5f40 	tst.w	r1, #805306368	; 0x30000000
 80012bc:	d117      	bne.n	80012ee <ADC_DMAConvCplt+0x4e>
 80012be:	6999      	ldr	r1, [r3, #24]
 80012c0:	b9a9      	cbnz	r1, 80012ee <ADC_DMAConvCplt+0x4e>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80012c2:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80012c4:	f411 0f70 	tst.w	r1, #15728640	; 0xf00000
 80012c8:	d002      	beq.n	80012d0 <ADC_DMAConvCplt+0x30>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80012ca:	6891      	ldr	r1, [r2, #8]
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80012cc:	0549      	lsls	r1, r1, #21
 80012ce:	d40e      	bmi.n	80012ee <ADC_DMAConvCplt+0x4e>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80012d0:	6851      	ldr	r1, [r2, #4]
 80012d2:	f021 0120 	bic.w	r1, r1, #32
 80012d6:	6051      	str	r1, [r2, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80012d8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80012da:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80012de:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80012e0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80012e2:	04d2      	lsls	r2, r2, #19
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80012e4:	bf5e      	ittt	pl
 80012e6:	6c1a      	ldrpl	r2, [r3, #64]	; 0x40
 80012e8:	f042 0201 	orrpl.w	r2, r2, #1
 80012ec:	641a      	strpl	r2, [r3, #64]	; 0x40
      }
    }
    
    /* Conversion complete callback */
    HAL_ADC_ConvCpltCallback(hadc);
 80012ee:	4618      	mov	r0, r3
 80012f0:	f004 fe42 	bl	8005f78 <HAL_ADC_ConvCpltCallback>
 80012f4:	bd10      	pop	{r4, pc}
  }
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
 80012f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  }
}
 80012f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    hadc->DMA_Handle->XferErrorCallback(hdma);
 80012fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012fe:	4718      	bx	r3

08001300 <HAL_ADC_ConvHalfCpltCallback>:
 8001300:	4770      	bx	lr

08001302 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001302:	b508      	push	{r3, lr}
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
  /* Conversion complete callback */
  HAL_ADC_ConvHalfCpltCallback(hadc); 
 8001304:	6b80      	ldr	r0, [r0, #56]	; 0x38
 8001306:	f7ff fffb 	bl	8001300 <HAL_ADC_ConvHalfCpltCallback>
 800130a:	bd08      	pop	{r3, pc}

0800130c <HAL_ADC_ErrorCallback>:
{
 800130c:	4770      	bx	lr

0800130e <ADC_DMAError>:
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800130e:	6b80      	ldr	r0, [r0, #56]	; 0x38
{
 8001310:	b508      	push	{r3, lr}
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8001312:	2340      	movs	r3, #64	; 0x40
 8001314:	6403      	str	r3, [r0, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8001316:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8001318:	f043 0304 	orr.w	r3, r3, #4
 800131c:	6443      	str	r3, [r0, #68]	; 0x44
  HAL_ADC_ErrorCallback(hadc); 
 800131e:	f7ff fff5 	bl	800130c <HAL_ADC_ErrorCallback>
 8001322:	bd08      	pop	{r3, pc}

08001324 <HAL_ADC_ConfigChannel>:
{
 8001324:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __IO uint32_t counter = 0U;
 8001326:	2300      	movs	r3, #0
 8001328:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 800132a:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800132e:	2b01      	cmp	r3, #1
 8001330:	f000 8083 	beq.w	800143a <HAL_ADC_ConfigChannel+0x116>
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001334:	680d      	ldr	r5, [r1, #0]
 8001336:	6804      	ldr	r4, [r0, #0]
 8001338:	688a      	ldr	r2, [r1, #8]
  __HAL_LOCK(hadc);
 800133a:	2301      	movs	r3, #1
  if (sConfig->Channel > ADC_CHANNEL_9)
 800133c:	2d09      	cmp	r5, #9
  __HAL_LOCK(hadc);
 800133e:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
 8001342:	b2ae      	uxth	r6, r5
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001344:	d92a      	bls.n	800139c <HAL_ADC_ConfigChannel+0x78>
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001346:	eb06 0346 	add.w	r3, r6, r6, lsl #1
 800134a:	68e7      	ldr	r7, [r4, #12]
 800134c:	3b1e      	subs	r3, #30
 800134e:	f04f 0e07 	mov.w	lr, #7
 8001352:	fa0e fe03 	lsl.w	lr, lr, r3
 8001356:	ea27 070e 	bic.w	r7, r7, lr
 800135a:	60e7      	str	r7, [r4, #12]
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800135c:	68e7      	ldr	r7, [r4, #12]
 800135e:	fa02 f303 	lsl.w	r3, r2, r3
 8001362:	433b      	orrs	r3, r7
 8001364:	60e3      	str	r3, [r4, #12]
  if (sConfig->Rank < 7U)
 8001366:	684a      	ldr	r2, [r1, #4]
 8001368:	2a06      	cmp	r2, #6
 800136a:	ea4f 0382 	mov.w	r3, r2, lsl #2
 800136e:	d825      	bhi.n	80013bc <HAL_ADC_ConfigChannel+0x98>
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001370:	4413      	add	r3, r2
 8001372:	6b67      	ldr	r7, [r4, #52]	; 0x34
 8001374:	1f59      	subs	r1, r3, #5
 8001376:	231f      	movs	r3, #31
 8001378:	408b      	lsls	r3, r1
 800137a:	ea27 0303 	bic.w	r3, r7, r3
 800137e:	6363      	str	r3, [r4, #52]	; 0x34
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001380:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8001382:	fa06 f101 	lsl.w	r1, r6, r1
 8001386:	4311      	orrs	r1, r2
 8001388:	6361      	str	r1, [r4, #52]	; 0x34
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800138a:	4b2d      	ldr	r3, [pc, #180]	; (8001440 <HAL_ADC_ConfigChannel+0x11c>)
 800138c:	429c      	cmp	r4, r3
 800138e:	d034      	beq.n	80013fa <HAL_ADC_ConfigChannel+0xd6>
  __HAL_UNLOCK(hadc);
 8001390:	2300      	movs	r3, #0
 8001392:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  return HAL_OK;
 8001396:	4618      	mov	r0, r3
}
 8001398:	b003      	add	sp, #12
 800139a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800139c:	6927      	ldr	r7, [r4, #16]
 800139e:	eb05 0345 	add.w	r3, r5, r5, lsl #1
 80013a2:	f04f 0e07 	mov.w	lr, #7
 80013a6:	fa0e fe03 	lsl.w	lr, lr, r3
 80013aa:	ea27 070e 	bic.w	r7, r7, lr
 80013ae:	6127      	str	r7, [r4, #16]
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80013b0:	6927      	ldr	r7, [r4, #16]
 80013b2:	fa02 f303 	lsl.w	r3, r2, r3
 80013b6:	433b      	orrs	r3, r7
 80013b8:	6123      	str	r3, [r4, #16]
 80013ba:	e7d4      	b.n	8001366 <HAL_ADC_ConfigChannel+0x42>
  else if (sConfig->Rank < 13U)
 80013bc:	2a0c      	cmp	r2, #12
 80013be:	d80e      	bhi.n	80013de <HAL_ADC_ConfigChannel+0xba>
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80013c0:	4413      	add	r3, r2
 80013c2:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80013c4:	f1a3 0223 	sub.w	r2, r3, #35	; 0x23
 80013c8:	231f      	movs	r3, #31
 80013ca:	4093      	lsls	r3, r2
 80013cc:	ea21 0303 	bic.w	r3, r1, r3
 80013d0:	6323      	str	r3, [r4, #48]	; 0x30
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80013d2:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80013d4:	fa06 f202 	lsl.w	r2, r6, r2
 80013d8:	431a      	orrs	r2, r3
 80013da:	6322      	str	r2, [r4, #48]	; 0x30
 80013dc:	e7d5      	b.n	800138a <HAL_ADC_ConfigChannel+0x66>
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80013de:	4413      	add	r3, r2
 80013e0:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80013e2:	3b41      	subs	r3, #65	; 0x41
 80013e4:	221f      	movs	r2, #31
 80013e6:	409a      	lsls	r2, r3
 80013e8:	ea21 0202 	bic.w	r2, r1, r2
 80013ec:	62e2      	str	r2, [r4, #44]	; 0x2c
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80013ee:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80013f0:	fa06 f103 	lsl.w	r1, r6, r3
 80013f4:	4311      	orrs	r1, r2
 80013f6:	62e1      	str	r1, [r4, #44]	; 0x2c
 80013f8:	e7c7      	b.n	800138a <HAL_ADC_ConfigChannel+0x66>
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80013fa:	2d12      	cmp	r5, #18
 80013fc:	d104      	bne.n	8001408 <HAL_ADC_ConfigChannel+0xe4>
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80013fe:	4a11      	ldr	r2, [pc, #68]	; (8001444 <HAL_ADC_ConfigChannel+0x120>)
 8001400:	6853      	ldr	r3, [r2, #4]
 8001402:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001406:	6053      	str	r3, [r2, #4]
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001408:	f1a5 0310 	sub.w	r3, r5, #16
 800140c:	2b01      	cmp	r3, #1
 800140e:	d8bf      	bhi.n	8001390 <HAL_ADC_ConfigChannel+0x6c>
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001410:	4a0c      	ldr	r2, [pc, #48]	; (8001444 <HAL_ADC_ConfigChannel+0x120>)
 8001412:	6853      	ldr	r3, [r2, #4]
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8001414:	2d10      	cmp	r5, #16
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001416:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800141a:	6053      	str	r3, [r2, #4]
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 800141c:	d1b8      	bne.n	8001390 <HAL_ADC_ConfigChannel+0x6c>
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800141e:	4b0a      	ldr	r3, [pc, #40]	; (8001448 <HAL_ADC_ConfigChannel+0x124>)
 8001420:	4a0a      	ldr	r2, [pc, #40]	; (800144c <HAL_ADC_ConfigChannel+0x128>)
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	fbb3 f2f2 	udiv	r2, r3, r2
 8001428:	230a      	movs	r3, #10
 800142a:	4353      	muls	r3, r2
        counter--;
 800142c:	9301      	str	r3, [sp, #4]
      while(counter != 0U)
 800142e:	9b01      	ldr	r3, [sp, #4]
 8001430:	2b00      	cmp	r3, #0
 8001432:	d0ad      	beq.n	8001390 <HAL_ADC_ConfigChannel+0x6c>
        counter--;
 8001434:	9b01      	ldr	r3, [sp, #4]
 8001436:	3b01      	subs	r3, #1
 8001438:	e7f8      	b.n	800142c <HAL_ADC_ConfigChannel+0x108>
  __HAL_LOCK(hadc);
 800143a:	2002      	movs	r0, #2
 800143c:	e7ac      	b.n	8001398 <HAL_ADC_ConfigChannel+0x74>
 800143e:	bf00      	nop
 8001440:	40012000 	.word	0x40012000
 8001444:	40012300 	.word	0x40012300
 8001448:	20000010 	.word	0x20000010
 800144c:	000f4240 	.word	0x000f4240

08001450 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001450:	4a07      	ldr	r2, [pc, #28]	; (8001470 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8001452:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001454:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001458:	041b      	lsls	r3, r3, #16
 800145a:	0c1b      	lsrs	r3, r3, #16
 800145c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8001460:	0200      	lsls	r0, r0, #8
 8001462:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001466:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 800146a:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 800146c:	60d3      	str	r3, [r2, #12]
 800146e:	4770      	bx	lr
 8001470:	e000ed00 	.word	0xe000ed00

08001474 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001474:	4b17      	ldr	r3, [pc, #92]	; (80014d4 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001476:	b530      	push	{r4, r5, lr}
 8001478:	68dc      	ldr	r4, [r3, #12]
 800147a:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800147e:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001482:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001484:	2b04      	cmp	r3, #4
 8001486:	bf28      	it	cs
 8001488:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800148a:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800148c:	f04f 0501 	mov.w	r5, #1
 8001490:	fa05 f303 	lsl.w	r3, r5, r3
 8001494:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001498:	bf8c      	ite	hi
 800149a:	3c03      	subhi	r4, #3
 800149c:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800149e:	4019      	ands	r1, r3
 80014a0:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80014a2:	fa05 f404 	lsl.w	r4, r5, r4
 80014a6:	3c01      	subs	r4, #1
 80014a8:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 80014aa:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014ac:	ea42 0201 	orr.w	r2, r2, r1
 80014b0:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014b4:	bfaf      	iteee	ge
 80014b6:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014ba:	f000 000f 	andlt.w	r0, r0, #15
 80014be:	4b06      	ldrlt	r3, [pc, #24]	; (80014d8 <HAL_NVIC_SetPriority+0x64>)
 80014c0:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014c2:	bfa5      	ittet	ge
 80014c4:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
 80014c8:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014ca:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014cc:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 80014d0:	bd30      	pop	{r4, r5, pc}
 80014d2:	bf00      	nop
 80014d4:	e000ed00 	.word	0xe000ed00
 80014d8:	e000ed14 	.word	0xe000ed14

080014dc <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80014dc:	0942      	lsrs	r2, r0, #5
 80014de:	2301      	movs	r3, #1
 80014e0:	f000 001f 	and.w	r0, r0, #31
 80014e4:	fa03 f000 	lsl.w	r0, r3, r0
 80014e8:	4b01      	ldr	r3, [pc, #4]	; (80014f0 <HAL_NVIC_EnableIRQ+0x14>)
 80014ea:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 80014ee:	4770      	bx	lr
 80014f0:	e000e100 	.word	0xe000e100

080014f4 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80014f4:	3801      	subs	r0, #1
 80014f6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80014fa:	d20a      	bcs.n	8001512 <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80014fc:	4b06      	ldr	r3, [pc, #24]	; (8001518 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014fe:	4a07      	ldr	r2, [pc, #28]	; (800151c <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001500:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001502:	21f0      	movs	r1, #240	; 0xf0
 8001504:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001508:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800150a:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800150c:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800150e:	601a      	str	r2, [r3, #0]
 8001510:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8001512:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8001514:	4770      	bx	lr
 8001516:	bf00      	nop
 8001518:	e000e010 	.word	0xe000e010
 800151c:	e000ed00 	.word	0xe000ed00

08001520 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8001520:	4b04      	ldr	r3, [pc, #16]	; (8001534 <HAL_SYSTICK_CLKSourceConfig+0x14>)
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8001522:	681a      	ldr	r2, [r3, #0]
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8001524:	2804      	cmp	r0, #4
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8001526:	bf0c      	ite	eq
 8001528:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 800152c:	f022 0204 	bicne.w	r2, r2, #4
 8001530:	601a      	str	r2, [r3, #0]
 8001532:	4770      	bx	lr
 8001534:	e000e010 	.word	0xe000e010

08001538 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8001538:	4770      	bx	lr

0800153a <HAL_SYSTICK_IRQHandler>:
{
 800153a:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 800153c:	f7ff fffc 	bl	8001538 <HAL_SYSTICK_Callback>
 8001540:	bd08      	pop	{r3, pc}

08001542 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{ 
 8001542:	b510      	push	{r4, lr}
  /* Check DAC handle */
  if(hdac == NULL)
 8001544:	4604      	mov	r4, r0
 8001546:	b168      	cbz	r0, 8001564 <HAL_DAC_Init+0x22>
     return HAL_ERROR;
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));
  
  if(hdac->State == HAL_DAC_STATE_RESET)
 8001548:	7903      	ldrb	r3, [r0, #4]
 800154a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800154e:	b913      	cbnz	r3, 8001556 <HAL_DAC_Init+0x14>
  {  
    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8001550:	7142      	strb	r2, [r0, #5]
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8001552:	f003 ffbb 	bl	80054cc <HAL_DAC_MspInit>
  }
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8001556:	2302      	movs	r3, #2
 8001558:	7123      	strb	r3, [r4, #4]
  
  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 800155a:	2000      	movs	r0, #0
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 800155c:	2301      	movs	r3, #1
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 800155e:	6120      	str	r0, [r4, #16]
  hdac->State = HAL_DAC_STATE_READY;
 8001560:	7123      	strb	r3, [r4, #4]
  
  /* Return function status */
  return HAL_OK;
 8001562:	bd10      	pop	{r4, pc}
     return HAL_ERROR;
 8001564:	2001      	movs	r0, #1
}
 8001566:	bd10      	pop	{r4, pc}

08001568 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_L: 12bit left data alignment selected
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef* hdac, uint32_t Channel, uint32_t* pData, uint32_t Length, uint32_t Alignment)
{
 8001568:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800156a:	4605      	mov	r5, r0
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 800156c:	7940      	ldrb	r0, [r0, #5]
 800156e:	2801      	cmp	r0, #1
{
 8001570:	460e      	mov	r6, r1
 8001572:	f04f 0002 	mov.w	r0, #2
 8001576:	4611      	mov	r1, r2
 8001578:	9a06      	ldr	r2, [sp, #24]
  __HAL_LOCK(hdac);
 800157a:	d04c      	beq.n	8001616 <HAL_DAC_Start_DMA+0xae>
 800157c:	2401      	movs	r4, #1
 800157e:	716c      	strb	r4, [r5, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8001580:	7128      	strb	r0, [r5, #4]
 8001582:	682c      	ldr	r4, [r5, #0]

  if(Channel == DAC_CHANNEL_1)
 8001584:	b9e6      	cbnz	r6, 80015c0 <HAL_DAC_Start_DMA+0x58>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8001586:	68a8      	ldr	r0, [r5, #8]
 8001588:	4f23      	ldr	r7, [pc, #140]	; (8001618 <HAL_DAC_Start_DMA+0xb0>)
 800158a:	63c7      	str	r7, [r0, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 800158c:	4f23      	ldr	r7, [pc, #140]	; (800161c <HAL_DAC_Start_DMA+0xb4>)
 800158e:	6407      	str	r7, [r0, #64]	; 0x40

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8001590:	4f23      	ldr	r7, [pc, #140]	; (8001620 <HAL_DAC_Start_DMA+0xb8>)
 8001592:	64c7      	str	r7, [r0, #76]	; 0x4c

    /* Enable the selected DAC channel1 DMA request */
    hdac->Instance->CR |= DAC_CR_DMAEN1;
 8001594:	6827      	ldr	r7, [r4, #0]
    
    /* Case of use of channel 1 */
    switch(Alignment)
 8001596:	2a04      	cmp	r2, #4
    hdac->Instance->CR |= DAC_CR_DMAEN1;
 8001598:	f447 5780 	orr.w	r7, r7, #4096	; 0x1000
 800159c:	6027      	str	r7, [r4, #0]
    switch(Alignment)
 800159e:	d009      	beq.n	80015b4 <HAL_DAC_Start_DMA+0x4c>
 80015a0:	2a08      	cmp	r2, #8
 80015a2:	d00a      	beq.n	80015ba <HAL_DAC_Start_DMA+0x52>
 80015a4:	2a00      	cmp	r2, #0
 80015a6:	d134      	bne.n	8001612 <HAL_DAC_Start_DMA+0xaa>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 80015a8:	f104 0208 	add.w	r2, r4, #8
  
  /* Enable the DMA Stream */
  if(Channel == DAC_CHANNEL_1)
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 80015ac:	6827      	ldr	r7, [r4, #0]
 80015ae:	f447 5700 	orr.w	r7, r7, #8192	; 0x2000
 80015b2:	e01a      	b.n	80015ea <HAL_DAC_Start_DMA+0x82>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 80015b4:	f104 020c 	add.w	r2, r4, #12
        break;
 80015b8:	e7f8      	b.n	80015ac <HAL_DAC_Start_DMA+0x44>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 80015ba:	f104 0210 	add.w	r2, r4, #16
        break;
 80015be:	e7f5      	b.n	80015ac <HAL_DAC_Start_DMA+0x44>
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 80015c0:	68e8      	ldr	r0, [r5, #12]
 80015c2:	4f18      	ldr	r7, [pc, #96]	; (8001624 <HAL_DAC_Start_DMA+0xbc>)
 80015c4:	63c7      	str	r7, [r0, #60]	; 0x3c
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 80015c6:	4f18      	ldr	r7, [pc, #96]	; (8001628 <HAL_DAC_Start_DMA+0xc0>)
 80015c8:	6407      	str	r7, [r0, #64]	; 0x40
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 80015ca:	4f18      	ldr	r7, [pc, #96]	; (800162c <HAL_DAC_Start_DMA+0xc4>)
 80015cc:	64c7      	str	r7, [r0, #76]	; 0x4c
    hdac->Instance->CR |= DAC_CR_DMAEN2;
 80015ce:	6827      	ldr	r7, [r4, #0]
    switch(Alignment)
 80015d0:	2a04      	cmp	r2, #4
    hdac->Instance->CR |= DAC_CR_DMAEN2;
 80015d2:	f047 5780 	orr.w	r7, r7, #268435456	; 0x10000000
 80015d6:	6027      	str	r7, [r4, #0]
    switch(Alignment)
 80015d8:	d013      	beq.n	8001602 <HAL_DAC_Start_DMA+0x9a>
 80015da:	2a08      	cmp	r2, #8
 80015dc:	d014      	beq.n	8001608 <HAL_DAC_Start_DMA+0xa0>
 80015de:	b9b2      	cbnz	r2, 800160e <HAL_DAC_Start_DMA+0xa6>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 80015e0:	f104 0214 	add.w	r2, r4, #20
    HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
  } 
  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 80015e4:	6827      	ldr	r7, [r4, #0]
 80015e6:	f047 5700 	orr.w	r7, r7, #536870912	; 0x20000000
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 80015ea:	6027      	str	r7, [r4, #0]
    HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 80015ec:	f000 f956 	bl	800189c <HAL_DMA_Start_IT>
    /* Enable the DMA Stream */
    HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
  }
  
  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 80015f0:	682b      	ldr	r3, [r5, #0]
 80015f2:	2101      	movs	r1, #1
 80015f4:	681a      	ldr	r2, [r3, #0]
 80015f6:	40b1      	lsls	r1, r6
 80015f8:	4311      	orrs	r1, r2
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 80015fa:	2000      	movs	r0, #0
  __HAL_DAC_ENABLE(hdac, Channel);
 80015fc:	6019      	str	r1, [r3, #0]
  __HAL_UNLOCK(hdac);
 80015fe:	7168      	strb	r0, [r5, #5]
  
  /* Return function status */
  return HAL_OK;
 8001600:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8001602:	f104 0218 	add.w	r2, r4, #24
        break;
 8001606:	e7ed      	b.n	80015e4 <HAL_DAC_Start_DMA+0x7c>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 8001608:	f104 021c 	add.w	r2, r4, #28
        break;
 800160c:	e7ea      	b.n	80015e4 <HAL_DAC_Start_DMA+0x7c>
  uint32_t tmpreg = 0U;
 800160e:	2200      	movs	r2, #0
 8001610:	e7e8      	b.n	80015e4 <HAL_DAC_Start_DMA+0x7c>
 8001612:	4632      	mov	r2, r6
 8001614:	e7ca      	b.n	80015ac <HAL_DAC_Start_DMA+0x44>
}
 8001616:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001618:	0800166b 	.word	0x0800166b
 800161c:	0800167d 	.word	0x0800167d
 8001620:	08001689 	.word	0x08001689
 8001624:	08001743 	.word	0x08001743
 8001628:	08001753 	.word	0x08001753
 800162c:	0800175d 	.word	0x0800175d

08001630 <HAL_DAC_Stop_DMA>:

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  
  /* Disable the selected DAC channel DMA request */
   hdac->Instance->CR &= ~(DAC_CR_DMAEN1 << Channel);
 8001630:	6803      	ldr	r3, [r0, #0]
{
 8001632:	b510      	push	{r4, lr}
   hdac->Instance->CR &= ~(DAC_CR_DMAEN1 << Channel);
 8001634:	681a      	ldr	r2, [r3, #0]
{
 8001636:	4604      	mov	r4, r0
   hdac->Instance->CR &= ~(DAC_CR_DMAEN1 << Channel);
 8001638:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800163c:	4088      	lsls	r0, r1
 800163e:	ea22 0200 	bic.w	r2, r2, r0
 8001642:	601a      	str	r2, [r3, #0]
    
  /* Disable the Peripheral */
  __HAL_DAC_DISABLE(hdac, Channel);
 8001644:	681a      	ldr	r2, [r3, #0]
 8001646:	2001      	movs	r0, #1
 8001648:	4088      	lsls	r0, r1
 800164a:	ea22 0200 	bic.w	r2, r2, r0
 800164e:	601a      	str	r2, [r3, #0]
  
  /* Disable the DMA Channel */
  /* Channel1 is used */
  if(Channel == DAC_CHANNEL_1)
 8001650:	b931      	cbnz	r1, 8001660 <HAL_DAC_Stop_DMA+0x30>
  { 
    status = HAL_DMA_Abort(hdac->DMA_Handle1);
 8001652:	68a0      	ldr	r0, [r4, #8]
  }
  else /* Channel2 is used for */
  { 
    status = HAL_DMA_Abort(hdac->DMA_Handle2); 
 8001654:	f000 f960 	bl	8001918 <HAL_DMA_Abort>
  }

  /* Check if DMA Channel effectively disabled */
  if(status != HAL_OK)
 8001658:	b120      	cbz	r0, 8001664 <HAL_DAC_Stop_DMA+0x34>
  {
    /* Update DAC state machine to error */
    hdac->State = HAL_DAC_STATE_ERROR;      
 800165a:	2304      	movs	r3, #4
  }
  else
  {
    /* Change DAC state */
    hdac->State = HAL_DAC_STATE_READY;
 800165c:	7123      	strb	r3, [r4, #4]
  }

  /* Return function status */
  return status;
}
 800165e:	bd10      	pop	{r4, pc}
    status = HAL_DMA_Abort(hdac->DMA_Handle2); 
 8001660:	68e0      	ldr	r0, [r4, #12]
 8001662:	e7f7      	b.n	8001654 <HAL_DAC_Stop_DMA+0x24>
    hdac->State = HAL_DAC_STATE_READY;
 8001664:	2301      	movs	r3, #1
 8001666:	e7f9      	b.n	800165c <HAL_DAC_Stop_DMA+0x2c>

08001668 <HAL_DAC_ConvCpltCallbackCh1>:
 8001668:	4770      	bx	lr

0800166a <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)   
{
 800166a:	b510      	push	{r4, lr}
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800166c:	6b84      	ldr	r4, [r0, #56]	; 0x38
  
  HAL_DAC_ConvCpltCallbackCh1(hdac); 
 800166e:	4620      	mov	r0, r4
 8001670:	f7ff fffa 	bl	8001668 <HAL_DAC_ConvCpltCallbackCh1>
  
  hdac->State= HAL_DAC_STATE_READY;
 8001674:	2301      	movs	r3, #1
 8001676:	7123      	strb	r3, [r4, #4]
 8001678:	bd10      	pop	{r4, pc}

0800167a <HAL_DAC_ConvHalfCpltCallbackCh1>:
 800167a:	4770      	bx	lr

0800167c <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)   
{
 800167c:	b508      	push	{r3, lr}
    DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
    /* Conversion complete callback */
    HAL_DAC_ConvHalfCpltCallbackCh1(hdac); 
 800167e:	6b80      	ldr	r0, [r0, #56]	; 0x38
 8001680:	f7ff fffb 	bl	800167a <HAL_DAC_ConvHalfCpltCallbackCh1>
 8001684:	bd08      	pop	{r3, pc}

08001686 <HAL_DAC_ErrorCallbackCh1>:
 8001686:	4770      	bx	lr

08001688 <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)   
{
 8001688:	b510      	push	{r4, lr}
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800168a:	6b84      	ldr	r4, [r0, #56]	; 0x38
    
  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 800168c:	6923      	ldr	r3, [r4, #16]
 800168e:	f043 0304 	orr.w	r3, r3, #4
 8001692:	6123      	str	r3, [r4, #16]
    
  HAL_DAC_ErrorCallbackCh1(hdac); 
 8001694:	4620      	mov	r0, r4
 8001696:	f7ff fff6 	bl	8001686 <HAL_DAC_ErrorCallbackCh1>
    
  hdac->State= HAL_DAC_STATE_READY;
 800169a:	2301      	movs	r3, #1
 800169c:	7123      	strb	r3, [r4, #4]
 800169e:	bd10      	pop	{r4, pc}

080016a0 <HAL_DAC_DMAUnderrunCallbackCh1>:
{
 80016a0:	4770      	bx	lr

080016a2 <HAL_DAC_IRQHandler>:
  if(__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 80016a2:	6803      	ldr	r3, [r0, #0]
 80016a4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80016a6:	0491      	lsls	r1, r2, #18
{
 80016a8:	b510      	push	{r4, lr}
 80016aa:	4604      	mov	r4, r0
  if(__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 80016ac:	d50e      	bpl.n	80016cc <HAL_DAC_IRQHandler+0x2a>
    hdac->State = HAL_DAC_STATE_ERROR;
 80016ae:	2204      	movs	r2, #4
 80016b0:	7102      	strb	r2, [r0, #4]
    hdac->ErrorCode |= HAL_DAC_ERROR_DMAUNDERRUNCH1;
 80016b2:	6902      	ldr	r2, [r0, #16]
 80016b4:	f042 0201 	orr.w	r2, r2, #1
 80016b8:	6102      	str	r2, [r0, #16]
    __HAL_DAC_CLEAR_FLAG(hdac,DAC_FLAG_DMAUDR1);
 80016ba:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80016be:	635a      	str	r2, [r3, #52]	; 0x34
    hdac->Instance->CR &= ~DAC_CR_DMAEN1;
 80016c0:	681a      	ldr	r2, [r3, #0]
 80016c2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80016c6:	601a      	str	r2, [r3, #0]
    HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 80016c8:	f7ff ffea 	bl	80016a0 <HAL_DAC_DMAUnderrunCallbackCh1>
  if(__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR2))
 80016cc:	6823      	ldr	r3, [r4, #0]
 80016ce:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80016d0:	0092      	lsls	r2, r2, #2
 80016d2:	d511      	bpl.n	80016f8 <HAL_DAC_IRQHandler+0x56>
    hdac->State = HAL_DAC_STATE_ERROR;
 80016d4:	2204      	movs	r2, #4
 80016d6:	7122      	strb	r2, [r4, #4]
    hdac->ErrorCode |= HAL_DAC_ERROR_DMAUNDERRUNCH2;
 80016d8:	6922      	ldr	r2, [r4, #16]
 80016da:	f042 0202 	orr.w	r2, r2, #2
 80016de:	6122      	str	r2, [r4, #16]
    __HAL_DAC_CLEAR_FLAG(hdac,DAC_FLAG_DMAUDR2);
 80016e0:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80016e4:	635a      	str	r2, [r3, #52]	; 0x34
    hdac->Instance->CR &= ~DAC_CR_DMAEN2;
 80016e6:	681a      	ldr	r2, [r3, #0]
 80016e8:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
    HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 80016ec:	4620      	mov	r0, r4
    hdac->Instance->CR &= ~DAC_CR_DMAEN2;
 80016ee:	601a      	str	r2, [r3, #0]
}
 80016f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 80016f4:	f000 b824 	b.w	8001740 <HAL_DACEx_DMAUnderrunCallbackCh2>
 80016f8:	bd10      	pop	{r4, pc}

080016fa <HAL_DAC_ConfigChannel>:
  __HAL_LOCK(hdac);
 80016fa:	7943      	ldrb	r3, [r0, #5]
 80016fc:	2b01      	cmp	r3, #1
{
 80016fe:	b530      	push	{r4, r5, lr}
 8001700:	f04f 0302 	mov.w	r3, #2
  __HAL_LOCK(hdac);
 8001704:	d017      	beq.n	8001736 <HAL_DAC_ConfigChannel+0x3c>
  tmpreg1 = hdac->Instance->CR;
 8001706:	6804      	ldr	r4, [r0, #0]
  hdac->State = HAL_DAC_STATE_BUSY;
 8001708:	7103      	strb	r3, [r0, #4]
  tmpreg1 = hdac->Instance->CR;
 800170a:	6823      	ldr	r3, [r4, #0]
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 800170c:	f640 75fe 	movw	r5, #4094	; 0xffe
 8001710:	4095      	lsls	r5, r2
 8001712:	ea23 0505 	bic.w	r5, r3, r5
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8001716:	c90a      	ldmia	r1, {r1, r3}
 8001718:	430b      	orrs	r3, r1
  tmpreg1 |= tmpreg2 << Channel;
 800171a:	4093      	lsls	r3, r2
 800171c:	432b      	orrs	r3, r5
  hdac->Instance->CR = tmpreg1;
 800171e:	6023      	str	r3, [r4, #0]
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 8001720:	6823      	ldr	r3, [r4, #0]
 8001722:	21c0      	movs	r1, #192	; 0xc0
 8001724:	fa01 f202 	lsl.w	r2, r1, r2
 8001728:	ea23 0202 	bic.w	r2, r3, r2
  hdac->State = HAL_DAC_STATE_READY;
 800172c:	2301      	movs	r3, #1
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 800172e:	6022      	str	r2, [r4, #0]
  hdac->State = HAL_DAC_STATE_READY;
 8001730:	7103      	strb	r3, [r0, #4]
  __HAL_UNLOCK(hdac);
 8001732:	2300      	movs	r3, #0
 8001734:	7143      	strb	r3, [r0, #5]
  __HAL_LOCK(hdac);
 8001736:	4618      	mov	r0, r3
}
 8001738:	bd30      	pop	{r4, r5, pc}

0800173a <HAL_DACEx_ConvCpltCallbackCh2>:
 800173a:	4770      	bx	lr

0800173c <HAL_DACEx_ConvHalfCpltCallbackCh2>:
 800173c:	4770      	bx	lr

0800173e <HAL_DACEx_ErrorCallbackCh2>:
 800173e:	4770      	bx	lr

08001740 <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8001740:	4770      	bx	lr

08001742 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)   
{
 8001742:	b510      	push	{r4, lr}
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001744:	6b84      	ldr	r4, [r0, #56]	; 0x38
  
  HAL_DACEx_ConvCpltCallbackCh2(hdac); 
 8001746:	4620      	mov	r0, r4
 8001748:	f7ff fff7 	bl	800173a <HAL_DACEx_ConvCpltCallbackCh2>
  
  hdac->State= HAL_DAC_STATE_READY;
 800174c:	2301      	movs	r3, #1
 800174e:	7123      	strb	r3, [r4, #4]
 8001750:	bd10      	pop	{r4, pc}

08001752 <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)   
{
 8001752:	b508      	push	{r3, lr}
    DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
    /* Conversion complete callback */
    HAL_DACEx_ConvHalfCpltCallbackCh2(hdac); 
 8001754:	6b80      	ldr	r0, [r0, #56]	; 0x38
 8001756:	f7ff fff1 	bl	800173c <HAL_DACEx_ConvHalfCpltCallbackCh2>
 800175a:	bd08      	pop	{r3, pc}

0800175c <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)   
{
 800175c:	b510      	push	{r4, lr}
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800175e:	6b84      	ldr	r4, [r0, #56]	; 0x38
    
  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8001760:	6923      	ldr	r3, [r4, #16]
 8001762:	f043 0304 	orr.w	r3, r3, #4
 8001766:	6123      	str	r3, [r4, #16]
    
  HAL_DACEx_ErrorCallbackCh2(hdac); 
 8001768:	4620      	mov	r0, r4
 800176a:	f7ff ffe8 	bl	800173e <HAL_DACEx_ErrorCallbackCh2>
    
  hdac->State= HAL_DAC_STATE_READY;
 800176e:	2301      	movs	r3, #1
 8001770:	7123      	strb	r3, [r4, #4]
 8001772:	bd10      	pop	{r4, pc}

08001774 <DMA_CalcBaseAndBitshift>:
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001774:	6803      	ldr	r3, [r0, #0]
 8001776:	b2da      	uxtb	r2, r3
 8001778:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800177c:	f023 0303 	bic.w	r3, r3, #3
 8001780:	2118      	movs	r1, #24
 8001782:	3a10      	subs	r2, #16
 8001784:	fbb2 f2f1 	udiv	r2, r2, r1
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001788:	4904      	ldr	r1, [pc, #16]	; (800179c <DMA_CalcBaseAndBitshift+0x28>)
  
  if (stream_number > 3U)
 800178a:	2a03      	cmp	r2, #3
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800178c:	bf88      	it	hi
 800178e:	3304      	addhi	r3, #4
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001790:	5c89      	ldrb	r1, [r1, r2]
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001792:	6583      	str	r3, [r0, #88]	; 0x58
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001794:	65c1      	str	r1, [r0, #92]	; 0x5c
  }
  
  return hdma->StreamBaseAddress;
}
 8001796:	6d80      	ldr	r0, [r0, #88]	; 0x58
 8001798:	4770      	bx	lr
 800179a:	bf00      	nop
 800179c:	0800d0e8 	.word	0x0800d0e8

080017a0 <HAL_DMA_Init>:
{
 80017a0:	b570      	push	{r4, r5, r6, lr}
 80017a2:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80017a4:	f7ff fc3e 	bl	8001024 <HAL_GetTick>
 80017a8:	4605      	mov	r5, r0
  if(hdma == NULL)
 80017aa:	2c00      	cmp	r4, #0
 80017ac:	d071      	beq.n	8001892 <HAL_DMA_Init+0xf2>
  __HAL_UNLOCK(hdma);
 80017ae:	2300      	movs	r3, #0
 80017b0:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  __HAL_DMA_DISABLE(hdma);
 80017b4:	6822      	ldr	r2, [r4, #0]
  hdma->State = HAL_DMA_STATE_BUSY;
 80017b6:	2302      	movs	r3, #2
 80017b8:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  __HAL_DMA_DISABLE(hdma);
 80017bc:	6813      	ldr	r3, [r2, #0]
 80017be:	f023 0301 	bic.w	r3, r3, #1
 80017c2:	6013      	str	r3, [r2, #0]
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80017c4:	6821      	ldr	r1, [r4, #0]
 80017c6:	680b      	ldr	r3, [r1, #0]
 80017c8:	07d8      	lsls	r0, r3, #31
 80017ca:	d43c      	bmi.n	8001846 <HAL_DMA_Init+0xa6>
  tmp = hdma->Instance->CR;
 80017cc:	680b      	ldr	r3, [r1, #0]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80017ce:	4d32      	ldr	r5, [pc, #200]	; (8001898 <HAL_DMA_Init+0xf8>)
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80017d0:	6862      	ldr	r2, [r4, #4]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80017d2:	69a0      	ldr	r0, [r4, #24]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80017d4:	401d      	ands	r5, r3
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80017d6:	68a3      	ldr	r3, [r4, #8]
 80017d8:	4313      	orrs	r3, r2
 80017da:	68e2      	ldr	r2, [r4, #12]
 80017dc:	4313      	orrs	r3, r2
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80017de:	6922      	ldr	r2, [r4, #16]
 80017e0:	4313      	orrs	r3, r2
 80017e2:	6962      	ldr	r2, [r4, #20]
 80017e4:	4313      	orrs	r3, r2
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80017e6:	69e2      	ldr	r2, [r4, #28]
 80017e8:	4303      	orrs	r3, r0
 80017ea:	4313      	orrs	r3, r2
          hdma->Init.Mode                | hdma->Init.Priority;
 80017ec:	6a22      	ldr	r2, [r4, #32]
 80017ee:	4313      	orrs	r3, r2
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80017f0:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80017f2:	2a04      	cmp	r2, #4
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80017f4:	ea43 0305 	orr.w	r3, r3, r5
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80017f8:	bf01      	itttt	eq
 80017fa:	6b26      	ldreq	r6, [r4, #48]	; 0x30
 80017fc:	6ae5      	ldreq	r5, [r4, #44]	; 0x2c
 80017fe:	4335      	orreq	r5, r6
 8001800:	432b      	orreq	r3, r5
  hdma->Instance->CR = tmp;  
 8001802:	600b      	str	r3, [r1, #0]
  tmp = hdma->Instance->FCR;
 8001804:	694b      	ldr	r3, [r1, #20]
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001806:	2a04      	cmp	r2, #4
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001808:	f023 0307 	bic.w	r3, r3, #7
  tmp |= hdma->Init.FIFOMode;
 800180c:	ea43 0302 	orr.w	r3, r3, r2
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001810:	d10b      	bne.n	800182a <HAL_DMA_Init+0x8a>
    tmp |= hdma->Init.FIFOThreshold;
 8001812:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001814:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
    tmp |= hdma->Init.FIFOThreshold;
 8001816:	4313      	orrs	r3, r2
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001818:	b13d      	cbz	r5, 800182a <HAL_DMA_Init+0x8a>
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800181a:	b9f8      	cbnz	r0, 800185c <HAL_DMA_Init+0xbc>
  {
    switch (tmp)
 800181c:	2a01      	cmp	r2, #1
 800181e:	d02d      	beq.n	800187c <HAL_DMA_Init+0xdc>
 8001820:	d301      	bcc.n	8001826 <HAL_DMA_Init+0x86>
 8001822:	2a02      	cmp	r2, #2
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001824:	d101      	bne.n	800182a <HAL_DMA_Init+0x8a>
    case DMA_FIFO_THRESHOLD_HALFFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001826:	01ea      	lsls	r2, r5, #7
 8001828:	d42b      	bmi.n	8001882 <HAL_DMA_Init+0xe2>
  hdma->Instance->FCR = tmp;
 800182a:	614b      	str	r3, [r1, #20]
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800182c:	4620      	mov	r0, r4
 800182e:	f7ff ffa1 	bl	8001774 <DMA_CalcBaseAndBitshift>
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001832:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8001834:	233f      	movs	r3, #63	; 0x3f
 8001836:	4093      	lsls	r3, r2
 8001838:	6083      	str	r3, [r0, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800183a:	2000      	movs	r0, #0
  hdma->State = HAL_DMA_STATE_READY;
 800183c:	2301      	movs	r3, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800183e:	6560      	str	r0, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
 8001840:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  return HAL_OK;
 8001844:	bd70      	pop	{r4, r5, r6, pc}
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001846:	f7ff fbed 	bl	8001024 <HAL_GetTick>
 800184a:	1b40      	subs	r0, r0, r5
 800184c:	2805      	cmp	r0, #5
 800184e:	d9b9      	bls.n	80017c4 <HAL_DMA_Init+0x24>
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001850:	2320      	movs	r3, #32
 8001852:	6563      	str	r3, [r4, #84]	; 0x54
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001854:	2003      	movs	r0, #3
        hdma->State = HAL_DMA_STATE_READY;
 8001856:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
}
 800185a:	bd70      	pop	{r4, r5, r6, pc}
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800185c:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
 8001860:	d113      	bne.n	800188a <HAL_DMA_Init+0xea>
    switch (tmp)
 8001862:	2a03      	cmp	r2, #3
 8001864:	d8e1      	bhi.n	800182a <HAL_DMA_Init+0x8a>
 8001866:	a001      	add	r0, pc, #4	; (adr r0, 800186c <HAL_DMA_Init+0xcc>)
 8001868:	f850 f022 	ldr.w	pc, [r0, r2, lsl #2]
 800186c:	08001883 	.word	0x08001883
 8001870:	08001827 	.word	0x08001827
 8001874:	08001883 	.word	0x08001883
 8001878:	0800187d 	.word	0x0800187d
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800187c:	f1b5 7fc0 	cmp.w	r5, #25165824	; 0x1800000
 8001880:	d1d3      	bne.n	800182a <HAL_DMA_Init+0x8a>
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001882:	2340      	movs	r3, #64	; 0x40
 8001884:	6563      	str	r3, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_READY;
 8001886:	2001      	movs	r0, #1
 8001888:	e7e5      	b.n	8001856 <HAL_DMA_Init+0xb6>
    switch (tmp)
 800188a:	2a02      	cmp	r2, #2
 800188c:	d9f9      	bls.n	8001882 <HAL_DMA_Init+0xe2>
 800188e:	2a03      	cmp	r2, #3
 8001890:	e7c8      	b.n	8001824 <HAL_DMA_Init+0x84>
    return HAL_ERROR;
 8001892:	2001      	movs	r0, #1
 8001894:	bd70      	pop	{r4, r5, r6, pc}
 8001896:	bf00      	nop
 8001898:	f010803f 	.word	0xf010803f

0800189c <HAL_DMA_Start_IT>:
{
 800189c:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(hdma);
 800189e:	f890 4034 	ldrb.w	r4, [r0, #52]	; 0x34
 80018a2:	2c01      	cmp	r4, #1
 80018a4:	d036      	beq.n	8001914 <HAL_DMA_Start_IT+0x78>
 80018a6:	2401      	movs	r4, #1
 80018a8:	f880 4034 	strb.w	r4, [r0, #52]	; 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 80018ac:	f890 4035 	ldrb.w	r4, [r0, #53]	; 0x35
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80018b0:	6d86      	ldr	r6, [r0, #88]	; 0x58
  if(HAL_DMA_STATE_READY == hdma->State)
 80018b2:	2c01      	cmp	r4, #1
 80018b4:	f04f 0500 	mov.w	r5, #0
 80018b8:	f04f 0402 	mov.w	r4, #2
 80018bc:	d128      	bne.n	8001910 <HAL_DMA_Start_IT+0x74>
    hdma->State = HAL_DMA_STATE_BUSY;
 80018be:	f880 4035 	strb.w	r4, [r0, #53]	; 0x35
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80018c2:	6804      	ldr	r4, [r0, #0]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80018c4:	6545      	str	r5, [r0, #84]	; 0x54
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80018c6:	6825      	ldr	r5, [r4, #0]
 80018c8:	f425 2580 	bic.w	r5, r5, #262144	; 0x40000
 80018cc:	6025      	str	r5, [r4, #0]
  hdma->Instance->NDTR = DataLength;
 80018ce:	6063      	str	r3, [r4, #4]
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80018d0:	6883      	ldr	r3, [r0, #8]
 80018d2:	2b40      	cmp	r3, #64	; 0x40
    hdma->Instance->PAR = DstAddress;
 80018d4:	bf0e      	itee	eq
 80018d6:	60a2      	streq	r2, [r4, #8]
    hdma->Instance->PAR = SrcAddress;
 80018d8:	60a1      	strne	r1, [r4, #8]
    hdma->Instance->M0AR = DstAddress;
 80018da:	60e2      	strne	r2, [r4, #12]
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80018dc:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
    hdma->Instance->M0AR = SrcAddress;
 80018de:	bf08      	it	eq
 80018e0:	60e1      	streq	r1, [r4, #12]
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80018e2:	233f      	movs	r3, #63	; 0x3f
 80018e4:	4093      	lsls	r3, r2
 80018e6:	60b3      	str	r3, [r6, #8]
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80018e8:	6823      	ldr	r3, [r4, #0]
 80018ea:	f043 0316 	orr.w	r3, r3, #22
 80018ee:	6023      	str	r3, [r4, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 80018f0:	6963      	ldr	r3, [r4, #20]
 80018f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80018f6:	6163      	str	r3, [r4, #20]
    if(hdma->XferHalfCpltCallback != NULL)
 80018f8:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80018fa:	b11b      	cbz	r3, 8001904 <HAL_DMA_Start_IT+0x68>
      hdma->Instance->CR  |= DMA_IT_HT;
 80018fc:	6823      	ldr	r3, [r4, #0]
 80018fe:	f043 0308 	orr.w	r3, r3, #8
 8001902:	6023      	str	r3, [r4, #0]
    __HAL_DMA_ENABLE(hdma);
 8001904:	6823      	ldr	r3, [r4, #0]
 8001906:	f043 0301 	orr.w	r3, r3, #1
 800190a:	6023      	str	r3, [r4, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800190c:	2000      	movs	r0, #0
 800190e:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_UNLOCK(hdma);	  
 8001910:	f880 5034 	strb.w	r5, [r0, #52]	; 0x34
  __HAL_LOCK(hdma);
 8001914:	2002      	movs	r0, #2
}
 8001916:	bd70      	pop	{r4, r5, r6, pc}

08001918 <HAL_DMA_Abort>:
{
 8001918:	b570      	push	{r4, r5, r6, lr}
 800191a:	4604      	mov	r4, r0
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800191c:	6d85      	ldr	r5, [r0, #88]	; 0x58
  uint32_t tickstart = HAL_GetTick();
 800191e:	f7ff fb81 	bl	8001024 <HAL_GetTick>
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001922:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 8001926:	2b02      	cmp	r3, #2
  uint32_t tickstart = HAL_GetTick();
 8001928:	4606      	mov	r6, r0
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800192a:	d006      	beq.n	800193a <HAL_DMA_Abort+0x22>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800192c:	2380      	movs	r3, #128	; 0x80
 800192e:	6563      	str	r3, [r4, #84]	; 0x54
    __HAL_UNLOCK(hdma);
 8001930:	2300      	movs	r3, #0
 8001932:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    return HAL_ERROR;
 8001936:	2001      	movs	r0, #1
 8001938:	bd70      	pop	{r4, r5, r6, pc}
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800193a:	6823      	ldr	r3, [r4, #0]
 800193c:	681a      	ldr	r2, [r3, #0]
 800193e:	f022 0216 	bic.w	r2, r2, #22
 8001942:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001944:	695a      	ldr	r2, [r3, #20]
 8001946:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800194a:	615a      	str	r2, [r3, #20]
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800194c:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800194e:	b90a      	cbnz	r2, 8001954 <HAL_DMA_Abort+0x3c>
 8001950:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8001952:	b11a      	cbz	r2, 800195c <HAL_DMA_Abort+0x44>
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001954:	681a      	ldr	r2, [r3, #0]
 8001956:	f022 0208 	bic.w	r2, r2, #8
 800195a:	601a      	str	r2, [r3, #0]
    __HAL_DMA_DISABLE(hdma);
 800195c:	681a      	ldr	r2, [r3, #0]
 800195e:	f022 0201 	bic.w	r2, r2, #1
 8001962:	601a      	str	r2, [r3, #0]
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001964:	6823      	ldr	r3, [r4, #0]
 8001966:	6818      	ldr	r0, [r3, #0]
 8001968:	f010 0001 	ands.w	r0, r0, #1
 800196c:	d109      	bne.n	8001982 <HAL_DMA_Abort+0x6a>
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800196e:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8001970:	233f      	movs	r3, #63	; 0x3f
 8001972:	4093      	lsls	r3, r2
 8001974:	60ab      	str	r3, [r5, #8]
    hdma->State = HAL_DMA_STATE_READY;
 8001976:	2301      	movs	r3, #1
    __HAL_UNLOCK(hdma);
 8001978:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
    hdma->State = HAL_DMA_STATE_READY;
 800197c:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
}
 8001980:	bd70      	pop	{r4, r5, r6, pc}
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001982:	f7ff fb4f 	bl	8001024 <HAL_GetTick>
 8001986:	1b80      	subs	r0, r0, r6
 8001988:	2805      	cmp	r0, #5
 800198a:	d9eb      	bls.n	8001964 <HAL_DMA_Abort+0x4c>
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800198c:	2320      	movs	r3, #32
 800198e:	6563      	str	r3, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001990:	2003      	movs	r0, #3
        __HAL_UNLOCK(hdma);
 8001992:	2300      	movs	r3, #0
 8001994:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001998:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
        return HAL_TIMEOUT;
 800199c:	bd70      	pop	{r4, r5, r6, pc}

0800199e <HAL_DMA_Abort_IT>:
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800199e:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 80019a2:	2b02      	cmp	r3, #2
 80019a4:	d003      	beq.n	80019ae <HAL_DMA_Abort_IT+0x10>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80019a6:	2380      	movs	r3, #128	; 0x80
 80019a8:	6543      	str	r3, [r0, #84]	; 0x54
    return HAL_ERROR;
 80019aa:	2001      	movs	r0, #1
 80019ac:	4770      	bx	lr
    __HAL_DMA_DISABLE(hdma);
 80019ae:	6802      	ldr	r2, [r0, #0]
    hdma->State = HAL_DMA_STATE_ABORT;
 80019b0:	2305      	movs	r3, #5
 80019b2:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
    __HAL_DMA_DISABLE(hdma);
 80019b6:	6813      	ldr	r3, [r2, #0]
 80019b8:	f023 0301 	bic.w	r3, r3, #1
 80019bc:	6013      	str	r3, [r2, #0]
  return HAL_OK;
 80019be:	2000      	movs	r0, #0
}
 80019c0:	4770      	bx	lr
	...

080019c4 <HAL_DMA_IRQHandler>:
{
 80019c4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __IO uint32_t count = 0U;
 80019c6:	2300      	movs	r3, #0
 80019c8:	9301      	str	r3, [sp, #4]
  uint32_t timeout = SystemCoreClock / 9600U;
 80019ca:	4b5a      	ldr	r3, [pc, #360]	; (8001b34 <HAL_DMA_IRQHandler+0x170>)
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80019cc:	6d85      	ldr	r5, [r0, #88]	; 0x58
  uint32_t timeout = SystemCoreClock / 9600U;
 80019ce:	681f      	ldr	r7, [r3, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80019d0:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
  tmpisr = regs->ISR;
 80019d2:	682e      	ldr	r6, [r5, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80019d4:	2208      	movs	r2, #8
 80019d6:	409a      	lsls	r2, r3
 80019d8:	4216      	tst	r6, r2
{
 80019da:	4604      	mov	r4, r0
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80019dc:	d00c      	beq.n	80019f8 <HAL_DMA_IRQHandler+0x34>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80019de:	6801      	ldr	r1, [r0, #0]
 80019e0:	6808      	ldr	r0, [r1, #0]
 80019e2:	0740      	lsls	r0, r0, #29
 80019e4:	d508      	bpl.n	80019f8 <HAL_DMA_IRQHandler+0x34>
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80019e6:	6808      	ldr	r0, [r1, #0]
 80019e8:	f020 0004 	bic.w	r0, r0, #4
 80019ec:	6008      	str	r0, [r1, #0]
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80019ee:	60aa      	str	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80019f0:	6d62      	ldr	r2, [r4, #84]	; 0x54
 80019f2:	f042 0201 	orr.w	r2, r2, #1
 80019f6:	6562      	str	r2, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80019f8:	2201      	movs	r2, #1
 80019fa:	409a      	lsls	r2, r3
 80019fc:	4216      	tst	r6, r2
 80019fe:	d008      	beq.n	8001a12 <HAL_DMA_IRQHandler+0x4e>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001a00:	6821      	ldr	r1, [r4, #0]
 8001a02:	6949      	ldr	r1, [r1, #20]
 8001a04:	0609      	lsls	r1, r1, #24
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001a06:	bf41      	itttt	mi
 8001a08:	60aa      	strmi	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001a0a:	6d62      	ldrmi	r2, [r4, #84]	; 0x54
 8001a0c:	f042 0202 	orrmi.w	r2, r2, #2
 8001a10:	6562      	strmi	r2, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001a12:	2204      	movs	r2, #4
 8001a14:	409a      	lsls	r2, r3
 8001a16:	4216      	tst	r6, r2
 8001a18:	d008      	beq.n	8001a2c <HAL_DMA_IRQHandler+0x68>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001a1a:	6821      	ldr	r1, [r4, #0]
 8001a1c:	6809      	ldr	r1, [r1, #0]
 8001a1e:	0788      	lsls	r0, r1, #30
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001a20:	bf41      	itttt	mi
 8001a22:	60aa      	strmi	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001a24:	6d62      	ldrmi	r2, [r4, #84]	; 0x54
 8001a26:	f042 0204 	orrmi.w	r2, r2, #4
 8001a2a:	6562      	strmi	r2, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001a2c:	2210      	movs	r2, #16
 8001a2e:	409a      	lsls	r2, r3
 8001a30:	4216      	tst	r6, r2
 8001a32:	d010      	beq.n	8001a56 <HAL_DMA_IRQHandler+0x92>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001a34:	6823      	ldr	r3, [r4, #0]
 8001a36:	6819      	ldr	r1, [r3, #0]
 8001a38:	0709      	lsls	r1, r1, #28
 8001a3a:	d50c      	bpl.n	8001a56 <HAL_DMA_IRQHandler+0x92>
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001a3c:	60aa      	str	r2, [r5, #8]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001a3e:	681a      	ldr	r2, [r3, #0]
 8001a40:	0350      	lsls	r0, r2, #13
 8001a42:	d535      	bpl.n	8001ab0 <HAL_DMA_IRQHandler+0xec>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	0319      	lsls	r1, r3, #12
 8001a48:	d401      	bmi.n	8001a4e <HAL_DMA_IRQHandler+0x8a>
        if(hdma->XferHalfCpltCallback != NULL)
 8001a4a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001a4c:	e000      	b.n	8001a50 <HAL_DMA_IRQHandler+0x8c>
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001a4e:	6ca3      	ldr	r3, [r4, #72]	; 0x48
        if(hdma->XferHalfCpltCallback != NULL)
 8001a50:	b10b      	cbz	r3, 8001a56 <HAL_DMA_IRQHandler+0x92>
          hdma->XferHalfCpltCallback(hdma);
 8001a52:	4620      	mov	r0, r4
 8001a54:	4798      	blx	r3
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001a56:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8001a58:	2220      	movs	r2, #32
 8001a5a:	408a      	lsls	r2, r1
 8001a5c:	4216      	tst	r6, r2
 8001a5e:	d038      	beq.n	8001ad2 <HAL_DMA_IRQHandler+0x10e>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001a60:	6823      	ldr	r3, [r4, #0]
 8001a62:	6818      	ldr	r0, [r3, #0]
 8001a64:	06c6      	lsls	r6, r0, #27
 8001a66:	d534      	bpl.n	8001ad2 <HAL_DMA_IRQHandler+0x10e>
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001a68:	60aa      	str	r2, [r5, #8]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001a6a:	f894 2035 	ldrb.w	r2, [r4, #53]	; 0x35
 8001a6e:	2a05      	cmp	r2, #5
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001a70:	681a      	ldr	r2, [r3, #0]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001a72:	d125      	bne.n	8001ac0 <HAL_DMA_IRQHandler+0xfc>
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001a74:	f022 0216 	bic.w	r2, r2, #22
 8001a78:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001a7a:	695a      	ldr	r2, [r3, #20]
 8001a7c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001a80:	615a      	str	r2, [r3, #20]
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001a82:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8001a84:	b90a      	cbnz	r2, 8001a8a <HAL_DMA_IRQHandler+0xc6>
 8001a86:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8001a88:	b11a      	cbz	r2, 8001a92 <HAL_DMA_IRQHandler+0xce>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001a8a:	681a      	ldr	r2, [r3, #0]
 8001a8c:	f022 0208 	bic.w	r2, r2, #8
 8001a90:	601a      	str	r2, [r3, #0]
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001a92:	233f      	movs	r3, #63	; 0x3f
 8001a94:	408b      	lsls	r3, r1
 8001a96:	60ab      	str	r3, [r5, #8]
        __HAL_UNLOCK(hdma);
 8001a98:	2300      	movs	r3, #0
 8001a9a:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        hdma->State = HAL_DMA_STATE_READY;
 8001a9e:	2301      	movs	r3, #1
 8001aa0:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        if(hdma->XferAbortCallback != NULL)
 8001aa4:	6d23      	ldr	r3, [r4, #80]	; 0x50
    if(hdma->XferErrorCallback != NULL)
 8001aa6:	b10b      	cbz	r3, 8001aac <HAL_DMA_IRQHandler+0xe8>
      hdma->XferErrorCallback(hdma);
 8001aa8:	4620      	mov	r0, r4
 8001aaa:	4798      	blx	r3
}
 8001aac:	b003      	add	sp, #12
 8001aae:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001ab0:	681a      	ldr	r2, [r3, #0]
 8001ab2:	05d2      	lsls	r2, r2, #23
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001ab4:	bf5e      	ittt	pl
 8001ab6:	681a      	ldrpl	r2, [r3, #0]
 8001ab8:	f022 0208 	bicpl.w	r2, r2, #8
 8001abc:	601a      	strpl	r2, [r3, #0]
 8001abe:	e7c4      	b.n	8001a4a <HAL_DMA_IRQHandler+0x86>
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001ac0:	0350      	lsls	r0, r2, #13
 8001ac2:	d528      	bpl.n	8001b16 <HAL_DMA_IRQHandler+0x152>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	0319      	lsls	r1, r3, #12
 8001ac8:	d432      	bmi.n	8001b30 <HAL_DMA_IRQHandler+0x16c>
          if(hdma->XferM1CpltCallback != NULL)
 8001aca:	6c63      	ldr	r3, [r4, #68]	; 0x44
        if(hdma->XferCpltCallback != NULL)
 8001acc:	b10b      	cbz	r3, 8001ad2 <HAL_DMA_IRQHandler+0x10e>
          hdma->XferCpltCallback(hdma);
 8001ace:	4620      	mov	r0, r4
 8001ad0:	4798      	blx	r3
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001ad2:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d0e9      	beq.n	8001aac <HAL_DMA_IRQHandler+0xe8>
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001ad8:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8001ada:	07da      	lsls	r2, r3, #31
 8001adc:	d519      	bpl.n	8001b12 <HAL_DMA_IRQHandler+0x14e>
      hdma->State = HAL_DMA_STATE_ABORT;
 8001ade:	2305      	movs	r3, #5
      __HAL_DMA_DISABLE(hdma);
 8001ae0:	6822      	ldr	r2, [r4, #0]
      hdma->State = HAL_DMA_STATE_ABORT;
 8001ae2:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
      __HAL_DMA_DISABLE(hdma);
 8001ae6:	6813      	ldr	r3, [r2, #0]
 8001ae8:	f023 0301 	bic.w	r3, r3, #1
 8001aec:	6013      	str	r3, [r2, #0]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001aee:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 8001af2:	fbb7 f7f3 	udiv	r7, r7, r3
        if (++count > timeout)
 8001af6:	9b01      	ldr	r3, [sp, #4]
 8001af8:	3301      	adds	r3, #1
 8001afa:	429f      	cmp	r7, r3
 8001afc:	9301      	str	r3, [sp, #4]
 8001afe:	d302      	bcc.n	8001b06 <HAL_DMA_IRQHandler+0x142>
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001b00:	6813      	ldr	r3, [r2, #0]
 8001b02:	07db      	lsls	r3, r3, #31
 8001b04:	d4f7      	bmi.n	8001af6 <HAL_DMA_IRQHandler+0x132>
      __HAL_UNLOCK(hdma);
 8001b06:	2300      	movs	r3, #0
 8001b08:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_READY;
 8001b0c:	2301      	movs	r3, #1
 8001b0e:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    if(hdma->XferErrorCallback != NULL)
 8001b12:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8001b14:	e7c7      	b.n	8001aa6 <HAL_DMA_IRQHandler+0xe2>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001b16:	681a      	ldr	r2, [r3, #0]
 8001b18:	f412 7280 	ands.w	r2, r2, #256	; 0x100
 8001b1c:	d108      	bne.n	8001b30 <HAL_DMA_IRQHandler+0x16c>
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001b1e:	6819      	ldr	r1, [r3, #0]
 8001b20:	f021 0110 	bic.w	r1, r1, #16
 8001b24:	6019      	str	r1, [r3, #0]
          hdma->State = HAL_DMA_STATE_READY;
 8001b26:	2301      	movs	r3, #1
          __HAL_UNLOCK(hdma);
 8001b28:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
          hdma->State = HAL_DMA_STATE_READY;
 8001b2c:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        if(hdma->XferCpltCallback != NULL)
 8001b30:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001b32:	e7cb      	b.n	8001acc <HAL_DMA_IRQHandler+0x108>
 8001b34:	20000010 	.word	0x20000010

08001b38 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001b3c:	b085      	sub	sp, #20
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001b3e:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b40:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 8001cf0 <HAL_GPIO_Init+0x1b8>
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001b44:	4a68      	ldr	r2, [pc, #416]	; (8001ce8 <HAL_GPIO_Init+0x1b0>)
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001b46:	f8df 91ac 	ldr.w	r9, [pc, #428]	; 8001cf4 <HAL_GPIO_Init+0x1bc>
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001b4a:	9301      	str	r3, [sp, #4]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001b4c:	2300      	movs	r3, #0
    ioposition = 0x01U << position;
 8001b4e:	f04f 0e01 	mov.w	lr, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001b52:	9c01      	ldr	r4, [sp, #4]
    ioposition = 0x01U << position;
 8001b54:	fa0e fe03 	lsl.w	lr, lr, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001b58:	ea0e 0604 	and.w	r6, lr, r4
    if(iocurrent == ioposition)
 8001b5c:	45b6      	cmp	lr, r6
 8001b5e:	f040 80ae 	bne.w	8001cbe <HAL_GPIO_Init+0x186>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001b62:	684c      	ldr	r4, [r1, #4]
 8001b64:	f024 0710 	bic.w	r7, r4, #16
 8001b68:	2f02      	cmp	r7, #2
 8001b6a:	d116      	bne.n	8001b9a <HAL_GPIO_Init+0x62>
        temp = GPIOx->AFR[position >> 3U];
 8001b6c:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 8001b70:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001b74:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 8001b78:	f8da 5020 	ldr.w	r5, [sl, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001b7c:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8001b80:	f04f 0c0f 	mov.w	ip, #15
 8001b84:	fa0c fc0b 	lsl.w	ip, ip, fp
 8001b88:	ea25 0c0c 	bic.w	ip, r5, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001b8c:	690d      	ldr	r5, [r1, #16]
 8001b8e:	fa05 f50b 	lsl.w	r5, r5, fp
 8001b92:	ea45 050c 	orr.w	r5, r5, ip
        GPIOx->AFR[position >> 3U] = temp;
 8001b96:	f8ca 5020 	str.w	r5, [sl, #32]
 8001b9a:	ea4f 0a43 	mov.w	sl, r3, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001b9e:	2503      	movs	r5, #3
      temp = GPIOx->MODER;
 8001ba0:	f8d0 b000 	ldr.w	fp, [r0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001ba4:	fa05 f50a 	lsl.w	r5, r5, sl
 8001ba8:	43ed      	mvns	r5, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001baa:	f004 0c03 	and.w	ip, r4, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001bae:	ea0b 0b05 	and.w	fp, fp, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001bb2:	fa0c fc0a 	lsl.w	ip, ip, sl
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001bb6:	3f01      	subs	r7, #1
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001bb8:	ea4c 0c0b 	orr.w	ip, ip, fp
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001bbc:	2f01      	cmp	r7, #1
      GPIOx->MODER = temp;
 8001bbe:	f8c0 c000 	str.w	ip, [r0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001bc2:	d811      	bhi.n	8001be8 <HAL_GPIO_Init+0xb0>
        temp = GPIOx->OSPEEDR; 
 8001bc4:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001bc6:	ea07 0b05 	and.w	fp, r7, r5
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001bca:	68cf      	ldr	r7, [r1, #12]
 8001bcc:	fa07 fc0a 	lsl.w	ip, r7, sl
 8001bd0:	ea4c 070b 	orr.w	r7, ip, fp
        GPIOx->OSPEEDR = temp;
 8001bd4:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8001bd6:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001bd8:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001bdc:	f3c4 1700 	ubfx	r7, r4, #4, #1
 8001be0:	409f      	lsls	r7, r3
 8001be2:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 8001be6:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 8001be8:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001bea:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001bec:	688f      	ldr	r7, [r1, #8]
 8001bee:	fa07 f70a 	lsl.w	r7, r7, sl
 8001bf2:	433d      	orrs	r5, r7
      GPIOx->PUPDR = temp;
 8001bf4:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001bf6:	00e5      	lsls	r5, r4, #3
 8001bf8:	d561      	bpl.n	8001cbe <HAL_GPIO_Init+0x186>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001bfa:	f04f 0b00 	mov.w	fp, #0
 8001bfe:	f8cd b00c 	str.w	fp, [sp, #12]
 8001c02:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001c06:	4d39      	ldr	r5, [pc, #228]	; (8001cec <HAL_GPIO_Init+0x1b4>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c08:	f447 4780 	orr.w	r7, r7, #16384	; 0x4000
 8001c0c:	f8c8 7044 	str.w	r7, [r8, #68]	; 0x44
 8001c10:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
 8001c14:	f407 4780 	and.w	r7, r7, #16384	; 0x4000
 8001c18:	9703      	str	r7, [sp, #12]
 8001c1a:	9f03      	ldr	r7, [sp, #12]
 8001c1c:	f023 0703 	bic.w	r7, r3, #3
 8001c20:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 8001c24:	f507 379c 	add.w	r7, r7, #79872	; 0x13800
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001c28:	f003 0c03 	and.w	ip, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 8001c2c:	f8d7 a008 	ldr.w	sl, [r7, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001c30:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8001c34:	f04f 0e0f 	mov.w	lr, #15
 8001c38:	fa0e fe0c 	lsl.w	lr, lr, ip
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001c3c:	42a8      	cmp	r0, r5
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001c3e:	ea2a 0e0e 	bic.w	lr, sl, lr
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001c42:	d043      	beq.n	8001ccc <HAL_GPIO_Init+0x194>
 8001c44:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001c48:	42a8      	cmp	r0, r5
 8001c4a:	d041      	beq.n	8001cd0 <HAL_GPIO_Init+0x198>
 8001c4c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001c50:	42a8      	cmp	r0, r5
 8001c52:	d03f      	beq.n	8001cd4 <HAL_GPIO_Init+0x19c>
 8001c54:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001c58:	42a8      	cmp	r0, r5
 8001c5a:	d03d      	beq.n	8001cd8 <HAL_GPIO_Init+0x1a0>
 8001c5c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001c60:	42a8      	cmp	r0, r5
 8001c62:	d03b      	beq.n	8001cdc <HAL_GPIO_Init+0x1a4>
 8001c64:	4548      	cmp	r0, r9
 8001c66:	d03b      	beq.n	8001ce0 <HAL_GPIO_Init+0x1a8>
 8001c68:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8001c6c:	42a8      	cmp	r0, r5
 8001c6e:	d039      	beq.n	8001ce4 <HAL_GPIO_Init+0x1ac>
 8001c70:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001c74:	42a8      	cmp	r0, r5
 8001c76:	bf14      	ite	ne
 8001c78:	2508      	movne	r5, #8
 8001c7a:	2507      	moveq	r5, #7
 8001c7c:	fa05 f50c 	lsl.w	r5, r5, ip
 8001c80:	ea45 050e 	orr.w	r5, r5, lr
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001c84:	60bd      	str	r5, [r7, #8]
        temp = EXTI->IMR;
 8001c86:	6815      	ldr	r5, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8001c88:	43f7      	mvns	r7, r6
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001c8a:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 8001c8e:	bf0c      	ite	eq
 8001c90:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8001c92:	4335      	orrne	r5, r6
        }
        EXTI->IMR = temp;
 8001c94:	6015      	str	r5, [r2, #0]

        temp = EXTI->EMR;
 8001c96:	6855      	ldr	r5, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001c98:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 8001c9c:	bf0c      	ite	eq
 8001c9e:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8001ca0:	4335      	orrne	r5, r6
        }
        EXTI->EMR = temp;
 8001ca2:	6055      	str	r5, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001ca4:	6895      	ldr	r5, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001ca6:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 8001caa:	bf0c      	ite	eq
 8001cac:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8001cae:	4335      	orrne	r5, r6
        }
        EXTI->RTSR = temp;
 8001cb0:	6095      	str	r5, [r2, #8]

        temp = EXTI->FTSR;
 8001cb2:	68d5      	ldr	r5, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001cb4:	02a4      	lsls	r4, r4, #10
        temp &= ~((uint32_t)iocurrent);
 8001cb6:	bf54      	ite	pl
 8001cb8:	403d      	andpl	r5, r7
        {
          temp |= iocurrent;
 8001cba:	4335      	orrmi	r5, r6
        }
        EXTI->FTSR = temp;
 8001cbc:	60d5      	str	r5, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001cbe:	3301      	adds	r3, #1
 8001cc0:	2b10      	cmp	r3, #16
 8001cc2:	f47f af44 	bne.w	8001b4e <HAL_GPIO_Init+0x16>
      }
    }
  }
}
 8001cc6:	b005      	add	sp, #20
 8001cc8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001ccc:	465d      	mov	r5, fp
 8001cce:	e7d5      	b.n	8001c7c <HAL_GPIO_Init+0x144>
 8001cd0:	2501      	movs	r5, #1
 8001cd2:	e7d3      	b.n	8001c7c <HAL_GPIO_Init+0x144>
 8001cd4:	2502      	movs	r5, #2
 8001cd6:	e7d1      	b.n	8001c7c <HAL_GPIO_Init+0x144>
 8001cd8:	2503      	movs	r5, #3
 8001cda:	e7cf      	b.n	8001c7c <HAL_GPIO_Init+0x144>
 8001cdc:	2504      	movs	r5, #4
 8001cde:	e7cd      	b.n	8001c7c <HAL_GPIO_Init+0x144>
 8001ce0:	2505      	movs	r5, #5
 8001ce2:	e7cb      	b.n	8001c7c <HAL_GPIO_Init+0x144>
 8001ce4:	2506      	movs	r5, #6
 8001ce6:	e7c9      	b.n	8001c7c <HAL_GPIO_Init+0x144>
 8001ce8:	40013c00 	.word	0x40013c00
 8001cec:	40020000 	.word	0x40020000
 8001cf0:	40023800 	.word	0x40023800
 8001cf4:	40021400 	.word	0x40021400

08001cf8 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001cf8:	6903      	ldr	r3, [r0, #16]
 8001cfa:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8001cfc:	bf14      	ite	ne
 8001cfe:	2001      	movne	r0, #1
 8001d00:	2000      	moveq	r0, #0
 8001d02:	4770      	bx	lr

08001d04 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001d04:	b10a      	cbz	r2, 8001d0a <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001d06:	6181      	str	r1, [r0, #24]
 8001d08:	4770      	bx	lr
 8001d0a:	0409      	lsls	r1, r1, #16
 8001d0c:	e7fb      	b.n	8001d06 <HAL_GPIO_WritePin+0x2>
	...

08001d10 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001d10:	b508      	push	{r3, lr}
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001d12:	4b04      	ldr	r3, [pc, #16]	; (8001d24 <HAL_GPIO_EXTI_IRQHandler+0x14>)
 8001d14:	6959      	ldr	r1, [r3, #20]
 8001d16:	4201      	tst	r1, r0
 8001d18:	d002      	beq.n	8001d20 <HAL_GPIO_EXTI_IRQHandler+0x10>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001d1a:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001d1c:	f005 f8f8 	bl	8006f10 <HAL_GPIO_EXTI_Callback>
 8001d20:	bd08      	pop	{r3, pc}
 8001d22:	bf00      	nop
 8001d24:	40013c00 	.word	0x40013c00

08001d28 <I2C_IsAcknowledgeFailed>:
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001d28:	6802      	ldr	r2, [r0, #0]
 8001d2a:	6953      	ldr	r3, [r2, #20]
 8001d2c:	f413 6380 	ands.w	r3, r3, #1024	; 0x400
 8001d30:	d00d      	beq.n	8001d4e <I2C_IsAcknowledgeFailed+0x26>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001d32:	f46f 6380 	mvn.w	r3, #1024	; 0x400
 8001d36:	6153      	str	r3, [r2, #20]

    hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8001d38:	2304      	movs	r3, #4
 8001d3a:	6403      	str	r3, [r0, #64]	; 0x40
    hi2c->PreviousState = I2C_STATE_NONE;
    hi2c->State= HAL_I2C_STATE_READY;
 8001d3c:	2220      	movs	r2, #32
    hi2c->PreviousState = I2C_STATE_NONE;
 8001d3e:	2300      	movs	r3, #0
 8001d40:	6303      	str	r3, [r0, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001d42:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    hi2c->State= HAL_I2C_STATE_READY;
 8001d46:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d

    return HAL_ERROR;
 8001d4a:	2001      	movs	r0, #1
 8001d4c:	4770      	bx	lr
  }
  return HAL_OK;
 8001d4e:	4618      	mov	r0, r3
}
 8001d50:	4770      	bx	lr

08001d52 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
{
 8001d52:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001d56:	4604      	mov	r4, r0
 8001d58:	4617      	mov	r7, r2
 8001d5a:	4699      	mov	r9, r3
  while(__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001d5c:	f3c1 4807 	ubfx	r8, r1, #16, #8
 8001d60:	b28e      	uxth	r6, r1
 8001d62:	6825      	ldr	r5, [r4, #0]
 8001d64:	f1b8 0f01 	cmp.w	r8, #1
 8001d68:	bf0c      	ite	eq
 8001d6a:	696b      	ldreq	r3, [r5, #20]
 8001d6c:	69ab      	ldrne	r3, [r5, #24]
 8001d6e:	ea36 0303 	bics.w	r3, r6, r3
 8001d72:	bf14      	ite	ne
 8001d74:	2001      	movne	r0, #1
 8001d76:	2000      	moveq	r0, #0
 8001d78:	b908      	cbnz	r0, 8001d7e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x2c>
}
 8001d7a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001d7e:	696b      	ldr	r3, [r5, #20]
 8001d80:	055a      	lsls	r2, r3, #21
 8001d82:	d512      	bpl.n	8001daa <I2C_WaitOnMasterAddressFlagUntilTimeout+0x58>
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8001d84:	682b      	ldr	r3, [r5, #0]
 8001d86:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001d8a:	602b      	str	r3, [r5, #0]
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001d8c:	f46f 6380 	mvn.w	r3, #1024	; 0x400
 8001d90:	616b      	str	r3, [r5, #20]
      hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8001d92:	2304      	movs	r3, #4
 8001d94:	6423      	str	r3, [r4, #64]	; 0x40
      hi2c->State= HAL_I2C_STATE_READY;
 8001d96:	2220      	movs	r2, #32
      hi2c->PreviousState = I2C_STATE_NONE;
 8001d98:	2300      	movs	r3, #0
 8001d9a:	6323      	str	r3, [r4, #48]	; 0x30
      __HAL_UNLOCK(hi2c);
 8001d9c:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
      hi2c->State= HAL_I2C_STATE_READY;
 8001da0:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      return HAL_ERROR;
 8001da4:	2001      	movs	r0, #1
 8001da6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if(Timeout != HAL_MAX_DELAY)
 8001daa:	1c7b      	adds	r3, r7, #1
 8001dac:	d0d9      	beq.n	8001d62 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8001dae:	b94f      	cbnz	r7, 8001dc4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x72>
        hi2c->PreviousState = I2C_STATE_NONE;
 8001db0:	2300      	movs	r3, #0
        hi2c->State= HAL_I2C_STATE_READY;
 8001db2:	2220      	movs	r2, #32
        hi2c->PreviousState = I2C_STATE_NONE;
 8001db4:	6323      	str	r3, [r4, #48]	; 0x30
        __HAL_UNLOCK(hi2c);
 8001db6:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        hi2c->State= HAL_I2C_STATE_READY;
 8001dba:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        return HAL_TIMEOUT;
 8001dbe:	2003      	movs	r0, #3
 8001dc0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8001dc4:	f7ff f92e 	bl	8001024 <HAL_GetTick>
 8001dc8:	eba0 0009 	sub.w	r0, r0, r9
 8001dcc:	4287      	cmp	r7, r0
 8001dce:	d2c8      	bcs.n	8001d62 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
 8001dd0:	e7ee      	b.n	8001db0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x5e>

08001dd2 <I2C_WaitOnFlagUntilTimeout>:
{
 8001dd2:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001dd6:	9e08      	ldr	r6, [sp, #32]
 8001dd8:	4604      	mov	r4, r0
 8001dda:	4690      	mov	r8, r2
 8001ddc:	461f      	mov	r7, r3
  while((__HAL_I2C_GET_FLAG(hi2c, Flag) ? SET : RESET) == Status) 
 8001dde:	f3c1 4907 	ubfx	r9, r1, #16, #8
 8001de2:	b28d      	uxth	r5, r1
 8001de4:	6823      	ldr	r3, [r4, #0]
 8001de6:	f1b9 0f01 	cmp.w	r9, #1
 8001dea:	bf0c      	ite	eq
 8001dec:	695b      	ldreq	r3, [r3, #20]
 8001dee:	699b      	ldrne	r3, [r3, #24]
 8001df0:	ea35 0303 	bics.w	r3, r5, r3
 8001df4:	bf0c      	ite	eq
 8001df6:	2301      	moveq	r3, #1
 8001df8:	2300      	movne	r3, #0
 8001dfa:	4543      	cmp	r3, r8
 8001dfc:	d002      	beq.n	8001e04 <I2C_WaitOnFlagUntilTimeout+0x32>
  return HAL_OK;
 8001dfe:	2000      	movs	r0, #0
}
 8001e00:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if(Timeout != HAL_MAX_DELAY)
 8001e04:	1c7b      	adds	r3, r7, #1
 8001e06:	d0ed      	beq.n	8001de4 <I2C_WaitOnFlagUntilTimeout+0x12>
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8001e08:	b95f      	cbnz	r7, 8001e22 <I2C_WaitOnFlagUntilTimeout+0x50>
        hi2c->PreviousState = I2C_STATE_NONE;
 8001e0a:	2300      	movs	r3, #0
        hi2c->State= HAL_I2C_STATE_READY;
 8001e0c:	2220      	movs	r2, #32
        hi2c->PreviousState = I2C_STATE_NONE;
 8001e0e:	6323      	str	r3, [r4, #48]	; 0x30
        __HAL_UNLOCK(hi2c);
 8001e10:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        hi2c->State= HAL_I2C_STATE_READY;
 8001e14:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        __HAL_UNLOCK(hi2c);
 8001e18:	2003      	movs	r0, #3
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e1a:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8001e1e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8001e22:	f7ff f8ff 	bl	8001024 <HAL_GetTick>
 8001e26:	1b80      	subs	r0, r0, r6
 8001e28:	4287      	cmp	r7, r0
 8001e2a:	d2db      	bcs.n	8001de4 <I2C_WaitOnFlagUntilTimeout+0x12>
 8001e2c:	e7ed      	b.n	8001e0a <I2C_WaitOnFlagUntilTimeout+0x38>

08001e2e <I2C_WaitOnTXEFlagUntilTimeout>:
{    
 8001e2e:	b570      	push	{r4, r5, r6, lr}
 8001e30:	4604      	mov	r4, r0
 8001e32:	460d      	mov	r5, r1
 8001e34:	4616      	mov	r6, r2
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001e36:	6823      	ldr	r3, [r4, #0]
 8001e38:	695b      	ldr	r3, [r3, #20]
 8001e3a:	061b      	lsls	r3, r3, #24
 8001e3c:	d501      	bpl.n	8001e42 <I2C_WaitOnTXEFlagUntilTimeout+0x14>
  return HAL_OK;      
 8001e3e:	2000      	movs	r0, #0
 8001e40:	bd70      	pop	{r4, r5, r6, pc}
    if(I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001e42:	4620      	mov	r0, r4
 8001e44:	f7ff ff70 	bl	8001d28 <I2C_IsAcknowledgeFailed>
 8001e48:	b9a8      	cbnz	r0, 8001e76 <I2C_WaitOnTXEFlagUntilTimeout+0x48>
    if(Timeout != HAL_MAX_DELAY)
 8001e4a:	1c6a      	adds	r2, r5, #1
 8001e4c:	d0f3      	beq.n	8001e36 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8001e4e:	b965      	cbnz	r5, 8001e6a <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001e50:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001e52:	f043 0320 	orr.w	r3, r3, #32
 8001e56:	6423      	str	r3, [r4, #64]	; 0x40
        hi2c->State= HAL_I2C_STATE_READY;
 8001e58:	2220      	movs	r2, #32
        hi2c->PreviousState = I2C_STATE_NONE;
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	6323      	str	r3, [r4, #48]	; 0x30
        __HAL_UNLOCK(hi2c);
 8001e5e:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        hi2c->State= HAL_I2C_STATE_READY;
 8001e62:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        __HAL_UNLOCK(hi2c);
 8001e66:	2003      	movs	r0, #3
 8001e68:	bd70      	pop	{r4, r5, r6, pc}
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8001e6a:	f7ff f8db 	bl	8001024 <HAL_GetTick>
 8001e6e:	1b80      	subs	r0, r0, r6
 8001e70:	4285      	cmp	r5, r0
 8001e72:	d2e0      	bcs.n	8001e36 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
 8001e74:	e7ec      	b.n	8001e50 <I2C_WaitOnTXEFlagUntilTimeout+0x22>
      return HAL_ERROR;
 8001e76:	2001      	movs	r0, #1
}
 8001e78:	bd70      	pop	{r4, r5, r6, pc}

08001e7a <I2C_WaitOnBTFFlagUntilTimeout>:
{  
 8001e7a:	b570      	push	{r4, r5, r6, lr}
 8001e7c:	4604      	mov	r4, r0
 8001e7e:	460d      	mov	r5, r1
 8001e80:	4616      	mov	r6, r2
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001e82:	6823      	ldr	r3, [r4, #0]
 8001e84:	695b      	ldr	r3, [r3, #20]
 8001e86:	075b      	lsls	r3, r3, #29
 8001e88:	d501      	bpl.n	8001e8e <I2C_WaitOnBTFFlagUntilTimeout+0x14>
  return HAL_OK;
 8001e8a:	2000      	movs	r0, #0
 8001e8c:	bd70      	pop	{r4, r5, r6, pc}
    if(I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001e8e:	4620      	mov	r0, r4
 8001e90:	f7ff ff4a 	bl	8001d28 <I2C_IsAcknowledgeFailed>
 8001e94:	b9a8      	cbnz	r0, 8001ec2 <I2C_WaitOnBTFFlagUntilTimeout+0x48>
    if(Timeout != HAL_MAX_DELAY)
 8001e96:	1c6a      	adds	r2, r5, #1
 8001e98:	d0f3      	beq.n	8001e82 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8001e9a:	b965      	cbnz	r5, 8001eb6 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001e9c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001e9e:	f043 0320 	orr.w	r3, r3, #32
 8001ea2:	6423      	str	r3, [r4, #64]	; 0x40
        hi2c->State= HAL_I2C_STATE_READY;
 8001ea4:	2220      	movs	r2, #32
        hi2c->PreviousState = I2C_STATE_NONE;
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	6323      	str	r3, [r4, #48]	; 0x30
        __HAL_UNLOCK(hi2c);
 8001eaa:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        hi2c->State= HAL_I2C_STATE_READY;
 8001eae:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        __HAL_UNLOCK(hi2c);
 8001eb2:	2003      	movs	r0, #3
 8001eb4:	bd70      	pop	{r4, r5, r6, pc}
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8001eb6:	f7ff f8b5 	bl	8001024 <HAL_GetTick>
 8001eba:	1b80      	subs	r0, r0, r6
 8001ebc:	4285      	cmp	r5, r0
 8001ebe:	d2e0      	bcs.n	8001e82 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
 8001ec0:	e7ec      	b.n	8001e9c <I2C_WaitOnBTFFlagUntilTimeout+0x22>
      return HAL_ERROR;
 8001ec2:	2001      	movs	r0, #1
}
 8001ec4:	bd70      	pop	{r4, r5, r6, pc}
	...

08001ec8 <HAL_I2C_Init>:
{
 8001ec8:	b570      	push	{r4, r5, r6, lr}
  if(hi2c == NULL)
 8001eca:	4604      	mov	r4, r0
 8001ecc:	2800      	cmp	r0, #0
 8001ece:	d062      	beq.n	8001f96 <HAL_I2C_Init+0xce>
  if(hi2c->State == HAL_I2C_STATE_RESET)
 8001ed0:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8001ed4:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001ed8:	b91b      	cbnz	r3, 8001ee2 <HAL_I2C_Init+0x1a>
    hi2c->Lock = HAL_UNLOCKED;
 8001eda:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_I2C_MspInit(hi2c);
 8001ede:	f003 fca5 	bl	800582c <HAL_I2C_MspInit>
  __HAL_I2C_DISABLE(hi2c);
 8001ee2:	6822      	ldr	r2, [r4, #0]
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 8001ee4:	4e2d      	ldr	r6, [pc, #180]	; (8001f9c <HAL_I2C_Init+0xd4>)
  freqrange = I2C_FREQRANGE(pclk1);
 8001ee6:	4d2e      	ldr	r5, [pc, #184]	; (8001fa0 <HAL_I2C_Init+0xd8>)
  hi2c->State = HAL_I2C_STATE_BUSY;
 8001ee8:	2324      	movs	r3, #36	; 0x24
 8001eea:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_I2C_DISABLE(hi2c);
 8001eee:	6813      	ldr	r3, [r2, #0]
 8001ef0:	f023 0301 	bic.w	r3, r3, #1
 8001ef4:	6013      	str	r3, [r2, #0]
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001ef6:	f000 fb7b 	bl	80025f0 <HAL_RCC_GetPCLK1Freq>
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 8001efa:	6863      	ldr	r3, [r4, #4]
  hi2c->Instance->CR2 = freqrange;
 8001efc:	6822      	ldr	r2, [r4, #0]
  freqrange = I2C_FREQRANGE(pclk1);
 8001efe:	fbb0 f5f5 	udiv	r5, r0, r5
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 8001f02:	42b3      	cmp	r3, r6
 8001f04:	bf84      	itt	hi
 8001f06:	f44f 7196 	movhi.w	r1, #300	; 0x12c
 8001f0a:	4369      	mulhi	r1, r5
  hi2c->Instance->CR2 = freqrange;
 8001f0c:	6055      	str	r5, [r2, #4]
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 8001f0e:	bf91      	iteee	ls
 8001f10:	1c69      	addls	r1, r5, #1
 8001f12:	f44f 757a 	movhi.w	r5, #1000	; 0x3e8
 8001f16:	fbb1 f1f5 	udivhi	r1, r1, r5
 8001f1a:	3101      	addhi	r1, #1
  hi2c->Instance->CCR = I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle);
 8001f1c:	42b3      	cmp	r3, r6
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 8001f1e:	6211      	str	r1, [r2, #32]
  hi2c->Instance->CCR = I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle);
 8001f20:	d821      	bhi.n	8001f66 <HAL_I2C_Init+0x9e>
 8001f22:	005b      	lsls	r3, r3, #1
 8001f24:	fbb0 f0f3 	udiv	r0, r0, r3
 8001f28:	f3c0 030b 	ubfx	r3, r0, #0, #12
 8001f2c:	2b03      	cmp	r3, #3
 8001f2e:	bf98      	it	ls
 8001f30:	2004      	movls	r0, #4
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001f32:	6a21      	ldr	r1, [r4, #32]
 8001f34:	69e3      	ldr	r3, [r4, #28]
  hi2c->Instance->CCR = I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle);
 8001f36:	61d0      	str	r0, [r2, #28]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001f38:	430b      	orrs	r3, r1
 8001f3a:	6013      	str	r3, [r2, #0]
  hi2c->Instance->OAR1 = (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1);
 8001f3c:	68e1      	ldr	r1, [r4, #12]
 8001f3e:	6923      	ldr	r3, [r4, #16]
 8001f40:	430b      	orrs	r3, r1
 8001f42:	6093      	str	r3, [r2, #8]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2);
 8001f44:	69a1      	ldr	r1, [r4, #24]
 8001f46:	6963      	ldr	r3, [r4, #20]
 8001f48:	430b      	orrs	r3, r1
 8001f4a:	60d3      	str	r3, [r2, #12]
  __HAL_I2C_ENABLE(hi2c);
 8001f4c:	6813      	ldr	r3, [r2, #0]
 8001f4e:	f043 0301 	orr.w	r3, r3, #1
 8001f52:	6013      	str	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001f54:	2000      	movs	r0, #0
  hi2c->State = HAL_I2C_STATE_READY;
 8001f56:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001f58:	6420      	str	r0, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001f5a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001f5e:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f60:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
  return HAL_OK;
 8001f64:	bd70      	pop	{r4, r5, r6, pc}
  hi2c->Instance->CCR = I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle);
 8001f66:	68a1      	ldr	r1, [r4, #8]
 8001f68:	b949      	cbnz	r1, 8001f7e <HAL_I2C_Init+0xb6>
 8001f6a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8001f6e:	fbb0 f0f3 	udiv	r0, r0, r3
 8001f72:	f3c0 030b 	ubfx	r3, r0, #0, #12
 8001f76:	b163      	cbz	r3, 8001f92 <HAL_I2C_Init+0xca>
 8001f78:	f440 4000 	orr.w	r0, r0, #32768	; 0x8000
 8001f7c:	e7d9      	b.n	8001f32 <HAL_I2C_Init+0x6a>
 8001f7e:	2119      	movs	r1, #25
 8001f80:	434b      	muls	r3, r1
 8001f82:	fbb0 f0f3 	udiv	r0, r0, r3
 8001f86:	f3c0 030b 	ubfx	r3, r0, #0, #12
 8001f8a:	b113      	cbz	r3, 8001f92 <HAL_I2C_Init+0xca>
 8001f8c:	f440 4040 	orr.w	r0, r0, #49152	; 0xc000
 8001f90:	e7cf      	b.n	8001f32 <HAL_I2C_Init+0x6a>
 8001f92:	2001      	movs	r0, #1
 8001f94:	e7cd      	b.n	8001f32 <HAL_I2C_Init+0x6a>
    return HAL_ERROR;
 8001f96:	2001      	movs	r0, #1
}
 8001f98:	bd70      	pop	{r4, r5, r6, pc}
 8001f9a:	bf00      	nop
 8001f9c:	000186a0 	.word	0x000186a0
 8001fa0:	000f4240 	.word	0x000f4240

08001fa4 <HAL_I2C_Master_Transmit>:
{
 8001fa4:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8001fa8:	4604      	mov	r4, r0
 8001faa:	461f      	mov	r7, r3
 8001fac:	460d      	mov	r5, r1
 8001fae:	4690      	mov	r8, r2
  tickstart = HAL_GetTick();
 8001fb0:	f7ff f838 	bl	8001024 <HAL_GetTick>
  if(hi2c->State == HAL_I2C_STATE_READY)
 8001fb4:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 8001fb8:	2b20      	cmp	r3, #32
  tickstart = HAL_GetTick();
 8001fba:	4606      	mov	r6, r0
  if(hi2c->State == HAL_I2C_STATE_READY)
 8001fbc:	d004      	beq.n	8001fc8 <HAL_I2C_Master_Transmit+0x24>
    return HAL_BUSY;
 8001fbe:	2502      	movs	r5, #2
}
 8001fc0:	4628      	mov	r0, r5
 8001fc2:	b004      	add	sp, #16
 8001fc4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001fc8:	9000      	str	r0, [sp, #0]
 8001fca:	2319      	movs	r3, #25
 8001fcc:	2201      	movs	r2, #1
 8001fce:	495d      	ldr	r1, [pc, #372]	; (8002144 <HAL_I2C_Master_Transmit+0x1a0>)
 8001fd0:	4620      	mov	r0, r4
 8001fd2:	f7ff fefe 	bl	8001dd2 <I2C_WaitOnFlagUntilTimeout>
 8001fd6:	2800      	cmp	r0, #0
 8001fd8:	d1f1      	bne.n	8001fbe <HAL_I2C_Master_Transmit+0x1a>
    __HAL_LOCK(hi2c);
 8001fda:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8001fde:	2b01      	cmp	r3, #1
 8001fe0:	d0ed      	beq.n	8001fbe <HAL_I2C_Master_Transmit+0x1a>
 8001fe2:	2301      	movs	r3, #1
 8001fe4:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001fe8:	6823      	ldr	r3, [r4, #0]
 8001fea:	681a      	ldr	r2, [r3, #0]
 8001fec:	07d2      	lsls	r2, r2, #31
      __HAL_I2C_ENABLE(hi2c);
 8001fee:	bf5e      	ittt	pl
 8001ff0:	681a      	ldrpl	r2, [r3, #0]
 8001ff2:	f042 0201 	orrpl.w	r2, r2, #1
 8001ff6:	601a      	strpl	r2, [r3, #0]
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8001ff8:	681a      	ldr	r2, [r3, #0]
 8001ffa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001ffe:	601a      	str	r2, [r3, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002000:	2221      	movs	r2, #33	; 0x21
 8002002:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002006:	2210      	movs	r2, #16
 8002008:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800200c:	2200      	movs	r2, #0
 800200e:	6422      	str	r2, [r4, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002010:	f5a2 3280 	sub.w	r2, r2, #65536	; 0x10000
    hi2c->XferCount   = Size;
 8002014:	8567      	strh	r7, [r4, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002016:	62e2      	str	r2, [r4, #44]	; 0x2c
    hi2c->XferSize    = hi2c->XferCount;
 8002018:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 800201a:	8522      	strh	r2, [r4, #40]	; 0x28
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800201c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    hi2c->pBuffPtr    = pData;
 800201e:	f8c4 8024 	str.w	r8, [r4, #36]	; 0x24
  if((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002022:	2a04      	cmp	r2, #4
 8002024:	d004      	beq.n	8002030 <HAL_I2C_Master_Transmit+0x8c>
 8002026:	2a01      	cmp	r2, #1
 8002028:	d002      	beq.n	8002030 <HAL_I2C_Master_Transmit+0x8c>
 800202a:	f512 3f80 	cmn.w	r2, #65536	; 0x10000
 800202e:	d104      	bne.n	800203a <HAL_I2C_Master_Transmit+0x96>
    hi2c->Instance->CR1 |= I2C_CR1_START;
 8002030:	681a      	ldr	r2, [r3, #0]
 8002032:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002036:	601a      	str	r2, [r3, #0]
 8002038:	e002      	b.n	8002040 <HAL_I2C_Master_Transmit+0x9c>
  else if(hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800203a:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800203c:	2a12      	cmp	r2, #18
 800203e:	d0f7      	beq.n	8002030 <HAL_I2C_Master_Transmit+0x8c>
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002040:	9600      	str	r6, [sp, #0]
 8002042:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002044:	2200      	movs	r2, #0
 8002046:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800204a:	4620      	mov	r0, r4
 800204c:	f7ff fec1 	bl	8001dd2 <I2C_WaitOnFlagUntilTimeout>
 8002050:	bb28      	cbnz	r0, 800209e <HAL_I2C_Master_Transmit+0xfa>
  if(hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002052:	6923      	ldr	r3, [r4, #16]
 8002054:	6822      	ldr	r2, [r4, #0]
 8002056:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800205a:	d112      	bne.n	8002082 <HAL_I2C_Master_Transmit+0xde>
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800205c:	f005 05fe 	and.w	r5, r5, #254	; 0xfe
 8002060:	6115      	str	r5, [r2, #16]
  if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002062:	4633      	mov	r3, r6
 8002064:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8002066:	4938      	ldr	r1, [pc, #224]	; (8002148 <HAL_I2C_Master_Transmit+0x1a4>)
 8002068:	4620      	mov	r0, r4
 800206a:	f7ff fe72 	bl	8001d52 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800206e:	4605      	mov	r5, r0
 8002070:	b9a0      	cbnz	r0, 800209c <HAL_I2C_Master_Transmit+0xf8>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002072:	6823      	ldr	r3, [r4, #0]
 8002074:	9003      	str	r0, [sp, #12]
 8002076:	695a      	ldr	r2, [r3, #20]
 8002078:	9203      	str	r2, [sp, #12]
 800207a:	699b      	ldr	r3, [r3, #24]
 800207c:	9303      	str	r3, [sp, #12]
 800207e:	9b03      	ldr	r3, [sp, #12]
    while(hi2c->XferSize > 0U)
 8002080:	e050      	b.n	8002124 <HAL_I2C_Master_Transmit+0x180>
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002082:	11eb      	asrs	r3, r5, #7
 8002084:	f003 0306 	and.w	r3, r3, #6
 8002088:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
 800208c:	6113      	str	r3, [r2, #16]
    if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800208e:	492f      	ldr	r1, [pc, #188]	; (800214c <HAL_I2C_Master_Transmit+0x1a8>)
 8002090:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8002092:	4633      	mov	r3, r6
 8002094:	4620      	mov	r0, r4
 8002096:	f7ff fe5c 	bl	8001d52 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800209a:	b148      	cbz	r0, 80020b0 <HAL_I2C_Master_Transmit+0x10c>
    if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800209c:	6c23      	ldr	r3, [r4, #64]	; 0x40
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800209e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80020a0:	2b04      	cmp	r3, #4
 80020a2:	f04f 0300 	mov.w	r3, #0
 80020a6:	d107      	bne.n	80020b8 <HAL_I2C_Master_Transmit+0x114>
        __HAL_UNLOCK(hi2c);
 80020a8:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
          return HAL_ERROR;
 80020ac:	2501      	movs	r5, #1
 80020ae:	e787      	b.n	8001fc0 <HAL_I2C_Master_Transmit+0x1c>
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80020b0:	6823      	ldr	r3, [r4, #0]
 80020b2:	b2ed      	uxtb	r5, r5
 80020b4:	611d      	str	r5, [r3, #16]
 80020b6:	e7d4      	b.n	8002062 <HAL_I2C_Master_Transmit+0xbe>
        __HAL_UNLOCK(hi2c);
 80020b8:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
          return HAL_TIMEOUT;
 80020bc:	2503      	movs	r5, #3
 80020be:	e77f      	b.n	8001fc0 <HAL_I2C_Master_Transmit+0x1c>
      if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80020c0:	4632      	mov	r2, r6
 80020c2:	990a      	ldr	r1, [sp, #40]	; 0x28
 80020c4:	4620      	mov	r0, r4
 80020c6:	f7ff feb2 	bl	8001e2e <I2C_WaitOnTXEFlagUntilTimeout>
 80020ca:	b140      	cbz	r0, 80020de <HAL_I2C_Master_Transmit+0x13a>
        if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80020cc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80020ce:	2b04      	cmp	r3, #4
 80020d0:	d1f4      	bne.n	80020bc <HAL_I2C_Master_Transmit+0x118>
          hi2c->Instance->CR1 |= I2C_CR1_STOP;
 80020d2:	6822      	ldr	r2, [r4, #0]
 80020d4:	6813      	ldr	r3, [r2, #0]
 80020d6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80020da:	6013      	str	r3, [r2, #0]
 80020dc:	e7e6      	b.n	80020ac <HAL_I2C_Master_Transmit+0x108>
      hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 80020de:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80020e0:	6820      	ldr	r0, [r4, #0]
      hi2c->XferSize--;
 80020e2:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 80020e4:	1c4b      	adds	r3, r1, #1
 80020e6:	6263      	str	r3, [r4, #36]	; 0x24
 80020e8:	780b      	ldrb	r3, [r1, #0]
 80020ea:	6103      	str	r3, [r0, #16]
      hi2c->XferCount--;
 80020ec:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80020ee:	3b01      	subs	r3, #1
 80020f0:	b29b      	uxth	r3, r3
 80020f2:	8563      	strh	r3, [r4, #42]	; 0x2a
      if((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80020f4:	6947      	ldr	r7, [r0, #20]
      hi2c->XferSize--;
 80020f6:	1e53      	subs	r3, r2, #1
 80020f8:	b29b      	uxth	r3, r3
      if((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80020fa:	077f      	lsls	r7, r7, #29
      hi2c->XferSize--;
 80020fc:	8523      	strh	r3, [r4, #40]	; 0x28
      if((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80020fe:	d50a      	bpl.n	8002116 <HAL_I2C_Master_Transmit+0x172>
 8002100:	b14b      	cbz	r3, 8002116 <HAL_I2C_Master_Transmit+0x172>
        hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 8002102:	1c8b      	adds	r3, r1, #2
 8002104:	6263      	str	r3, [r4, #36]	; 0x24
 8002106:	784b      	ldrb	r3, [r1, #1]
 8002108:	6103      	str	r3, [r0, #16]
        hi2c->XferCount--;
 800210a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800210c:	3b01      	subs	r3, #1
 800210e:	b29b      	uxth	r3, r3
        hi2c->XferSize--;
 8002110:	3a02      	subs	r2, #2
        hi2c->XferCount--;
 8002112:	8563      	strh	r3, [r4, #42]	; 0x2a
        hi2c->XferSize--;
 8002114:	8522      	strh	r2, [r4, #40]	; 0x28
      if(I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002116:	4632      	mov	r2, r6
 8002118:	990a      	ldr	r1, [sp, #40]	; 0x28
 800211a:	4620      	mov	r0, r4
 800211c:	f7ff fead 	bl	8001e7a <I2C_WaitOnBTFFlagUntilTimeout>
 8002120:	2800      	cmp	r0, #0
 8002122:	d1d3      	bne.n	80020cc <HAL_I2C_Master_Transmit+0x128>
    while(hi2c->XferSize > 0U)
 8002124:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8002126:	2b00      	cmp	r3, #0
 8002128:	d1ca      	bne.n	80020c0 <HAL_I2C_Master_Transmit+0x11c>
    hi2c->Instance->CR1 |= I2C_CR1_STOP;
 800212a:	6821      	ldr	r1, [r4, #0]
 800212c:	680a      	ldr	r2, [r1, #0]
 800212e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002132:	600a      	str	r2, [r1, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8002134:	2220      	movs	r2, #32
 8002136:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    __HAL_UNLOCK(hi2c);
 800213a:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800213e:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    return HAL_OK;
 8002142:	e73d      	b.n	8001fc0 <HAL_I2C_Master_Transmit+0x1c>
 8002144:	00100002 	.word	0x00100002
 8002148:	00010002 	.word	0x00010002
 800214c:	00010008 	.word	0x00010008

08002150 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002150:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002154:	4604      	mov	r4, r0
 8002156:	b918      	cbnz	r0, 8002160 <HAL_RCC_OscConfig+0x10>
  {
    return HAL_ERROR;
 8002158:	2001      	movs	r0, #1
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
}
 800215a:	b002      	add	sp, #8
 800215c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002160:	6803      	ldr	r3, [r0, #0]
 8002162:	07dd      	lsls	r5, r3, #31
 8002164:	d410      	bmi.n	8002188 <HAL_RCC_OscConfig+0x38>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002166:	6823      	ldr	r3, [r4, #0]
 8002168:	0798      	lsls	r0, r3, #30
 800216a:	d458      	bmi.n	800221e <HAL_RCC_OscConfig+0xce>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800216c:	6823      	ldr	r3, [r4, #0]
 800216e:	071a      	lsls	r2, r3, #28
 8002170:	f100 809a 	bmi.w	80022a8 <HAL_RCC_OscConfig+0x158>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002174:	6823      	ldr	r3, [r4, #0]
 8002176:	075b      	lsls	r3, r3, #29
 8002178:	f100 80b8 	bmi.w	80022ec <HAL_RCC_OscConfig+0x19c>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800217c:	69a2      	ldr	r2, [r4, #24]
 800217e:	2a00      	cmp	r2, #0
 8002180:	f040 8119 	bne.w	80023b6 <HAL_RCC_OscConfig+0x266>
  return HAL_OK;
 8002184:	2000      	movs	r0, #0
 8002186:	e7e8      	b.n	800215a <HAL_RCC_OscConfig+0xa>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002188:	4ba6      	ldr	r3, [pc, #664]	; (8002424 <HAL_RCC_OscConfig+0x2d4>)
 800218a:	689a      	ldr	r2, [r3, #8]
 800218c:	f002 020c 	and.w	r2, r2, #12
 8002190:	2a04      	cmp	r2, #4
 8002192:	d007      	beq.n	80021a4 <HAL_RCC_OscConfig+0x54>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002194:	689a      	ldr	r2, [r3, #8]
 8002196:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800219a:	2a08      	cmp	r2, #8
 800219c:	d10a      	bne.n	80021b4 <HAL_RCC_OscConfig+0x64>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800219e:	685b      	ldr	r3, [r3, #4]
 80021a0:	0259      	lsls	r1, r3, #9
 80021a2:	d507      	bpl.n	80021b4 <HAL_RCC_OscConfig+0x64>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021a4:	4b9f      	ldr	r3, [pc, #636]	; (8002424 <HAL_RCC_OscConfig+0x2d4>)
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	039a      	lsls	r2, r3, #14
 80021aa:	d5dc      	bpl.n	8002166 <HAL_RCC_OscConfig+0x16>
 80021ac:	6863      	ldr	r3, [r4, #4]
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d1d9      	bne.n	8002166 <HAL_RCC_OscConfig+0x16>
 80021b2:	e7d1      	b.n	8002158 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80021b4:	6863      	ldr	r3, [r4, #4]
 80021b6:	4d9b      	ldr	r5, [pc, #620]	; (8002424 <HAL_RCC_OscConfig+0x2d4>)
 80021b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80021bc:	d111      	bne.n	80021e2 <HAL_RCC_OscConfig+0x92>
 80021be:	682b      	ldr	r3, [r5, #0]
 80021c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021c4:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80021c6:	f7fe ff2d 	bl	8001024 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021ca:	4d96      	ldr	r5, [pc, #600]	; (8002424 <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 80021cc:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021ce:	682b      	ldr	r3, [r5, #0]
 80021d0:	039b      	lsls	r3, r3, #14
 80021d2:	d4c8      	bmi.n	8002166 <HAL_RCC_OscConfig+0x16>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80021d4:	f7fe ff26 	bl	8001024 <HAL_GetTick>
 80021d8:	1b80      	subs	r0, r0, r6
 80021da:	2864      	cmp	r0, #100	; 0x64
 80021dc:	d9f7      	bls.n	80021ce <HAL_RCC_OscConfig+0x7e>
            return HAL_TIMEOUT;
 80021de:	2003      	movs	r0, #3
 80021e0:	e7bb      	b.n	800215a <HAL_RCC_OscConfig+0xa>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80021e2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80021e6:	d104      	bne.n	80021f2 <HAL_RCC_OscConfig+0xa2>
 80021e8:	682b      	ldr	r3, [r5, #0]
 80021ea:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80021ee:	602b      	str	r3, [r5, #0]
 80021f0:	e7e5      	b.n	80021be <HAL_RCC_OscConfig+0x6e>
 80021f2:	682a      	ldr	r2, [r5, #0]
 80021f4:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80021f8:	602a      	str	r2, [r5, #0]
 80021fa:	682a      	ldr	r2, [r5, #0]
 80021fc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002200:	602a      	str	r2, [r5, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002202:	2b00      	cmp	r3, #0
 8002204:	d1df      	bne.n	80021c6 <HAL_RCC_OscConfig+0x76>
        tickstart = HAL_GetTick();
 8002206:	f7fe ff0d 	bl	8001024 <HAL_GetTick>
 800220a:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800220c:	682b      	ldr	r3, [r5, #0]
 800220e:	039f      	lsls	r7, r3, #14
 8002210:	d5a9      	bpl.n	8002166 <HAL_RCC_OscConfig+0x16>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002212:	f7fe ff07 	bl	8001024 <HAL_GetTick>
 8002216:	1b80      	subs	r0, r0, r6
 8002218:	2864      	cmp	r0, #100	; 0x64
 800221a:	d9f7      	bls.n	800220c <HAL_RCC_OscConfig+0xbc>
 800221c:	e7df      	b.n	80021de <HAL_RCC_OscConfig+0x8e>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800221e:	4b81      	ldr	r3, [pc, #516]	; (8002424 <HAL_RCC_OscConfig+0x2d4>)
 8002220:	689a      	ldr	r2, [r3, #8]
 8002222:	f012 0f0c 	tst.w	r2, #12
 8002226:	d007      	beq.n	8002238 <HAL_RCC_OscConfig+0xe8>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002228:	689a      	ldr	r2, [r3, #8]
 800222a:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800222e:	2a08      	cmp	r2, #8
 8002230:	d111      	bne.n	8002256 <HAL_RCC_OscConfig+0x106>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002232:	685b      	ldr	r3, [r3, #4]
 8002234:	025e      	lsls	r6, r3, #9
 8002236:	d40e      	bmi.n	8002256 <HAL_RCC_OscConfig+0x106>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002238:	4b7a      	ldr	r3, [pc, #488]	; (8002424 <HAL_RCC_OscConfig+0x2d4>)
 800223a:	681a      	ldr	r2, [r3, #0]
 800223c:	0795      	lsls	r5, r2, #30
 800223e:	d502      	bpl.n	8002246 <HAL_RCC_OscConfig+0xf6>
 8002240:	68e2      	ldr	r2, [r4, #12]
 8002242:	2a01      	cmp	r2, #1
 8002244:	d188      	bne.n	8002158 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002246:	681a      	ldr	r2, [r3, #0]
 8002248:	6921      	ldr	r1, [r4, #16]
 800224a:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 800224e:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 8002252:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002254:	e78a      	b.n	800216c <HAL_RCC_OscConfig+0x1c>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002256:	68e2      	ldr	r2, [r4, #12]
 8002258:	4b73      	ldr	r3, [pc, #460]	; (8002428 <HAL_RCC_OscConfig+0x2d8>)
 800225a:	b1b2      	cbz	r2, 800228a <HAL_RCC_OscConfig+0x13a>
        __HAL_RCC_HSI_ENABLE();
 800225c:	2201      	movs	r2, #1
 800225e:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8002260:	f7fe fee0 	bl	8001024 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002264:	4d6f      	ldr	r5, [pc, #444]	; (8002424 <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 8002266:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002268:	682b      	ldr	r3, [r5, #0]
 800226a:	0798      	lsls	r0, r3, #30
 800226c:	d507      	bpl.n	800227e <HAL_RCC_OscConfig+0x12e>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800226e:	682b      	ldr	r3, [r5, #0]
 8002270:	6922      	ldr	r2, [r4, #16]
 8002272:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8002276:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800227a:	602b      	str	r3, [r5, #0]
 800227c:	e776      	b.n	800216c <HAL_RCC_OscConfig+0x1c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800227e:	f7fe fed1 	bl	8001024 <HAL_GetTick>
 8002282:	1b80      	subs	r0, r0, r6
 8002284:	2802      	cmp	r0, #2
 8002286:	d9ef      	bls.n	8002268 <HAL_RCC_OscConfig+0x118>
 8002288:	e7a9      	b.n	80021de <HAL_RCC_OscConfig+0x8e>
        __HAL_RCC_HSI_DISABLE();
 800228a:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800228c:	f7fe feca 	bl	8001024 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002290:	4d64      	ldr	r5, [pc, #400]	; (8002424 <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 8002292:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002294:	682b      	ldr	r3, [r5, #0]
 8002296:	0799      	lsls	r1, r3, #30
 8002298:	f57f af68 	bpl.w	800216c <HAL_RCC_OscConfig+0x1c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800229c:	f7fe fec2 	bl	8001024 <HAL_GetTick>
 80022a0:	1b80      	subs	r0, r0, r6
 80022a2:	2802      	cmp	r0, #2
 80022a4:	d9f6      	bls.n	8002294 <HAL_RCC_OscConfig+0x144>
 80022a6:	e79a      	b.n	80021de <HAL_RCC_OscConfig+0x8e>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80022a8:	6962      	ldr	r2, [r4, #20]
 80022aa:	4b60      	ldr	r3, [pc, #384]	; (800242c <HAL_RCC_OscConfig+0x2dc>)
 80022ac:	b17a      	cbz	r2, 80022ce <HAL_RCC_OscConfig+0x17e>
      __HAL_RCC_LSI_ENABLE();
 80022ae:	2201      	movs	r2, #1
 80022b0:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 80022b2:	f7fe feb7 	bl	8001024 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80022b6:	4d5b      	ldr	r5, [pc, #364]	; (8002424 <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 80022b8:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80022ba:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 80022bc:	079f      	lsls	r7, r3, #30
 80022be:	f53f af59 	bmi.w	8002174 <HAL_RCC_OscConfig+0x24>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80022c2:	f7fe feaf 	bl	8001024 <HAL_GetTick>
 80022c6:	1b80      	subs	r0, r0, r6
 80022c8:	2802      	cmp	r0, #2
 80022ca:	d9f6      	bls.n	80022ba <HAL_RCC_OscConfig+0x16a>
 80022cc:	e787      	b.n	80021de <HAL_RCC_OscConfig+0x8e>
      __HAL_RCC_LSI_DISABLE();
 80022ce:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 80022d0:	f7fe fea8 	bl	8001024 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80022d4:	4d53      	ldr	r5, [pc, #332]	; (8002424 <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 80022d6:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80022d8:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 80022da:	0798      	lsls	r0, r3, #30
 80022dc:	f57f af4a 	bpl.w	8002174 <HAL_RCC_OscConfig+0x24>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80022e0:	f7fe fea0 	bl	8001024 <HAL_GetTick>
 80022e4:	1b80      	subs	r0, r0, r6
 80022e6:	2802      	cmp	r0, #2
 80022e8:	d9f6      	bls.n	80022d8 <HAL_RCC_OscConfig+0x188>
 80022ea:	e778      	b.n	80021de <HAL_RCC_OscConfig+0x8e>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80022ec:	4b4d      	ldr	r3, [pc, #308]	; (8002424 <HAL_RCC_OscConfig+0x2d4>)
 80022ee:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80022f0:	f012 5280 	ands.w	r2, r2, #268435456	; 0x10000000
 80022f4:	d128      	bne.n	8002348 <HAL_RCC_OscConfig+0x1f8>
      __HAL_RCC_PWR_CLK_ENABLE();
 80022f6:	9201      	str	r2, [sp, #4]
 80022f8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80022fa:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80022fe:	641a      	str	r2, [r3, #64]	; 0x40
 8002300:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002302:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002306:	9301      	str	r3, [sp, #4]
 8002308:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 800230a:	2601      	movs	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800230c:	4d48      	ldr	r5, [pc, #288]	; (8002430 <HAL_RCC_OscConfig+0x2e0>)
 800230e:	682b      	ldr	r3, [r5, #0]
 8002310:	05d9      	lsls	r1, r3, #23
 8002312:	d51b      	bpl.n	800234c <HAL_RCC_OscConfig+0x1fc>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002314:	68a3      	ldr	r3, [r4, #8]
 8002316:	4d43      	ldr	r5, [pc, #268]	; (8002424 <HAL_RCC_OscConfig+0x2d4>)
 8002318:	2b01      	cmp	r3, #1
 800231a:	d127      	bne.n	800236c <HAL_RCC_OscConfig+0x21c>
 800231c:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800231e:	f043 0301 	orr.w	r3, r3, #1
 8002322:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 8002324:	f7fe fe7e 	bl	8001024 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002328:	4d3e      	ldr	r5, [pc, #248]	; (8002424 <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 800232a:	4607      	mov	r7, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800232c:	f241 3888 	movw	r8, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002330:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8002332:	079b      	lsls	r3, r3, #30
 8002334:	d539      	bpl.n	80023aa <HAL_RCC_OscConfig+0x25a>
    if(pwrclkchanged == SET)
 8002336:	2e00      	cmp	r6, #0
 8002338:	f43f af20 	beq.w	800217c <HAL_RCC_OscConfig+0x2c>
      __HAL_RCC_PWR_CLK_DISABLE();
 800233c:	4a39      	ldr	r2, [pc, #228]	; (8002424 <HAL_RCC_OscConfig+0x2d4>)
 800233e:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8002340:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002344:	6413      	str	r3, [r2, #64]	; 0x40
 8002346:	e719      	b.n	800217c <HAL_RCC_OscConfig+0x2c>
    FlagStatus       pwrclkchanged = RESET;
 8002348:	2600      	movs	r6, #0
 800234a:	e7df      	b.n	800230c <HAL_RCC_OscConfig+0x1bc>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800234c:	682b      	ldr	r3, [r5, #0]
 800234e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002352:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8002354:	f7fe fe66 	bl	8001024 <HAL_GetTick>
 8002358:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800235a:	682b      	ldr	r3, [r5, #0]
 800235c:	05da      	lsls	r2, r3, #23
 800235e:	d4d9      	bmi.n	8002314 <HAL_RCC_OscConfig+0x1c4>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002360:	f7fe fe60 	bl	8001024 <HAL_GetTick>
 8002364:	1bc0      	subs	r0, r0, r7
 8002366:	2802      	cmp	r0, #2
 8002368:	d9f7      	bls.n	800235a <HAL_RCC_OscConfig+0x20a>
 800236a:	e738      	b.n	80021de <HAL_RCC_OscConfig+0x8e>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800236c:	2b05      	cmp	r3, #5
 800236e:	d104      	bne.n	800237a <HAL_RCC_OscConfig+0x22a>
 8002370:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8002372:	f043 0304 	orr.w	r3, r3, #4
 8002376:	672b      	str	r3, [r5, #112]	; 0x70
 8002378:	e7d0      	b.n	800231c <HAL_RCC_OscConfig+0x1cc>
 800237a:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 800237c:	f022 0201 	bic.w	r2, r2, #1
 8002380:	672a      	str	r2, [r5, #112]	; 0x70
 8002382:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8002384:	f022 0204 	bic.w	r2, r2, #4
 8002388:	672a      	str	r2, [r5, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800238a:	2b00      	cmp	r3, #0
 800238c:	d1ca      	bne.n	8002324 <HAL_RCC_OscConfig+0x1d4>
      tickstart = HAL_GetTick();
 800238e:	f7fe fe49 	bl	8001024 <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002392:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8002396:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002398:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800239a:	0798      	lsls	r0, r3, #30
 800239c:	d5cb      	bpl.n	8002336 <HAL_RCC_OscConfig+0x1e6>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800239e:	f7fe fe41 	bl	8001024 <HAL_GetTick>
 80023a2:	1bc0      	subs	r0, r0, r7
 80023a4:	4540      	cmp	r0, r8
 80023a6:	d9f7      	bls.n	8002398 <HAL_RCC_OscConfig+0x248>
 80023a8:	e719      	b.n	80021de <HAL_RCC_OscConfig+0x8e>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80023aa:	f7fe fe3b 	bl	8001024 <HAL_GetTick>
 80023ae:	1bc0      	subs	r0, r0, r7
 80023b0:	4540      	cmp	r0, r8
 80023b2:	d9bd      	bls.n	8002330 <HAL_RCC_OscConfig+0x1e0>
 80023b4:	e713      	b.n	80021de <HAL_RCC_OscConfig+0x8e>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80023b6:	4d1b      	ldr	r5, [pc, #108]	; (8002424 <HAL_RCC_OscConfig+0x2d4>)
 80023b8:	68ab      	ldr	r3, [r5, #8]
 80023ba:	f003 030c 	and.w	r3, r3, #12
 80023be:	2b08      	cmp	r3, #8
 80023c0:	f43f aeca 	beq.w	8002158 <HAL_RCC_OscConfig+0x8>
 80023c4:	4e1b      	ldr	r6, [pc, #108]	; (8002434 <HAL_RCC_OscConfig+0x2e4>)
 80023c6:	2300      	movs	r3, #0
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80023c8:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 80023ca:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80023cc:	d134      	bne.n	8002438 <HAL_RCC_OscConfig+0x2e8>
        tickstart = HAL_GetTick();
 80023ce:	f7fe fe29 	bl	8001024 <HAL_GetTick>
 80023d2:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80023d4:	682b      	ldr	r3, [r5, #0]
 80023d6:	0199      	lsls	r1, r3, #6
 80023d8:	d41e      	bmi.n	8002418 <HAL_RCC_OscConfig+0x2c8>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80023da:	6a22      	ldr	r2, [r4, #32]
 80023dc:	69e3      	ldr	r3, [r4, #28]
 80023de:	4313      	orrs	r3, r2
 80023e0:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80023e2:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 80023e6:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80023e8:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80023ec:	6aa2      	ldr	r2, [r4, #40]	; 0x28
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80023ee:	4c0d      	ldr	r4, [pc, #52]	; (8002424 <HAL_RCC_OscConfig+0x2d4>)
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80023f0:	0852      	lsrs	r2, r2, #1
 80023f2:	3a01      	subs	r2, #1
 80023f4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80023f8:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 80023fa:	2301      	movs	r3, #1
 80023fc:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 80023fe:	f7fe fe11 	bl	8001024 <HAL_GetTick>
 8002402:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002404:	6823      	ldr	r3, [r4, #0]
 8002406:	019a      	lsls	r2, r3, #6
 8002408:	f53f aebc 	bmi.w	8002184 <HAL_RCC_OscConfig+0x34>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800240c:	f7fe fe0a 	bl	8001024 <HAL_GetTick>
 8002410:	1b40      	subs	r0, r0, r5
 8002412:	2802      	cmp	r0, #2
 8002414:	d9f6      	bls.n	8002404 <HAL_RCC_OscConfig+0x2b4>
 8002416:	e6e2      	b.n	80021de <HAL_RCC_OscConfig+0x8e>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002418:	f7fe fe04 	bl	8001024 <HAL_GetTick>
 800241c:	1bc0      	subs	r0, r0, r7
 800241e:	2802      	cmp	r0, #2
 8002420:	d9d8      	bls.n	80023d4 <HAL_RCC_OscConfig+0x284>
 8002422:	e6dc      	b.n	80021de <HAL_RCC_OscConfig+0x8e>
 8002424:	40023800 	.word	0x40023800
 8002428:	42470000 	.word	0x42470000
 800242c:	42470e80 	.word	0x42470e80
 8002430:	40007000 	.word	0x40007000
 8002434:	42470060 	.word	0x42470060
        tickstart = HAL_GetTick();
 8002438:	f7fe fdf4 	bl	8001024 <HAL_GetTick>
 800243c:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800243e:	682b      	ldr	r3, [r5, #0]
 8002440:	019b      	lsls	r3, r3, #6
 8002442:	f57f ae9f 	bpl.w	8002184 <HAL_RCC_OscConfig+0x34>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002446:	f7fe fded 	bl	8001024 <HAL_GetTick>
 800244a:	1b00      	subs	r0, r0, r4
 800244c:	2802      	cmp	r0, #2
 800244e:	d9f6      	bls.n	800243e <HAL_RCC_OscConfig+0x2ee>
 8002450:	e6c5      	b.n	80021de <HAL_RCC_OscConfig+0x8e>
 8002452:	bf00      	nop

08002454 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002454:	4913      	ldr	r1, [pc, #76]	; (80024a4 <HAL_RCC_GetSysClockFreq+0x50>)
{
 8002456:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002458:	688b      	ldr	r3, [r1, #8]
 800245a:	f003 030c 	and.w	r3, r3, #12
 800245e:	2b04      	cmp	r3, #4
 8002460:	d003      	beq.n	800246a <HAL_RCC_GetSysClockFreq+0x16>
 8002462:	2b08      	cmp	r3, #8
 8002464:	d003      	beq.n	800246e <HAL_RCC_GetSysClockFreq+0x1a>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002466:	4810      	ldr	r0, [pc, #64]	; (80024a8 <HAL_RCC_GetSysClockFreq+0x54>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8002468:	bd08      	pop	{r3, pc}
      sysclockfreq = HSE_VALUE;
 800246a:	4810      	ldr	r0, [pc, #64]	; (80024ac <HAL_RCC_GetSysClockFreq+0x58>)
 800246c:	bd08      	pop	{r3, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800246e:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002470:	684b      	ldr	r3, [r1, #4]
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002472:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002474:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002478:	bf14      	ite	ne
 800247a:	480c      	ldrne	r0, [pc, #48]	; (80024ac <HAL_RCC_GetSysClockFreq+0x58>)
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800247c:	480a      	ldreq	r0, [pc, #40]	; (80024a8 <HAL_RCC_GetSysClockFreq+0x54>)
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800247e:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8002482:	bf18      	it	ne
 8002484:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002486:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800248a:	fba1 0100 	umull	r0, r1, r1, r0
 800248e:	f7fe fbf7 	bl	8000c80 <__aeabi_uldivmod>
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002492:	4b04      	ldr	r3, [pc, #16]	; (80024a4 <HAL_RCC_GetSysClockFreq+0x50>)
 8002494:	685b      	ldr	r3, [r3, #4]
 8002496:	f3c3 4301 	ubfx	r3, r3, #16, #2
 800249a:	3301      	adds	r3, #1
 800249c:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco/pllp;
 800249e:	fbb0 f0f3 	udiv	r0, r0, r3
 80024a2:	bd08      	pop	{r3, pc}
 80024a4:	40023800 	.word	0x40023800
 80024a8:	00f42400 	.word	0x00f42400
 80024ac:	007a1200 	.word	0x007a1200

080024b0 <HAL_RCC_ClockConfig>:
{
 80024b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80024b4:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 80024b6:	4604      	mov	r4, r0
 80024b8:	b910      	cbnz	r0, 80024c0 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 80024ba:	2001      	movs	r0, #1
 80024bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80024c0:	4b44      	ldr	r3, [pc, #272]	; (80025d4 <HAL_RCC_ClockConfig+0x124>)
 80024c2:	681a      	ldr	r2, [r3, #0]
 80024c4:	f002 020f 	and.w	r2, r2, #15
 80024c8:	428a      	cmp	r2, r1
 80024ca:	d328      	bcc.n	800251e <HAL_RCC_ClockConfig+0x6e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80024cc:	6821      	ldr	r1, [r4, #0]
 80024ce:	078f      	lsls	r7, r1, #30
 80024d0:	d42d      	bmi.n	800252e <HAL_RCC_ClockConfig+0x7e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80024d2:	07c8      	lsls	r0, r1, #31
 80024d4:	d440      	bmi.n	8002558 <HAL_RCC_ClockConfig+0xa8>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80024d6:	4b3f      	ldr	r3, [pc, #252]	; (80025d4 <HAL_RCC_ClockConfig+0x124>)
 80024d8:	681a      	ldr	r2, [r3, #0]
 80024da:	f002 020f 	and.w	r2, r2, #15
 80024de:	4295      	cmp	r5, r2
 80024e0:	d366      	bcc.n	80025b0 <HAL_RCC_ClockConfig+0x100>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024e2:	6822      	ldr	r2, [r4, #0]
 80024e4:	0751      	lsls	r1, r2, #29
 80024e6:	d46c      	bmi.n	80025c2 <HAL_RCC_ClockConfig+0x112>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024e8:	0713      	lsls	r3, r2, #28
 80024ea:	d507      	bpl.n	80024fc <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80024ec:	4a3a      	ldr	r2, [pc, #232]	; (80025d8 <HAL_RCC_ClockConfig+0x128>)
 80024ee:	6921      	ldr	r1, [r4, #16]
 80024f0:	6893      	ldr	r3, [r2, #8]
 80024f2:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 80024f6:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80024fa:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80024fc:	f7ff ffaa 	bl	8002454 <HAL_RCC_GetSysClockFreq>
 8002500:	4b35      	ldr	r3, [pc, #212]	; (80025d8 <HAL_RCC_ClockConfig+0x128>)
 8002502:	4a36      	ldr	r2, [pc, #216]	; (80025dc <HAL_RCC_ClockConfig+0x12c>)
 8002504:	689b      	ldr	r3, [r3, #8]
 8002506:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800250a:	5cd3      	ldrb	r3, [r2, r3]
 800250c:	40d8      	lsrs	r0, r3
 800250e:	4b34      	ldr	r3, [pc, #208]	; (80025e0 <HAL_RCC_ClockConfig+0x130>)
 8002510:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8002512:	2000      	movs	r0, #0
 8002514:	f7fe fd3c 	bl	8000f90 <HAL_InitTick>
  return HAL_OK;
 8002518:	2000      	movs	r0, #0
 800251a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 800251e:	b2ca      	uxtb	r2, r1
 8002520:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	f003 030f 	and.w	r3, r3, #15
 8002528:	4299      	cmp	r1, r3
 800252a:	d1c6      	bne.n	80024ba <HAL_RCC_ClockConfig+0xa>
 800252c:	e7ce      	b.n	80024cc <HAL_RCC_ClockConfig+0x1c>
 800252e:	4b2a      	ldr	r3, [pc, #168]	; (80025d8 <HAL_RCC_ClockConfig+0x128>)
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002530:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002534:	bf1e      	ittt	ne
 8002536:	689a      	ldrne	r2, [r3, #8]
 8002538:	f442 52e0 	orrne.w	r2, r2, #7168	; 0x1c00
 800253c:	609a      	strne	r2, [r3, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800253e:	070e      	lsls	r6, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002540:	bf42      	ittt	mi
 8002542:	689a      	ldrmi	r2, [r3, #8]
 8002544:	f442 4260 	orrmi.w	r2, r2, #57344	; 0xe000
 8002548:	609a      	strmi	r2, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800254a:	689a      	ldr	r2, [r3, #8]
 800254c:	68a0      	ldr	r0, [r4, #8]
 800254e:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8002552:	4302      	orrs	r2, r0
 8002554:	609a      	str	r2, [r3, #8]
 8002556:	e7bc      	b.n	80024d2 <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002558:	6862      	ldr	r2, [r4, #4]
 800255a:	4b1f      	ldr	r3, [pc, #124]	; (80025d8 <HAL_RCC_ClockConfig+0x128>)
 800255c:	2a01      	cmp	r2, #1
 800255e:	d11d      	bne.n	800259c <HAL_RCC_ClockConfig+0xec>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002566:	d0a8      	beq.n	80024ba <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002568:	4e1b      	ldr	r6, [pc, #108]	; (80025d8 <HAL_RCC_ClockConfig+0x128>)
 800256a:	68b3      	ldr	r3, [r6, #8]
 800256c:	f023 0303 	bic.w	r3, r3, #3
 8002570:	4313      	orrs	r3, r2
 8002572:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8002574:	f7fe fd56 	bl	8001024 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002578:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 800257c:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800257e:	68b3      	ldr	r3, [r6, #8]
 8002580:	6862      	ldr	r2, [r4, #4]
 8002582:	f003 030c 	and.w	r3, r3, #12
 8002586:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 800258a:	d0a4      	beq.n	80024d6 <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800258c:	f7fe fd4a 	bl	8001024 <HAL_GetTick>
 8002590:	1bc0      	subs	r0, r0, r7
 8002592:	4540      	cmp	r0, r8
 8002594:	d9f3      	bls.n	800257e <HAL_RCC_ClockConfig+0xce>
        return HAL_TIMEOUT;
 8002596:	2003      	movs	r0, #3
}
 8002598:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800259c:	1e91      	subs	r1, r2, #2
 800259e:	2901      	cmp	r1, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80025a0:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80025a2:	d802      	bhi.n	80025aa <HAL_RCC_ClockConfig+0xfa>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80025a4:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80025a8:	e7dd      	b.n	8002566 <HAL_RCC_ClockConfig+0xb6>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025aa:	f013 0f02 	tst.w	r3, #2
 80025ae:	e7da      	b.n	8002566 <HAL_RCC_ClockConfig+0xb6>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025b0:	b2ea      	uxtb	r2, r5
 80025b2:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	f003 030f 	and.w	r3, r3, #15
 80025ba:	429d      	cmp	r5, r3
 80025bc:	f47f af7d 	bne.w	80024ba <HAL_RCC_ClockConfig+0xa>
 80025c0:	e78f      	b.n	80024e2 <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80025c2:	4905      	ldr	r1, [pc, #20]	; (80025d8 <HAL_RCC_ClockConfig+0x128>)
 80025c4:	68e0      	ldr	r0, [r4, #12]
 80025c6:	688b      	ldr	r3, [r1, #8]
 80025c8:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 80025cc:	4303      	orrs	r3, r0
 80025ce:	608b      	str	r3, [r1, #8]
 80025d0:	e78a      	b.n	80024e8 <HAL_RCC_ClockConfig+0x38>
 80025d2:	bf00      	nop
 80025d4:	40023c00 	.word	0x40023c00
 80025d8:	40023800 	.word	0x40023800
 80025dc:	0800d80a 	.word	0x0800d80a
 80025e0:	20000010 	.word	0x20000010

080025e4 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 80025e4:	4b01      	ldr	r3, [pc, #4]	; (80025ec <HAL_RCC_GetHCLKFreq+0x8>)
 80025e6:	6818      	ldr	r0, [r3, #0]
 80025e8:	4770      	bx	lr
 80025ea:	bf00      	nop
 80025ec:	20000010 	.word	0x20000010

080025f0 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80025f0:	4b04      	ldr	r3, [pc, #16]	; (8002604 <HAL_RCC_GetPCLK1Freq+0x14>)
 80025f2:	4a05      	ldr	r2, [pc, #20]	; (8002608 <HAL_RCC_GetPCLK1Freq+0x18>)
 80025f4:	689b      	ldr	r3, [r3, #8]
 80025f6:	f3c3 2382 	ubfx	r3, r3, #10, #3
 80025fa:	5cd3      	ldrb	r3, [r2, r3]
 80025fc:	4a03      	ldr	r2, [pc, #12]	; (800260c <HAL_RCC_GetPCLK1Freq+0x1c>)
 80025fe:	6810      	ldr	r0, [r2, #0]
}
 8002600:	40d8      	lsrs	r0, r3
 8002602:	4770      	bx	lr
 8002604:	40023800 	.word	0x40023800
 8002608:	0800d81a 	.word	0x0800d81a
 800260c:	20000010 	.word	0x20000010

08002610 <SD_FindSCR>:
  * @param  hsd Pointer to SD handle
  * @param  pSCR pointer to the buffer that will contain the SCR value  
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8002610:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002614:	b089      	sub	sp, #36	; 0x24
 8002616:	4605      	mov	r5, r0
 8002618:	460e      	mov	r6, r1
  SDIO_DataInitTypeDef config;
  uint32_t errorstate = HAL_SD_ERROR_NONE;
  uint32_t tickstart = HAL_GetTick();
 800261a:	f7fe fd03 	bl	8001024 <HAL_GetTick>
  uint32_t index = 0U;
  uint32_t tempscr[2U] = {0U, 0U};
 800261e:	2300      	movs	r3, #0
  uint32_t tickstart = HAL_GetTick();
 8002620:	4681      	mov	r9, r0
  
  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8002622:	2108      	movs	r1, #8
 8002624:	6828      	ldr	r0, [r5, #0]
  uint32_t tempscr[2U] = {0U, 0U};
 8002626:	9300      	str	r3, [sp, #0]
 8002628:	9301      	str	r3, [sp, #4]
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800262a:	f001 f978 	bl	800391e <SDMMC_CmdBlockLength>
  if(errorstate != HAL_OK)
 800262e:	4604      	mov	r4, r0
 8002630:	bb40      	cbnz	r0, 8002684 <SD_FindSCR+0x74>
  {
    return errorstate;
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8002632:	6d29      	ldr	r1, [r5, #80]	; 0x50
 8002634:	6828      	ldr	r0, [r5, #0]
 8002636:	0409      	lsls	r1, r1, #16
 8002638:	f001 fa7c 	bl	8003b34 <SDMMC_CmdAppCommand>
  if(errorstate != HAL_OK)
 800263c:	4604      	mov	r4, r0
 800263e:	bb08      	cbnz	r0, 8002684 <SD_FindSCR+0x74>
  {
    return errorstate;
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8002640:	f04f 33ff 	mov.w	r3, #4294967295
 8002644:	9302      	str	r3, [sp, #8]
  config.DataLength    = 8U;
 8002646:	2308      	movs	r3, #8
 8002648:	9303      	str	r3, [sp, #12]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 800264a:	2330      	movs	r3, #48	; 0x30
 800264c:	9304      	str	r3, [sp, #16]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 800264e:	2302      	movs	r3, #2
 8002650:	9305      	str	r3, [sp, #20]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8002652:	9006      	str	r0, [sp, #24]
  config.DPSM          = SDIO_DPSM_ENABLE;
 8002654:	2301      	movs	r3, #1
  SDIO_ConfigData(hsd->Instance, &config);
 8002656:	a902      	add	r1, sp, #8
 8002658:	6828      	ldr	r0, [r5, #0]
  config.DPSM          = SDIO_DPSM_ENABLE;
 800265a:	9307      	str	r3, [sp, #28]
  SDIO_ConfigData(hsd->Instance, &config);
 800265c:	f001 f94c 	bl	80038f8 <SDIO_ConfigData>
  
  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8002660:	6828      	ldr	r0, [r5, #0]
 8002662:	f001 fa98 	bl	8003b96 <SDMMC_CmdSendSCR>
  if(errorstate != HAL_OK)
 8002666:	4604      	mov	r4, r0
 8002668:	b960      	cbnz	r0, 8002684 <SD_FindSCR+0x74>
 800266a:	4607      	mov	r7, r0
  {
    return errorstate;
  }
  
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
 800266c:	f240 482a 	movw	r8, #1066	; 0x42a
 8002670:	6828      	ldr	r0, [r5, #0]
 8002672:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8002674:	ea13 0f08 	tst.w	r3, r8
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 8002678:	6b43      	ldr	r3, [r0, #52]	; 0x34
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
 800267a:	d007      	beq.n	800268c <SD_FindSCR+0x7c>
    {
      return HAL_SD_ERROR_TIMEOUT;
    }
  }
  
  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 800267c:	0719      	lsls	r1, r3, #28
 800267e:	d518      	bpl.n	80026b2 <SD_FindSCR+0xa2>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 8002680:	2408      	movs	r4, #8
    
    return HAL_SD_ERROR_DATA_CRC_FAIL;
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 8002682:	6384      	str	r4, [r0, #56]	; 0x38
    *(pSCR) = ((tempscr[1U] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[1U] & SDMMC_8TO15BITS) << 8U) |\
      ((tempscr[1U] & SDMMC_16TO23BITS) >> 8U) | ((tempscr[1U] & SDMMC_24TO31BITS) >> 24U);
  }

  return HAL_SD_ERROR_NONE;
}
 8002684:	4620      	mov	r0, r4
 8002686:	b009      	add	sp, #36	; 0x24
 8002688:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 800268c:	029b      	lsls	r3, r3, #10
 800268e:	d507      	bpl.n	80026a0 <SD_FindSCR+0x90>
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 8002690:	f001 f874 	bl	800377c <SDIO_ReadFIFO>
 8002694:	ab08      	add	r3, sp, #32
 8002696:	eb03 0387 	add.w	r3, r3, r7, lsl #2
      index++;
 800269a:	3701      	adds	r7, #1
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 800269c:	f843 0c20 	str.w	r0, [r3, #-32]
    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 80026a0:	f7fe fcc0 	bl	8001024 <HAL_GetTick>
 80026a4:	eba0 0009 	sub.w	r0, r0, r9
 80026a8:	3001      	adds	r0, #1
 80026aa:	d1e1      	bne.n	8002670 <SD_FindSCR+0x60>
      return HAL_SD_ERROR_TIMEOUT;
 80026ac:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 80026b0:	e7e8      	b.n	8002684 <SD_FindSCR+0x74>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 80026b2:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80026b4:	079a      	lsls	r2, r3, #30
 80026b6:	d501      	bpl.n	80026bc <SD_FindSCR+0xac>
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 80026b8:	2402      	movs	r4, #2
 80026ba:	e7e2      	b.n	8002682 <SD_FindSCR+0x72>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 80026bc:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80026be:	069b      	lsls	r3, r3, #26
 80026c0:	d501      	bpl.n	80026c6 <SD_FindSCR+0xb6>
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 80026c2:	2420      	movs	r4, #32
 80026c4:	e7dd      	b.n	8002682 <SD_FindSCR+0x72>
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80026c6:	f240 53ff 	movw	r3, #1535	; 0x5ff
 80026ca:	6383      	str	r3, [r0, #56]	; 0x38
 80026cc:	9b00      	ldr	r3, [sp, #0]
 80026ce:	ba1b      	rev	r3, r3
    *(pSCR + 1U) = ((tempscr[0U] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[0U] & SDMMC_8TO15BITS) << 8U) |\
 80026d0:	6073      	str	r3, [r6, #4]
 80026d2:	9b01      	ldr	r3, [sp, #4]
 80026d4:	ba1b      	rev	r3, r3
    *(pSCR) = ((tempscr[1U] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[1U] & SDMMC_8TO15BITS) << 8U) |\
 80026d6:	6033      	str	r3, [r6, #0]
  return HAL_SD_ERROR_NONE;
 80026d8:	e7d4      	b.n	8002684 <SD_FindSCR+0x74>

080026da <HAL_SD_ReadBlocks>:
{
 80026da:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80026de:	b087      	sub	sp, #28
 80026e0:	4604      	mov	r4, r0
 80026e2:	460d      	mov	r5, r1
 80026e4:	4691      	mov	r9, r2
 80026e6:	4698      	mov	r8, r3
 80026e8:	9e10      	ldr	r6, [sp, #64]	; 0x40
  uint32_t tickstart = HAL_GetTick();
 80026ea:	f7fe fc9b 	bl	8001024 <HAL_GetTick>
 80026ee:	4607      	mov	r7, r0
  if(NULL == pData)
 80026f0:	b92d      	cbnz	r5, 80026fe <HAL_SD_ReadBlocks+0x24>
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80026f2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80026f4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 80026f8:	63a3      	str	r3, [r4, #56]	; 0x38
    return HAL_ERROR;
 80026fa:	2001      	movs	r0, #1
 80026fc:	e010      	b.n	8002720 <HAL_SD_ReadBlocks+0x46>
  if(hsd->State == HAL_SD_STATE_READY)
 80026fe:	f894 0034 	ldrb.w	r0, [r4, #52]	; 0x34
 8002702:	b2c0      	uxtb	r0, r0
 8002704:	2801      	cmp	r0, #1
 8002706:	f040 80c3 	bne.w	8002890 <HAL_SD_ReadBlocks+0x1b6>
    if((BlockAdd + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800270a:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 800270c:	eb09 0308 	add.w	r3, r9, r8
    hsd->ErrorCode = HAL_DMA_ERROR_NONE;
 8002710:	2100      	movs	r1, #0
    if((BlockAdd + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8002712:	4293      	cmp	r3, r2
    hsd->ErrorCode = HAL_DMA_ERROR_NONE;
 8002714:	63a1      	str	r1, [r4, #56]	; 0x38
    if((BlockAdd + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8002716:	d906      	bls.n	8002726 <HAL_SD_ReadBlocks+0x4c>
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8002718:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800271a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800271e:	63a3      	str	r3, [r4, #56]	; 0x38
}
 8002720:	b007      	add	sp, #28
 8002722:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    hsd->State = HAL_SD_STATE_BUSY;
 8002726:	2303      	movs	r3, #3
 8002728:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    hsd->Instance->DCTRL = 0U;
 800272c:	6820      	ldr	r0, [r4, #0]
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800272e:	6c63      	ldr	r3, [r4, #68]	; 0x44
    hsd->Instance->DCTRL = 0U;
 8002730:	62c1      	str	r1, [r0, #44]	; 0x2c
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8002732:	2b01      	cmp	r3, #1
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8002734:	f44f 7100 	mov.w	r1, #512	; 0x200
      BlockAdd *= 512U;
 8002738:	bf18      	it	ne
 800273a:	ea4f 2949 	movne.w	r9, r9, lsl #9
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800273e:	f001 f8ee 	bl	800391e <SDMMC_CmdBlockLength>
    if(errorstate != HAL_SD_ERROR_NONE)
 8002742:	b150      	cbz	r0, 800275a <HAL_SD_ReadBlocks+0x80>
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002744:	6823      	ldr	r3, [r4, #0]
 8002746:	f240 52ff 	movw	r2, #1535	; 0x5ff
 800274a:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 800274c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800274e:	4318      	orrs	r0, r3
 8002750:	63a0      	str	r0, [r4, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8002752:	2001      	movs	r0, #1
 8002754:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
        return HAL_ERROR;
 8002758:	e7e2      	b.n	8002720 <HAL_SD_ReadBlocks+0x46>
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800275a:	f04f 33ff 	mov.w	r3, #4294967295
 800275e:	9300      	str	r3, [sp, #0]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8002760:	ea4f 2348 	mov.w	r3, r8, lsl #9
 8002764:	9301      	str	r3, [sp, #4]
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8002766:	9004      	str	r0, [sp, #16]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8002768:	2390      	movs	r3, #144	; 0x90
    config.DPSM          = SDIO_DPSM_ENABLE;
 800276a:	f04f 0a01 	mov.w	sl, #1
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 800276e:	f04f 0b02 	mov.w	fp, #2
    SDIO_ConfigData(hsd->Instance, &config);
 8002772:	4669      	mov	r1, sp
 8002774:	6820      	ldr	r0, [r4, #0]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8002776:	9302      	str	r3, [sp, #8]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8002778:	f8cd b00c 	str.w	fp, [sp, #12]
    config.DPSM          = SDIO_DPSM_ENABLE;
 800277c:	f8cd a014 	str.w	sl, [sp, #20]
    SDIO_ConfigData(hsd->Instance, &config);
 8002780:	f001 f8ba 	bl	80038f8 <SDIO_ConfigData>
    if(NumberOfBlocks > 1U)
 8002784:	45d0      	cmp	r8, sl
 8002786:	d90a      	bls.n	800279e <HAL_SD_ReadBlocks+0xc4>
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 8002788:	f8c4 b030 	str.w	fp, [r4, #48]	; 0x30
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, BlockAdd);
 800278c:	4649      	mov	r1, r9
 800278e:	6820      	ldr	r0, [r4, #0]
 8002790:	f001 f8f5 	bl	800397e <SDMMC_CmdReadMultiBlock>
    if(errorstate != HAL_SD_ERROR_NONE)
 8002794:	2800      	cmp	r0, #0
 8002796:	d1d5      	bne.n	8002744 <HAL_SD_ReadBlocks+0x6a>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_STA_STBITERR))
 8002798:	f240 3a2a 	movw	sl, #810	; 0x32a
 800279c:	e027      	b.n	80027ee <HAL_SD_ReadBlocks+0x114>
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 800279e:	f8c4 a030 	str.w	sl, [r4, #48]	; 0x30
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, BlockAdd);
 80027a2:	4649      	mov	r1, r9
 80027a4:	6820      	ldr	r0, [r4, #0]
 80027a6:	f001 f8d2 	bl	800394e <SDMMC_CmdReadSingleBlock>
 80027aa:	e7f3      	b.n	8002794 <HAL_SD_ReadBlocks+0xba>
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF))
 80027ac:	041a      	lsls	r2, r3, #16
 80027ae:	d50b      	bpl.n	80027c8 <HAL_SD_ReadBlocks+0xee>
 80027b0:	f1a5 0904 	sub.w	r9, r5, #4
 80027b4:	f105 0b1c 	add.w	fp, r5, #28
          *(tempbuff + count) = SDIO_ReadFIFO(hsd->Instance);
 80027b8:	6820      	ldr	r0, [r4, #0]
 80027ba:	f000 ffdf 	bl	800377c <SDIO_ReadFIFO>
 80027be:	f849 0f04 	str.w	r0, [r9, #4]!
        for(count = 0U; count < 8U; count++)
 80027c2:	45d9      	cmp	r9, fp
 80027c4:	d1f8      	bne.n	80027b8 <HAL_SD_ReadBlocks+0xde>
        tempbuff += 8U;
 80027c6:	3520      	adds	r5, #32
      if((Timeout == 0U)||((HAL_GetTick()-tickstart) >=  Timeout))
 80027c8:	b966      	cbnz	r6, 80027e4 <HAL_SD_ReadBlocks+0x10a>
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80027ca:	6823      	ldr	r3, [r4, #0]
 80027cc:	f240 52ff 	movw	r2, #1535	; 0x5ff
 80027d0:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 80027d2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80027d4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80027d8:	63a3      	str	r3, [r4, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 80027da:	2301      	movs	r3, #1
 80027dc:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        return HAL_TIMEOUT;
 80027e0:	2003      	movs	r0, #3
 80027e2:	e79d      	b.n	8002720 <HAL_SD_ReadBlocks+0x46>
      if((Timeout == 0U)||((HAL_GetTick()-tickstart) >=  Timeout))
 80027e4:	f7fe fc1e 	bl	8001024 <HAL_GetTick>
 80027e8:	1bc0      	subs	r0, r0, r7
 80027ea:	4286      	cmp	r6, r0
 80027ec:	d9ed      	bls.n	80027ca <HAL_SD_ReadBlocks+0xf0>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_STA_STBITERR))
 80027ee:	6820      	ldr	r0, [r4, #0]
 80027f0:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80027f2:	ea13 0f0a 	tst.w	r3, sl
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF))
 80027f6:	6b43      	ldr	r3, [r0, #52]	; 0x34
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_STA_STBITERR))
 80027f8:	d0d8      	beq.n	80027ac <HAL_SD_ReadBlocks+0xd2>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 80027fa:	05db      	lsls	r3, r3, #23
 80027fc:	d509      	bpl.n	8002812 <HAL_SD_ReadBlocks+0x138>
 80027fe:	f1b8 0f01 	cmp.w	r8, #1
 8002802:	d906      	bls.n	8002812 <HAL_SD_ReadBlocks+0x138>
      if(hsd->SdCard.CardType != CARD_SECURED)
 8002804:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8002806:	2b03      	cmp	r3, #3
 8002808:	d003      	beq.n	8002812 <HAL_SD_ReadBlocks+0x138>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800280a:	f001 f901 	bl	8003a10 <SDMMC_CmdStopTransfer>
        if(errorstate != HAL_SD_ERROR_NONE)
 800280e:	2800      	cmp	r0, #0
 8002810:	d198      	bne.n	8002744 <HAL_SD_ReadBlocks+0x6a>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8002812:	6823      	ldr	r3, [r4, #0]
 8002814:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002816:	0710      	lsls	r0, r2, #28
 8002818:	d507      	bpl.n	800282a <HAL_SD_ReadBlocks+0x150>
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800281a:	f240 52ff 	movw	r2, #1535	; 0x5ff
 800281e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8002820:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002822:	f043 0308 	orr.w	r3, r3, #8
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8002826:	63a3      	str	r3, [r4, #56]	; 0x38
 8002828:	e793      	b.n	8002752 <HAL_SD_ReadBlocks+0x78>
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 800282a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800282c:	0791      	lsls	r1, r2, #30
 800282e:	d506      	bpl.n	800283e <HAL_SD_ReadBlocks+0x164>
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002830:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8002834:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8002836:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002838:	f043 0302 	orr.w	r3, r3, #2
 800283c:	e7f3      	b.n	8002826 <HAL_SD_ReadBlocks+0x14c>
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 800283e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002840:	0692      	lsls	r2, r2, #26
 8002842:	d518      	bpl.n	8002876 <HAL_SD_ReadBlocks+0x19c>
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002844:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8002848:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800284a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800284c:	f043 0320 	orr.w	r3, r3, #32
 8002850:	e7e9      	b.n	8002826 <HAL_SD_ReadBlocks+0x14c>
      *tempbuff = SDIO_ReadFIFO(hsd->Instance);
 8002852:	f000 ff93 	bl	800377c <SDIO_ReadFIFO>
 8002856:	f845 0b04 	str.w	r0, [r5], #4
      if((Timeout == 0U)||((HAL_GetTick()-tickstart) >=  Timeout))
 800285a:	b93e      	cbnz	r6, 800286c <HAL_SD_ReadBlocks+0x192>
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);        
 800285c:	6823      	ldr	r3, [r4, #0]
 800285e:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8002862:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8002864:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002866:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800286a:	e7dc      	b.n	8002826 <HAL_SD_ReadBlocks+0x14c>
      if((Timeout == 0U)||((HAL_GetTick()-tickstart) >=  Timeout))
 800286c:	f7fe fbda 	bl	8001024 <HAL_GetTick>
 8002870:	1bc0      	subs	r0, r0, r7
 8002872:	4286      	cmp	r6, r0
 8002874:	d9f2      	bls.n	800285c <HAL_SD_ReadBlocks+0x182>
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)))
 8002876:	6820      	ldr	r0, [r4, #0]
 8002878:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800287a:	f413 1300 	ands.w	r3, r3, #2097152	; 0x200000
 800287e:	d1e8      	bne.n	8002852 <HAL_SD_ReadBlocks+0x178>
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002880:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8002884:	6382      	str	r2, [r0, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8002886:	2201      	movs	r2, #1
 8002888:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
    return HAL_OK;
 800288c:	4618      	mov	r0, r3
 800288e:	e747      	b.n	8002720 <HAL_SD_ReadBlocks+0x46>
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8002890:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002892:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002896:	e72f      	b.n	80026f8 <HAL_SD_ReadBlocks+0x1e>

08002898 <HAL_SD_WriteBlocks>:
{
 8002898:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800289c:	b086      	sub	sp, #24
 800289e:	4604      	mov	r4, r0
 80028a0:	460d      	mov	r5, r1
 80028a2:	4691      	mov	r9, r2
 80028a4:	461e      	mov	r6, r3
 80028a6:	9f0e      	ldr	r7, [sp, #56]	; 0x38
  uint32_t tickstart = HAL_GetTick();
 80028a8:	f7fe fbbc 	bl	8001024 <HAL_GetTick>
 80028ac:	4680      	mov	r8, r0
  if(NULL == pData)
 80028ae:	b92d      	cbnz	r5, 80028bc <HAL_SD_WriteBlocks+0x24>
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80028b0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80028b2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 80028b6:	63a3      	str	r3, [r4, #56]	; 0x38
    return HAL_ERROR;
 80028b8:	2001      	movs	r0, #1
 80028ba:	e010      	b.n	80028de <HAL_SD_WriteBlocks+0x46>
  if(hsd->State == HAL_SD_STATE_READY)
 80028bc:	f894 0034 	ldrb.w	r0, [r4, #52]	; 0x34
 80028c0:	b2c0      	uxtb	r0, r0
 80028c2:	2801      	cmp	r0, #1
 80028c4:	f040 809f 	bne.w	8002a06 <HAL_SD_WriteBlocks+0x16e>
    if((BlockAdd + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80028c8:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 80028ca:	eb09 0306 	add.w	r3, r9, r6
    hsd->ErrorCode = HAL_DMA_ERROR_NONE;
 80028ce:	2100      	movs	r1, #0
    if((BlockAdd + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80028d0:	4293      	cmp	r3, r2
    hsd->ErrorCode = HAL_DMA_ERROR_NONE;
 80028d2:	63a1      	str	r1, [r4, #56]	; 0x38
    if((BlockAdd + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80028d4:	d906      	bls.n	80028e4 <HAL_SD_WriteBlocks+0x4c>
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80028d6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80028d8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80028dc:	63a3      	str	r3, [r4, #56]	; 0x38
}
 80028de:	b006      	add	sp, #24
 80028e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    hsd->State = HAL_SD_STATE_BUSY;
 80028e4:	2303      	movs	r3, #3
 80028e6:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    hsd->Instance->DCTRL = 0U;
 80028ea:	6820      	ldr	r0, [r4, #0]
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80028ec:	6c63      	ldr	r3, [r4, #68]	; 0x44
    hsd->Instance->DCTRL = 0U;
 80028ee:	62c1      	str	r1, [r0, #44]	; 0x2c
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80028f0:	2b01      	cmp	r3, #1
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80028f2:	f44f 7100 	mov.w	r1, #512	; 0x200
      BlockAdd *= 512U;
 80028f6:	bf18      	it	ne
 80028f8:	ea4f 2949 	movne.w	r9, r9, lsl #9
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80028fc:	f001 f80f 	bl	800391e <SDMMC_CmdBlockLength>
    if(errorstate != HAL_SD_ERROR_NONE)
 8002900:	b150      	cbz	r0, 8002918 <HAL_SD_WriteBlocks+0x80>
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);  
 8002902:	6823      	ldr	r3, [r4, #0]
 8002904:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8002908:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 800290a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800290c:	4318      	orrs	r0, r3
 800290e:	63a0      	str	r0, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8002910:	2001      	movs	r0, #1
 8002912:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
      return HAL_ERROR;
 8002916:	e7e2      	b.n	80028de <HAL_SD_WriteBlocks+0x46>
    if(NumberOfBlocks > 1U)
 8002918:	2e01      	cmp	r6, #1
 800291a:	d935      	bls.n	8002988 <HAL_SD_WriteBlocks+0xf0>
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 800291c:	2320      	movs	r3, #32
 800291e:	6323      	str	r3, [r4, #48]	; 0x30
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, BlockAdd);
 8002920:	4649      	mov	r1, r9
 8002922:	6820      	ldr	r0, [r4, #0]
 8002924:	f001 f85b 	bl	80039de <SDMMC_CmdWriteMultiBlock>
    if(errorstate != HAL_SD_ERROR_NONE)
 8002928:	2800      	cmp	r0, #0
 800292a:	d1ea      	bne.n	8002902 <HAL_SD_WriteBlocks+0x6a>
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800292c:	f04f 33ff 	mov.w	r3, #4294967295
 8002930:	9300      	str	r3, [sp, #0]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8002932:	0273      	lsls	r3, r6, #9
 8002934:	9301      	str	r3, [sp, #4]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8002936:	2390      	movs	r3, #144	; 0x90
 8002938:	9302      	str	r3, [sp, #8]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 800293a:	9003      	str	r0, [sp, #12]
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800293c:	9004      	str	r0, [sp, #16]
    config.DPSM          = SDIO_DPSM_ENABLE;
 800293e:	2301      	movs	r3, #1
    SDIO_ConfigData(hsd->Instance, &config);
 8002940:	4669      	mov	r1, sp
 8002942:	6820      	ldr	r0, [r4, #0]
    config.DPSM          = SDIO_DPSM_ENABLE;
 8002944:	9305      	str	r3, [sp, #20]
    SDIO_ConfigData(hsd->Instance, &config);
 8002946:	f000 ffd7 	bl	80038f8 <SDIO_ConfigData>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 800294a:	f240 3a1a 	movw	sl, #794	; 0x31a
 800294e:	6820      	ldr	r0, [r4, #0]
 8002950:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8002952:	ea13 0f0a 	tst.w	r3, sl
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE))
 8002956:	6b43      	ldr	r3, [r0, #52]	; 0x34
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8002958:	d01d      	beq.n	8002996 <HAL_SD_WriteBlocks+0xfe>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 800295a:	05dd      	lsls	r5, r3, #23
 800295c:	d508      	bpl.n	8002970 <HAL_SD_WriteBlocks+0xd8>
 800295e:	2e01      	cmp	r6, #1
 8002960:	d906      	bls.n	8002970 <HAL_SD_WriteBlocks+0xd8>
      if(hsd->SdCard.CardType != CARD_SECURED)
 8002962:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8002964:	2b03      	cmp	r3, #3
 8002966:	d003      	beq.n	8002970 <HAL_SD_WriteBlocks+0xd8>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8002968:	f001 f852 	bl	8003a10 <SDMMC_CmdStopTransfer>
        if(errorstate != HAL_SD_ERROR_NONE)
 800296c:	2800      	cmp	r0, #0
 800296e:	d1c8      	bne.n	8002902 <HAL_SD_WriteBlocks+0x6a>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8002970:	6823      	ldr	r3, [r4, #0]
 8002972:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002974:	0711      	lsls	r1, r2, #28
 8002976:	d52d      	bpl.n	80029d4 <HAL_SD_WriteBlocks+0x13c>
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002978:	f240 52ff 	movw	r2, #1535	; 0x5ff
 800297c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800297e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002980:	f043 0308 	orr.w	r3, r3, #8
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8002984:	63a3      	str	r3, [r4, #56]	; 0x38
 8002986:	e7c3      	b.n	8002910 <HAL_SD_WriteBlocks+0x78>
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 8002988:	2310      	movs	r3, #16
 800298a:	6323      	str	r3, [r4, #48]	; 0x30
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, BlockAdd);
 800298c:	4649      	mov	r1, r9
 800298e:	6820      	ldr	r0, [r4, #0]
 8002990:	f001 f80d 	bl	80039ae <SDMMC_CmdWriteSingleBlock>
 8002994:	e7c8      	b.n	8002928 <HAL_SD_WriteBlocks+0x90>
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE))
 8002996:	045b      	lsls	r3, r3, #17
 8002998:	d509      	bpl.n	80029ae <HAL_SD_WriteBlocks+0x116>
 800299a:	46a9      	mov	r9, r5
 800299c:	3520      	adds	r5, #32
          SDIO_WriteFIFO(hsd->Instance, (tempbuff + count));
 800299e:	4649      	mov	r1, r9
 80029a0:	6820      	ldr	r0, [r4, #0]
 80029a2:	f109 0904 	add.w	r9, r9, #4
 80029a6:	f000 feec 	bl	8003782 <SDIO_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 80029aa:	454d      	cmp	r5, r9
 80029ac:	d1f7      	bne.n	800299e <HAL_SD_WriteBlocks+0x106>
      if((Timeout == 0U)||((HAL_GetTick()-tickstart) >=  Timeout))
 80029ae:	b957      	cbnz	r7, 80029c6 <HAL_SD_WriteBlocks+0x12e>
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);  
 80029b0:	6823      	ldr	r3, [r4, #0]
 80029b2:	f240 52ff 	movw	r2, #1535	; 0x5ff
 80029b6:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 80029b8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80029ba:	63a3      	str	r3, [r4, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 80029bc:	2301      	movs	r3, #1
 80029be:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        return HAL_TIMEOUT;
 80029c2:	2003      	movs	r0, #3
 80029c4:	e78b      	b.n	80028de <HAL_SD_WriteBlocks+0x46>
      if((Timeout == 0U)||((HAL_GetTick()-tickstart) >=  Timeout))
 80029c6:	f7fe fb2d 	bl	8001024 <HAL_GetTick>
 80029ca:	eba0 0008 	sub.w	r0, r0, r8
 80029ce:	4287      	cmp	r7, r0
 80029d0:	d8bd      	bhi.n	800294e <HAL_SD_WriteBlocks+0xb6>
 80029d2:	e7ed      	b.n	80029b0 <HAL_SD_WriteBlocks+0x118>
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 80029d4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80029d6:	0792      	lsls	r2, r2, #30
 80029d8:	d506      	bpl.n	80029e8 <HAL_SD_WriteBlocks+0x150>
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80029da:	f240 52ff 	movw	r2, #1535	; 0x5ff
 80029de:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;      
 80029e0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80029e2:	f043 0302 	orr.w	r3, r3, #2
 80029e6:	e7cd      	b.n	8002984 <HAL_SD_WriteBlocks+0xec>
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR))
 80029e8:	6b58      	ldr	r0, [r3, #52]	; 0x34
 80029ea:	f240 52ff 	movw	r2, #1535	; 0x5ff
 80029ee:	f010 0010 	ands.w	r0, r0, #16
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80029f2:	639a      	str	r2, [r3, #56]	; 0x38
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR))
 80029f4:	d003      	beq.n	80029fe <HAL_SD_WriteBlocks+0x166>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 80029f6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80029f8:	f043 0310 	orr.w	r3, r3, #16
 80029fc:	e7c2      	b.n	8002984 <HAL_SD_WriteBlocks+0xec>
    hsd->State = HAL_SD_STATE_READY;
 80029fe:	2301      	movs	r3, #1
 8002a00:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    return HAL_OK;
 8002a04:	e76b      	b.n	80028de <HAL_SD_WriteBlocks+0x46>
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8002a06:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002a08:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002a0c:	e753      	b.n	80028b6 <HAL_SD_WriteBlocks+0x1e>

08002a0e <HAL_SD_ErrorCallback>:
 8002a0e:	4770      	bx	lr

08002a10 <HAL_SD_GetCardCSD>:
  tmp = (hsd->CSD[0U] & 0xFF000000U) >> 24U;
 8002a10:	6e43      	ldr	r3, [r0, #100]	; 0x64
  pCSD->CSDStruct      = (uint8_t)((tmp & 0xC0U) >> 6U);
 8002a12:	0f9a      	lsrs	r2, r3, #30
 8002a14:	700a      	strb	r2, [r1, #0]
  pCSD->SysSpecVersion = (uint8_t)((tmp & 0x3CU) >> 2U);
 8002a16:	f3c3 6283 	ubfx	r2, r3, #26, #4
 8002a1a:	704a      	strb	r2, [r1, #1]
  pCSD->Reserved1      = tmp & 0x03U;
 8002a1c:	f3c3 6201 	ubfx	r2, r3, #24, #2
 8002a20:	708a      	strb	r2, [r1, #2]
  pCSD->TAAC = (uint8_t)tmp;
 8002a22:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8002a26:	70ca      	strb	r2, [r1, #3]
  pCSD->NSAC = (uint8_t)tmp;
 8002a28:	f3c3 2207 	ubfx	r2, r3, #8, #8
  pCSD->MaxBusClkFrec = (uint8_t)tmp;
 8002a2c:	b2db      	uxtb	r3, r3
  pCSD->NSAC = (uint8_t)tmp;
 8002a2e:	710a      	strb	r2, [r1, #4]
  pCSD->MaxBusClkFrec = (uint8_t)tmp;
 8002a30:	714b      	strb	r3, [r1, #5]
  tmp = (hsd->CSD[1U] & 0xFF000000U) >> 24U;
 8002a32:	6e83      	ldr	r3, [r0, #104]	; 0x68
 8002a34:	0e1a      	lsrs	r2, r3, #24
  pCSD->CardComdClasses = (uint16_t)(tmp << 4U);
 8002a36:	0112      	lsls	r2, r2, #4
 8002a38:	80ca      	strh	r2, [r1, #6]
  pCSD->CardComdClasses |= (uint16_t)((tmp & 0xF0U) >> 4U);
 8002a3a:	88ca      	ldrh	r2, [r1, #6]
{
 8002a3c:	b530      	push	{r4, r5, lr}
  pCSD->CardComdClasses |= (uint16_t)((tmp & 0xF0U) >> 4U);
 8002a3e:	b292      	uxth	r2, r2
 8002a40:	f3c3 5403 	ubfx	r4, r3, #20, #4
 8002a44:	4322      	orrs	r2, r4
 8002a46:	80ca      	strh	r2, [r1, #6]
  pCSD->RdBlockLen       = (uint8_t)(tmp & 0x0FU);
 8002a48:	f3c3 4203 	ubfx	r2, r3, #16, #4
 8002a4c:	720a      	strb	r2, [r1, #8]
  tmp = (hsd->CSD[1U] & 0x0000FF00U) >> 8U;
 8002a4e:	f3c3 2207 	ubfx	r2, r3, #8, #8
  pCSD->PartBlockRead   = (uint8_t)((tmp & 0x80U) >> 7U);
 8002a52:	09d4      	lsrs	r4, r2, #7
 8002a54:	724c      	strb	r4, [r1, #9]
  pCSD->WrBlockMisalign = (uint8_t)((tmp & 0x40U) >> 6U);
 8002a56:	f3c2 1480 	ubfx	r4, r2, #6, #1
 8002a5a:	728c      	strb	r4, [r1, #10]
  pCSD->RdBlockMisalign = (uint8_t)((tmp & 0x20U) >> 5U);
 8002a5c:	f3c2 1440 	ubfx	r4, r2, #5, #1
 8002a60:	72cc      	strb	r4, [r1, #11]
  pCSD->DSRImpl         = (uint8_t)((tmp & 0x10U) >> 4U);
 8002a62:	f3c2 1400 	ubfx	r4, r2, #4, #1
 8002a66:	730c      	strb	r4, [r1, #12]
  pCSD->Reserved2       = 0U; /*!< Reserved */
 8002a68:	2400      	movs	r4, #0
 8002a6a:	734c      	strb	r4, [r1, #13]
  if(hsd->SdCard.CardType == CARD_SDSC)
 8002a6c:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8002a6e:	2c00      	cmp	r4, #0
 8002a70:	f040 8083 	bne.w	8002b7a <HAL_SD_GetCardCSD+0x16a>
    pCSD->DeviceSize = (tmp & 0x03U) << 10U;
 8002a74:	0292      	lsls	r2, r2, #10
 8002a76:	f402 6240 	and.w	r2, r2, #3072	; 0xc00
 8002a7a:	610a      	str	r2, [r1, #16]
    pCSD->DeviceSize |= (tmp) << 2U;
 8002a7c:	690a      	ldr	r2, [r1, #16]
 8002a7e:	009b      	lsls	r3, r3, #2
 8002a80:	f403 737f 	and.w	r3, r3, #1020	; 0x3fc
 8002a84:	4313      	orrs	r3, r2
 8002a86:	610b      	str	r3, [r1, #16]
    tmp = (uint8_t)((hsd->CSD[2U] & 0xFF000000U) >> 24U);
 8002a88:	6ec2      	ldr	r2, [r0, #108]	; 0x6c
    pCSD->DeviceSize |= (tmp & 0xC0U) >> 6U;
 8002a8a:	690b      	ldr	r3, [r1, #16]
 8002a8c:	ea43 7392 	orr.w	r3, r3, r2, lsr #30
 8002a90:	610b      	str	r3, [r1, #16]
    pCSD->MaxRdCurrentVDDMin = (tmp & 0x38U) >> 3U;
 8002a92:	f3c2 63c2 	ubfx	r3, r2, #27, #3
 8002a96:	750b      	strb	r3, [r1, #20]
    pCSD->MaxRdCurrentVDDMax = (tmp & 0x07U);
 8002a98:	f3c2 6302 	ubfx	r3, r2, #24, #3
 8002a9c:	754b      	strb	r3, [r1, #21]
    pCSD->MaxWrCurrentVDDMin = (tmp & 0xE0U) >> 5U;
 8002a9e:	f3c2 5342 	ubfx	r3, r2, #21, #3
 8002aa2:	758b      	strb	r3, [r1, #22]
    pCSD->MaxWrCurrentVDDMax = (tmp & 0x1CU) >> 2U;
 8002aa4:	f3c2 4382 	ubfx	r3, r2, #18, #3
 8002aa8:	75cb      	strb	r3, [r1, #23]
    pCSD->DeviceSizeMul      = (tmp & 0x03U) << 1U;
 8002aaa:	0bd3      	lsrs	r3, r2, #15
 8002aac:	f003 0306 	and.w	r3, r3, #6
 8002ab0:	760b      	strb	r3, [r1, #24]
    pCSD->DeviceSizeMul |= (tmp & 0x80U) >> 7U;
 8002ab2:	7e0c      	ldrb	r4, [r1, #24]
 8002ab4:	f3c2 2307 	ubfx	r3, r2, #8, #8
 8002ab8:	f3c2 32c0 	ubfx	r2, r2, #15, #1
 8002abc:	4322      	orrs	r2, r4
 8002abe:	760a      	strb	r2, [r1, #24]
    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8002ac0:	690a      	ldr	r2, [r1, #16]
    hsd->SdCard.BlockNbr *= (1U << (pCSD->DeviceSizeMul + 2U));
 8002ac2:	7e0c      	ldrb	r4, [r1, #24]
    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8002ac4:	3201      	adds	r2, #1
    hsd->SdCard.BlockNbr *= (1U << (pCSD->DeviceSizeMul + 2U));
 8002ac6:	3402      	adds	r4, #2
 8002ac8:	40a2      	lsls	r2, r4
 8002aca:	6542      	str	r2, [r0, #84]	; 0x54
    hsd->SdCard.BlockSize = 1U << (pCSD->RdBlockLen);
 8002acc:	7a0d      	ldrb	r5, [r1, #8]
 8002ace:	2401      	movs	r4, #1
 8002ad0:	40ac      	lsls	r4, r5
 8002ad2:	6584      	str	r4, [r0, #88]	; 0x58
    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U); 
 8002ad4:	0a64      	lsrs	r4, r4, #9
 8002ad6:	4362      	muls	r2, r4
 8002ad8:	65c2      	str	r2, [r0, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8002ada:	f44f 7200 	mov.w	r2, #512	; 0x200
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize = 512U;
 8002ade:	6602      	str	r2, [r0, #96]	; 0x60
  pCSD->EraseGrSize = (tmp & 0x40U) >> 6U;
 8002ae0:	f3c3 1280 	ubfx	r2, r3, #6, #1
  pCSD->EraseGrMul  = (tmp & 0x3FU) << 1U;
 8002ae4:	005b      	lsls	r3, r3, #1
 8002ae6:	f003 037e 	and.w	r3, r3, #126	; 0x7e
  pCSD->EraseGrSize = (tmp & 0x40U) >> 6U;
 8002aea:	764a      	strb	r2, [r1, #25]
  pCSD->EraseGrMul  = (tmp & 0x3FU) << 1U;
 8002aec:	768b      	strb	r3, [r1, #26]
  tmp = (uint8_t)(hsd->CSD[2U] & 0x000000FFU);
 8002aee:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
  pCSD->EraseGrMul     |= (tmp & 0x80U) >> 7U;
 8002af0:	7e8a      	ldrb	r2, [r1, #26]
 8002af2:	f3c3 14c0 	ubfx	r4, r3, #7, #1
 8002af6:	4322      	orrs	r2, r4
  pCSD->WrProtectGrSize = (tmp & 0x7FU);
 8002af8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
  pCSD->EraseGrMul     |= (tmp & 0x80U) >> 7U;
 8002afc:	768a      	strb	r2, [r1, #26]
  pCSD->WrProtectGrSize = (tmp & 0x7FU);
 8002afe:	76cb      	strb	r3, [r1, #27]
  tmp = (uint8_t)((hsd->CSD[3U] & 0xFF000000U) >> 24U);
 8002b00:	6f03      	ldr	r3, [r0, #112]	; 0x70
  pCSD->WrProtectGrEnable = (tmp & 0x80U) >> 7U;
 8002b02:	0fda      	lsrs	r2, r3, #31
 8002b04:	770a      	strb	r2, [r1, #28]
  pCSD->ManDeflECC        = (tmp & 0x60U) >> 5U;
 8002b06:	f3c3 7241 	ubfx	r2, r3, #29, #2
 8002b0a:	774a      	strb	r2, [r1, #29]
  pCSD->WrSpeedFact       = (tmp & 0x1CU) >> 2U;
 8002b0c:	f3c3 6282 	ubfx	r2, r3, #26, #3
 8002b10:	778a      	strb	r2, [r1, #30]
  pCSD->MaxWrBlockLen     = (tmp & 0x03U) << 2U;
 8002b12:	0d9a      	lsrs	r2, r3, #22
 8002b14:	f002 020c 	and.w	r2, r2, #12
 8002b18:	77ca      	strb	r2, [r1, #31]
  pCSD->MaxWrBlockLen      |= (tmp & 0xC0U) >> 6U;
 8002b1a:	7fca      	ldrb	r2, [r1, #31]
 8002b1c:	f3c3 5081 	ubfx	r0, r3, #22, #2
 8002b20:	4302      	orrs	r2, r0
 8002b22:	77ca      	strb	r2, [r1, #31]
  pCSD->WriteBlockPaPartial = (tmp & 0x20U) >> 5U;
 8002b24:	f3c3 5240 	ubfx	r2, r3, #21, #1
 8002b28:	f881 2020 	strb.w	r2, [r1, #32]
  pCSD->Reserved3           = 0U;
 8002b2c:	2000      	movs	r0, #0
  pCSD->ContentProtectAppli = (tmp & 0x01U);
 8002b2e:	f3c3 4200 	ubfx	r2, r3, #16, #1
  pCSD->Reserved3           = 0U;
 8002b32:	f881 0021 	strb.w	r0, [r1, #33]	; 0x21
  pCSD->ContentProtectAppli = (tmp & 0x01U);
 8002b36:	f881 2022 	strb.w	r2, [r1, #34]	; 0x22
  pCSD->FileFormatGrouop = (tmp & 0x80U) >> 7U;
 8002b3a:	f3c3 32c0 	ubfx	r2, r3, #15, #1
 8002b3e:	f881 2023 	strb.w	r2, [r1, #35]	; 0x23
  pCSD->CopyFlag         = (tmp & 0x40U) >> 6U;
 8002b42:	f3c3 3280 	ubfx	r2, r3, #14, #1
 8002b46:	f881 2024 	strb.w	r2, [r1, #36]	; 0x24
  pCSD->PermWrProtect    = (tmp & 0x20U) >> 5U;
 8002b4a:	f3c3 3240 	ubfx	r2, r3, #13, #1
 8002b4e:	f881 2025 	strb.w	r2, [r1, #37]	; 0x25
  pCSD->TempWrProtect    = (tmp & 0x10U) >> 4U;
 8002b52:	f3c3 3200 	ubfx	r2, r3, #12, #1
 8002b56:	f881 2026 	strb.w	r2, [r1, #38]	; 0x26
  pCSD->FileFormat       = (tmp & 0x0CU) >> 2U;
 8002b5a:	f3c3 2281 	ubfx	r2, r3, #10, #2
 8002b5e:	f881 2027 	strb.w	r2, [r1, #39]	; 0x27
  pCSD->ECC              = (tmp & 0x03U);
 8002b62:	f3c3 2201 	ubfx	r2, r3, #8, #2
  pCSD->CSD_CRC   = (tmp & 0xFEU) >> 1U;
 8002b66:	f3c3 0346 	ubfx	r3, r3, #1, #7
  pCSD->ECC              = (tmp & 0x03U);
 8002b6a:	f881 2028 	strb.w	r2, [r1, #40]	; 0x28
  pCSD->CSD_CRC   = (tmp & 0xFEU) >> 1U;
 8002b6e:	f881 3029 	strb.w	r3, [r1, #41]	; 0x29
  pCSD->Reserved4 = 1U;
 8002b72:	2301      	movs	r3, #1
 8002b74:	f881 302a 	strb.w	r3, [r1, #42]	; 0x2a
}
 8002b78:	bd30      	pop	{r4, r5, pc}
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8002b7a:	2c01      	cmp	r4, #1
 8002b7c:	d11a      	bne.n	8002bb4 <HAL_SD_GetCardCSD+0x1a4>
    pCSD->DeviceSize = (tmp & 0x3FU) << 16U;
 8002b7e:	041b      	lsls	r3, r3, #16
 8002b80:	f403 137c 	and.w	r3, r3, #4128768	; 0x3f0000
 8002b84:	610b      	str	r3, [r1, #16]
    tmp = (uint8_t)((hsd->CSD[2U] & 0xFF000000U) >> 24U);
 8002b86:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
    pCSD->DeviceSize |= (tmp << 8U);
 8002b88:	690a      	ldr	r2, [r1, #16]
    tmp = (uint8_t)((hsd->CSD[2U] & 0xFF000000U) >> 24U);
 8002b8a:	0e1c      	lsrs	r4, r3, #24
    pCSD->DeviceSize |= (tmp << 8U);
 8002b8c:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
 8002b90:	610a      	str	r2, [r1, #16]
    pCSD->DeviceSize |= (tmp);
 8002b92:	690c      	ldr	r4, [r1, #16]
 8002b94:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8002b98:	4322      	orrs	r2, r4
 8002b9a:	610a      	str	r2, [r1, #16]
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr = (((uint64_t)pCSD->DeviceSize + 1U) * 1024U);
 8002b9c:	690a      	ldr	r2, [r1, #16]
 8002b9e:	0292      	lsls	r2, r2, #10
 8002ba0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002ba4:	6542      	str	r2, [r0, #84]	; 0x54
 8002ba6:	65c2      	str	r2, [r0, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize = 512U;
 8002ba8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002bac:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8002bb0:	6582      	str	r2, [r0, #88]	; 0x58
 8002bb2:	e794      	b.n	8002ade <HAL_SD_GetCardCSD+0xce>
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);   
 8002bb4:	6803      	ldr	r3, [r0, #0]
 8002bb6:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8002bba:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8002bbc:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8002bbe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002bc2:	6383      	str	r3, [r0, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8002bc4:	2301      	movs	r3, #1
 8002bc6:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34
    return HAL_ERROR;
 8002bca:	4618      	mov	r0, r3
 8002bcc:	bd30      	pop	{r4, r5, pc}
	...

08002bd0 <HAL_SD_InitCard>:
{
 8002bd0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002bd2:	b099      	sub	sp, #100	; 0x64
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 8002bd4:	2500      	movs	r5, #0
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 8002bd6:	2376      	movs	r3, #118	; 0x76
 8002bd8:	930c      	str	r3, [sp, #48]	; 0x30
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 8002bda:	950a      	str	r5, [sp, #40]	; 0x28
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8002bdc:	950b      	str	r5, [sp, #44]	; 0x2c
  SDIO_Init(hsd->Instance, Init);
 8002bde:	ab0a      	add	r3, sp, #40	; 0x28
{
 8002be0:	4604      	mov	r4, r0
  SDIO_Init(hsd->Instance, Init);
 8002be2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002be6:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
  __HAL_SD_DISABLE(hsd); 
 8002bea:	4e6f      	ldr	r6, [pc, #444]	; (8002da8 <HAL_SD_InitCard+0x1d8>)
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 8002bec:	9507      	str	r5, [sp, #28]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 8002bee:	9508      	str	r5, [sp, #32]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8002bf0:	9509      	str	r5, [sp, #36]	; 0x24
  SDIO_Init(hsd->Instance, Init);
 8002bf2:	ab07      	add	r3, sp, #28
 8002bf4:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002bf6:	6820      	ldr	r0, [r4, #0]
 8002bf8:	f000 fda4 	bl	8003744 <SDIO_Init>
  __HAL_SD_ENABLE(hsd);
 8002bfc:	2701      	movs	r7, #1
  __HAL_SD_DISABLE(hsd); 
 8002bfe:	6035      	str	r5, [r6, #0]
  SDIO_PowerState_ON(hsd->Instance);
 8002c00:	6820      	ldr	r0, [r4, #0]
 8002c02:	f000 fdc3 	bl	800378c <SDIO_PowerState_ON>
  __HAL_SD_ENABLE(hsd);
 8002c06:	6037      	str	r7, [r6, #0]
  HAL_Delay(2U);
 8002c08:	2002      	movs	r0, #2
 8002c0a:	f7fe fa11 	bl	8001030 <HAL_Delay>
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8002c0e:	6820      	ldr	r0, [r4, #0]
  __IO uint32_t count = 0U;
 8002c10:	9506      	str	r5, [sp, #24]
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8002c12:	f000 ff2f 	bl	8003a74 <SDMMC_CmdGoIdleState>
  if(errorstate != HAL_SD_ERROR_NONE)
 8002c16:	4606      	mov	r6, r0
 8002c18:	b968      	cbnz	r0, 8002c36 <HAL_SD_InitCard+0x66>
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8002c1a:	6820      	ldr	r0, [r4, #0]
 8002c1c:	f000 ff52 	bl	8003ac4 <SDMMC_CmdOperCond>
  if(errorstate != HAL_SD_ERROR_NONE)
 8002c20:	b380      	cbz	r0, 8002c84 <HAL_SD_InitCard+0xb4>
    hsd->SdCard.CardVersion = CARD_V1_X;
 8002c22:	64a6      	str	r6, [r4, #72]	; 0x48
      if(count++ == SDMMC_MAX_VOLT_TRIAL)
 8002c24:	f64f 75ff 	movw	r5, #65535	; 0xffff
 8002c28:	9b06      	ldr	r3, [sp, #24]
 8002c2a:	1c5a      	adds	r2, r3, #1
 8002c2c:	42ab      	cmp	r3, r5
 8002c2e:	9206      	str	r2, [sp, #24]
 8002c30:	d108      	bne.n	8002c44 <HAL_SD_InitCard+0x74>
        return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8002c32:	f04f 7680 	mov.w	r6, #16777216	; 0x1000000
    hsd->State = HAL_SD_STATE_READY;
 8002c36:	2001      	movs	r0, #1
 8002c38:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8002c3c:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8002c3e:	430e      	orrs	r6, r1
 8002c40:	63a6      	str	r6, [r4, #56]	; 0x38
    return HAL_ERROR;
 8002c42:	e081      	b.n	8002d48 <HAL_SD_InitCard+0x178>
      errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0U);
 8002c44:	2100      	movs	r1, #0
 8002c46:	6820      	ldr	r0, [r4, #0]
 8002c48:	f000 ff74 	bl	8003b34 <SDMMC_CmdAppCommand>
      if(errorstate != HAL_SD_ERROR_NONE)
 8002c4c:	4601      	mov	r1, r0
 8002c4e:	b110      	cbz	r0, 8002c56 <HAL_SD_InitCard+0x86>
        return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8002c50:	f04f 5680 	mov.w	r6, #268435456	; 0x10000000
 8002c54:	e7ef      	b.n	8002c36 <HAL_SD_InitCard+0x66>
      errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_STD_CAPACITY);
 8002c56:	6820      	ldr	r0, [r4, #0]
 8002c58:	f000 ff84 	bl	8003b64 <SDMMC_CmdAppOperCommand>
      if(errorstate != HAL_SD_ERROR_NONE)
 8002c5c:	4601      	mov	r1, r0
 8002c5e:	2800      	cmp	r0, #0
 8002c60:	d1f6      	bne.n	8002c50 <HAL_SD_InitCard+0x80>
      response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8002c62:	6820      	ldr	r0, [r4, #0]
 8002c64:	f000 fdad 	bl	80037c2 <SDIO_GetResponse>
    while(validvoltage == 0U)
 8002c68:	2800      	cmp	r0, #0
 8002c6a:	dadd      	bge.n	8002c28 <HAL_SD_InitCard+0x58>
    hsd->SdCard.CardType = CARD_SDSC;
 8002c6c:	2300      	movs	r3, #0
      hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8002c6e:	6463      	str	r3, [r4, #68]	; 0x44
  if(SDIO_GetPowerState(hsd->Instance) == 0U) 
 8002c70:	6820      	ldr	r0, [r4, #0]
  uint16_t sd_rca = 1U;
 8002c72:	2301      	movs	r3, #1
 8002c74:	f8ad 3016 	strh.w	r3, [sp, #22]
  if(SDIO_GetPowerState(hsd->Instance) == 0U) 
 8002c78:	f000 fd8c 	bl	8003794 <SDIO_GetPowerState>
 8002c7c:	bb10      	cbnz	r0, 8002cc4 <HAL_SD_InitCard+0xf4>
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8002c7e:	f04f 6580 	mov.w	r5, #67108864	; 0x4000000
 8002c82:	e06b      	b.n	8002d5c <HAL_SD_InitCard+0x18c>
    hsd->SdCard.CardVersion = CARD_V2_X;
 8002c84:	64a7      	str	r7, [r4, #72]	; 0x48
      if(count++ == SDMMC_MAX_VOLT_TRIAL)
 8002c86:	f64f 75ff 	movw	r5, #65535	; 0xffff
 8002c8a:	9b06      	ldr	r3, [sp, #24]
 8002c8c:	1c5a      	adds	r2, r3, #1
 8002c8e:	42ab      	cmp	r3, r5
 8002c90:	9206      	str	r2, [sp, #24]
 8002c92:	d0ce      	beq.n	8002c32 <HAL_SD_InitCard+0x62>
      errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0U);
 8002c94:	2100      	movs	r1, #0
 8002c96:	6820      	ldr	r0, [r4, #0]
 8002c98:	f000 ff4c 	bl	8003b34 <SDMMC_CmdAppCommand>
      if(errorstate != HAL_SD_ERROR_NONE)
 8002c9c:	4606      	mov	r6, r0
 8002c9e:	2800      	cmp	r0, #0
 8002ca0:	d1c9      	bne.n	8002c36 <HAL_SD_InitCard+0x66>
      errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_HIGH_CAPACITY);
 8002ca2:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8002ca6:	6820      	ldr	r0, [r4, #0]
 8002ca8:	f000 ff5c 	bl	8003b64 <SDMMC_CmdAppOperCommand>
      if(errorstate != HAL_SD_ERROR_NONE)
 8002cac:	4606      	mov	r6, r0
 8002cae:	2800      	cmp	r0, #0
 8002cb0:	d1c1      	bne.n	8002c36 <HAL_SD_InitCard+0x66>
      response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8002cb2:	4601      	mov	r1, r0
 8002cb4:	6820      	ldr	r0, [r4, #0]
 8002cb6:	f000 fd84 	bl	80037c2 <SDIO_GetResponse>
    while(validvoltage == 0U)
 8002cba:	0fc3      	lsrs	r3, r0, #31
 8002cbc:	d0e5      	beq.n	8002c8a <HAL_SD_InitCard+0xba>
    if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8002cbe:	0042      	lsls	r2, r0, #1
 8002cc0:	d5d4      	bpl.n	8002c6c <HAL_SD_InitCard+0x9c>
 8002cc2:	e7d4      	b.n	8002c6e <HAL_SD_InitCard+0x9e>
  if(hsd->SdCard.CardType != CARD_SECURED) 
 8002cc4:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8002cc6:	2b03      	cmp	r3, #3
 8002cc8:	d01a      	beq.n	8002d00 <HAL_SD_InitCard+0x130>
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8002cca:	6820      	ldr	r0, [r4, #0]
 8002ccc:	f000 ff7b 	bl	8003bc6 <SDMMC_CmdSendCID>
    if(errorstate != HAL_SD_ERROR_NONE)
 8002cd0:	4605      	mov	r5, r0
 8002cd2:	2800      	cmp	r0, #0
 8002cd4:	d142      	bne.n	8002d5c <HAL_SD_InitCard+0x18c>
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8002cd6:	4601      	mov	r1, r0
 8002cd8:	6820      	ldr	r0, [r4, #0]
 8002cda:	f000 fd72 	bl	80037c2 <SDIO_GetResponse>
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8002cde:	2104      	movs	r1, #4
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8002ce0:	6760      	str	r0, [r4, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8002ce2:	6820      	ldr	r0, [r4, #0]
 8002ce4:	f000 fd6d 	bl	80037c2 <SDIO_GetResponse>
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8002ce8:	2108      	movs	r1, #8
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8002cea:	67a0      	str	r0, [r4, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8002cec:	6820      	ldr	r0, [r4, #0]
 8002cee:	f000 fd68 	bl	80037c2 <SDIO_GetResponse>
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8002cf2:	210c      	movs	r1, #12
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8002cf4:	67e0      	str	r0, [r4, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8002cf6:	6820      	ldr	r0, [r4, #0]
 8002cf8:	f000 fd63 	bl	80037c2 <SDIO_GetResponse>
 8002cfc:	f8c4 0080 	str.w	r0, [r4, #128]	; 0x80
  if(hsd->SdCard.CardType != CARD_SECURED) 
 8002d00:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8002d02:	2b03      	cmp	r3, #3
 8002d04:	d122      	bne.n	8002d4c <HAL_SD_InitCard+0x17c>
  if(hsd->SdCard.CardType != CARD_SECURED) 
 8002d06:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8002d08:	2b03      	cmp	r3, #3
 8002d0a:	d12e      	bne.n	8002d6a <HAL_SD_InitCard+0x19a>
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 8002d0c:	2104      	movs	r1, #4
 8002d0e:	6820      	ldr	r0, [r4, #0]
 8002d10:	f000 fd57 	bl	80037c2 <SDIO_GetResponse>
 8002d14:	0d00      	lsrs	r0, r0, #20
 8002d16:	64e0      	str	r0, [r4, #76]	; 0x4c
  HAL_SD_GetCardCSD(hsd, &CSD);
 8002d18:	a90d      	add	r1, sp, #52	; 0x34
 8002d1a:	4620      	mov	r0, r4
 8002d1c:	f7ff fe78 	bl	8002a10 <HAL_SD_GetCardCSD>
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8002d20:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8002d22:	6820      	ldr	r0, [r4, #0]
 8002d24:	0412      	lsls	r2, r2, #16
 8002d26:	2300      	movs	r3, #0
 8002d28:	f000 fe8c 	bl	8003a44 <SDMMC_CmdSelDesel>
  if(errorstate != HAL_SD_ERROR_NONE)
 8002d2c:	4605      	mov	r5, r0
 8002d2e:	b9a8      	cbnz	r0, 8002d5c <HAL_SD_InitCard+0x18c>
  SDIO_Init(hsd->Instance, hsd->Init);
 8002d30:	f104 0310 	add.w	r3, r4, #16
 8002d34:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002d38:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8002d3c:	1d23      	adds	r3, r4, #4
 8002d3e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002d40:	6820      	ldr	r0, [r4, #0]
 8002d42:	f000 fcff 	bl	8003744 <SDIO_Init>
  return HAL_OK;
 8002d46:	4628      	mov	r0, r5
}
 8002d48:	b019      	add	sp, #100	; 0x64
 8002d4a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8002d4c:	f10d 0116 	add.w	r1, sp, #22
 8002d50:	6820      	ldr	r0, [r4, #0]
 8002d52:	f000 ff63 	bl	8003c1c <SDMMC_CmdSetRelAdd>
    if(errorstate != HAL_SD_ERROR_NONE)
 8002d56:	4605      	mov	r5, r0
 8002d58:	2800      	cmp	r0, #0
 8002d5a:	d0d4      	beq.n	8002d06 <HAL_SD_InitCard+0x136>
    hsd->State = HAL_SD_STATE_READY;
 8002d5c:	2001      	movs	r0, #1
 8002d5e:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8002d62:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002d64:	431d      	orrs	r5, r3
 8002d66:	63a5      	str	r5, [r4, #56]	; 0x38
 8002d68:	e7ee      	b.n	8002d48 <HAL_SD_InitCard+0x178>
    hsd->SdCard.RelCardAdd = sd_rca;
 8002d6a:	f8bd 1016 	ldrh.w	r1, [sp, #22]
 8002d6e:	6521      	str	r1, [r4, #80]	; 0x50
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8002d70:	6820      	ldr	r0, [r4, #0]
 8002d72:	0409      	lsls	r1, r1, #16
 8002d74:	f000 ff3c 	bl	8003bf0 <SDMMC_CmdSendCSD>
    if(errorstate != HAL_SD_ERROR_NONE)
 8002d78:	4605      	mov	r5, r0
 8002d7a:	2800      	cmp	r0, #0
 8002d7c:	d1ee      	bne.n	8002d5c <HAL_SD_InitCard+0x18c>
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8002d7e:	4601      	mov	r1, r0
 8002d80:	6820      	ldr	r0, [r4, #0]
 8002d82:	f000 fd1e 	bl	80037c2 <SDIO_GetResponse>
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8002d86:	2104      	movs	r1, #4
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8002d88:	6660      	str	r0, [r4, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8002d8a:	6820      	ldr	r0, [r4, #0]
 8002d8c:	f000 fd19 	bl	80037c2 <SDIO_GetResponse>
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8002d90:	2108      	movs	r1, #8
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8002d92:	66a0      	str	r0, [r4, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8002d94:	6820      	ldr	r0, [r4, #0]
 8002d96:	f000 fd14 	bl	80037c2 <SDIO_GetResponse>
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8002d9a:	210c      	movs	r1, #12
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8002d9c:	66e0      	str	r0, [r4, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8002d9e:	6820      	ldr	r0, [r4, #0]
 8002da0:	f000 fd0f 	bl	80037c2 <SDIO_GetResponse>
 8002da4:	6720      	str	r0, [r4, #112]	; 0x70
 8002da6:	e7b1      	b.n	8002d0c <HAL_SD_InitCard+0x13c>
 8002da8:	422580a0 	.word	0x422580a0

08002dac <HAL_SD_Init>:
{
 8002dac:	b510      	push	{r4, lr}
  if(hsd == NULL)
 8002dae:	4604      	mov	r4, r0
 8002db0:	b1a0      	cbz	r0, 8002ddc <HAL_SD_Init+0x30>
  if(hsd->State == HAL_SD_STATE_RESET)
 8002db2:	f890 3034 	ldrb.w	r3, [r0, #52]	; 0x34
 8002db6:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002dba:	b913      	cbnz	r3, 8002dc2 <HAL_SD_Init+0x16>
    hsd->Lock = HAL_UNLOCKED;
 8002dbc:	7702      	strb	r2, [r0, #28]
    HAL_SD_MspInit(hsd);
 8002dbe:	f004 fc61 	bl	8007684 <HAL_SD_MspInit>
  hsd->State = HAL_SD_STATE_BUSY;
 8002dc2:	2303      	movs	r3, #3
 8002dc4:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  HAL_SD_InitCard(hsd);
 8002dc8:	4620      	mov	r0, r4
 8002dca:	f7ff ff01 	bl	8002bd0 <HAL_SD_InitCard>
  hsd->ErrorCode = HAL_DMA_ERROR_NONE;
 8002dce:	2000      	movs	r0, #0
  hsd->State = HAL_SD_STATE_READY;
 8002dd0:	2301      	movs	r3, #1
  hsd->ErrorCode = HAL_DMA_ERROR_NONE;
 8002dd2:	63a0      	str	r0, [r4, #56]	; 0x38
  hsd->Context = SD_CONTEXT_NONE;
 8002dd4:	6320      	str	r0, [r4, #48]	; 0x30
  hsd->State = HAL_SD_STATE_READY;
 8002dd6:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  return HAL_OK;
 8002dda:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8002ddc:	2001      	movs	r0, #1
}
 8002dde:	bd10      	pop	{r4, pc}

08002de0 <HAL_SD_GetCardInfo>:
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8002de0:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8002de2:	600b      	str	r3, [r1, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8002de4:	6c83      	ldr	r3, [r0, #72]	; 0x48
 8002de6:	604b      	str	r3, [r1, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8002de8:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8002dea:	608b      	str	r3, [r1, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8002dec:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8002dee:	60cb      	str	r3, [r1, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8002df0:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8002df2:	610b      	str	r3, [r1, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8002df4:	6d83      	ldr	r3, [r0, #88]	; 0x58
 8002df6:	614b      	str	r3, [r1, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8002df8:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 8002dfa:	618b      	str	r3, [r1, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8002dfc:	6e03      	ldr	r3, [r0, #96]	; 0x60
 8002dfe:	61cb      	str	r3, [r1, #28]
}
 8002e00:	2000      	movs	r0, #0
 8002e02:	4770      	bx	lr

08002e04 <HAL_SD_ConfigWideBusOperation>:
{
 8002e04:	b570      	push	{r4, r5, r6, lr}
  hsd->State = HAL_SD_STATE_BUSY;
 8002e06:	2303      	movs	r3, #3
 8002e08:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34
  if(hsd->SdCard.CardType != CARD_SECURED) 
 8002e0c:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8002e0e:	2b03      	cmp	r3, #3
{
 8002e10:	b08a      	sub	sp, #40	; 0x28
 8002e12:	4604      	mov	r4, r0
 8002e14:	460e      	mov	r6, r1
  if(hsd->SdCard.CardType != CARD_SECURED) 
 8002e16:	d002      	beq.n	8002e1e <HAL_SD_ConfigWideBusOperation+0x1a>
    if(WideMode == SDIO_BUS_WIDE_8B)
 8002e18:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 8002e1c:	d103      	bne.n	8002e26 <HAL_SD_ConfigWideBusOperation+0x22>
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8002e1e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002e20:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e24:	e056      	b.n	8002ed4 <HAL_SD_ConfigWideBusOperation+0xd0>
    else if(WideMode == SDIO_BUS_WIDE_4B)
 8002e26:	f5b1 6f00 	cmp.w	r1, #2048	; 0x800
 8002e2a:	d12d      	bne.n	8002e88 <HAL_SD_ConfigWideBusOperation+0x84>
  uint32_t scr[2U] = {0U, 0U};
 8002e2c:	2100      	movs	r1, #0
  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8002e2e:	6800      	ldr	r0, [r0, #0]
  uint32_t scr[2U] = {0U, 0U};
 8002e30:	9104      	str	r1, [sp, #16]
 8002e32:	9105      	str	r1, [sp, #20]
  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8002e34:	f000 fcc5 	bl	80037c2 <SDIO_GetResponse>
 8002e38:	0180      	lsls	r0, r0, #6
 8002e3a:	d420      	bmi.n	8002e7e <HAL_SD_ConfigWideBusOperation+0x7a>
  errorstate = SD_FindSCR(hsd, scr);
 8002e3c:	a904      	add	r1, sp, #16
 8002e3e:	4620      	mov	r0, r4
 8002e40:	f7ff fbe6 	bl	8002610 <SD_FindSCR>
  if(errorstate != HAL_OK)
 8002e44:	b960      	cbnz	r0, 8002e60 <HAL_SD_ConfigWideBusOperation+0x5c>
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8002e46:	9b05      	ldr	r3, [sp, #20]
 8002e48:	0359      	lsls	r1, r3, #13
 8002e4a:	d51a      	bpl.n	8002e82 <HAL_SD_ConfigWideBusOperation+0x7e>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8002e4c:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8002e4e:	6820      	ldr	r0, [r4, #0]
 8002e50:	0409      	lsls	r1, r1, #16
 8002e52:	f000 fe6f 	bl	8003b34 <SDMMC_CmdAppCommand>
    if(errorstate != HAL_OK)
 8002e56:	b918      	cbnz	r0, 8002e60 <HAL_SD_ConfigWideBusOperation+0x5c>
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8002e58:	2102      	movs	r1, #2
 8002e5a:	6820      	ldr	r0, [r4, #0]
 8002e5c:	f000 ff62 	bl	8003d24 <SDMMC_CmdBusWidth>
      hsd->ErrorCode |= errorstate;
 8002e60:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002e62:	4318      	orrs	r0, r3
      hsd->ErrorCode |= errorstate;
 8002e64:	63a0      	str	r0, [r4, #56]	; 0x38
  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8002e66:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 8002e68:	2d00      	cmp	r5, #0
 8002e6a:	d035      	beq.n	8002ed8 <HAL_SD_ConfigWideBusOperation+0xd4>
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002e6c:	6823      	ldr	r3, [r4, #0]
 8002e6e:	f240 52ff 	movw	r2, #1535	; 0x5ff
    hsd->State = HAL_SD_STATE_READY;
 8002e72:	2001      	movs	r0, #1
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002e74:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8002e76:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
}
 8002e7a:	b00a      	add	sp, #40	; 0x28
 8002e7c:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8002e7e:	4630      	mov	r0, r6
 8002e80:	e7ee      	b.n	8002e60 <HAL_SD_ConfigWideBusOperation+0x5c>
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8002e82:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8002e86:	e7eb      	b.n	8002e60 <HAL_SD_ConfigWideBusOperation+0x5c>
    else if(WideMode == SDIO_BUS_WIDE_1B)
 8002e88:	bb09      	cbnz	r1, 8002ece <HAL_SD_ConfigWideBusOperation+0xca>
  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8002e8a:	6800      	ldr	r0, [r0, #0]
  uint32_t scr[2U] = {0U, 0U};
 8002e8c:	9104      	str	r1, [sp, #16]
 8002e8e:	9105      	str	r1, [sp, #20]
  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8002e90:	f000 fc97 	bl	80037c2 <SDIO_GetResponse>
 8002e94:	0182      	lsls	r2, r0, #6
 8002e96:	d414      	bmi.n	8002ec2 <HAL_SD_ConfigWideBusOperation+0xbe>
  errorstate = SD_FindSCR(hsd, scr);
 8002e98:	a904      	add	r1, sp, #16
 8002e9a:	4620      	mov	r0, r4
 8002e9c:	f7ff fbb8 	bl	8002610 <SD_FindSCR>
  if(errorstate != HAL_OK)
 8002ea0:	b960      	cbnz	r0, 8002ebc <HAL_SD_ConfigWideBusOperation+0xb8>
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8002ea2:	9b05      	ldr	r3, [sp, #20]
 8002ea4:	03db      	lsls	r3, r3, #15
 8002ea6:	d50f      	bpl.n	8002ec8 <HAL_SD_ConfigWideBusOperation+0xc4>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8002ea8:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8002eaa:	6820      	ldr	r0, [r4, #0]
 8002eac:	0409      	lsls	r1, r1, #16
 8002eae:	f000 fe41 	bl	8003b34 <SDMMC_CmdAppCommand>
    if(errorstate != HAL_OK)
 8002eb2:	b918      	cbnz	r0, 8002ebc <HAL_SD_ConfigWideBusOperation+0xb8>
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8002eb4:	4601      	mov	r1, r0
 8002eb6:	6820      	ldr	r0, [r4, #0]
 8002eb8:	f000 ff34 	bl	8003d24 <SDMMC_CmdBusWidth>
      hsd->ErrorCode |= errorstate;
 8002ebc:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8002ebe:	4308      	orrs	r0, r1
 8002ec0:	e7d0      	b.n	8002e64 <HAL_SD_ConfigWideBusOperation+0x60>
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8002ec2:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8002ec6:	e7f9      	b.n	8002ebc <HAL_SD_ConfigWideBusOperation+0xb8>
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8002ec8:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8002ecc:	e7f6      	b.n	8002ebc <HAL_SD_ConfigWideBusOperation+0xb8>
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8002ece:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8002ed0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8002ed4:	63a3      	str	r3, [r4, #56]	; 0x38
 8002ed6:	e7c6      	b.n	8002e66 <HAL_SD_ConfigWideBusOperation+0x62>
    Init.ClockEdge           = hsd->Init.ClockEdge;
 8002ed8:	6863      	ldr	r3, [r4, #4]
 8002eda:	9304      	str	r3, [sp, #16]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 8002edc:	68a3      	ldr	r3, [r4, #8]
 8002ede:	9305      	str	r3, [sp, #20]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8002ee0:	68e3      	ldr	r3, [r4, #12]
 8002ee2:	9306      	str	r3, [sp, #24]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8002ee4:	6963      	ldr	r3, [r4, #20]
 8002ee6:	9308      	str	r3, [sp, #32]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 8002ee8:	69a3      	ldr	r3, [r4, #24]
 8002eea:	9309      	str	r3, [sp, #36]	; 0x24
    Init.BusWide             = WideMode;
 8002eec:	9607      	str	r6, [sp, #28]
    SDIO_Init(hsd->Instance, Init);
 8002eee:	ab0a      	add	r3, sp, #40	; 0x28
 8002ef0:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 8002ef4:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8002ef8:	ab04      	add	r3, sp, #16
 8002efa:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002efc:	6820      	ldr	r0, [r4, #0]
 8002efe:	f000 fc21 	bl	8003744 <SDIO_Init>
  hsd->State = HAL_SD_STATE_READY;
 8002f02:	2301      	movs	r3, #1
 8002f04:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  return HAL_OK;
 8002f08:	4628      	mov	r0, r5
 8002f0a:	e7b6      	b.n	8002e7a <HAL_SD_ConfigWideBusOperation+0x76>

08002f0c <HAL_SD_GetCardState>:
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8002f0c:	6d01      	ldr	r1, [r0, #80]	; 0x50
{
 8002f0e:	b510      	push	{r4, lr}
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8002f10:	0409      	lsls	r1, r1, #16
{
 8002f12:	4604      	mov	r4, r0
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8002f14:	6800      	ldr	r0, [r0, #0]
 8002f16:	f000 fed5 	bl	8003cc4 <SDMMC_CmdSendStatus>
  if(errorstate != HAL_OK)
 8002f1a:	4601      	mov	r1, r0
 8002f1c:	b928      	cbnz	r0, 8002f2a <HAL_SD_GetCardState+0x1e>
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8002f1e:	6820      	ldr	r0, [r4, #0]
 8002f20:	f000 fc4f 	bl	80037c2 <SDIO_GetResponse>
  return cardstate;
 8002f24:	f3c0 2043 	ubfx	r0, r0, #9, #4
}
 8002f28:	bd10      	pop	{r4, pc}
    hsd->ErrorCode |= errorstate;
 8002f2a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002f2c:	4319      	orrs	r1, r3
 8002f2e:	63a1      	str	r1, [r4, #56]	; 0x38
  uint32_t resp1 = 0;
 8002f30:	2000      	movs	r0, #0
 8002f32:	e7f7      	b.n	8002f24 <HAL_SD_GetCardState+0x18>

08002f34 <SD_DMATxAbort>:
{
 8002f34:	b538      	push	{r3, r4, r5, lr}
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8002f36:	6b84      	ldr	r4, [r0, #56]	; 0x38
  if(hsd->hdmatx != NULL)
 8002f38:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002f3a:	b10b      	cbz	r3, 8002f40 <SD_DMATxAbort+0xc>
    hsd->hdmatx = NULL;
 8002f3c:	2300      	movs	r3, #0
 8002f3e:	6423      	str	r3, [r4, #64]	; 0x40
  if(hsd->hdmarx == NULL)
 8002f40:	6be5      	ldr	r5, [r4, #60]	; 0x3c
 8002f42:	b9c5      	cbnz	r5, 8002f76 <SD_DMATxAbort+0x42>
    CardState = HAL_SD_GetCardState(hsd);
 8002f44:	4620      	mov	r0, r4
 8002f46:	f7ff ffe1 	bl	8002f0c <HAL_SD_GetCardState>
    if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8002f4a:	3805      	subs	r0, #5
    hsd->State = HAL_SD_STATE_READY;
 8002f4c:	2301      	movs	r3, #1
    if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8002f4e:	b2c0      	uxtb	r0, r0
 8002f50:	4298      	cmp	r0, r3
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8002f52:	63a5      	str	r5, [r4, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8002f54:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8002f58:	d80d      	bhi.n	8002f76 <SD_DMATxAbort+0x42>
      hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8002f5a:	6820      	ldr	r0, [r4, #0]
 8002f5c:	f000 fd58 	bl	8003a10 <SDMMC_CmdStopTransfer>
 8002f60:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002f62:	4318      	orrs	r0, r3
 8002f64:	63a0      	str	r0, [r4, #56]	; 0x38
      if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8002f66:	6ba3      	ldr	r3, [r4, #56]	; 0x38
        HAL_SD_AbortCallback(hsd);
 8002f68:	4620      	mov	r0, r4
      if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8002f6a:	b113      	cbz	r3, 8002f72 <SD_DMATxAbort+0x3e>
        HAL_SD_AbortCallback(hsd);
 8002f6c:	f002 fa7d 	bl	800546a <HAL_SD_AbortCallback>
 8002f70:	bd38      	pop	{r3, r4, r5, pc}
        HAL_SD_ErrorCallback(hsd);
 8002f72:	f7ff fd4c 	bl	8002a0e <HAL_SD_ErrorCallback>
 8002f76:	bd38      	pop	{r3, r4, r5, pc}

08002f78 <SD_DMARxAbort>:
{
 8002f78:	b538      	push	{r3, r4, r5, lr}
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8002f7a:	6b84      	ldr	r4, [r0, #56]	; 0x38
  if(hsd->hdmarx != NULL)
 8002f7c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002f7e:	b10b      	cbz	r3, 8002f84 <SD_DMARxAbort+0xc>
    hsd->hdmarx = NULL;
 8002f80:	2300      	movs	r3, #0
 8002f82:	63e3      	str	r3, [r4, #60]	; 0x3c
  if(hsd->hdmatx == NULL)
 8002f84:	6c25      	ldr	r5, [r4, #64]	; 0x40
 8002f86:	b9c5      	cbnz	r5, 8002fba <SD_DMARxAbort+0x42>
    CardState = HAL_SD_GetCardState(hsd);
 8002f88:	4620      	mov	r0, r4
 8002f8a:	f7ff ffbf 	bl	8002f0c <HAL_SD_GetCardState>
    if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8002f8e:	3805      	subs	r0, #5
    hsd->State = HAL_SD_STATE_READY;
 8002f90:	2301      	movs	r3, #1
    if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8002f92:	b2c0      	uxtb	r0, r0
 8002f94:	4298      	cmp	r0, r3
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8002f96:	63a5      	str	r5, [r4, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8002f98:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8002f9c:	d80d      	bhi.n	8002fba <SD_DMARxAbort+0x42>
      hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8002f9e:	6820      	ldr	r0, [r4, #0]
 8002fa0:	f000 fd36 	bl	8003a10 <SDMMC_CmdStopTransfer>
 8002fa4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002fa6:	4318      	orrs	r0, r3
 8002fa8:	63a0      	str	r0, [r4, #56]	; 0x38
      if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8002faa:	6ba3      	ldr	r3, [r4, #56]	; 0x38
        HAL_SD_AbortCallback(hsd);
 8002fac:	4620      	mov	r0, r4
      if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8002fae:	b113      	cbz	r3, 8002fb6 <SD_DMARxAbort+0x3e>
        HAL_SD_AbortCallback(hsd);
 8002fb0:	f002 fa5b 	bl	800546a <HAL_SD_AbortCallback>
 8002fb4:	bd38      	pop	{r3, r4, r5, pc}
        HAL_SD_ErrorCallback(hsd);
 8002fb6:	f7ff fd2a 	bl	8002a0e <HAL_SD_ErrorCallback>
 8002fba:	bd38      	pop	{r3, r4, r5, pc}

08002fbc <HAL_SD_IRQHandler>:
{
 8002fbc:	b570      	push	{r4, r5, r6, lr}
 8002fbe:	4604      	mov	r4, r0
  if(__HAL_SD_GET_FLAG(hsd, SDIO_IT_DATAEND) != RESET)
 8002fc0:	6800      	ldr	r0, [r0, #0]
 8002fc2:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8002fc4:	05da      	lsls	r2, r3, #23
 8002fc6:	d54f      	bpl.n	8003068 <HAL_SD_IRQHandler+0xac>
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DATAEND); 
 8002fc8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002fcc:	6383      	str	r3, [r0, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8002fce:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8002fd0:	f423 734e 	bic.w	r3, r3, #824	; 0x338
 8002fd4:	f023 0302 	bic.w	r3, r3, #2
 8002fd8:	63c3      	str	r3, [r0, #60]	; 0x3c
    if((hsd->Context & SD_CONTEXT_IT) != RESET)
 8002fda:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002fdc:	f013 0f08 	tst.w	r3, #8
      if(((hsd->Context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != RESET) || ((hsd->Context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != RESET))
 8002fe0:	6b23      	ldr	r3, [r4, #48]	; 0x30
    if((hsd->Context & SD_CONTEXT_IT) != RESET)
 8002fe2:	d01e      	beq.n	8003022 <HAL_SD_IRQHandler+0x66>
      if(((hsd->Context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != RESET) || ((hsd->Context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != RESET))
 8002fe4:	079b      	lsls	r3, r3, #30
 8002fe6:	d402      	bmi.n	8002fee <HAL_SD_IRQHandler+0x32>
 8002fe8:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002fea:	069e      	lsls	r6, r3, #26
 8002fec:	d508      	bpl.n	8003000 <HAL_SD_IRQHandler+0x44>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8002fee:	f000 fd0f 	bl	8003a10 <SDMMC_CmdStopTransfer>
        if(errorstate != HAL_SD_ERROR_NONE)
 8002ff2:	b128      	cbz	r0, 8003000 <HAL_SD_IRQHandler+0x44>
          hsd->ErrorCode |= errorstate;
 8002ff4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002ff6:	4318      	orrs	r0, r3
 8002ff8:	63a0      	str	r0, [r4, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 8002ffa:	4620      	mov	r0, r4
 8002ffc:	f7ff fd07 	bl	8002a0e <HAL_SD_ErrorCallback>
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003000:	6823      	ldr	r3, [r4, #0]
 8003002:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8003006:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003008:	2301      	movs	r3, #1
 800300a:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      if(((hsd->Context & SD_CONTEXT_READ_SINGLE_BLOCK) != RESET) || ((hsd->Context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != RESET))
 800300e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8003010:	07dd      	lsls	r5, r3, #31
        HAL_SD_RxCpltCallback(hsd);
 8003012:	4620      	mov	r0, r4
      if(((hsd->Context & SD_CONTEXT_READ_SINGLE_BLOCK) != RESET) || ((hsd->Context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != RESET))
 8003014:	d402      	bmi.n	800301c <HAL_SD_IRQHandler+0x60>
 8003016:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8003018:	079c      	lsls	r4, r3, #30
 800301a:	d522      	bpl.n	8003062 <HAL_SD_IRQHandler+0xa6>
        HAL_SD_RxCpltCallback(hsd);
 800301c:	f002 fa2f 	bl	800547e <HAL_SD_RxCpltCallback>
 8003020:	bd70      	pop	{r4, r5, r6, pc}
    else if((hsd->Context & SD_CONTEXT_DMA) != RESET)
 8003022:	0619      	lsls	r1, r3, #24
 8003024:	f140 80a5 	bpl.w	8003172 <HAL_SD_IRQHandler+0x1b6>
      if((hsd->Context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != RESET)
 8003028:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800302a:	069a      	lsls	r2, r3, #26
 800302c:	d508      	bpl.n	8003040 <HAL_SD_IRQHandler+0x84>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800302e:	f000 fcef 	bl	8003a10 <SDMMC_CmdStopTransfer>
        if(errorstate != HAL_SD_ERROR_NONE)
 8003032:	b128      	cbz	r0, 8003040 <HAL_SD_IRQHandler+0x84>
          hsd->ErrorCode |= errorstate;
 8003034:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003036:	4318      	orrs	r0, r3
 8003038:	63a0      	str	r0, [r4, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 800303a:	4620      	mov	r0, r4
 800303c:	f7ff fce7 	bl	8002a0e <HAL_SD_ErrorCallback>
      if(((hsd->Context & SD_CONTEXT_READ_SINGLE_BLOCK) == RESET) && ((hsd->Context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == RESET))
 8003040:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8003042:	07db      	lsls	r3, r3, #31
 8003044:	f100 8095 	bmi.w	8003172 <HAL_SD_IRQHandler+0x1b6>
 8003048:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800304a:	079e      	lsls	r6, r3, #30
 800304c:	f100 8091 	bmi.w	8003172 <HAL_SD_IRQHandler+0x1b6>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 8003050:	6822      	ldr	r2, [r4, #0]
 8003052:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8003054:	f023 0308 	bic.w	r3, r3, #8
 8003058:	62d3      	str	r3, [r2, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 800305a:	2301      	movs	r3, #1
 800305c:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 8003060:	4620      	mov	r0, r4
 8003062:	f002 fa07 	bl	8005474 <HAL_SD_TxCpltCallback>
 8003066:	bd70      	pop	{r4, r5, r6, pc}
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_IT_TXFIFOHE) != RESET)
 8003068:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800306a:	045d      	lsls	r5, r3, #17
 800306c:	d510      	bpl.n	8003090 <HAL_SD_IRQHandler+0xd4>
static HAL_StatusTypeDef SD_Write_IT(SD_HandleTypeDef *hsd)
{
  uint32_t count = 0U;
  uint32_t* tmp;
  
  tmp = (uint32_t*)hsd->pTxBuffPtr;
 800306e:	6a25      	ldr	r5, [r4, #32]
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_TXFIFOHE);
 8003070:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003074:	6383      	str	r3, [r0, #56]	; 0x38
 8003076:	f105 0620 	add.w	r6, r5, #32
  
  /* Write data to SDIO Tx FIFO */
  for(count = 0U; count < 8U; count++)
  {
    SDIO_WriteFIFO(hsd->Instance, (tmp + count));
 800307a:	4629      	mov	r1, r5
 800307c:	6820      	ldr	r0, [r4, #0]
 800307e:	3504      	adds	r5, #4
 8003080:	f000 fb7f 	bl	8003782 <SDIO_WriteFIFO>
  for(count = 0U; count < 8U; count++)
 8003084:	42ae      	cmp	r6, r5
 8003086:	d1f8      	bne.n	800307a <HAL_SD_IRQHandler+0xbe>
  }
  
  hsd->pTxBuffPtr += 8U;
 8003088:	6a23      	ldr	r3, [r4, #32]
 800308a:	3320      	adds	r3, #32
 800308c:	6223      	str	r3, [r4, #32]
 800308e:	bd70      	pop	{r4, r5, r6, pc}
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_IT_RXFIFOHF) != RESET)
 8003090:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8003092:	0419      	lsls	r1, r3, #16
 8003094:	d510      	bpl.n	80030b8 <HAL_SD_IRQHandler+0xfc>
  tmp = (uint32_t*)hsd->pRxBuffPtr;
 8003096:	6aa5      	ldr	r5, [r4, #40]	; 0x28
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXFIFOHF);
 8003098:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800309c:	1f2e      	subs	r6, r5, #4
 800309e:	6383      	str	r3, [r0, #56]	; 0x38
 80030a0:	351c      	adds	r5, #28
    *(tmp + count) = SDIO_ReadFIFO(hsd->Instance);
 80030a2:	6820      	ldr	r0, [r4, #0]
 80030a4:	f000 fb6a 	bl	800377c <SDIO_ReadFIFO>
 80030a8:	f846 0f04 	str.w	r0, [r6, #4]!
  for(count = 0U; count < 8U; count++)
 80030ac:	42b5      	cmp	r5, r6
 80030ae:	d1f8      	bne.n	80030a2 <HAL_SD_IRQHandler+0xe6>
  hsd->pRxBuffPtr += 8U;
 80030b0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80030b2:	3320      	adds	r3, #32
 80030b4:	62a3      	str	r3, [r4, #40]	; 0x28
 80030b6:	bd70      	pop	{r4, r5, r6, pc}
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR) != RESET)
 80030b8:	6b42      	ldr	r2, [r0, #52]	; 0x34
 80030ba:	f240 233a 	movw	r3, #570	; 0x23a
 80030be:	421a      	tst	r2, r3
 80030c0:	d057      	beq.n	8003172 <HAL_SD_IRQHandler+0x1b6>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_IT_DCRCFAIL) != RESET)
 80030c2:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80030c4:	079a      	lsls	r2, r3, #30
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL; 
 80030c6:	bf42      	ittt	mi
 80030c8:	6ba3      	ldrmi	r3, [r4, #56]	; 0x38
 80030ca:	f043 0302 	orrmi.w	r3, r3, #2
 80030ce:	63a3      	strmi	r3, [r4, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_IT_DTIMEOUT) != RESET)
 80030d0:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80030d2:	071b      	lsls	r3, r3, #28
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT; 
 80030d4:	bf42      	ittt	mi
 80030d6:	6ba3      	ldrmi	r3, [r4, #56]	; 0x38
 80030d8:	f043 0308 	orrmi.w	r3, r3, #8
 80030dc:	63a3      	strmi	r3, [r4, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_IT_RXOVERR) != RESET)
 80030de:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80030e0:	069e      	lsls	r6, r3, #26
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN; 
 80030e2:	bf42      	ittt	mi
 80030e4:	6ba3      	ldrmi	r3, [r4, #56]	; 0x38
 80030e6:	f043 0320 	orrmi.w	r3, r3, #32
 80030ea:	63a3      	strmi	r3, [r4, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_IT_TXUNDERR) != RESET)
 80030ec:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80030ee:	06dd      	lsls	r5, r3, #27
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN; 
 80030f0:	bf42      	ittt	mi
 80030f2:	6ba3      	ldrmi	r3, [r4, #56]	; 0x38
 80030f4:	f043 0310 	orrmi.w	r3, r3, #16
 80030f8:	63a3      	strmi	r3, [r4, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_IT_STBITERR) != RESET)
 80030fa:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80030fc:	0599      	lsls	r1, r3, #22
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 80030fe:	bf42      	ittt	mi
 8003100:	6ba3      	ldrmi	r3, [r4, #56]	; 0x38
 8003102:	f043 0308 	orrmi.w	r3, r3, #8
 8003106:	63a3      	strmi	r3, [r4, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS | SDIO_FLAG_STBITERR);
 8003108:	f240 73ff 	movw	r3, #2047	; 0x7ff
 800310c:	6383      	str	r3, [r0, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800310e:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8003110:	f423 734e 	bic.w	r3, r3, #824	; 0x338
 8003114:	f023 0302 	bic.w	r3, r3, #2
 8003118:	63c3      	str	r3, [r0, #60]	; 0x3c
    if((hsd->Context & SD_CONTEXT_DMA) != RESET)
 800311a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800311c:	061a      	lsls	r2, r3, #24
 800311e:	d51f      	bpl.n	8003160 <HAL_SD_IRQHandler+0x1a4>
      if(hsd->hdmatx != NULL)
 8003120:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8003122:	b148      	cbz	r0, 8003138 <HAL_SD_IRQHandler+0x17c>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 8003124:	4b13      	ldr	r3, [pc, #76]	; (8003174 <HAL_SD_IRQHandler+0x1b8>)
 8003126:	6503      	str	r3, [r0, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8003128:	f7fe fc39 	bl	800199e <HAL_DMA_Abort_IT>
 800312c:	b308      	cbz	r0, 8003172 <HAL_SD_IRQHandler+0x1b6>
          SD_DMATxAbort(hsd->hdmatx);
 800312e:	6c20      	ldr	r0, [r4, #64]	; 0x40
}
 8003130:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
          SD_DMATxAbort(hsd->hdmatx);
 8003134:	f7ff befe 	b.w	8002f34 <SD_DMATxAbort>
      else if(hsd->hdmarx != NULL)
 8003138:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 800313a:	b148      	cbz	r0, 8003150 <HAL_SD_IRQHandler+0x194>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 800313c:	4b0e      	ldr	r3, [pc, #56]	; (8003178 <HAL_SD_IRQHandler+0x1bc>)
 800313e:	6503      	str	r3, [r0, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8003140:	f7fe fc2d 	bl	800199e <HAL_DMA_Abort_IT>
 8003144:	b1a8      	cbz	r0, 8003172 <HAL_SD_IRQHandler+0x1b6>
          SD_DMARxAbort(hsd->hdmarx);
 8003146:	6be0      	ldr	r0, [r4, #60]	; 0x3c
}
 8003148:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
          SD_DMARxAbort(hsd->hdmarx);
 800314c:	f7ff bf14 	b.w	8002f78 <SD_DMARxAbort>
        hsd->State = HAL_SD_STATE_READY;
 8003150:	2301      	movs	r3, #1
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8003152:	63a0      	str	r0, [r4, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8003154:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        HAL_SD_AbortCallback(hsd);
 8003158:	4620      	mov	r0, r4
 800315a:	f002 f986 	bl	800546a <HAL_SD_AbortCallback>
 800315e:	bd70      	pop	{r4, r5, r6, pc}
    else if((hsd->Context & SD_CONTEXT_IT) != RESET)
 8003160:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8003162:	071b      	lsls	r3, r3, #28
 8003164:	d505      	bpl.n	8003172 <HAL_SD_IRQHandler+0x1b6>
      hsd->State = HAL_SD_STATE_READY;
 8003166:	2301      	movs	r3, #1
 8003168:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      HAL_SD_ErrorCallback(hsd);
 800316c:	4620      	mov	r0, r4
 800316e:	f7ff fc4e 	bl	8002a0e <HAL_SD_ErrorCallback>
 8003172:	bd70      	pop	{r4, r5, r6, pc}
 8003174:	08002f35 	.word	0x08002f35
 8003178:	08002f79 	.word	0x08002f79

0800317c <HAL_SRAM_Init>:
  * @param  Timing Pointer to SRAM control timing structure 
  * @param  ExtTiming Pointer to SRAM extended mode timing structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing, FMC_NORSRAM_TimingTypeDef *ExtTiming)
{ 
 800317c:	b570      	push	{r4, r5, r6, lr}
 800317e:	460e      	mov	r6, r1
 8003180:	4615      	mov	r5, r2
  /* Check the SRAM handle parameter */
  if(hsram == NULL)
 8003182:	4604      	mov	r4, r0
 8003184:	b310      	cbz	r0, 80031cc <HAL_SRAM_Init+0x50>
  {
     return HAL_ERROR;
  }
  
  if(hsram->State == HAL_SRAM_STATE_RESET)
 8003186:	f890 3049 	ldrb.w	r3, [r0, #73]	; 0x49
 800318a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800318e:	b91b      	cbnz	r3, 8003198 <HAL_SRAM_Init+0x1c>
  {  
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 8003190:	f880 2048 	strb.w	r2, [r0, #72]	; 0x48
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 8003194:	f002 fa6c 	bl	8005670 <HAL_SRAM_MspInit>
  }
  
  /* Initialize SRAM control Interface */
  FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 8003198:	f104 0108 	add.w	r1, r4, #8
 800319c:	6820      	ldr	r0, [r4, #0]
 800319e:	f000 fa23 	bl	80035e8 <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank); 
 80031a2:	68a2      	ldr	r2, [r4, #8]
 80031a4:	6820      	ldr	r0, [r4, #0]
 80031a6:	4631      	mov	r1, r6
 80031a8:	f000 fa4a 	bl	8003640 <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,  hsram->Init.ExtendedMode);  
 80031ac:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80031ae:	68a2      	ldr	r2, [r4, #8]
 80031b0:	6860      	ldr	r0, [r4, #4]
 80031b2:	4629      	mov	r1, r5
 80031b4:	f000 fa62 	bl	800367c <FSMC_NORSRAM_Extended_Timing_Init>
 80031b8:	68a1      	ldr	r1, [r4, #8]
 80031ba:	6822      	ldr	r2, [r4, #0]
  
  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank); 
 80031bc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80031c0:	f043 0301 	orr.w	r3, r3, #1
 80031c4:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  
  return HAL_OK;
 80031c8:	2000      	movs	r0, #0
 80031ca:	bd70      	pop	{r4, r5, r6, pc}
     return HAL_ERROR;
 80031cc:	2001      	movs	r0, #1
}
 80031ce:	bd70      	pop	{r4, r5, r6, pc}

080031d0 <HAL_TIM_Base_Start_IT>:
{
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  
  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80031d0:	6803      	ldr	r3, [r0, #0]
 80031d2:	68da      	ldr	r2, [r3, #12]
 80031d4:	f042 0201 	orr.w	r2, r2, #1
 80031d8:	60da      	str	r2, [r3, #12]
      
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80031da:	681a      	ldr	r2, [r3, #0]
 80031dc:	f042 0201 	orr.w	r2, r2, #1
 80031e0:	601a      	str	r2, [r3, #0]
      
  /* Return function status */
  return HAL_OK;
}
 80031e2:	2000      	movs	r0, #0
 80031e4:	4770      	bx	lr

080031e6 <HAL_TIM_ConfigClockSource>:
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef * sClockSourceConfig)    
{
  uint32_t tmpsmcr = 0U;
    
  /* Process Locked */
  __HAL_LOCK(htim);
 80031e6:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 80031ea:	2b01      	cmp	r3, #1
{
 80031ec:	b570      	push	{r4, r5, r6, lr}
 80031ee:	f04f 0302 	mov.w	r3, #2
  __HAL_LOCK(htim);
 80031f2:	d01c      	beq.n	800322e <HAL_TIM_ConfigClockSource+0x48>
  
  htim->State = HAL_TIM_STATE_BUSY;
 80031f4:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  
  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));
  
  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80031f8:	6803      	ldr	r3, [r0, #0]
  __HAL_LOCK(htim);
 80031fa:	2201      	movs	r2, #1
 80031fc:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
  tmpsmcr = htim->Instance->SMCR;
 8003200:	689a      	ldr	r2, [r3, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003202:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8003206:	f022 0277 	bic.w	r2, r2, #119	; 0x77
  htim->Instance->SMCR = tmpsmcr;
 800320a:	609a      	str	r2, [r3, #8]
  
  switch (sClockSourceConfig->ClockSource)
 800320c:	680a      	ldr	r2, [r1, #0]
 800320e:	2a40      	cmp	r2, #64	; 0x40
 8003210:	d079      	beq.n	8003306 <HAL_TIM_ConfigClockSource+0x120>
 8003212:	d819      	bhi.n	8003248 <HAL_TIM_ConfigClockSource+0x62>
 8003214:	2a10      	cmp	r2, #16
 8003216:	f000 8093 	beq.w	8003340 <HAL_TIM_ConfigClockSource+0x15a>
 800321a:	d80a      	bhi.n	8003232 <HAL_TIM_ConfigClockSource+0x4c>
 800321c:	2a00      	cmp	r2, #0
 800321e:	f000 8089 	beq.w	8003334 <HAL_TIM_ConfigClockSource+0x14e>
    break;
    
    default:
    break;    
  }
  htim->State = HAL_TIM_STATE_READY;
 8003222:	2301      	movs	r3, #1
 8003224:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  
  __HAL_UNLOCK(htim);
 8003228:	2300      	movs	r3, #0
 800322a:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  __HAL_LOCK(htim);
 800322e:	4618      	mov	r0, r3
  
  return HAL_OK;
}
 8003230:	bd70      	pop	{r4, r5, r6, pc}
  switch (sClockSourceConfig->ClockSource)
 8003232:	2a20      	cmp	r2, #32
 8003234:	f000 808a 	beq.w	800334c <HAL_TIM_ConfigClockSource+0x166>
 8003238:	2a30      	cmp	r2, #48	; 0x30
 800323a:	d1f2      	bne.n	8003222 <HAL_TIM_ConfigClockSource+0x3c>
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint16_t TIM_ITRx)
{
  uint32_t tmpsmcr = 0U;
  
   /* Get the TIMx SMCR register value */
   tmpsmcr = TIMx->SMCR;
 800323c:	689a      	ldr	r2, [r3, #8]
   /* Reset the TS Bits */
   tmpsmcr &= ~TIM_SMCR_TS;
 800323e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   /* Set the Input Trigger source and the slave mode*/
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 8003242:	f042 0237 	orr.w	r2, r2, #55	; 0x37
 8003246:	e036      	b.n	80032b6 <HAL_TIM_ConfigClockSource+0xd0>
  switch (sClockSourceConfig->ClockSource)
 8003248:	2a70      	cmp	r2, #112	; 0x70
 800324a:	d036      	beq.n	80032ba <HAL_TIM_ConfigClockSource+0xd4>
 800324c:	d81b      	bhi.n	8003286 <HAL_TIM_ConfigClockSource+0xa0>
 800324e:	2a50      	cmp	r2, #80	; 0x50
 8003250:	d042      	beq.n	80032d8 <HAL_TIM_ConfigClockSource+0xf2>
 8003252:	2a60      	cmp	r2, #96	; 0x60
 8003254:	d1e5      	bne.n	8003222 <HAL_TIM_ConfigClockSource+0x3c>
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003256:	6a1c      	ldr	r4, [r3, #32]
      TIM_TI2_ConfigInputStage(htim->Instance, 
 8003258:	684d      	ldr	r5, [r1, #4]
 800325a:	68ce      	ldr	r6, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800325c:	f024 0410 	bic.w	r4, r4, #16
 8003260:	621c      	str	r4, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003262:	6999      	ldr	r1, [r3, #24]
  tmpccer = TIMx->CCER;
 8003264:	6a1a      	ldr	r2, [r3, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003266:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800326a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 800326e:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003272:	ea41 3106 	orr.w	r1, r1, r6, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 8003276:	6199      	str	r1, [r3, #24]
  TIMx->CCER = tmpccer;
 8003278:	621a      	str	r2, [r3, #32]
   tmpsmcr = TIMx->SMCR;
 800327a:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 800327c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 8003280:	f042 0267 	orr.w	r2, r2, #103	; 0x67
 8003284:	e017      	b.n	80032b6 <HAL_TIM_ConfigClockSource+0xd0>
  switch (sClockSourceConfig->ClockSource)
 8003286:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 800328a:	d011      	beq.n	80032b0 <HAL_TIM_ConfigClockSource+0xca>
 800328c:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8003290:	d1c7      	bne.n	8003222 <HAL_TIM_ConfigClockSource+0x3c>

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 8003292:	688a      	ldr	r2, [r1, #8]
 8003294:	684d      	ldr	r5, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 8003296:	689c      	ldr	r4, [r3, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 8003298:	68c9      	ldr	r1, [r1, #12]
 800329a:	432a      	orrs	r2, r5
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800329c:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 80032a0:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80032a4:	4322      	orrs	r2, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80032a6:	609a      	str	r2, [r3, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80032a8:	689a      	ldr	r2, [r3, #8]
 80032aa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80032ae:	e002      	b.n	80032b6 <HAL_TIM_ConfigClockSource+0xd0>
      htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 80032b0:	689a      	ldr	r2, [r3, #8]
 80032b2:	f022 0207 	bic.w	r2, r2, #7
   TIMx->SMCR = tmpsmcr;
 80032b6:	609a      	str	r2, [r3, #8]
 80032b8:	e7b3      	b.n	8003222 <HAL_TIM_ConfigClockSource+0x3c>
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 80032ba:	688a      	ldr	r2, [r1, #8]
 80032bc:	684d      	ldr	r5, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 80032be:	689c      	ldr	r4, [r3, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 80032c0:	68c9      	ldr	r1, [r1, #12]
 80032c2:	432a      	orrs	r2, r5
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80032c4:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 80032c8:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80032cc:	4322      	orrs	r2, r4
  TIMx->SMCR = tmpsmcr;
 80032ce:	609a      	str	r2, [r3, #8]
      tmpsmcr = htim->Instance->SMCR;
 80032d0:	689a      	ldr	r2, [r3, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80032d2:	f042 0277 	orr.w	r2, r2, #119	; 0x77
 80032d6:	e7ee      	b.n	80032b6 <HAL_TIM_ConfigClockSource+0xd0>
      TIM_TI1_ConfigInputStage(htim->Instance, 
 80032d8:	684c      	ldr	r4, [r1, #4]
 80032da:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 80032dc:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80032de:	6a1d      	ldr	r5, [r3, #32]
 80032e0:	f025 0501 	bic.w	r5, r5, #1
 80032e4:	621d      	str	r5, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;    
 80032e6:	699a      	ldr	r2, [r3, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80032e8:	f021 010a 	bic.w	r1, r1, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80032ec:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80032f0:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
  tmpccer |= TIM_ICPolarity;
 80032f4:	4321      	orrs	r1, r4
  TIMx->CCMR1 = tmpccmr1;
 80032f6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80032f8:	6219      	str	r1, [r3, #32]
   tmpsmcr = TIMx->SMCR;
 80032fa:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 80032fc:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 8003300:	f042 0257 	orr.w	r2, r2, #87	; 0x57
 8003304:	e7d7      	b.n	80032b6 <HAL_TIM_ConfigClockSource+0xd0>
      TIM_TI1_ConfigInputStage(htim->Instance, 
 8003306:	684c      	ldr	r4, [r1, #4]
 8003308:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 800330a:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800330c:	6a1d      	ldr	r5, [r3, #32]
 800330e:	f025 0501 	bic.w	r5, r5, #1
 8003312:	621d      	str	r5, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;    
 8003314:	699a      	ldr	r2, [r3, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003316:	f021 010a 	bic.w	r1, r1, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800331a:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800331e:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
  tmpccer |= TIM_ICPolarity;
 8003322:	4321      	orrs	r1, r4
  TIMx->CCMR1 = tmpccmr1;
 8003324:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003326:	6219      	str	r1, [r3, #32]
   tmpsmcr = TIMx->SMCR;
 8003328:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 800332a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 800332e:	f042 0247 	orr.w	r2, r2, #71	; 0x47
 8003332:	e7c0      	b.n	80032b6 <HAL_TIM_ConfigClockSource+0xd0>
   tmpsmcr = TIMx->SMCR;
 8003334:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8003336:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 800333a:	f042 0207 	orr.w	r2, r2, #7
 800333e:	e7ba      	b.n	80032b6 <HAL_TIM_ConfigClockSource+0xd0>
   tmpsmcr = TIMx->SMCR;
 8003340:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8003342:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 8003346:	f042 0217 	orr.w	r2, r2, #23
 800334a:	e7b4      	b.n	80032b6 <HAL_TIM_ConfigClockSource+0xd0>
   tmpsmcr = TIMx->SMCR;
 800334c:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 800334e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 8003352:	f042 0227 	orr.w	r2, r2, #39	; 0x27
 8003356:	e7ae      	b.n	80032b6 <HAL_TIM_ConfigClockSource+0xd0>

08003358 <HAL_TIM_OC_DelayElapsedCallback>:
 8003358:	4770      	bx	lr

0800335a <HAL_TIM_IC_CaptureCallback>:
 800335a:	4770      	bx	lr

0800335c <HAL_TIM_PWM_PulseFinishedCallback>:
 800335c:	4770      	bx	lr

0800335e <HAL_TIM_TriggerCallback>:
 800335e:	4770      	bx	lr

08003360 <HAL_TIM_IRQHandler>:
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003360:	6803      	ldr	r3, [r0, #0]
 8003362:	691a      	ldr	r2, [r3, #16]
 8003364:	0791      	lsls	r1, r2, #30
{
 8003366:	b510      	push	{r4, lr}
 8003368:	4604      	mov	r4, r0
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800336a:	d50e      	bpl.n	800338a <HAL_TIM_IRQHandler+0x2a>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 800336c:	68da      	ldr	r2, [r3, #12]
 800336e:	0792      	lsls	r2, r2, #30
 8003370:	d50b      	bpl.n	800338a <HAL_TIM_IRQHandler+0x2a>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003372:	f06f 0202 	mvn.w	r2, #2
 8003376:	611a      	str	r2, [r3, #16]
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003378:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800337a:	2201      	movs	r2, #1
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800337c:	079b      	lsls	r3, r3, #30
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800337e:	7602      	strb	r2, [r0, #24]
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003380:	d077      	beq.n	8003472 <HAL_TIM_IRQHandler+0x112>
          HAL_TIM_IC_CaptureCallback(htim);
 8003382:	f7ff ffea 	bl	800335a <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003386:	2300      	movs	r3, #0
 8003388:	7623      	strb	r3, [r4, #24]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800338a:	6823      	ldr	r3, [r4, #0]
 800338c:	691a      	ldr	r2, [r3, #16]
 800338e:	0750      	lsls	r0, r2, #29
 8003390:	d510      	bpl.n	80033b4 <HAL_TIM_IRQHandler+0x54>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 8003392:	68da      	ldr	r2, [r3, #12]
 8003394:	0751      	lsls	r1, r2, #29
 8003396:	d50d      	bpl.n	80033b4 <HAL_TIM_IRQHandler+0x54>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003398:	f06f 0204 	mvn.w	r2, #4
 800339c:	611a      	str	r2, [r3, #16]
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800339e:	699b      	ldr	r3, [r3, #24]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80033a0:	2202      	movs	r2, #2
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80033a2:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80033a6:	7622      	strb	r2, [r4, #24]
        HAL_TIM_IC_CaptureCallback(htim);
 80033a8:	4620      	mov	r0, r4
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80033aa:	d068      	beq.n	800347e <HAL_TIM_IRQHandler+0x11e>
        HAL_TIM_IC_CaptureCallback(htim);
 80033ac:	f7ff ffd5 	bl	800335a <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80033b0:	2300      	movs	r3, #0
 80033b2:	7623      	strb	r3, [r4, #24]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80033b4:	6823      	ldr	r3, [r4, #0]
 80033b6:	691a      	ldr	r2, [r3, #16]
 80033b8:	0712      	lsls	r2, r2, #28
 80033ba:	d50f      	bpl.n	80033dc <HAL_TIM_IRQHandler+0x7c>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 80033bc:	68da      	ldr	r2, [r3, #12]
 80033be:	0710      	lsls	r0, r2, #28
 80033c0:	d50c      	bpl.n	80033dc <HAL_TIM_IRQHandler+0x7c>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80033c2:	f06f 0208 	mvn.w	r2, #8
 80033c6:	611a      	str	r2, [r3, #16]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80033c8:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80033ca:	2204      	movs	r2, #4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80033cc:	0799      	lsls	r1, r3, #30
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80033ce:	7622      	strb	r2, [r4, #24]
        HAL_TIM_IC_CaptureCallback(htim);
 80033d0:	4620      	mov	r0, r4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80033d2:	d05a      	beq.n	800348a <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 80033d4:	f7ff ffc1 	bl	800335a <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80033d8:	2300      	movs	r3, #0
 80033da:	7623      	strb	r3, [r4, #24]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80033dc:	6823      	ldr	r3, [r4, #0]
 80033de:	691a      	ldr	r2, [r3, #16]
 80033e0:	06d2      	lsls	r2, r2, #27
 80033e2:	d510      	bpl.n	8003406 <HAL_TIM_IRQHandler+0xa6>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 80033e4:	68da      	ldr	r2, [r3, #12]
 80033e6:	06d0      	lsls	r0, r2, #27
 80033e8:	d50d      	bpl.n	8003406 <HAL_TIM_IRQHandler+0xa6>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80033ea:	f06f 0210 	mvn.w	r2, #16
 80033ee:	611a      	str	r2, [r3, #16]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80033f0:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80033f2:	2208      	movs	r2, #8
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80033f4:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80033f8:	7622      	strb	r2, [r4, #24]
        HAL_TIM_IC_CaptureCallback(htim);
 80033fa:	4620      	mov	r0, r4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80033fc:	d04b      	beq.n	8003496 <HAL_TIM_IRQHandler+0x136>
        HAL_TIM_IC_CaptureCallback(htim);
 80033fe:	f7ff ffac 	bl	800335a <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003402:	2300      	movs	r3, #0
 8003404:	7623      	strb	r3, [r4, #24]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003406:	6823      	ldr	r3, [r4, #0]
 8003408:	691a      	ldr	r2, [r3, #16]
 800340a:	07d1      	lsls	r1, r2, #31
 800340c:	d508      	bpl.n	8003420 <HAL_TIM_IRQHandler+0xc0>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 800340e:	68da      	ldr	r2, [r3, #12]
 8003410:	07d2      	lsls	r2, r2, #31
 8003412:	d505      	bpl.n	8003420 <HAL_TIM_IRQHandler+0xc0>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003414:	f06f 0201 	mvn.w	r2, #1
 8003418:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 800341a:	4620      	mov	r0, r4
 800341c:	f002 fa86 	bl	800592c <HAL_TIM_PeriodElapsedCallback>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003420:	6823      	ldr	r3, [r4, #0]
 8003422:	691a      	ldr	r2, [r3, #16]
 8003424:	0610      	lsls	r0, r2, #24
 8003426:	d508      	bpl.n	800343a <HAL_TIM_IRQHandler+0xda>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 8003428:	68da      	ldr	r2, [r3, #12]
 800342a:	0611      	lsls	r1, r2, #24
 800342c:	d505      	bpl.n	800343a <HAL_TIM_IRQHandler+0xda>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800342e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003432:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8003434:	4620      	mov	r0, r4
 8003436:	f000 f8d6 	bl	80035e6 <HAL_TIMEx_BreakCallback>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800343a:	6823      	ldr	r3, [r4, #0]
 800343c:	691a      	ldr	r2, [r3, #16]
 800343e:	0652      	lsls	r2, r2, #25
 8003440:	d508      	bpl.n	8003454 <HAL_TIM_IRQHandler+0xf4>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 8003442:	68da      	ldr	r2, [r3, #12]
 8003444:	0650      	lsls	r0, r2, #25
 8003446:	d505      	bpl.n	8003454 <HAL_TIM_IRQHandler+0xf4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003448:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800344c:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 800344e:	4620      	mov	r0, r4
 8003450:	f7ff ff85 	bl	800335e <HAL_TIM_TriggerCallback>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003454:	6823      	ldr	r3, [r4, #0]
 8003456:	691a      	ldr	r2, [r3, #16]
 8003458:	0691      	lsls	r1, r2, #26
 800345a:	d522      	bpl.n	80034a2 <HAL_TIM_IRQHandler+0x142>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 800345c:	68da      	ldr	r2, [r3, #12]
 800345e:	0692      	lsls	r2, r2, #26
 8003460:	d51f      	bpl.n	80034a2 <HAL_TIM_IRQHandler+0x142>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003462:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutationCallback(htim);
 8003466:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003468:	611a      	str	r2, [r3, #16]
}
 800346a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutationCallback(htim);
 800346e:	f000 b8b9 	b.w	80035e4 <HAL_TIMEx_CommutationCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003472:	f7ff ff71 	bl	8003358 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003476:	4620      	mov	r0, r4
 8003478:	f7ff ff70 	bl	800335c <HAL_TIM_PWM_PulseFinishedCallback>
 800347c:	e783      	b.n	8003386 <HAL_TIM_IRQHandler+0x26>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800347e:	f7ff ff6b 	bl	8003358 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003482:	4620      	mov	r0, r4
 8003484:	f7ff ff6a 	bl	800335c <HAL_TIM_PWM_PulseFinishedCallback>
 8003488:	e792      	b.n	80033b0 <HAL_TIM_IRQHandler+0x50>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800348a:	f7ff ff65 	bl	8003358 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim); 
 800348e:	4620      	mov	r0, r4
 8003490:	f7ff ff64 	bl	800335c <HAL_TIM_PWM_PulseFinishedCallback>
 8003494:	e7a0      	b.n	80033d8 <HAL_TIM_IRQHandler+0x78>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003496:	f7ff ff5f 	bl	8003358 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800349a:	4620      	mov	r0, r4
 800349c:	f7ff ff5e 	bl	800335c <HAL_TIM_PWM_PulseFinishedCallback>
 80034a0:	e7af      	b.n	8003402 <HAL_TIM_IRQHandler+0xa2>
 80034a2:	bd10      	pop	{r4, pc}

080034a4 <TIM_Base_SetConfig>:
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 80034a4:	4a2e      	ldr	r2, [pc, #184]	; (8003560 <TIM_Base_SetConfig+0xbc>)
  tmpcr1 = TIMx->CR1;
 80034a6:	6803      	ldr	r3, [r0, #0]
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 80034a8:	4290      	cmp	r0, r2
 80034aa:	d012      	beq.n	80034d2 <TIM_Base_SetConfig+0x2e>
 80034ac:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80034b0:	d00f      	beq.n	80034d2 <TIM_Base_SetConfig+0x2e>
 80034b2:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 80034b6:	4290      	cmp	r0, r2
 80034b8:	d00b      	beq.n	80034d2 <TIM_Base_SetConfig+0x2e>
 80034ba:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80034be:	4290      	cmp	r0, r2
 80034c0:	d007      	beq.n	80034d2 <TIM_Base_SetConfig+0x2e>
 80034c2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80034c6:	4290      	cmp	r0, r2
 80034c8:	d003      	beq.n	80034d2 <TIM_Base_SetConfig+0x2e>
 80034ca:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 80034ce:	4290      	cmp	r0, r2
 80034d0:	d11d      	bne.n	800350e <TIM_Base_SetConfig+0x6a>
    tmpcr1 |= Structure->CounterMode;
 80034d2:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80034d4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80034d8:	4313      	orrs	r3, r2
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 80034da:	4a21      	ldr	r2, [pc, #132]	; (8003560 <TIM_Base_SetConfig+0xbc>)
 80034dc:	4290      	cmp	r0, r2
 80034de:	d104      	bne.n	80034ea <TIM_Base_SetConfig+0x46>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80034e0:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 80034e2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80034e6:	4313      	orrs	r3, r2
 80034e8:	e028      	b.n	800353c <TIM_Base_SetConfig+0x98>
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 80034ea:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80034ee:	d0f7      	beq.n	80034e0 <TIM_Base_SetConfig+0x3c>
 80034f0:	4a1c      	ldr	r2, [pc, #112]	; (8003564 <TIM_Base_SetConfig+0xc0>)
 80034f2:	4290      	cmp	r0, r2
 80034f4:	d0f4      	beq.n	80034e0 <TIM_Base_SetConfig+0x3c>
 80034f6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80034fa:	4290      	cmp	r0, r2
 80034fc:	d0f0      	beq.n	80034e0 <TIM_Base_SetConfig+0x3c>
 80034fe:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003502:	4290      	cmp	r0, r2
 8003504:	d0ec      	beq.n	80034e0 <TIM_Base_SetConfig+0x3c>
 8003506:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 800350a:	4290      	cmp	r0, r2
 800350c:	d0e8      	beq.n	80034e0 <TIM_Base_SetConfig+0x3c>
 800350e:	4a16      	ldr	r2, [pc, #88]	; (8003568 <TIM_Base_SetConfig+0xc4>)
 8003510:	4290      	cmp	r0, r2
 8003512:	d0e5      	beq.n	80034e0 <TIM_Base_SetConfig+0x3c>
 8003514:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003518:	4290      	cmp	r0, r2
 800351a:	d0e1      	beq.n	80034e0 <TIM_Base_SetConfig+0x3c>
 800351c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003520:	4290      	cmp	r0, r2
 8003522:	d0dd      	beq.n	80034e0 <TIM_Base_SetConfig+0x3c>
 8003524:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 8003528:	4290      	cmp	r0, r2
 800352a:	d0d9      	beq.n	80034e0 <TIM_Base_SetConfig+0x3c>
 800352c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003530:	4290      	cmp	r0, r2
 8003532:	d0d5      	beq.n	80034e0 <TIM_Base_SetConfig+0x3c>
 8003534:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003538:	4290      	cmp	r0, r2
 800353a:	d0d1      	beq.n	80034e0 <TIM_Base_SetConfig+0x3c>
  TIMx->CR1 = tmpcr1;
 800353c:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800353e:	688b      	ldr	r3, [r1, #8]
 8003540:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8003542:	680b      	ldr	r3, [r1, #0]
 8003544:	6283      	str	r3, [r0, #40]	; 0x28
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)  
 8003546:	4b06      	ldr	r3, [pc, #24]	; (8003560 <TIM_Base_SetConfig+0xbc>)
 8003548:	4298      	cmp	r0, r3
 800354a:	d006      	beq.n	800355a <TIM_Base_SetConfig+0xb6>
 800354c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003550:	4298      	cmp	r0, r3
 8003552:	d002      	beq.n	800355a <TIM_Base_SetConfig+0xb6>
  TIMx->EGR = TIM_EGR_UG;
 8003554:	2301      	movs	r3, #1
 8003556:	6143      	str	r3, [r0, #20]
}
 8003558:	4770      	bx	lr
    TIMx->RCR = Structure->RepetitionCounter;
 800355a:	690b      	ldr	r3, [r1, #16]
 800355c:	6303      	str	r3, [r0, #48]	; 0x30
 800355e:	e7f9      	b.n	8003554 <TIM_Base_SetConfig+0xb0>
 8003560:	40010000 	.word	0x40010000
 8003564:	40000400 	.word	0x40000400
 8003568:	40014000 	.word	0x40014000

0800356c <HAL_TIM_Base_Init>:
{ 
 800356c:	b510      	push	{r4, lr}
  if(htim == NULL)
 800356e:	4604      	mov	r4, r0
 8003570:	b1a0      	cbz	r0, 800359c <HAL_TIM_Base_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 8003572:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8003576:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800357a:	b91b      	cbnz	r3, 8003584 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 800357c:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_TIM_Base_MspInit(htim);
 8003580:	f004 fa74 	bl	8007a6c <HAL_TIM_Base_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;
 8003584:	2302      	movs	r3, #2
 8003586:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 800358a:	6820      	ldr	r0, [r4, #0]
 800358c:	1d21      	adds	r1, r4, #4
 800358e:	f7ff ff89 	bl	80034a4 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 8003592:	2301      	movs	r3, #1
 8003594:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  return HAL_OK;
 8003598:	2000      	movs	r0, #0
 800359a:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800359c:	2001      	movs	r0, #1
}
 800359e:	bd10      	pop	{r4, pc}

080035a0 <HAL_TIMEx_MasterConfigSynchronization>:
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
  
  __HAL_LOCK(htim);
 80035a0:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 80035a4:	2b01      	cmp	r3, #1
{
 80035a6:	b510      	push	{r4, lr}
 80035a8:	f04f 0302 	mov.w	r3, #2
  __HAL_LOCK(htim);
 80035ac:	d018      	beq.n	80035e0 <HAL_TIMEx_MasterConfigSynchronization+0x40>
  
  htim->State = HAL_TIM_STATE_BUSY;
 80035ae:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39

  /* Reset the MMS Bits */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 80035b2:	6803      	ldr	r3, [r0, #0]
  /* Select the TRGO source */
  htim->Instance->CR2 |= sMasterConfig->MasterOutputTrigger;
 80035b4:	680c      	ldr	r4, [r1, #0]
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 80035b6:	685a      	ldr	r2, [r3, #4]

  /* Reset the MSM Bit */
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
  /* Set or Reset the MSM Bit */
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 80035b8:	6849      	ldr	r1, [r1, #4]
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 80035ba:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80035be:	605a      	str	r2, [r3, #4]
  htim->Instance->CR2 |= sMasterConfig->MasterOutputTrigger;
 80035c0:	685a      	ldr	r2, [r3, #4]
 80035c2:	4322      	orrs	r2, r4
 80035c4:	605a      	str	r2, [r3, #4]
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 80035c6:	689a      	ldr	r2, [r3, #8]
 80035c8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80035cc:	609a      	str	r2, [r3, #8]
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 80035ce:	689a      	ldr	r2, [r3, #8]
 80035d0:	430a      	orrs	r2, r1
 80035d2:	609a      	str	r2, [r3, #8]
  
  htim->State = HAL_TIM_STATE_READY;
 80035d4:	2301      	movs	r3, #1
 80035d6:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  
  __HAL_UNLOCK(htim);
 80035da:	2300      	movs	r3, #0
 80035dc:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  __HAL_LOCK(htim);
 80035e0:	4618      	mov	r0, r3
  
  return HAL_OK;
} 
 80035e2:	bd10      	pop	{r4, pc}

080035e4 <HAL_TIMEx_CommutationCallback>:
 80035e4:	4770      	bx	lr

080035e6 <HAL_TIMEx_BreakCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80035e6:	4770      	bx	lr

080035e8 <FSMC_NORSRAM_Init>:
  * @param  Device Pointer to NORSRAM device instance
  * @param  Init Pointer to NORSRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_InitTypeDef* Init)
{ 
 80035e8:	b570      	push	{r4, r5, r6, lr}
 80035ea:	680c      	ldr	r4, [r1, #0]
                       FSMC_BCR1_WAITPOL   | FSMC_BCR1_WRAPMOD  | FSMC_BCR1_WAITCFG  | \
                       FSMC_BCR1_WREN      | FSMC_BCR1_WAITEN   | FSMC_BCR1_EXTMOD   | \
                       FSMC_BCR1_ASYNCWAIT | FSMC_BCR1_CPSIZE   | FSMC_BCR1_CBURSTRW));
  /* Set NORSRAM device control parameters */
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
                     Init->MemoryType           |\
 80035ec:	688d      	ldr	r5, [r1, #8]
  tmpr = Device->BTCR[Init->NSBank];
 80035ee:	f850 3024 	ldr.w	r3, [r0, r4, lsl #2]
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 80035f2:	684a      	ldr	r2, [r1, #4]
  tmpr &= ((uint32_t)~(FSMC_BCR1_MBKEN     | FSMC_BCR1_MUXEN    | FSMC_BCR1_MTYP     | \
 80035f4:	4e11      	ldr	r6, [pc, #68]	; (800363c <FSMC_NORSRAM_Init+0x54>)
 80035f6:	401e      	ands	r6, r3
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 80035f8:	ea45 0302 	orr.w	r3, r5, r2
                     Init->MemoryType           |\
 80035fc:	68ca      	ldr	r2, [r1, #12]
 80035fe:	4313      	orrs	r3, r2
                     Init->MemoryDataWidth      |\
 8003600:	690a      	ldr	r2, [r1, #16]
 8003602:	4313      	orrs	r3, r2
                     Init->BurstAccessMode      |\
 8003604:	694a      	ldr	r2, [r1, #20]
 8003606:	4313      	orrs	r3, r2
                     Init->WaitSignalPolarity   |\
 8003608:	698a      	ldr	r2, [r1, #24]
 800360a:	4313      	orrs	r3, r2
                     Init->WrapMode             |\
 800360c:	69ca      	ldr	r2, [r1, #28]
 800360e:	4313      	orrs	r3, r2
                     Init->WaitSignalActive     |\
 8003610:	6a0a      	ldr	r2, [r1, #32]
 8003612:	4313      	orrs	r3, r2
                     Init->WriteOperation       |\
 8003614:	6a4a      	ldr	r2, [r1, #36]	; 0x24
 8003616:	4313      	orrs	r3, r2
                     Init->WaitSignal           |\
 8003618:	6a8a      	ldr	r2, [r1, #40]	; 0x28
 800361a:	4313      	orrs	r3, r2
                     Init->ExtendedMode         |\
 800361c:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 800361e:	4313      	orrs	r3, r2
                     Init->AsynchronousWait     |\
 8003620:	6bca      	ldr	r2, [r1, #60]	; 0x3c
 8003622:	4313      	orrs	r3, r2
                     Init->PageSize             |\
 8003624:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 8003626:	4313      	orrs	r3, r2
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 8003628:	4333      	orrs	r3, r6
                     Init->ContinuousClock      |\
                     Init->PageSize             |\
                     Init->WriteFifo);
#endif /* STM32F405xx || STM32F415xx || STM32F407xx || STM32F417xx */ 
            
  if(Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 800362a:	2d08      	cmp	r5, #8
  {
    tmpr |= (uint32_t)FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 800362c:	bf08      	it	eq
 800362e:	f043 0340 	orreq.w	r3, r3, #64	; 0x40
  }

  Device->BTCR[Init->NSBank] = tmpr;
 8003632:	f840 3024 	str.w	r3, [r0, r4, lsl #2]
    Device->BTCR[FSMC_NORSRAM_BANK1] |= (uint32_t)(Init->WriteFifo);
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
}
 8003636:	2000      	movs	r0, #0
 8003638:	bd70      	pop	{r4, r5, r6, pc}
 800363a:	bf00      	nop
 800363c:	fff00080 	.word	0xfff00080

08003640 <FSMC_NORSRAM_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8003640:	eb00 0282 	add.w	r2, r0, r2, lsl #2
  tmpr &= ((uint32_t)~(FSMC_BTR1_ADDSET  | FSMC_BTR1_ADDHLD | FSMC_BTR1_DATAST | \
                       FSMC_BTR1_BUSTURN | FSMC_BTR1_CLKDIV | FSMC_BTR1_DATLAT | \
                       FSMC_BTR1_ACCMOD));
  
  /* Set FSMC_NORSRAM device timing parameters */  
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8003644:	680b      	ldr	r3, [r1, #0]
 8003646:	6988      	ldr	r0, [r1, #24]
 8003648:	4303      	orrs	r3, r0
                    ((Timing->AddressHoldTime) << 4U)          |\
 800364a:	6848      	ldr	r0, [r1, #4]
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800364c:	ea43 1300 	orr.w	r3, r3, r0, lsl #4
                    ((Timing->DataSetupTime) << 8U)            |\
 8003650:	6888      	ldr	r0, [r1, #8]
{
 8003652:	b530      	push	{r4, r5, lr}
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8003654:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 8003658:	690d      	ldr	r5, [r1, #16]
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 800365a:	68c8      	ldr	r0, [r1, #12]
                    (((Timing->DataLatency)-2U) << 24U)        |\
 800365c:	6949      	ldr	r1, [r1, #20]
  tmpr = Device->BTCR[Bank + 1U];
 800365e:	6854      	ldr	r4, [r2, #4]
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8003660:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 8003664:	3d01      	subs	r5, #1
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8003666:	ea43 5305 	orr.w	r3, r3, r5, lsl #20
                    (((Timing->DataLatency)-2U) << 24U)        |\
 800366a:	3902      	subs	r1, #2
  tmpr &= ((uint32_t)~(FSMC_BTR1_ADDSET  | FSMC_BTR1_ADDHLD | FSMC_BTR1_DATAST | \
 800366c:	f004 4440 	and.w	r4, r4, #3221225472	; 0xc0000000
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8003670:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8003674:	4323      	orrs	r3, r4
                    (Timing->AccessMode));
  
  Device->BTCR[Bank + 1] = tmpr; 
 8003676:	6053      	str	r3, [r2, #4]
    Device->BTCR[FSMC_NORSRAM_BANK1 + 1U] = tmpr;
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
}
 8003678:	2000      	movs	r0, #0
 800367a:	bd30      	pop	{r4, r5, pc}

0800367c <FSMC_NORSRAM_Extended_Timing_Init>:
  
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if(ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 800367c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
{
 8003680:	b530      	push	{r4, r5, lr}
  if(ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 8003682:	d114      	bne.n	80036ae <FSMC_NORSRAM_Extended_Timing_Init+0x32>
    assert_param(IS_FSMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
    /* Get the BWTR register value */
    tmpr = Device->BWTR[Bank];
 8003684:	f850 3022 	ldr.w	r3, [r0, r2, lsl #2]
    
    /* Clear ADDSET, ADDHLD, DATAST, BUSTURN and ACCMOD bits */
    tmpr &= ((uint32_t)~(FSMC_BWTR1_ADDSET  | FSMC_BWTR1_ADDHLD | FSMC_BWTR1_DATAST | \
 8003688:	4c0a      	ldr	r4, [pc, #40]	; (80036b4 <FSMC_NORSRAM_Extended_Timing_Init+0x38>)
                         FSMC_BWTR1_BUSTURN | FSMC_BWTR1_ACCMOD));

    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
                      ((Timing->AddressHoldTime) << 4U)          |\
                      ((Timing->DataSetupTime) << 8U)            |\
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 800368a:	698d      	ldr	r5, [r1, #24]
    tmpr &= ((uint32_t)~(FSMC_BWTR1_ADDSET  | FSMC_BWTR1_ADDHLD | FSMC_BWTR1_DATAST | \
 800368c:	401c      	ands	r4, r3
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 800368e:	680b      	ldr	r3, [r1, #0]
 8003690:	432b      	orrs	r3, r5
                      ((Timing->AddressHoldTime) << 4U)          |\
 8003692:	684d      	ldr	r5, [r1, #4]
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 8003694:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
                      ((Timing->DataSetupTime) << 8U)            |\
 8003698:	688d      	ldr	r5, [r1, #8]
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 800369a:	68c9      	ldr	r1, [r1, #12]
 800369c:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
 80036a0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 80036a4:	4323      	orrs	r3, r4
    
    Device->BWTR[Bank] = tmpr;
  }
  else                                        
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 80036a6:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
  }   
  
  return HAL_OK;  
}
 80036aa:	2000      	movs	r0, #0
 80036ac:	bd30      	pop	{r4, r5, pc}
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 80036ae:	f06f 4370 	mvn.w	r3, #4026531840	; 0xf0000000
 80036b2:	e7f8      	b.n	80036a6 <FSMC_NORSRAM_Extended_Timing_Init+0x2a>
 80036b4:	cff00000 	.word	0xcff00000

080036b8 <SDMMC_GetCmdResp2>:
  */
static uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80036b8:	4b11      	ldr	r3, [pc, #68]	; (8003700 <SDMMC_GetCmdResp2+0x48>)
 80036ba:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	fbb3 f2f2 	udiv	r2, r3, r2
 80036c4:	f241 3388 	movw	r3, #5000	; 0x1388
 80036c8:	4353      	muls	r3, r2
  
  do
  {
    if (count-- == 0U)
 80036ca:	f113 33ff 	adds.w	r3, r3, #4294967295
 80036ce:	d314      	bcc.n	80036fa <SDMMC_GetCmdResp2+0x42>
    {
      return SDMMC_ERROR_TIMEOUT;
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT));
 80036d0:	6b42      	ldr	r2, [r0, #52]	; 0x34
 80036d2:	f012 0f45 	tst.w	r2, #69	; 0x45
 80036d6:	d0f8      	beq.n	80036ca <SDMMC_GetCmdResp2+0x12>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80036d8:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80036da:	075b      	lsls	r3, r3, #29
 80036dc:	d503      	bpl.n	80036e6 <SDMMC_GetCmdResp2+0x2e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80036de:	2304      	movs	r3, #4
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80036e0:	6383      	str	r3, [r0, #56]	; 0x38
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_FLAGS);
  }

  return SDMMC_ERROR_NONE;
}
 80036e2:	4618      	mov	r0, r3
 80036e4:	4770      	bx	lr
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80036e6:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80036e8:	f013 0301 	ands.w	r3, r3, #1
 80036ec:	d001      	beq.n	80036f2 <SDMMC_GetCmdResp2+0x3a>
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80036ee:	2301      	movs	r3, #1
 80036f0:	e7f6      	b.n	80036e0 <SDMMC_GetCmdResp2+0x28>
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_FLAGS);
 80036f2:	f240 52ff 	movw	r2, #1535	; 0x5ff
 80036f6:	6382      	str	r2, [r0, #56]	; 0x38
 80036f8:	e7f3      	b.n	80036e2 <SDMMC_GetCmdResp2+0x2a>
      return SDMMC_ERROR_TIMEOUT;
 80036fa:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80036fe:	e7f0      	b.n	80036e2 <SDMMC_GetCmdResp2+0x2a>
 8003700:	20000010 	.word	0x20000010

08003704 <SDMMC_GetCmdResp3>:
  */
static uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8003704:	4b0e      	ldr	r3, [pc, #56]	; (8003740 <SDMMC_GetCmdResp3+0x3c>)
 8003706:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	fbb3 f2f2 	udiv	r2, r3, r2
 8003710:	f241 3388 	movw	r3, #5000	; 0x1388
 8003714:	4353      	muls	r3, r2
  
  do
  {
    if (count-- == 0U)
 8003716:	f113 33ff 	adds.w	r3, r3, #4294967295
 800371a:	d30e      	bcc.n	800373a <SDMMC_GetCmdResp3+0x36>
    {
      return SDMMC_ERROR_TIMEOUT;
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT));
 800371c:	6b42      	ldr	r2, [r0, #52]	; 0x34
 800371e:	f012 0f45 	tst.w	r2, #69	; 0x45
 8003722:	d0f8      	beq.n	8003716 <SDMMC_GetCmdResp3+0x12>
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8003724:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8003726:	f013 0304 	ands.w	r3, r3, #4
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800372a:	bf15      	itete	ne
 800372c:	2304      	movne	r3, #4
  }
  else
 
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_FLAGS);
 800372e:	f240 52ff 	movweq	r2, #1535	; 0x5ff
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8003732:	6383      	strne	r3, [r0, #56]	; 0x38
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_FLAGS);
 8003734:	6382      	streq	r2, [r0, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8003736:	4618      	mov	r0, r3
 8003738:	4770      	bx	lr
      return SDMMC_ERROR_TIMEOUT;
 800373a:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 800373e:	4770      	bx	lr
 8003740:	20000010 	.word	0x20000010

08003744 <SDIO_Init>:
{
 8003744:	b084      	sub	sp, #16
 8003746:	b510      	push	{r4, lr}
 8003748:	ac03      	add	r4, sp, #12
 800374a:	e884 000e 	stmia.w	r4, {r1, r2, r3}
  tmpreg |= (Init.ClockEdge           |\
 800374e:	9904      	ldr	r1, [sp, #16]
 8003750:	9b03      	ldr	r3, [sp, #12]
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8003752:	6842      	ldr	r2, [r0, #4]
  tmpreg |= (Init.ClockEdge           |\
 8003754:	430b      	orrs	r3, r1
             Init.ClockBypass         |\
 8003756:	9905      	ldr	r1, [sp, #20]
 8003758:	430b      	orrs	r3, r1
             Init.ClockPowerSave      |\
 800375a:	9906      	ldr	r1, [sp, #24]
 800375c:	430b      	orrs	r3, r1
             Init.BusWide             |\
 800375e:	9907      	ldr	r1, [sp, #28]
 8003760:	430b      	orrs	r3, r1
             Init.HardwareFlowControl |\
 8003762:	9908      	ldr	r1, [sp, #32]
}
 8003764:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8003768:	f422 42fd 	bic.w	r2, r2, #32384	; 0x7e80
             Init.HardwareFlowControl |\
 800376c:	430b      	orrs	r3, r1
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800376e:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
 8003772:	4313      	orrs	r3, r2
 8003774:	6043      	str	r3, [r0, #4]
}
 8003776:	b004      	add	sp, #16
 8003778:	2000      	movs	r0, #0
 800377a:	4770      	bx	lr

0800377c <SDIO_ReadFIFO>:
 800377c:	f8d0 0080 	ldr.w	r0, [r0, #128]	; 0x80
 8003780:	4770      	bx	lr

08003782 <SDIO_WriteFIFO>:
  SDIOx->FIFO = *pWriteData;
 8003782:	680b      	ldr	r3, [r1, #0]
 8003784:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
}
 8003788:	2000      	movs	r0, #0
 800378a:	4770      	bx	lr

0800378c <SDIO_PowerState_ON>:
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 800378c:	2303      	movs	r3, #3
 800378e:	6003      	str	r3, [r0, #0]
}
 8003790:	2000      	movs	r0, #0
 8003792:	4770      	bx	lr

08003794 <SDIO_GetPowerState>:
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 8003794:	6800      	ldr	r0, [r0, #0]
}
 8003796:	f000 0003 	and.w	r0, r0, #3
 800379a:	4770      	bx	lr

0800379c <SDIO_SendCommand>:
  SDIOx->ARG = Command->Argument;
 800379c:	680b      	ldr	r3, [r1, #0]
{
 800379e:	b510      	push	{r4, lr}
  SDIOx->ARG = Command->Argument;
 80037a0:	6083      	str	r3, [r0, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80037a2:	688c      	ldr	r4, [r1, #8]
 80037a4:	684b      	ldr	r3, [r1, #4]
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 80037a6:	68c2      	ldr	r2, [r0, #12]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80037a8:	4323      	orrs	r3, r4
                       Command->Response         |\
 80037aa:	68cc      	ldr	r4, [r1, #12]
                       Command->WaitForInterrupt |\
 80037ac:	6909      	ldr	r1, [r1, #16]
                       Command->Response         |\
 80037ae:	4323      	orrs	r3, r4
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 80037b0:	f422 627f 	bic.w	r2, r2, #4080	; 0xff0
                       Command->WaitForInterrupt |\
 80037b4:	430b      	orrs	r3, r1
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 80037b6:	f022 020f 	bic.w	r2, r2, #15
 80037ba:	4313      	orrs	r3, r2
 80037bc:	60c3      	str	r3, [r0, #12]
}
 80037be:	2000      	movs	r0, #0
 80037c0:	bd10      	pop	{r4, pc}

080037c2 <SDIO_GetResponse>:
{
 80037c2:	b082      	sub	sp, #8
  tmp = (uint32_t)&(SDIOx->RESP1) + Response;
 80037c4:	3014      	adds	r0, #20
 80037c6:	4401      	add	r1, r0
  __IO uint32_t tmp = 0U;
 80037c8:	2300      	movs	r3, #0
 80037ca:	9301      	str	r3, [sp, #4]
  tmp = (uint32_t)&(SDIOx->RESP1) + Response;
 80037cc:	9101      	str	r1, [sp, #4]
  return (*(__IO uint32_t *) tmp);
 80037ce:	9b01      	ldr	r3, [sp, #4]
 80037d0:	6818      	ldr	r0, [r3, #0]
}  
 80037d2:	b002      	add	sp, #8
 80037d4:	4770      	bx	lr
	...

080037d8 <SDMMC_GetCmdResp1>:
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80037d8:	4b45      	ldr	r3, [pc, #276]	; (80038f0 <SDMMC_GetCmdResp1+0x118>)
{
 80037da:	b510      	push	{r4, lr}
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	f44f 54fa 	mov.w	r4, #8000	; 0x1f40
 80037e2:	fbb3 f3f4 	udiv	r3, r3, r4
 80037e6:	435a      	muls	r2, r3
    if (count-- == 0U)
 80037e8:	2a00      	cmp	r2, #0
 80037ea:	d04a      	beq.n	8003882 <SDMMC_GetCmdResp1+0xaa>
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT));
 80037ec:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80037ee:	f013 0f45 	tst.w	r3, #69	; 0x45
 80037f2:	f102 32ff 	add.w	r2, r2, #4294967295
 80037f6:	d0f7      	beq.n	80037e8 <SDMMC_GetCmdResp1+0x10>
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80037f8:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80037fa:	075c      	lsls	r4, r3, #29
 80037fc:	d503      	bpl.n	8003806 <SDMMC_GetCmdResp1+0x2e>
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80037fe:	2304      	movs	r3, #4
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8003800:	6383      	str	r3, [r0, #56]	; 0x38
}
 8003802:	4618      	mov	r0, r3
 8003804:	bd10      	pop	{r4, pc}
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8003806:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8003808:	f013 0301 	ands.w	r3, r3, #1
 800380c:	d001      	beq.n	8003812 <SDMMC_GetCmdResp1+0x3a>
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800380e:	2301      	movs	r3, #1
 8003810:	e7f6      	b.n	8003800 <SDMMC_GetCmdResp1+0x28>
  return (uint8_t)(SDIOx->RESPCMD);
 8003812:	6902      	ldr	r2, [r0, #16]
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8003814:	b2d2      	uxtb	r2, r2
 8003816:	4291      	cmp	r1, r2
 8003818:	d136      	bne.n	8003888 <SDMMC_GetCmdResp1+0xb0>
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_FLAGS);
 800381a:	f240 52ff 	movw	r2, #1535	; 0x5ff
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800381e:	4619      	mov	r1, r3
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_FLAGS);
 8003820:	6382      	str	r2, [r0, #56]	; 0x38
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8003822:	f7ff ffce 	bl	80037c2 <SDIO_GetResponse>
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8003826:	4b33      	ldr	r3, [pc, #204]	; (80038f4 <SDMMC_GetCmdResp1+0x11c>)
 8003828:	4003      	ands	r3, r0
 800382a:	2b00      	cmp	r3, #0
 800382c:	d0e9      	beq.n	8003802 <SDMMC_GetCmdResp1+0x2a>
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800382e:	2800      	cmp	r0, #0
 8003830:	db2c      	blt.n	800388c <SDMMC_GetCmdResp1+0xb4>
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8003832:	0042      	lsls	r2, r0, #1
 8003834:	d42d      	bmi.n	8003892 <SDMMC_GetCmdResp1+0xba>
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8003836:	0084      	lsls	r4, r0, #2
 8003838:	d42d      	bmi.n	8003896 <SDMMC_GetCmdResp1+0xbe>
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800383a:	00c1      	lsls	r1, r0, #3
 800383c:	d42d      	bmi.n	800389a <SDMMC_GetCmdResp1+0xc2>
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800383e:	0102      	lsls	r2, r0, #4
 8003840:	d42e      	bmi.n	80038a0 <SDMMC_GetCmdResp1+0xc8>
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8003842:	0144      	lsls	r4, r0, #5
 8003844:	d42f      	bmi.n	80038a6 <SDMMC_GetCmdResp1+0xce>
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8003846:	01c1      	lsls	r1, r0, #7
 8003848:	d430      	bmi.n	80038ac <SDMMC_GetCmdResp1+0xd4>
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800384a:	0202      	lsls	r2, r0, #8
 800384c:	d431      	bmi.n	80038b2 <SDMMC_GetCmdResp1+0xda>
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800384e:	0244      	lsls	r4, r0, #9
 8003850:	d432      	bmi.n	80038b8 <SDMMC_GetCmdResp1+0xe0>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8003852:	0281      	lsls	r1, r0, #10
 8003854:	d433      	bmi.n	80038be <SDMMC_GetCmdResp1+0xe6>
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8003856:	02c2      	lsls	r2, r0, #11
 8003858:	d434      	bmi.n	80038c4 <SDMMC_GetCmdResp1+0xec>
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800385a:	0344      	lsls	r4, r0, #13
 800385c:	d435      	bmi.n	80038ca <SDMMC_GetCmdResp1+0xf2>
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800385e:	0381      	lsls	r1, r0, #14
 8003860:	d436      	bmi.n	80038d0 <SDMMC_GetCmdResp1+0xf8>
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8003862:	03c2      	lsls	r2, r0, #15
 8003864:	d437      	bmi.n	80038d6 <SDMMC_GetCmdResp1+0xfe>
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8003866:	0404      	lsls	r4, r0, #16
 8003868:	d438      	bmi.n	80038dc <SDMMC_GetCmdResp1+0x104>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800386a:	0441      	lsls	r1, r0, #17
 800386c:	d439      	bmi.n	80038e2 <SDMMC_GetCmdResp1+0x10a>
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800386e:	0482      	lsls	r2, r0, #18
 8003870:	d43a      	bmi.n	80038e8 <SDMMC_GetCmdResp1+0x110>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8003872:	f010 0f08 	tst.w	r0, #8
 8003876:	bf14      	ite	ne
 8003878:	f44f 0300 	movne.w	r3, #8388608	; 0x800000
 800387c:	f44f 3380 	moveq.w	r3, #65536	; 0x10000
 8003880:	e7bf      	b.n	8003802 <SDMMC_GetCmdResp1+0x2a>
      return SDMMC_ERROR_TIMEOUT;
 8003882:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8003886:	e7bc      	b.n	8003802 <SDMMC_GetCmdResp1+0x2a>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8003888:	2301      	movs	r3, #1
 800388a:	e7ba      	b.n	8003802 <SDMMC_GetCmdResp1+0x2a>
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800388c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003890:	e7b7      	b.n	8003802 <SDMMC_GetCmdResp1+0x2a>
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8003892:	2340      	movs	r3, #64	; 0x40
 8003894:	e7b5      	b.n	8003802 <SDMMC_GetCmdResp1+0x2a>
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8003896:	2380      	movs	r3, #128	; 0x80
 8003898:	e7b3      	b.n	8003802 <SDMMC_GetCmdResp1+0x2a>
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800389a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800389e:	e7b0      	b.n	8003802 <SDMMC_GetCmdResp1+0x2a>
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 80038a0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80038a4:	e7ad      	b.n	8003802 <SDMMC_GetCmdResp1+0x2a>
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 80038a6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80038aa:	e7aa      	b.n	8003802 <SDMMC_GetCmdResp1+0x2a>
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 80038ac:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80038b0:	e7a7      	b.n	8003802 <SDMMC_GetCmdResp1+0x2a>
    return SDMMC_ERROR_COM_CRC_FAILED;
 80038b2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80038b6:	e7a4      	b.n	8003802 <SDMMC_GetCmdResp1+0x2a>
    return SDMMC_ERROR_ILLEGAL_CMD;
 80038b8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80038bc:	e7a1      	b.n	8003802 <SDMMC_GetCmdResp1+0x2a>
    return SDMMC_ERROR_CARD_ECC_FAILED;
 80038be:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80038c2:	e79e      	b.n	8003802 <SDMMC_GetCmdResp1+0x2a>
    return SDMMC_ERROR_CC_ERR;
 80038c4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80038c8:	e79b      	b.n	8003802 <SDMMC_GetCmdResp1+0x2a>
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 80038ca:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80038ce:	e798      	b.n	8003802 <SDMMC_GetCmdResp1+0x2a>
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 80038d0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80038d4:	e795      	b.n	8003802 <SDMMC_GetCmdResp1+0x2a>
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 80038d6:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80038da:	e792      	b.n	8003802 <SDMMC_GetCmdResp1+0x2a>
    return SDMMC_ERROR_WP_ERASE_SKIP;
 80038dc:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80038e0:	e78f      	b.n	8003802 <SDMMC_GetCmdResp1+0x2a>
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 80038e2:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80038e6:	e78c      	b.n	8003802 <SDMMC_GetCmdResp1+0x2a>
    return SDMMC_ERROR_ERASE_RESET;
 80038e8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80038ec:	e789      	b.n	8003802 <SDMMC_GetCmdResp1+0x2a>
 80038ee:	bf00      	nop
 80038f0:	20000010 	.word	0x20000010
 80038f4:	fdffe008 	.word	0xfdffe008

080038f8 <SDIO_ConfigData>:
  SDIOx->DTIMER = Data->DataTimeOut;
 80038f8:	680b      	ldr	r3, [r1, #0]
{
 80038fa:	b510      	push	{r4, lr}
  SDIOx->DTIMER = Data->DataTimeOut;
 80038fc:	6243      	str	r3, [r0, #36]	; 0x24
  SDIOx->DLEN = Data->DataLength;
 80038fe:	684b      	ldr	r3, [r1, #4]
 8003900:	6283      	str	r3, [r0, #40]	; 0x28
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8003902:	68cc      	ldr	r4, [r1, #12]
 8003904:	688b      	ldr	r3, [r1, #8]
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8003906:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8003908:	4323      	orrs	r3, r4
                       Data->TransferDir   |\
 800390a:	690c      	ldr	r4, [r1, #16]
                       Data->TransferMode  |\
 800390c:	6949      	ldr	r1, [r1, #20]
                       Data->TransferDir   |\
 800390e:	4323      	orrs	r3, r4
                       Data->TransferMode  |\
 8003910:	430b      	orrs	r3, r1
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8003912:	f022 02f7 	bic.w	r2, r2, #247	; 0xf7
 8003916:	4313      	orrs	r3, r2
 8003918:	62c3      	str	r3, [r0, #44]	; 0x2c
}
 800391a:	2000      	movs	r0, #0
 800391c:	bd10      	pop	{r4, pc}

0800391e <SDMMC_CmdBlockLength>:
{
 800391e:	b530      	push	{r4, r5, lr}
 8003920:	b087      	sub	sp, #28
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003922:	2340      	movs	r3, #64	; 0x40
 8003924:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003926:	2300      	movs	r3, #0
{
 8003928:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800392a:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800392c:	2410      	movs	r4, #16
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800392e:	9304      	str	r3, [sp, #16]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003930:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003932:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003936:	9305      	str	r3, [sp, #20]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8003938:	9402      	str	r4, [sp, #8]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800393a:	f7ff ff2f 	bl	800379c <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 800393e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003942:	4621      	mov	r1, r4
 8003944:	4628      	mov	r0, r5
 8003946:	f7ff ff47 	bl	80037d8 <SDMMC_GetCmdResp1>
}
 800394a:	b007      	add	sp, #28
 800394c:	bd30      	pop	{r4, r5, pc}

0800394e <SDMMC_CmdReadSingleBlock>:
{
 800394e:	b530      	push	{r4, r5, lr}
 8003950:	b087      	sub	sp, #28
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003952:	2340      	movs	r3, #64	; 0x40
 8003954:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003956:	2300      	movs	r3, #0
{
 8003958:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800395a:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800395c:	2411      	movs	r4, #17
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800395e:	9304      	str	r3, [sp, #16]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003960:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003962:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003966:	9305      	str	r3, [sp, #20]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8003968:	9402      	str	r4, [sp, #8]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800396a:	f7ff ff17 	bl	800379c <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800396e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003972:	4621      	mov	r1, r4
 8003974:	4628      	mov	r0, r5
 8003976:	f7ff ff2f 	bl	80037d8 <SDMMC_GetCmdResp1>
}
 800397a:	b007      	add	sp, #28
 800397c:	bd30      	pop	{r4, r5, pc}

0800397e <SDMMC_CmdReadMultiBlock>:
{
 800397e:	b530      	push	{r4, r5, lr}
 8003980:	b087      	sub	sp, #28
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003982:	2340      	movs	r3, #64	; 0x40
 8003984:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003986:	2300      	movs	r3, #0
{
 8003988:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800398a:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800398c:	2412      	movs	r4, #18
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800398e:	9304      	str	r3, [sp, #16]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003990:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003992:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003996:	9305      	str	r3, [sp, #20]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8003998:	9402      	str	r4, [sp, #8]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800399a:	f7ff feff 	bl	800379c <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800399e:	f241 3288 	movw	r2, #5000	; 0x1388
 80039a2:	4621      	mov	r1, r4
 80039a4:	4628      	mov	r0, r5
 80039a6:	f7ff ff17 	bl	80037d8 <SDMMC_GetCmdResp1>
}
 80039aa:	b007      	add	sp, #28
 80039ac:	bd30      	pop	{r4, r5, pc}

080039ae <SDMMC_CmdWriteSingleBlock>:
{
 80039ae:	b530      	push	{r4, r5, lr}
 80039b0:	b087      	sub	sp, #28
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80039b2:	2340      	movs	r3, #64	; 0x40
 80039b4:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80039b6:	2300      	movs	r3, #0
{
 80039b8:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 80039ba:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 80039bc:	2418      	movs	r4, #24
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80039be:	9304      	str	r3, [sp, #16]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80039c0:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80039c2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80039c6:	9305      	str	r3, [sp, #20]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 80039c8:	9402      	str	r4, [sp, #8]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80039ca:	f7ff fee7 	bl	800379c <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 80039ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80039d2:	4621      	mov	r1, r4
 80039d4:	4628      	mov	r0, r5
 80039d6:	f7ff feff 	bl	80037d8 <SDMMC_GetCmdResp1>
}
 80039da:	b007      	add	sp, #28
 80039dc:	bd30      	pop	{r4, r5, pc}

080039de <SDMMC_CmdWriteMultiBlock>:
{
 80039de:	b530      	push	{r4, r5, lr}
 80039e0:	b087      	sub	sp, #28
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80039e2:	2340      	movs	r3, #64	; 0x40
 80039e4:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80039e6:	2300      	movs	r3, #0
{
 80039e8:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 80039ea:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 80039ec:	2419      	movs	r4, #25
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80039ee:	9304      	str	r3, [sp, #16]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80039f0:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80039f2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80039f6:	9305      	str	r3, [sp, #20]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 80039f8:	9402      	str	r4, [sp, #8]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80039fa:	f7ff fecf 	bl	800379c <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 80039fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a02:	4621      	mov	r1, r4
 8003a04:	4628      	mov	r0, r5
 8003a06:	f7ff fee7 	bl	80037d8 <SDMMC_GetCmdResp1>
}
 8003a0a:	b007      	add	sp, #28
 8003a0c:	bd30      	pop	{r4, r5, pc}
	...

08003a10 <SDMMC_CmdStopTransfer>:
{
 8003a10:	b530      	push	{r4, r5, lr}
 8003a12:	b087      	sub	sp, #28
  sdmmc_cmdinit.Argument         = 0U;
 8003a14:	2300      	movs	r3, #0
{
 8003a16:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = 0U;
 8003a18:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8003a1a:	240c      	movs	r4, #12
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003a1c:	2240      	movs	r2, #64	; 0x40
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003a1e:	9304      	str	r3, [sp, #16]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003a20:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003a22:	f44f 6380 	mov.w	r3, #1024	; 0x400
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003a26:	9203      	str	r2, [sp, #12]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003a28:	9305      	str	r3, [sp, #20]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8003a2a:	9402      	str	r4, [sp, #8]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003a2c:	f7ff feb6 	bl	800379c <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, 100000000U);
 8003a30:	4a03      	ldr	r2, [pc, #12]	; (8003a40 <SDMMC_CmdStopTransfer+0x30>)
 8003a32:	4621      	mov	r1, r4
 8003a34:	4628      	mov	r0, r5
 8003a36:	f7ff fecf 	bl	80037d8 <SDMMC_GetCmdResp1>
}
 8003a3a:	b007      	add	sp, #28
 8003a3c:	bd30      	pop	{r4, r5, pc}
 8003a3e:	bf00      	nop
 8003a40:	05f5e100 	.word	0x05f5e100

08003a44 <SDMMC_CmdSelDesel>:
{
 8003a44:	b530      	push	{r4, r5, lr}
 8003a46:	b087      	sub	sp, #28
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003a48:	2340      	movs	r3, #64	; 0x40
 8003a4a:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003a4c:	2300      	movs	r3, #0
{
 8003a4e:	4605      	mov	r5, r0
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8003a50:	2407      	movs	r4, #7
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003a52:	9304      	str	r3, [sp, #16]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003a54:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003a56:	f44f 6380 	mov.w	r3, #1024	; 0x400
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8003a5a:	9201      	str	r2, [sp, #4]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003a5c:	9305      	str	r3, [sp, #20]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8003a5e:	9402      	str	r4, [sp, #8]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003a60:	f7ff fe9c 	bl	800379c <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 8003a64:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a68:	4621      	mov	r1, r4
 8003a6a:	4628      	mov	r0, r5
 8003a6c:	f7ff feb4 	bl	80037d8 <SDMMC_GetCmdResp1>
}
 8003a70:	b007      	add	sp, #28
 8003a72:	bd30      	pop	{r4, r5, pc}

08003a74 <SDMMC_CmdGoIdleState>:
{
 8003a74:	b510      	push	{r4, lr}
 8003a76:	b086      	sub	sp, #24
  sdmmc_cmdinit.Argument         = 0U;
 8003a78:	2300      	movs	r3, #0
 8003a7a:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8003a7c:	9302      	str	r3, [sp, #8]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 8003a7e:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003a80:	9304      	str	r3, [sp, #16]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003a82:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003a84:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003a88:	9305      	str	r3, [sp, #20]
{
 8003a8a:	4604      	mov	r4, r0
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003a8c:	f7ff fe86 	bl	800379c <SDIO_SendCommand>
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8003a90:	4b0b      	ldr	r3, [pc, #44]	; (8003ac0 <SDMMC_CmdGoIdleState+0x4c>)
 8003a92:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	fbb3 f2f2 	udiv	r2, r3, r2
 8003a9c:	f241 3388 	movw	r3, #5000	; 0x1388
 8003aa0:	4353      	muls	r3, r2
    if (count-- == 0U)
 8003aa2:	f113 33ff 	adds.w	r3, r3, #4294967295
 8003aa6:	d308      	bcc.n	8003aba <SDMMC_CmdGoIdleState+0x46>
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 8003aa8:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8003aaa:	0612      	lsls	r2, r2, #24
 8003aac:	d5f9      	bpl.n	8003aa2 <SDMMC_CmdGoIdleState+0x2e>
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_FLAGS);
 8003aae:	f240 53ff 	movw	r3, #1535	; 0x5ff
 8003ab2:	63a3      	str	r3, [r4, #56]	; 0x38
  return SDMMC_ERROR_NONE;
 8003ab4:	2000      	movs	r0, #0
}
 8003ab6:	b006      	add	sp, #24
 8003ab8:	bd10      	pop	{r4, pc}
      return SDMMC_ERROR_TIMEOUT;
 8003aba:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
  return errorstate;
 8003abe:	e7fa      	b.n	8003ab6 <SDMMC_CmdGoIdleState+0x42>
 8003ac0:	20000010 	.word	0x20000010

08003ac4 <SDMMC_CmdOperCond>:
{
 8003ac4:	b510      	push	{r4, lr}
 8003ac6:	b086      	sub	sp, #24
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8003ac8:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8003acc:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8003ace:	2308      	movs	r3, #8
 8003ad0:	9302      	str	r3, [sp, #8]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003ad2:	2340      	movs	r3, #64	; 0x40
 8003ad4:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003ad6:	2300      	movs	r3, #0
 8003ad8:	9304      	str	r3, [sp, #16]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003ada:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003adc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003ae0:	9305      	str	r3, [sp, #20]
{
 8003ae2:	4604      	mov	r4, r0
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003ae4:	f7ff fe5a 	bl	800379c <SDIO_SendCommand>
  */
static uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8003ae8:	4b11      	ldr	r3, [pc, #68]	; (8003b30 <SDMMC_CmdOperCond+0x6c>)
 8003aea:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	fbb3 f2f2 	udiv	r2, r3, r2
 8003af4:	f241 3388 	movw	r3, #5000	; 0x1388
 8003af8:	4353      	muls	r3, r2
  
  do
  {
    if (count-- == 0U)
 8003afa:	f113 33ff 	adds.w	r3, r3, #4294967295
 8003afe:	d314      	bcc.n	8003b2a <SDMMC_CmdOperCond+0x66>
    {
      return SDMMC_ERROR_TIMEOUT;
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT));
 8003b00:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8003b02:	f012 0f45 	tst.w	r2, #69	; 0x45
 8003b06:	d0f8      	beq.n	8003afa <SDMMC_CmdOperCond+0x36>

  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8003b08:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8003b0a:	f012 0204 	ands.w	r2, r2, #4
 8003b0e:	d004      	beq.n	8003b1a <SDMMC_CmdOperCond+0x56>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 8003b10:	2340      	movs	r3, #64	; 0x40
 8003b12:	63a3      	str	r3, [r4, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8003b14:	2004      	movs	r0, #4
}
 8003b16:	b006      	add	sp, #24
 8003b18:	bd10      	pop	{r4, pc}
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 8003b1a:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8003b1c:	f010 0040 	ands.w	r0, r0, #64	; 0x40
 8003b20:	d0f9      	beq.n	8003b16 <SDMMC_CmdOperCond+0x52>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 8003b22:	2340      	movs	r3, #64	; 0x40
 8003b24:	63a3      	str	r3, [r4, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8003b26:	4610      	mov	r0, r2
 8003b28:	e7f5      	b.n	8003b16 <SDMMC_CmdOperCond+0x52>
      return SDMMC_ERROR_TIMEOUT;
 8003b2a:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 8003b2e:	e7f2      	b.n	8003b16 <SDMMC_CmdOperCond+0x52>
 8003b30:	20000010 	.word	0x20000010

08003b34 <SDMMC_CmdAppCommand>:
{
 8003b34:	b530      	push	{r4, r5, lr}
 8003b36:	b087      	sub	sp, #28
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003b38:	2340      	movs	r3, #64	; 0x40
 8003b3a:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003b3c:	2300      	movs	r3, #0
{
 8003b3e:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8003b40:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8003b42:	2437      	movs	r4, #55	; 0x37
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003b44:	9304      	str	r3, [sp, #16]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003b46:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003b48:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003b4c:	9305      	str	r3, [sp, #20]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8003b4e:	9402      	str	r4, [sp, #8]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003b50:	f7ff fe24 	bl	800379c <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 8003b54:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b58:	4621      	mov	r1, r4
 8003b5a:	4628      	mov	r0, r5
 8003b5c:	f7ff fe3c 	bl	80037d8 <SDMMC_GetCmdResp1>
}
 8003b60:	b007      	add	sp, #28
 8003b62:	bd30      	pop	{r4, r5, pc}

08003b64 <SDMMC_CmdAppOperCommand>:
{
 8003b64:	b510      	push	{r4, lr}
 8003b66:	b086      	sub	sp, #24
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8003b68:	2329      	movs	r3, #41	; 0x29
 8003b6a:	9302      	str	r3, [sp, #8]
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | SdType;
 8003b6c:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003b70:	2340      	movs	r3, #64	; 0x40
 8003b72:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | SdType;
 8003b74:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003b78:	2300      	movs	r3, #0
{
 8003b7a:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | SdType;
 8003b7c:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003b7e:	9304      	str	r3, [sp, #16]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003b80:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003b82:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003b86:	9305      	str	r3, [sp, #20]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003b88:	f7ff fe08 	bl	800379c <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 8003b8c:	4620      	mov	r0, r4
 8003b8e:	f7ff fdb9 	bl	8003704 <SDMMC_GetCmdResp3>
}
 8003b92:	b006      	add	sp, #24
 8003b94:	bd10      	pop	{r4, pc}

08003b96 <SDMMC_CmdSendSCR>:
{
 8003b96:	b530      	push	{r4, r5, lr}
 8003b98:	b087      	sub	sp, #28
  sdmmc_cmdinit.Argument         = 0U;
 8003b9a:	2300      	movs	r3, #0
{
 8003b9c:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = 0U;
 8003b9e:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8003ba0:	2433      	movs	r4, #51	; 0x33
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003ba2:	2240      	movs	r2, #64	; 0x40
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003ba4:	9304      	str	r3, [sp, #16]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003ba6:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003ba8:	f44f 6380 	mov.w	r3, #1024	; 0x400
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003bac:	9203      	str	r2, [sp, #12]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003bae:	9305      	str	r3, [sp, #20]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8003bb0:	9402      	str	r4, [sp, #8]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003bb2:	f7ff fdf3 	bl	800379c <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 8003bb6:	f241 3288 	movw	r2, #5000	; 0x1388
 8003bba:	4621      	mov	r1, r4
 8003bbc:	4628      	mov	r0, r5
 8003bbe:	f7ff fe0b 	bl	80037d8 <SDMMC_GetCmdResp1>
}
 8003bc2:	b007      	add	sp, #28
 8003bc4:	bd30      	pop	{r4, r5, pc}

08003bc6 <SDMMC_CmdSendCID>:
{
 8003bc6:	b510      	push	{r4, lr}
 8003bc8:	b086      	sub	sp, #24
  sdmmc_cmdinit.Argument         = 0U;
 8003bca:	2300      	movs	r3, #0
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8003bcc:	2202      	movs	r2, #2
{
 8003bce:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = 0U;
 8003bd0:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8003bd2:	9202      	str	r2, [sp, #8]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003bd4:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8003bd6:	22c0      	movs	r2, #192	; 0xc0
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003bd8:	f44f 6380 	mov.w	r3, #1024	; 0x400
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003bdc:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8003bde:	9203      	str	r2, [sp, #12]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003be0:	9305      	str	r3, [sp, #20]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003be2:	f7ff fddb 	bl	800379c <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8003be6:	4620      	mov	r0, r4
 8003be8:	f7ff fd66 	bl	80036b8 <SDMMC_GetCmdResp2>
}
 8003bec:	b006      	add	sp, #24
 8003bee:	bd10      	pop	{r4, pc}

08003bf0 <SDMMC_CmdSendCSD>:
{
 8003bf0:	b510      	push	{r4, lr}
 8003bf2:	b086      	sub	sp, #24
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8003bf4:	2309      	movs	r3, #9
 8003bf6:	9302      	str	r3, [sp, #8]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8003bf8:	23c0      	movs	r3, #192	; 0xc0
 8003bfa:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003bfc:	2300      	movs	r3, #0
{
 8003bfe:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8003c00:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003c02:	9304      	str	r3, [sp, #16]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003c04:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003c06:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003c0a:	9305      	str	r3, [sp, #20]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003c0c:	f7ff fdc6 	bl	800379c <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8003c10:	4620      	mov	r0, r4
 8003c12:	f7ff fd51 	bl	80036b8 <SDMMC_GetCmdResp2>
}
 8003c16:	b006      	add	sp, #24
 8003c18:	bd10      	pop	{r4, pc}
	...

08003c1c <SDMMC_CmdSetRelAdd>:
{
 8003c1c:	b530      	push	{r4, r5, lr}
 8003c1e:	b087      	sub	sp, #28
  sdmmc_cmdinit.Argument         = 0U;
 8003c20:	2300      	movs	r3, #0
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8003c22:	2203      	movs	r2, #3
  sdmmc_cmdinit.Argument         = 0U;
 8003c24:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8003c26:	9202      	str	r2, [sp, #8]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003c28:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003c2a:	2240      	movs	r2, #64	; 0x40
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003c2c:	f44f 6380 	mov.w	r3, #1024	; 0x400
{
 8003c30:	460d      	mov	r5, r1
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003c32:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003c34:	9203      	str	r2, [sp, #12]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003c36:	9305      	str	r3, [sp, #20]
{
 8003c38:	4604      	mov	r4, r0
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003c3a:	f7ff fdaf 	bl	800379c <SDIO_SendCommand>
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8003c3e:	4b20      	ldr	r3, [pc, #128]	; (8003cc0 <SDMMC_CmdSetRelAdd+0xa4>)
 8003c40:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	fbb3 f2f2 	udiv	r2, r3, r2
 8003c4a:	f241 3388 	movw	r3, #5000	; 0x1388
 8003c4e:	4353      	muls	r3, r2
    if (count-- == 0U)
 8003c50:	f113 33ff 	adds.w	r3, r3, #4294967295
 8003c54:	d32b      	bcc.n	8003cae <SDMMC_CmdSetRelAdd+0x92>
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT));
 8003c56:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8003c58:	f012 0f45 	tst.w	r2, #69	; 0x45
 8003c5c:	d0f8      	beq.n	8003c50 <SDMMC_CmdSetRelAdd+0x34>
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8003c5e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003c60:	075a      	lsls	r2, r3, #29
 8003c62:	d503      	bpl.n	8003c6c <SDMMC_CmdSetRelAdd+0x50>
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8003c64:	2004      	movs	r0, #4
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8003c66:	63a0      	str	r0, [r4, #56]	; 0x38
}
 8003c68:	b007      	add	sp, #28
 8003c6a:	bd30      	pop	{r4, r5, pc}
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8003c6c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003c6e:	f011 0101 	ands.w	r1, r1, #1
 8003c72:	d001      	beq.n	8003c78 <SDMMC_CmdSetRelAdd+0x5c>
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8003c74:	2001      	movs	r0, #1
 8003c76:	e7f6      	b.n	8003c66 <SDMMC_CmdSetRelAdd+0x4a>
  return (uint8_t)(SDIOx->RESPCMD);
 8003c78:	6923      	ldr	r3, [r4, #16]
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8003c7a:	b2db      	uxtb	r3, r3
 8003c7c:	2b03      	cmp	r3, #3
 8003c7e:	d119      	bne.n	8003cb4 <SDMMC_CmdSetRelAdd+0x98>
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_FLAGS);
 8003c80:	f240 53ff 	movw	r3, #1535	; 0x5ff
 8003c84:	63a3      	str	r3, [r4, #56]	; 0x38
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8003c86:	4620      	mov	r0, r4
 8003c88:	f7ff fd9b 	bl	80037c2 <SDIO_GetResponse>
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8003c8c:	f410 4360 	ands.w	r3, r0, #57344	; 0xe000
 8003c90:	d103      	bne.n	8003c9a <SDMMC_CmdSetRelAdd+0x7e>
    *pRCA = (uint16_t) (response_r1 >> 16);
 8003c92:	0c00      	lsrs	r0, r0, #16
 8003c94:	8028      	strh	r0, [r5, #0]
    return SDMMC_ERROR_NONE;
 8003c96:	4618      	mov	r0, r3
 8003c98:	e7e6      	b.n	8003c68 <SDMMC_CmdSetRelAdd+0x4c>
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8003c9a:	0443      	lsls	r3, r0, #17
 8003c9c:	d40c      	bmi.n	8003cb8 <SDMMC_CmdSetRelAdd+0x9c>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8003c9e:	f410 4f00 	tst.w	r0, #32768	; 0x8000
 8003ca2:	bf14      	ite	ne
 8003ca4:	f44f 5080 	movne.w	r0, #4096	; 0x1000
 8003ca8:	f44f 3080 	moveq.w	r0, #65536	; 0x10000
 8003cac:	e7dc      	b.n	8003c68 <SDMMC_CmdSetRelAdd+0x4c>
      return SDMMC_ERROR_TIMEOUT;
 8003cae:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 8003cb2:	e7d9      	b.n	8003c68 <SDMMC_CmdSetRelAdd+0x4c>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8003cb4:	2001      	movs	r0, #1
 8003cb6:	e7d7      	b.n	8003c68 <SDMMC_CmdSetRelAdd+0x4c>
    return SDMMC_ERROR_ILLEGAL_CMD;
 8003cb8:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8003cbc:	e7d4      	b.n	8003c68 <SDMMC_CmdSetRelAdd+0x4c>
 8003cbe:	bf00      	nop
 8003cc0:	20000010 	.word	0x20000010

08003cc4 <SDMMC_CmdSendStatus>:
{
 8003cc4:	b530      	push	{r4, r5, lr}
 8003cc6:	b087      	sub	sp, #28
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003cc8:	2340      	movs	r3, #64	; 0x40
 8003cca:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003ccc:	2300      	movs	r3, #0
{
 8003cce:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8003cd0:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8003cd2:	240d      	movs	r4, #13
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003cd4:	9304      	str	r3, [sp, #16]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003cd6:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003cd8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003cdc:	9305      	str	r3, [sp, #20]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8003cde:	9402      	str	r4, [sp, #8]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003ce0:	f7ff fd5c 	bl	800379c <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 8003ce4:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ce8:	4621      	mov	r1, r4
 8003cea:	4628      	mov	r0, r5
 8003cec:	f7ff fd74 	bl	80037d8 <SDMMC_GetCmdResp1>
}
 8003cf0:	b007      	add	sp, #28
 8003cf2:	bd30      	pop	{r4, r5, pc}

08003cf4 <SDMMC_CmdSwitch>:
{
 8003cf4:	b530      	push	{r4, r5, lr}
 8003cf6:	b087      	sub	sp, #28
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003cf8:	2340      	movs	r3, #64	; 0x40
 8003cfa:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003cfc:	2300      	movs	r3, #0
{
 8003cfe:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = Argument;
 8003d00:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SWITCH;
 8003d02:	2406      	movs	r4, #6
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003d04:	9304      	str	r3, [sp, #16]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003d06:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003d08:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003d0c:	9305      	str	r3, [sp, #20]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SWITCH;
 8003d0e:	9402      	str	r4, [sp, #8]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003d10:	f7ff fd44 	bl	800379c <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_HS_SWITCH, SDIO_CMDTIMEOUT);
 8003d14:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d18:	4621      	mov	r1, r4
 8003d1a:	4628      	mov	r0, r5
 8003d1c:	f7ff fd5c 	bl	80037d8 <SDMMC_GetCmdResp1>
}
 8003d20:	b007      	add	sp, #28
 8003d22:	bd30      	pop	{r4, r5, pc}

08003d24 <SDMMC_CmdBusWidth>:
 8003d24:	f7ff bfe6 	b.w	8003cf4 <SDMMC_CmdSwitch>

08003d28 <disk_status>:
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8003d28:	4b03      	ldr	r3, [pc, #12]	; (8003d38 <disk_status+0x10>)
 8003d2a:	181a      	adds	r2, r3, r0
 8003d2c:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 8003d30:	7a10      	ldrb	r0, [r2, #8]
 8003d32:	685b      	ldr	r3, [r3, #4]
 8003d34:	685b      	ldr	r3, [r3, #4]
 8003d36:	4718      	bx	r3
 8003d38:	200006cc 	.word	0x200006cc

08003d3c <disk_initialize>:
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
  DSTATUS stat = RES_OK;

  if(disk.is_initialized[pdrv] == 0)
 8003d3c:	4b06      	ldr	r3, [pc, #24]	; (8003d58 <disk_initialize+0x1c>)
 8003d3e:	5c1a      	ldrb	r2, [r3, r0]
 8003d40:	b942      	cbnz	r2, 8003d54 <disk_initialize+0x18>
  {
    disk.is_initialized[pdrv] = 1;
 8003d42:	2201      	movs	r2, #1
 8003d44:	541a      	strb	r2, [r3, r0]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8003d46:	181a      	adds	r2, r3, r0
 8003d48:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 8003d4c:	7a10      	ldrb	r0, [r2, #8]
 8003d4e:	685b      	ldr	r3, [r3, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	4718      	bx	r3
  }
  return stat;
}
 8003d54:	2000      	movs	r0, #0
 8003d56:	4770      	bx	lr
 8003d58:	200006cc 	.word	0x200006cc

08003d5c <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8003d5c:	b430      	push	{r4, r5}
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8003d5e:	4c05      	ldr	r4, [pc, #20]	; (8003d74 <disk_read+0x18>)
 8003d60:	1825      	adds	r5, r4, r0
 8003d62:	eb04 0480 	add.w	r4, r4, r0, lsl #2
 8003d66:	6860      	ldr	r0, [r4, #4]
 8003d68:	6884      	ldr	r4, [r0, #8]
 8003d6a:	7a28      	ldrb	r0, [r5, #8]
 8003d6c:	46a4      	mov	ip, r4
  return res;
}
 8003d6e:	bc30      	pop	{r4, r5}
  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8003d70:	4760      	bx	ip
 8003d72:	bf00      	nop
 8003d74:	200006cc 	.word	0x200006cc

08003d78 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8003d78:	b430      	push	{r4, r5}
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8003d7a:	4c05      	ldr	r4, [pc, #20]	; (8003d90 <disk_write+0x18>)
 8003d7c:	1825      	adds	r5, r4, r0
 8003d7e:	eb04 0480 	add.w	r4, r4, r0, lsl #2
 8003d82:	6860      	ldr	r0, [r4, #4]
 8003d84:	68c4      	ldr	r4, [r0, #12]
 8003d86:	7a28      	ldrb	r0, [r5, #8]
 8003d88:	46a4      	mov	ip, r4
  return res;
}
 8003d8a:	bc30      	pop	{r4, r5}
  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8003d8c:	4760      	bx	ip
 8003d8e:	bf00      	nop
 8003d90:	200006cc 	.word	0x200006cc

08003d94 <disk_ioctl>:
	void *buff		/* Buffer to send/receive control data */
)
{
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8003d94:	4b05      	ldr	r3, [pc, #20]	; (8003dac <disk_ioctl+0x18>)
{
 8003d96:	b410      	push	{r4}
  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8003d98:	181c      	adds	r4, r3, r0
 8003d9a:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 8003d9e:	7a20      	ldrb	r0, [r4, #8]
 8003da0:	685b      	ldr	r3, [r3, #4]
  return res;
}
 8003da2:	f85d 4b04 	ldr.w	r4, [sp], #4
  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8003da6:	691b      	ldr	r3, [r3, #16]
 8003da8:	4718      	bx	r3
 8003daa:	bf00      	nop
 8003dac:	200006cc 	.word	0x200006cc

08003db0 <ld_dword>:
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
	DWORD rv;

	rv = ptr[3];
	rv = rv << 8 | ptr[2];
 8003db0:	8842      	ldrh	r2, [r0, #2]
	rv = rv << 8 | ptr[1];
 8003db2:	7843      	ldrb	r3, [r0, #1]
	rv = rv << 8 | ptr[0];
 8003db4:	7800      	ldrb	r0, [r0, #0]
	rv = rv << 8 | ptr[1];
 8003db6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	return rv;
}
 8003dba:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
 8003dbe:	4770      	bx	lr

08003dc0 <st_dword>:
}

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
	*ptr++ = (BYTE)val; val >>= 8;
 8003dc0:	0a0b      	lsrs	r3, r1, #8
 8003dc2:	7001      	strb	r1, [r0, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8003dc4:	7043      	strb	r3, [r0, #1]
 8003dc6:	0c0b      	lsrs	r3, r1, #16
	*ptr++ = (BYTE)val; val >>= 8;
 8003dc8:	0e09      	lsrs	r1, r1, #24
 8003dca:	7083      	strb	r3, [r0, #2]
	*ptr++ = (BYTE)val;
 8003dcc:	70c1      	strb	r1, [r0, #3]
 8003dce:	4770      	bx	lr

08003dd0 <mem_set>:
	}
}

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8003dd0:	4402      	add	r2, r0
	BYTE *d = (BYTE*)dst;

	do {
		*d++ = (BYTE)val;
 8003dd2:	f800 1b01 	strb.w	r1, [r0], #1
	} while (--cnt);
 8003dd6:	4290      	cmp	r0, r2
 8003dd8:	d1fb      	bne.n	8003dd2 <mem_set+0x2>
}
 8003dda:	4770      	bx	lr

08003ddc <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8003ddc:	4b15      	ldr	r3, [pc, #84]	; (8003e34 <chk_lock+0x58>)
 8003dde:	b5f0      	push	{r4, r5, r6, r7, lr}
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8003de0:	2500      	movs	r5, #0
 8003de2:	462a      	mov	r2, r5
 8003de4:	461c      	mov	r4, r3
		if (Files[i].fs) {	/* Existing entry */
 8003de6:	681e      	ldr	r6, [r3, #0]
 8003de8:	b1a6      	cbz	r6, 8003e14 <chk_lock+0x38>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8003dea:	6807      	ldr	r7, [r0, #0]
 8003dec:	42be      	cmp	r6, r7
 8003dee:	d112      	bne.n	8003e16 <chk_lock+0x3a>
 8003df0:	685f      	ldr	r7, [r3, #4]
 8003df2:	6886      	ldr	r6, [r0, #8]
 8003df4:	42b7      	cmp	r7, r6
 8003df6:	d10e      	bne.n	8003e16 <chk_lock+0x3a>
				Files[i].clu == dp->obj.sclust &&
 8003df8:	689f      	ldr	r7, [r3, #8]
 8003dfa:	6946      	ldr	r6, [r0, #20]
 8003dfc:	42b7      	cmp	r7, r6
 8003dfe:	d10a      	bne.n	8003e16 <chk_lock+0x3a>
	if (i == _FS_LOCK) {	/* The object is not opened */
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8003e00:	b9b1      	cbnz	r1, 8003e30 <chk_lock+0x54>
 8003e02:	eb04 1202 	add.w	r2, r4, r2, lsl #4
 8003e06:	8993      	ldrh	r3, [r2, #12]
 8003e08:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003e0c:	bf14      	ite	ne
 8003e0e:	2000      	movne	r0, #0
 8003e10:	2010      	moveq	r0, #16
 8003e12:	bdf0      	pop	{r4, r5, r6, r7, pc}
			be = 1;
 8003e14:	2501      	movs	r5, #1
	for (i = be = 0; i < _FS_LOCK; i++) {
 8003e16:	3201      	adds	r2, #1
 8003e18:	2a02      	cmp	r2, #2
 8003e1a:	f103 0310 	add.w	r3, r3, #16
 8003e1e:	d1e2      	bne.n	8003de6 <chk_lock+0xa>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8003e20:	b10d      	cbz	r5, 8003e26 <chk_lock+0x4a>
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8003e22:	2000      	movs	r0, #0
 8003e24:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8003e26:	2902      	cmp	r1, #2
 8003e28:	bf0c      	ite	eq
 8003e2a:	2000      	moveq	r0, #0
 8003e2c:	2012      	movne	r0, #18
 8003e2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8003e30:	2010      	movs	r0, #16
 8003e32:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003e34:	200006a8 	.word	0x200006a8

08003e38 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8003e38:	4a1c      	ldr	r2, [pc, #112]	; (8003eac <inc_lock+0x74>)
 8003e3a:	b5f0      	push	{r4, r5, r6, r7, lr}
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
		if (Files[i].fs == dp->obj.fs &&
 8003e3c:	6805      	ldr	r5, [r0, #0]
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8003e3e:	2300      	movs	r3, #0
 8003e40:	4616      	mov	r6, r2
		if (Files[i].fs == dp->obj.fs &&
 8003e42:	6814      	ldr	r4, [r2, #0]
 8003e44:	42ac      	cmp	r4, r5
 8003e46:	d107      	bne.n	8003e58 <inc_lock+0x20>
 8003e48:	6857      	ldr	r7, [r2, #4]
 8003e4a:	6884      	ldr	r4, [r0, #8]
 8003e4c:	42a7      	cmp	r7, r4
 8003e4e:	d103      	bne.n	8003e58 <inc_lock+0x20>
			Files[i].clu == dp->obj.sclust &&
 8003e50:	6897      	ldr	r7, [r2, #8]
 8003e52:	6944      	ldr	r4, [r0, #20]
 8003e54:	42a7      	cmp	r7, r4
 8003e56:	d01d      	beq.n	8003e94 <inc_lock+0x5c>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8003e58:	3301      	adds	r3, #1
 8003e5a:	2b02      	cmp	r3, #2
 8003e5c:	f102 0210 	add.w	r2, r2, #16
 8003e60:	d1ef      	bne.n	8003e42 <inc_lock+0xa>
			Files[i].ofs == dp->dptr) break;
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8003e62:	6833      	ldr	r3, [r6, #0]
 8003e64:	b113      	cbz	r3, 8003e6c <inc_lock+0x34>
 8003e66:	6933      	ldr	r3, [r6, #16]
 8003e68:	b9eb      	cbnz	r3, 8003ea6 <inc_lock+0x6e>
 8003e6a:	2301      	movs	r3, #1
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
		Files[i].fs = dp->obj.fs;
 8003e6c:	011c      	lsls	r4, r3, #4
 8003e6e:	1932      	adds	r2, r6, r4
 8003e70:	5135      	str	r5, [r6, r4]
		Files[i].clu = dp->obj.sclust;
 8003e72:	6884      	ldr	r4, [r0, #8]
		Files[i].ofs = dp->dptr;
 8003e74:	6940      	ldr	r0, [r0, #20]
 8003e76:	6090      	str	r0, [r2, #8]
		Files[i].ctr = 0;
 8003e78:	2000      	movs	r0, #0
		Files[i].clu = dp->obj.sclust;
 8003e7a:	6054      	str	r4, [r2, #4]
		Files[i].ctr = 0;
 8003e7c:	8190      	strh	r0, [r2, #12]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8003e7e:	b979      	cbnz	r1, 8003ea0 <inc_lock+0x68>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8003e80:	eb06 1203 	add.w	r2, r6, r3, lsl #4
 8003e84:	8992      	ldrh	r2, [r2, #12]
 8003e86:	3201      	adds	r2, #1
 8003e88:	b292      	uxth	r2, r2
 8003e8a:	eb06 1603 	add.w	r6, r6, r3, lsl #4

	return i + 1;
 8003e8e:	1c58      	adds	r0, r3, #1
	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8003e90:	81b2      	strh	r2, [r6, #12]
	return i + 1;
 8003e92:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8003e94:	2900      	cmp	r1, #0
 8003e96:	d0f3      	beq.n	8003e80 <inc_lock+0x48>
 8003e98:	eb06 1203 	add.w	r2, r6, r3, lsl #4
 8003e9c:	8992      	ldrh	r2, [r2, #12]
 8003e9e:	b912      	cbnz	r2, 8003ea6 <inc_lock+0x6e>
	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8003ea0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003ea4:	e7f1      	b.n	8003e8a <inc_lock+0x52>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8003ea6:	2000      	movs	r0, #0
 8003ea8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003eaa:	bf00      	nop
 8003eac:	200006a8 	.word	0x200006a8

08003eb0 <dec_lock>:
{
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8003eb0:	3801      	subs	r0, #1
 8003eb2:	2801      	cmp	r0, #1
 8003eb4:	d80e      	bhi.n	8003ed4 <dec_lock+0x24>
		n = Files[i].ctr;
 8003eb6:	4a09      	ldr	r2, [pc, #36]	; (8003edc <dec_lock+0x2c>)
 8003eb8:	0103      	lsls	r3, r0, #4
 8003eba:	18d1      	adds	r1, r2, r3
 8003ebc:	8989      	ldrh	r1, [r1, #12]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
		if (n > 0) n--;				/* Decrement read mode open count */
 8003ebe:	f421 7080 	bic.w	r0, r1, #256	; 0x100
 8003ec2:	b280      	uxth	r0, r0
 8003ec4:	b108      	cbz	r0, 8003eca <dec_lock+0x1a>
 8003ec6:	1e48      	subs	r0, r1, #1
 8003ec8:	b280      	uxth	r0, r0
		Files[i].ctr = n;
 8003eca:	18d1      	adds	r1, r2, r3
 8003ecc:	8188      	strh	r0, [r1, #12]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8003ece:	b918      	cbnz	r0, 8003ed8 <dec_lock+0x28>
 8003ed0:	50d0      	str	r0, [r2, r3]
 8003ed2:	4770      	bx	lr
		res = FR_OK;
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8003ed4:	2002      	movs	r0, #2
 8003ed6:	4770      	bx	lr
		res = FR_OK;
 8003ed8:	2000      	movs	r0, #0
	}
	return res;
}
 8003eda:	4770      	bx	lr
 8003edc:	200006a8 	.word	0x200006a8

08003ee0 <clust2sect>:
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
	clst -= 2;
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8003ee0:	6943      	ldr	r3, [r0, #20]
	clst -= 2;
 8003ee2:	3902      	subs	r1, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8003ee4:	3b02      	subs	r3, #2
 8003ee6:	4299      	cmp	r1, r3
	return clst * fs->csize + fs->database;
 8003ee8:	bf3d      	ittte	cc
 8003eea:	8943      	ldrhcc	r3, [r0, #10]
 8003eec:	6a80      	ldrcc	r0, [r0, #40]	; 0x28
 8003eee:	fb01 0003 	mlacc	r0, r1, r3, r0
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8003ef2:	2000      	movcs	r0, #0
}
 8003ef4:	4770      	bx	lr

08003ef6 <clmt_clust>:
{
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8003ef6:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8003ef8:	6802      	ldr	r2, [r0, #0]
	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8003efa:	3304      	adds	r3, #4
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8003efc:	0a49      	lsrs	r1, r1, #9
 8003efe:	8952      	ldrh	r2, [r2, #10]
 8003f00:	fbb1 f1f2 	udiv	r1, r1, r2
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8003f04:	6818      	ldr	r0, [r3, #0]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8003f06:	b130      	cbz	r0, 8003f16 <clmt_clust+0x20>
		if (cl < ncl) break;	/* In this fragment? */
 8003f08:	4281      	cmp	r1, r0
 8003f0a:	d302      	bcc.n	8003f12 <clmt_clust+0x1c>
		cl -= ncl; tbl++;		/* Next fragment */
 8003f0c:	1a09      	subs	r1, r1, r0
 8003f0e:	3308      	adds	r3, #8
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8003f10:	e7f8      	b.n	8003f04 <clmt_clust+0xe>
	}
	return cl + *tbl;	/* Return the cluster number */
 8003f12:	6858      	ldr	r0, [r3, #4]
 8003f14:	4408      	add	r0, r1
}
 8003f16:	4770      	bx	lr

08003f18 <get_ldnumber>:
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8003f18:	6802      	ldr	r2, [r0, #0]
{
 8003f1a:	b510      	push	{r4, lr}
	if (*path) {	/* If the pointer is not a null */
 8003f1c:	b152      	cbz	r2, 8003f34 <get_ldnumber+0x1c>
 8003f1e:	4611      	mov	r1, r2
 8003f20:	460b      	mov	r3, r1
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8003f22:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003f26:	2c20      	cmp	r4, #32
 8003f28:	d90c      	bls.n	8003f44 <get_ldnumber+0x2c>
 8003f2a:	2c3a      	cmp	r4, #58	; 0x3a
 8003f2c:	d1f8      	bne.n	8003f20 <get_ldnumber+0x8>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
			tp = *path;
			i = *tp++ - '0';
 8003f2e:	1c51      	adds	r1, r2, #1
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8003f30:	428b      	cmp	r3, r1
 8003f32:	d002      	beq.n	8003f3a <get_ldnumber+0x22>
	int vol = -1;
 8003f34:	f04f 30ff 	mov.w	r0, #4294967295
#else
		vol = 0;		/* Drive 0 */
#endif
	}
	return vol;
}
 8003f38:	bd10      	pop	{r4, pc}
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8003f3a:	7812      	ldrb	r2, [r2, #0]
 8003f3c:	2a30      	cmp	r2, #48	; 0x30
 8003f3e:	d1f9      	bne.n	8003f34 <get_ldnumber+0x1c>
					*path = ++tt;
 8003f40:	3301      	adds	r3, #1
 8003f42:	6003      	str	r3, [r0, #0]
		vol = 0;		/* Drive 0 */
 8003f44:	2000      	movs	r0, #0
 8003f46:	bd10      	pop	{r4, pc}

08003f48 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8003f48:	b538      	push	{r3, r4, r5, lr}
 8003f4a:	460d      	mov	r5, r1
	FRESULT res;

	if (!obj || !obj->fs || !obj->fs->fs_type || obj->fs->id != obj->id || (disk_status(obj->fs->drv) & STA_NOINIT)) {
 8003f4c:	4604      	mov	r4, r0
 8003f4e:	b918      	cbnz	r0, 8003f58 <validate+0x10>
		*fs = 0;
 8003f50:	2300      	movs	r3, #0
 8003f52:	602b      	str	r3, [r5, #0]
		res = FR_INVALID_OBJECT;	/* The object is invalid */
 8003f54:	2009      	movs	r0, #9
 8003f56:	bd38      	pop	{r3, r4, r5, pc}
	if (!obj || !obj->fs || !obj->fs->fs_type || obj->fs->id != obj->id || (disk_status(obj->fs->drv) & STA_NOINIT)) {
 8003f58:	6803      	ldr	r3, [r0, #0]
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d0f8      	beq.n	8003f50 <validate+0x8>
 8003f5e:	781a      	ldrb	r2, [r3, #0]
 8003f60:	2a00      	cmp	r2, #0
 8003f62:	d0f5      	beq.n	8003f50 <validate+0x8>
 8003f64:	88d9      	ldrh	r1, [r3, #6]
 8003f66:	8882      	ldrh	r2, [r0, #4]
 8003f68:	4291      	cmp	r1, r2
 8003f6a:	d1f1      	bne.n	8003f50 <validate+0x8>
 8003f6c:	7858      	ldrb	r0, [r3, #1]
 8003f6e:	f7ff fedb 	bl	8003d28 <disk_status>
 8003f72:	f010 0001 	ands.w	r0, r0, #1
 8003f76:	d1eb      	bne.n	8003f50 <validate+0x8>
	} else {
		*fs = obj->fs;			/* Owner file sytem object */
 8003f78:	6823      	ldr	r3, [r4, #0]
 8003f7a:	602b      	str	r3, [r5, #0]
		ENTER_FF(obj->fs);		/* Lock file system */
		res = FR_OK;			/* Valid object */
	}
	return res;
}
 8003f7c:	bd38      	pop	{r3, r4, r5, pc}

08003f7e <mem_cpy.part.0>:
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8003f7e:	3801      	subs	r0, #1
 8003f80:	440a      	add	r2, r1
			*d++ = *s++;
 8003f82:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003f86:	f800 3f01 	strb.w	r3, [r0, #1]!
		} while (--cnt);
 8003f8a:	4291      	cmp	r1, r2
 8003f8c:	d1f9      	bne.n	8003f82 <mem_cpy.part.0+0x4>
}
 8003f8e:	4770      	bx	lr

08003f90 <ld_clust.isra.1>:
	rv = rv << 8 | ptr[0];
 8003f90:	7eca      	ldrb	r2, [r1, #27]
 8003f92:	7e8b      	ldrb	r3, [r1, #26]
	if (fs->fs_type == FS_FAT32) {
 8003f94:	2803      	cmp	r0, #3
	cl = ld_word(dir + DIR_FstClusLO);
 8003f96:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	rv = rv << 8 | ptr[0];
 8003f9a:	bf01      	itttt	eq
 8003f9c:	7d48      	ldrbeq	r0, [r1, #21]
 8003f9e:	7d0a      	ldrbeq	r2, [r1, #20]
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8003fa0:	ea42 2200 	orreq.w	r2, r2, r0, lsl #8
 8003fa4:	ea43 4302 	orreq.w	r3, r3, r2, lsl #16
}
 8003fa8:	4618      	mov	r0, r3
 8003faa:	4770      	bx	lr

08003fac <st_clust.isra.2>:
	*ptr++ = (BYTE)val; val >>= 8;
 8003fac:	f3c2 2307 	ubfx	r3, r2, #8, #8
 8003fb0:	768a      	strb	r2, [r1, #26]
	*ptr++ = (BYTE)val;
 8003fb2:	76cb      	strb	r3, [r1, #27]
	if (fs->fs_type == FS_FAT32) {
 8003fb4:	7803      	ldrb	r3, [r0, #0]
 8003fb6:	2b03      	cmp	r3, #3
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8003fb8:	bf01      	itttt	eq
 8003fba:	0c12      	lsreq	r2, r2, #16
	*ptr++ = (BYTE)val; val >>= 8;
 8003fbc:	750a      	strbeq	r2, [r1, #20]
 8003fbe:	0a12      	lsreq	r2, r2, #8
	*ptr++ = (BYTE)val;
 8003fc0:	754a      	strbeq	r2, [r1, #21]
 8003fc2:	4770      	bx	lr

08003fc4 <sync_window.part.4>:
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
 8003fc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		wsect = fs->winsect;	/* Current sector number */
 8003fc6:	6ac5      	ldr	r5, [r0, #44]	; 0x2c
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8003fc8:	f100 0730 	add.w	r7, r0, #48	; 0x30
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
 8003fcc:	4604      	mov	r4, r0
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8003fce:	2301      	movs	r3, #1
 8003fd0:	462a      	mov	r2, r5
 8003fd2:	4639      	mov	r1, r7
 8003fd4:	7840      	ldrb	r0, [r0, #1]
 8003fd6:	f7ff fecf 	bl	8003d78 <disk_write>
 8003fda:	b9a0      	cbnz	r0, 8004006 <sync_window.part.4+0x42>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8003fdc:	6a23      	ldr	r3, [r4, #32]
 8003fde:	69a2      	ldr	r2, [r4, #24]
			fs->wflag = 0;
 8003fe0:	70e0      	strb	r0, [r4, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8003fe2:	1aeb      	subs	r3, r5, r3
 8003fe4:	4293      	cmp	r3, r2
 8003fe6:	d301      	bcc.n	8003fec <sync_window.part.4+0x28>
	FRESULT res = FR_OK;
 8003fe8:	2000      	movs	r0, #0
 8003fea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8003fec:	78a6      	ldrb	r6, [r4, #2]
 8003fee:	2e01      	cmp	r6, #1
 8003ff0:	d9fa      	bls.n	8003fe8 <sync_window.part.4+0x24>
					wsect += fs->fsize;
 8003ff2:	69a3      	ldr	r3, [r4, #24]
					disk_write(fs->drv, fs->win, wsect, 1);
 8003ff4:	7860      	ldrb	r0, [r4, #1]
					wsect += fs->fsize;
 8003ff6:	441d      	add	r5, r3
					disk_write(fs->drv, fs->win, wsect, 1);
 8003ff8:	462a      	mov	r2, r5
 8003ffa:	2301      	movs	r3, #1
 8003ffc:	4639      	mov	r1, r7
 8003ffe:	f7ff febb 	bl	8003d78 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8004002:	3e01      	subs	r6, #1
 8004004:	e7f3      	b.n	8003fee <sync_window.part.4+0x2a>
			res = FR_DISK_ERR;
 8004006:	2001      	movs	r0, #1
}
 8004008:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800400a <sync_window>:
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800400a:	78c3      	ldrb	r3, [r0, #3]
 800400c:	b10b      	cbz	r3, 8004012 <sync_window+0x8>
 800400e:	f7ff bfd9 	b.w	8003fc4 <sync_window.part.4>
}
 8004012:	4618      	mov	r0, r3
 8004014:	4770      	bx	lr

08004016 <sync_fs>:
{
 8004016:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004018:	4604      	mov	r4, r0
	res = sync_window(fs);
 800401a:	f7ff fff6 	bl	800400a <sync_window>
 800401e:	4605      	mov	r5, r0
	if (res == FR_OK) {
 8004020:	2800      	cmp	r0, #0
 8004022:	d142      	bne.n	80040aa <sync_fs+0x94>
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8004024:	7823      	ldrb	r3, [r4, #0]
 8004026:	2b03      	cmp	r3, #3
 8004028:	d137      	bne.n	800409a <sync_fs+0x84>
 800402a:	7927      	ldrb	r7, [r4, #4]
 800402c:	2f01      	cmp	r7, #1
 800402e:	d134      	bne.n	800409a <sync_fs+0x84>
			mem_set(fs->win, 0, SS(fs));
 8004030:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8004034:	4601      	mov	r1, r0
 8004036:	f44f 7200 	mov.w	r2, #512	; 0x200
 800403a:	4630      	mov	r0, r6
 800403c:	f7ff fec8 	bl	8003dd0 <mem_set>
	*ptr++ = (BYTE)val; val >>= 8;
 8004040:	2355      	movs	r3, #85	; 0x55
 8004042:	f884 322e 	strb.w	r3, [r4, #558]	; 0x22e
	*ptr++ = (BYTE)val;
 8004046:	23aa      	movs	r3, #170	; 0xaa
 8004048:	f884 322f 	strb.w	r3, [r4, #559]	; 0x22f
	*ptr++ = (BYTE)val; val >>= 8;
 800404c:	2352      	movs	r3, #82	; 0x52
	*ptr++ = (BYTE)val;
 800404e:	2241      	movs	r2, #65	; 0x41
	*ptr++ = (BYTE)val; val >>= 8;
 8004050:	2172      	movs	r1, #114	; 0x72
 8004052:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
	*ptr++ = (BYTE)val; val >>= 8;
 8004056:	f884 3031 	strb.w	r3, [r4, #49]	; 0x31
	*ptr++ = (BYTE)val; val >>= 8;
 800405a:	2361      	movs	r3, #97	; 0x61
 800405c:	f884 3032 	strb.w	r3, [r4, #50]	; 0x32
	*ptr++ = (BYTE)val;
 8004060:	f884 2033 	strb.w	r2, [r4, #51]	; 0x33
	*ptr++ = (BYTE)val; val >>= 8;
 8004064:	f884 2216 	strb.w	r2, [r4, #534]	; 0x216
	*ptr++ = (BYTE)val;
 8004068:	f884 3217 	strb.w	r3, [r4, #535]	; 0x217
	*ptr++ = (BYTE)val; val >>= 8;
 800406c:	f884 1214 	strb.w	r1, [r4, #532]	; 0x214
	*ptr++ = (BYTE)val; val >>= 8;
 8004070:	f884 1215 	strb.w	r1, [r4, #533]	; 0x215
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8004074:	f504 7006 	add.w	r0, r4, #536	; 0x218
 8004078:	6921      	ldr	r1, [r4, #16]
 800407a:	f7ff fea1 	bl	8003dc0 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800407e:	68e1      	ldr	r1, [r4, #12]
 8004080:	f504 7007 	add.w	r0, r4, #540	; 0x21c
 8004084:	f7ff fe9c 	bl	8003dc0 <st_dword>
			fs->winsect = fs->volbase + 1;
 8004088:	69e2      	ldr	r2, [r4, #28]
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800408a:	7860      	ldrb	r0, [r4, #1]
			fs->winsect = fs->volbase + 1;
 800408c:	3201      	adds	r2, #1
 800408e:	62e2      	str	r2, [r4, #44]	; 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8004090:	463b      	mov	r3, r7
 8004092:	4631      	mov	r1, r6
 8004094:	f7ff fe70 	bl	8003d78 <disk_write>
			fs->fsi_flag = 0;
 8004098:	7125      	strb	r5, [r4, #4]
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800409a:	2200      	movs	r2, #0
 800409c:	4611      	mov	r1, r2
 800409e:	7860      	ldrb	r0, [r4, #1]
 80040a0:	f7ff fe78 	bl	8003d94 <disk_ioctl>
 80040a4:	3000      	adds	r0, #0
 80040a6:	bf18      	it	ne
 80040a8:	2001      	movne	r0, #1
}
 80040aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080040ac <move_window>:
	if (sector != fs->winsect) {	/* Window offset changed? */
 80040ac:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80040ae:	428b      	cmp	r3, r1
{
 80040b0:	b570      	push	{r4, r5, r6, lr}
 80040b2:	4606      	mov	r6, r0
 80040b4:	460d      	mov	r5, r1
	if (sector != fs->winsect) {	/* Window offset changed? */
 80040b6:	d012      	beq.n	80040de <move_window+0x32>
		res = sync_window(fs);		/* Write-back changes */
 80040b8:	f7ff ffa7 	bl	800400a <sync_window>
		if (res == FR_OK) {			/* Fill sector window with new data */
 80040bc:	4604      	mov	r4, r0
 80040be:	b960      	cbnz	r0, 80040da <move_window+0x2e>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 80040c0:	462a      	mov	r2, r5
 80040c2:	2301      	movs	r3, #1
 80040c4:	f106 0130 	add.w	r1, r6, #48	; 0x30
 80040c8:	7870      	ldrb	r0, [r6, #1]
 80040ca:	f7ff fe47 	bl	8003d5c <disk_read>
 80040ce:	2800      	cmp	r0, #0
				res = FR_DISK_ERR;
 80040d0:	bf1c      	itt	ne
 80040d2:	f04f 35ff 	movne.w	r5, #4294967295
 80040d6:	2401      	movne	r4, #1
			fs->winsect = sector;
 80040d8:	62f5      	str	r5, [r6, #44]	; 0x2c
}
 80040da:	4620      	mov	r0, r4
 80040dc:	bd70      	pop	{r4, r5, r6, pc}
	FRESULT res = FR_OK;
 80040de:	2400      	movs	r4, #0
 80040e0:	e7fb      	b.n	80040da <move_window+0x2e>
	...

080040e4 <check_fs>:
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 80040e4:	2300      	movs	r3, #0
{
 80040e6:	b510      	push	{r4, lr}
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 80040e8:	70c3      	strb	r3, [r0, #3]
 80040ea:	f04f 33ff 	mov.w	r3, #4294967295
 80040ee:	62c3      	str	r3, [r0, #44]	; 0x2c
{
 80040f0:	4604      	mov	r4, r0
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 80040f2:	f7ff ffdb 	bl	80040ac <move_window>
 80040f6:	bb30      	cbnz	r0, 8004146 <check_fs+0x62>
	rv = rv << 8 | ptr[0];
 80040f8:	f894 222f 	ldrb.w	r2, [r4, #559]	; 0x22f
 80040fc:	f894 322e 	ldrb.w	r3, [r4, #558]	; 0x22e
 8004100:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8004104:	f64a 2255 	movw	r2, #43605	; 0xaa55
 8004108:	4293      	cmp	r3, r2
 800410a:	d11e      	bne.n	800414a <check_fs+0x66>
	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800410c:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 8004110:	2be9      	cmp	r3, #233	; 0xe9
 8004112:	d005      	beq.n	8004120 <check_fs+0x3c>
 8004114:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8004116:	4a10      	ldr	r2, [pc, #64]	; (8004158 <check_fs+0x74>)
 8004118:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 800411c:	4293      	cmp	r3, r2
 800411e:	d116      	bne.n	800414e <check_fs+0x6a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8004120:	f104 0066 	add.w	r0, r4, #102	; 0x66
 8004124:	f7ff fe44 	bl	8003db0 <ld_dword>
 8004128:	4b0c      	ldr	r3, [pc, #48]	; (800415c <check_fs+0x78>)
 800412a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 800412e:	4298      	cmp	r0, r3
 8004130:	d00f      	beq.n	8004152 <check_fs+0x6e>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8004132:	f104 0082 	add.w	r0, r4, #130	; 0x82
 8004136:	f7ff fe3b 	bl	8003db0 <ld_dword>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800413a:	4b09      	ldr	r3, [pc, #36]	; (8004160 <check_fs+0x7c>)
 800413c:	4298      	cmp	r0, r3
 800413e:	bf14      	ite	ne
 8004140:	2002      	movne	r0, #2
 8004142:	2000      	moveq	r0, #0
 8004144:	bd10      	pop	{r4, pc}
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8004146:	2004      	movs	r0, #4
 8004148:	bd10      	pop	{r4, pc}
	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800414a:	2003      	movs	r0, #3
 800414c:	bd10      	pop	{r4, pc}
	return 2;
 800414e:	2002      	movs	r0, #2
 8004150:	bd10      	pop	{r4, pc}
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8004152:	2000      	movs	r0, #0
}
 8004154:	bd10      	pop	{r4, pc}
 8004156:	bf00      	nop
 8004158:	009000eb 	.word	0x009000eb
 800415c:	00544146 	.word	0x00544146
 8004160:	33544146 	.word	0x33544146

08004164 <find_volume>:
{
 8004164:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	*rfs = 0;
 8004168:	2300      	movs	r3, #0
{
 800416a:	b085      	sub	sp, #20
	*rfs = 0;
 800416c:	600b      	str	r3, [r1, #0]
{
 800416e:	460f      	mov	r7, r1
 8004170:	4615      	mov	r5, r2
	vol = get_ldnumber(path);
 8004172:	f7ff fed1 	bl	8003f18 <get_ldnumber>
	if (vol < 0) return FR_INVALID_DRIVE;
 8004176:	1e06      	subs	r6, r0, #0
 8004178:	f2c0 8140 	blt.w	80043fc <find_volume+0x298>
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800417c:	4ba3      	ldr	r3, [pc, #652]	; (800440c <find_volume+0x2a8>)
 800417e:	f853 4026 	ldr.w	r4, [r3, r6, lsl #2]
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8004182:	2c00      	cmp	r4, #0
 8004184:	f000 813c 	beq.w	8004400 <find_volume+0x29c>
	*rfs = fs;							/* Return pointer to the file system object */
 8004188:	603c      	str	r4, [r7, #0]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800418a:	7823      	ldrb	r3, [r4, #0]
	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800418c:	f005 05fe 	and.w	r5, r5, #254	; 0xfe
	if (fs->fs_type) {					/* If the volume has been mounted */
 8004190:	b173      	cbz	r3, 80041b0 <find_volume+0x4c>
		stat = disk_status(fs->drv);
 8004192:	7860      	ldrb	r0, [r4, #1]
 8004194:	f7ff fdc8 	bl	8003d28 <disk_status>
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8004198:	07c1      	lsls	r1, r0, #31
 800419a:	d409      	bmi.n	80041b0 <find_volume+0x4c>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800419c:	2d00      	cmp	r5, #0
 800419e:	f000 8131 	beq.w	8004404 <find_volume+0x2a0>
 80041a2:	f010 0004 	ands.w	r0, r0, #4
 80041a6:	d000      	beq.n	80041aa <find_volume+0x46>
				return FR_WRITE_PROTECTED;
 80041a8:	200a      	movs	r0, #10
}
 80041aa:	b005      	add	sp, #20
 80041ac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	fs->fs_type = 0;					/* Clear the file system object */
 80041b0:	2300      	movs	r3, #0
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 80041b2:	b2f0      	uxtb	r0, r6
	fs->fs_type = 0;					/* Clear the file system object */
 80041b4:	7023      	strb	r3, [r4, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 80041b6:	7060      	strb	r0, [r4, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 80041b8:	f7ff fdc0 	bl	8003d3c <disk_initialize>
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 80041bc:	07c2      	lsls	r2, r0, #31
 80041be:	f100 8123 	bmi.w	8004408 <find_volume+0x2a4>
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 80041c2:	b10d      	cbz	r5, 80041c8 <find_volume+0x64>
 80041c4:	0743      	lsls	r3, r0, #29
 80041c6:	d4ef      	bmi.n	80041a8 <find_volume+0x44>
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 80041c8:	2100      	movs	r1, #0
 80041ca:	4620      	mov	r0, r4
 80041cc:	f7ff ff8a 	bl	80040e4 <check_fs>
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 80041d0:	2802      	cmp	r0, #2
 80041d2:	f040 80f7 	bne.w	80043c4 <find_volume+0x260>
 80041d6:	f504 75fb 	add.w	r5, r4, #502	; 0x1f6
 80041da:	2100      	movs	r1, #0
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 80041dc:	f815 0c04 	ldrb.w	r0, [r5, #-4]
 80041e0:	b110      	cbz	r0, 80041e8 <find_volume+0x84>
 80041e2:	4628      	mov	r0, r5
 80041e4:	f7ff fde4 	bl	8003db0 <ld_dword>
 80041e8:	f84d 0021 	str.w	r0, [sp, r1, lsl #2]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80041ec:	3101      	adds	r1, #1
 80041ee:	2904      	cmp	r1, #4
 80041f0:	f105 0510 	add.w	r5, r5, #16
 80041f4:	d1f2      	bne.n	80041dc <find_volume+0x78>
 80041f6:	2500      	movs	r5, #0
			bsect = br[i];
 80041f8:	f85d 6025 	ldr.w	r6, [sp, r5, lsl #2]
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 80041fc:	2e00      	cmp	r6, #0
 80041fe:	f000 80d8 	beq.w	80043b2 <find_volume+0x24e>
 8004202:	4631      	mov	r1, r6
 8004204:	4620      	mov	r0, r4
 8004206:	f7ff ff6d 	bl	80040e4 <check_fs>
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800420a:	2801      	cmp	r0, #1
 800420c:	f200 80d2 	bhi.w	80043b4 <find_volume+0x250>
	rv = rv << 8 | ptr[0];
 8004210:	f894 203c 	ldrb.w	r2, [r4, #60]	; 0x3c
 8004214:	f894 303b 	ldrb.w	r3, [r4, #59]	; 0x3b
 8004218:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800421c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004220:	f040 80d4 	bne.w	80043cc <find_volume+0x268>
	rv = rv << 8 | ptr[0];
 8004224:	f894 3047 	ldrb.w	r3, [r4, #71]	; 0x47
 8004228:	f894 5046 	ldrb.w	r5, [r4, #70]	; 0x46
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800422c:	ea55 2503 	orrs.w	r5, r5, r3, lsl #8
 8004230:	d104      	bne.n	800423c <find_volume+0xd8>
 8004232:	f104 0054 	add.w	r0, r4, #84	; 0x54
 8004236:	f7ff fdbb 	bl	8003db0 <ld_dword>
 800423a:	4605      	mov	r5, r0
		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800423c:	f894 9040 	ldrb.w	r9, [r4, #64]	; 0x40
		fs->fsize = fasize;
 8004240:	61a5      	str	r5, [r4, #24]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8004242:	f109 33ff 	add.w	r3, r9, #4294967295
 8004246:	2b01      	cmp	r3, #1
		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8004248:	f884 9002 	strb.w	r9, [r4, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800424c:	f200 80be 	bhi.w	80043cc <find_volume+0x268>
		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8004250:	f894 703d 	ldrb.w	r7, [r4, #61]	; 0x3d
 8004254:	b2bb      	uxth	r3, r7
 8004256:	8163      	strh	r3, [r4, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8004258:	2b00      	cmp	r3, #0
 800425a:	f000 80b7 	beq.w	80043cc <find_volume+0x268>
 800425e:	1e7b      	subs	r3, r7, #1
 8004260:	423b      	tst	r3, r7
 8004262:	f040 80b3 	bne.w	80043cc <find_volume+0x268>
	rv = rv << 8 | ptr[0];
 8004266:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
 800426a:	f894 8041 	ldrb.w	r8, [r4, #65]	; 0x41
 800426e:	ea48 2803 	orr.w	r8, r8, r3, lsl #8
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8004272:	f018 0f0f 	tst.w	r8, #15
		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8004276:	f8a4 8008 	strh.w	r8, [r4, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800427a:	f040 80a7 	bne.w	80043cc <find_volume+0x268>
	rv = rv << 8 | ptr[0];
 800427e:	f894 1044 	ldrb.w	r1, [r4, #68]	; 0x44
 8004282:	f894 0043 	ldrb.w	r0, [r4, #67]	; 0x43
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8004286:	ea50 2001 	orrs.w	r0, r0, r1, lsl #8
 800428a:	d103      	bne.n	8004294 <find_volume+0x130>
 800428c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8004290:	f7ff fd8e 	bl	8003db0 <ld_dword>
	rv = rv << 8 | ptr[0];
 8004294:	f894 303f 	ldrb.w	r3, [r4, #63]	; 0x3f
 8004298:	f894 203e 	ldrb.w	r2, [r4, #62]	; 0x3e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800429c:	ea52 2203 	orrs.w	r2, r2, r3, lsl #8
 80042a0:	f000 8094 	beq.w	80043cc <find_volume+0x268>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 80042a4:	fb05 f309 	mul.w	r3, r5, r9
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 80042a8:	eb02 1e18 	add.w	lr, r2, r8, lsr #4
 80042ac:	449e      	add	lr, r3
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 80042ae:	4570      	cmp	r0, lr
 80042b0:	f0c0 808c 	bcc.w	80043cc <find_volume+0x268>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 80042b4:	eba0 010e 	sub.w	r1, r0, lr
 80042b8:	fbb1 f1f7 	udiv	r1, r1, r7
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 80042bc:	2900      	cmp	r1, #0
 80042be:	f000 8085 	beq.w	80043cc <find_volume+0x268>
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 80042c2:	f64f 70f5 	movw	r0, #65525	; 0xfff5
 80042c6:	4281      	cmp	r1, r0
 80042c8:	f200 8084 	bhi.w	80043d4 <find_volume+0x270>
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 80042cc:	f640 77f5 	movw	r7, #4085	; 0xff5
 80042d0:	42b9      	cmp	r1, r7
 80042d2:	bf8c      	ite	hi
 80042d4:	2702      	movhi	r7, #2
 80042d6:	2701      	movls	r7, #1
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 80042d8:	3102      	adds	r1, #2
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 80042da:	4432      	add	r2, r6
		fs->database = bsect + sysect;					/* Data start sector */
 80042dc:	eb06 000e 	add.w	r0, r6, lr
		if (fmt == FS_FAT32) {
 80042e0:	2f03      	cmp	r7, #3
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 80042e2:	6161      	str	r1, [r4, #20]
		fs->volbase = bsect;							/* Volume start sector */
 80042e4:	61e6      	str	r6, [r4, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 80042e6:	6222      	str	r2, [r4, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 80042e8:	62a0      	str	r0, [r4, #40]	; 0x28
		if (fmt == FS_FAT32) {
 80042ea:	d175      	bne.n	80043d8 <find_volume+0x274>
	rv = rv << 8 | ptr[0];
 80042ec:	f894 205b 	ldrb.w	r2, [r4, #91]	; 0x5b
 80042f0:	f894 305a 	ldrb.w	r3, [r4, #90]	; 0x5a
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 80042f4:	ea53 2302 	orrs.w	r3, r3, r2, lsl #8
 80042f8:	d168      	bne.n	80043cc <find_volume+0x268>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 80042fa:	f1b8 0f00 	cmp.w	r8, #0
 80042fe:	d165      	bne.n	80043cc <find_volume+0x268>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8004300:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8004304:	f7ff fd54 	bl	8003db0 <ld_dword>
 8004308:	6260      	str	r0, [r4, #36]	; 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800430a:	0089      	lsls	r1, r1, #2
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800430c:	f201 11ff 	addw	r1, r1, #511	; 0x1ff
 8004310:	ebb5 2f51 	cmp.w	r5, r1, lsr #9
 8004314:	d35a      	bcc.n	80043cc <find_volume+0x268>
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8004316:	f04f 33ff 	mov.w	r3, #4294967295
 800431a:	6123      	str	r3, [r4, #16]
 800431c:	60e3      	str	r3, [r4, #12]
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800431e:	2f03      	cmp	r7, #3
		fs->fsi_flag = 0x80;
 8004320:	f04f 0380 	mov.w	r3, #128	; 0x80
 8004324:	7123      	strb	r3, [r4, #4]
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8004326:	d12f      	bne.n	8004388 <find_volume+0x224>
	rv = rv << 8 | ptr[0];
 8004328:	f894 2061 	ldrb.w	r2, [r4, #97]	; 0x61
 800432c:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
 8004330:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8004334:	2b01      	cmp	r3, #1
 8004336:	d127      	bne.n	8004388 <find_volume+0x224>
			&& move_window(fs, bsect + 1) == FR_OK)
 8004338:	1c71      	adds	r1, r6, #1
 800433a:	4620      	mov	r0, r4
 800433c:	f7ff feb6 	bl	80040ac <move_window>
 8004340:	bb10      	cbnz	r0, 8004388 <find_volume+0x224>
	rv = rv << 8 | ptr[0];
 8004342:	f894 222f 	ldrb.w	r2, [r4, #559]	; 0x22f
 8004346:	f894 322e 	ldrb.w	r3, [r4, #558]	; 0x22e
			fs->fsi_flag = 0;
 800434a:	7120      	strb	r0, [r4, #4]
	rv = rv << 8 | ptr[0];
 800434c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8004350:	f64a 2255 	movw	r2, #43605	; 0xaa55
 8004354:	4293      	cmp	r3, r2
 8004356:	d117      	bne.n	8004388 <find_volume+0x224>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8004358:	f104 0030 	add.w	r0, r4, #48	; 0x30
 800435c:	f7ff fd28 	bl	8003db0 <ld_dword>
 8004360:	4b2b      	ldr	r3, [pc, #172]	; (8004410 <find_volume+0x2ac>)
 8004362:	4298      	cmp	r0, r3
 8004364:	d110      	bne.n	8004388 <find_volume+0x224>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8004366:	f504 7005 	add.w	r0, r4, #532	; 0x214
 800436a:	f7ff fd21 	bl	8003db0 <ld_dword>
 800436e:	4b29      	ldr	r3, [pc, #164]	; (8004414 <find_volume+0x2b0>)
 8004370:	4298      	cmp	r0, r3
 8004372:	d109      	bne.n	8004388 <find_volume+0x224>
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8004374:	f504 7006 	add.w	r0, r4, #536	; 0x218
 8004378:	f7ff fd1a 	bl	8003db0 <ld_dword>
 800437c:	6120      	str	r0, [r4, #16]
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800437e:	f504 7007 	add.w	r0, r4, #540	; 0x21c
 8004382:	f7ff fd15 	bl	8003db0 <ld_dword>
 8004386:	60e0      	str	r0, [r4, #12]
	fs->id = ++Fsid;		/* File system mount ID */
 8004388:	4a23      	ldr	r2, [pc, #140]	; (8004418 <find_volume+0x2b4>)
	fs->fs_type = fmt;		/* FAT sub-type */
 800438a:	7027      	strb	r7, [r4, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800438c:	8813      	ldrh	r3, [r2, #0]
 800438e:	3301      	adds	r3, #1
 8004390:	b29b      	uxth	r3, r3
 8004392:	8013      	strh	r3, [r2, #0]
 8004394:	80e3      	strh	r3, [r4, #6]
		if (Files[i].fs == fs) Files[i].fs = 0;
 8004396:	4b21      	ldr	r3, [pc, #132]	; (800441c <find_volume+0x2b8>)
 8004398:	681a      	ldr	r2, [r3, #0]
 800439a:	4294      	cmp	r4, r2
 800439c:	bf04      	itt	eq
 800439e:	2200      	moveq	r2, #0
 80043a0:	601a      	streq	r2, [r3, #0]
 80043a2:	691a      	ldr	r2, [r3, #16]
 80043a4:	4294      	cmp	r4, r2
 80043a6:	f04f 0000 	mov.w	r0, #0
 80043aa:	f47f aefe 	bne.w	80041aa <find_volume+0x46>
 80043ae:	6118      	str	r0, [r3, #16]
 80043b0:	e6fb      	b.n	80041aa <find_volume+0x46>
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 80043b2:	2003      	movs	r0, #3
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 80043b4:	3501      	adds	r5, #1
 80043b6:	2d04      	cmp	r5, #4
 80043b8:	f47f af1e 	bne.w	80041f8 <find_volume+0x94>
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 80043bc:	2804      	cmp	r0, #4
 80043be:	d105      	bne.n	80043cc <find_volume+0x268>
 80043c0:	2001      	movs	r0, #1
 80043c2:	e6f2      	b.n	80041aa <find_volume+0x46>
 80043c4:	2804      	cmp	r0, #4
 80043c6:	d0fb      	beq.n	80043c0 <find_volume+0x25c>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 80043c8:	2801      	cmp	r0, #1
 80043ca:	d901      	bls.n	80043d0 <find_volume+0x26c>
 80043cc:	200d      	movs	r0, #13
 80043ce:	e6ec      	b.n	80041aa <find_volume+0x46>
	bsect = 0;
 80043d0:	2600      	movs	r6, #0
 80043d2:	e71d      	b.n	8004210 <find_volume+0xac>
		fmt = FS_FAT32;
 80043d4:	2703      	movs	r7, #3
 80043d6:	e77f      	b.n	80042d8 <find_volume+0x174>
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 80043d8:	f1b8 0f00 	cmp.w	r8, #0
 80043dc:	d0f6      	beq.n	80043cc <find_volume+0x268>
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 80043de:	2f02      	cmp	r7, #2
 80043e0:	ea4f 0041 	mov.w	r0, r1, lsl #1
 80043e4:	bf18      	it	ne
 80043e6:	1840      	addne	r0, r0, r1
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 80043e8:	4413      	add	r3, r2
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 80043ea:	bf18      	it	ne
 80043ec:	f001 0101 	andne.w	r1, r1, #1
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 80043f0:	6263      	str	r3, [r4, #36]	; 0x24
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 80043f2:	bf0c      	ite	eq
 80043f4:	4601      	moveq	r1, r0
 80043f6:	eb01 0150 	addne.w	r1, r1, r0, lsr #1
 80043fa:	e787      	b.n	800430c <find_volume+0x1a8>
	if (vol < 0) return FR_INVALID_DRIVE;
 80043fc:	200b      	movs	r0, #11
 80043fe:	e6d4      	b.n	80041aa <find_volume+0x46>
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8004400:	200c      	movs	r0, #12
 8004402:	e6d2      	b.n	80041aa <find_volume+0x46>
			return FR_OK;				/* The file system object is valid */
 8004404:	4628      	mov	r0, r5
 8004406:	e6d0      	b.n	80041aa <find_volume+0x46>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8004408:	2003      	movs	r0, #3
 800440a:	e6ce      	b.n	80041aa <find_volume+0x46>
 800440c:	200006a4 	.word	0x200006a4
 8004410:	41615252 	.word	0x41615252
 8004414:	61417272 	.word	0x61417272
 8004418:	200006c8 	.word	0x200006c8
 800441c:	200006a8 	.word	0x200006a8

08004420 <put_fat>:
	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8004420:	2901      	cmp	r1, #1
{
 8004422:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004426:	4605      	mov	r5, r0
 8004428:	460c      	mov	r4, r1
 800442a:	4617      	mov	r7, r2
	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800442c:	d972      	bls.n	8004514 <put_fat+0xf4>
 800442e:	6943      	ldr	r3, [r0, #20]
 8004430:	4299      	cmp	r1, r3
 8004432:	d26f      	bcs.n	8004514 <put_fat+0xf4>
		switch (fs->fs_type) {
 8004434:	7803      	ldrb	r3, [r0, #0]
 8004436:	2b02      	cmp	r3, #2
 8004438:	d03f      	beq.n	80044ba <put_fat+0x9a>
 800443a:	2b03      	cmp	r3, #3
 800443c:	d050      	beq.n	80044e0 <put_fat+0xc0>
 800443e:	2b01      	cmp	r3, #1
 8004440:	d168      	bne.n	8004514 <put_fat+0xf4>
			bc = (UINT)clst; bc += bc / 2;
 8004442:	eb01 0851 	add.w	r8, r1, r1, lsr #1
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8004446:	6a01      	ldr	r1, [r0, #32]
 8004448:	eb01 2158 	add.w	r1, r1, r8, lsr #9
 800444c:	f7ff fe2e 	bl	80040ac <move_window>
 8004450:	4606      	mov	r6, r0
			if (res != FR_OK) break;
 8004452:	bb38      	cbnz	r0, 80044a4 <put_fat+0x84>
			p = fs->win + bc++ % SS(fs);
 8004454:	f105 0930 	add.w	r9, r5, #48	; 0x30
 8004458:	f108 0a01 	add.w	sl, r8, #1
 800445c:	f3c8 0808 	ubfx	r8, r8, #0, #9
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8004460:	f014 0401 	ands.w	r4, r4, #1
 8004464:	bf1f      	itttt	ne
 8004466:	f819 3008 	ldrbne.w	r3, [r9, r8]
 800446a:	f003 020f 	andne.w	r2, r3, #15
 800446e:	013b      	lslne	r3, r7, #4
 8004470:	f003 03f0 	andne.w	r3, r3, #240	; 0xf0
 8004474:	bf14      	ite	ne
 8004476:	4313      	orrne	r3, r2
 8004478:	b2fb      	uxtbeq	r3, r7
 800447a:	f809 3008 	strb.w	r3, [r9, r8]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800447e:	6a29      	ldr	r1, [r5, #32]
			fs->wflag = 1;
 8004480:	2301      	movs	r3, #1
 8004482:	70eb      	strb	r3, [r5, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8004484:	eb01 215a 	add.w	r1, r1, sl, lsr #9
 8004488:	4628      	mov	r0, r5
 800448a:	f7ff fe0f 	bl	80040ac <move_window>
			if (res != FR_OK) break;
 800448e:	4606      	mov	r6, r0
 8004490:	b940      	cbnz	r0, 80044a4 <put_fat+0x84>
			p = fs->win + bc % SS(fs);
 8004492:	f3ca 0a08 	ubfx	sl, sl, #0, #9
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8004496:	b144      	cbz	r4, 80044aa <put_fat+0x8a>
 8004498:	f3c7 1707 	ubfx	r7, r7, #4, #8
 800449c:	f809 700a 	strb.w	r7, [r9, sl]
			fs->wflag = 1;
 80044a0:	2301      	movs	r3, #1
 80044a2:	70eb      	strb	r3, [r5, #3]
}
 80044a4:	4630      	mov	r0, r6
 80044a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 80044aa:	f819 300a 	ldrb.w	r3, [r9, sl]
 80044ae:	f3c7 2703 	ubfx	r7, r7, #8, #4
 80044b2:	f023 030f 	bic.w	r3, r3, #15
 80044b6:	431f      	orrs	r7, r3
 80044b8:	e7f0      	b.n	800449c <put_fat+0x7c>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 80044ba:	6a01      	ldr	r1, [r0, #32]
 80044bc:	eb01 2114 	add.w	r1, r1, r4, lsr #8
 80044c0:	f7ff fdf4 	bl	80040ac <move_window>
			if (res != FR_OK) break;
 80044c4:	4606      	mov	r6, r0
 80044c6:	2800      	cmp	r0, #0
 80044c8:	d1ec      	bne.n	80044a4 <put_fat+0x84>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 80044ca:	0064      	lsls	r4, r4, #1
 80044cc:	f105 0330 	add.w	r3, r5, #48	; 0x30
 80044d0:	f404 74ff 	and.w	r4, r4, #510	; 0x1fe
 80044d4:	191a      	adds	r2, r3, r4
	*ptr++ = (BYTE)val; val >>= 8;
 80044d6:	551f      	strb	r7, [r3, r4]
 80044d8:	f3c7 2707 	ubfx	r7, r7, #8, #8
	*ptr++ = (BYTE)val;
 80044dc:	7057      	strb	r7, [r2, #1]
 80044de:	e7df      	b.n	80044a0 <put_fat+0x80>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 80044e0:	6a01      	ldr	r1, [r0, #32]
 80044e2:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
 80044e6:	f7ff fde1 	bl	80040ac <move_window>
			if (res != FR_OK) break;
 80044ea:	4606      	mov	r6, r0
 80044ec:	2800      	cmp	r0, #0
 80044ee:	d1d9      	bne.n	80044a4 <put_fat+0x84>
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 80044f0:	00a4      	lsls	r4, r4, #2
 80044f2:	f105 0330 	add.w	r3, r5, #48	; 0x30
 80044f6:	f404 74fe 	and.w	r4, r4, #508	; 0x1fc
 80044fa:	441c      	add	r4, r3
 80044fc:	4620      	mov	r0, r4
 80044fe:	f7ff fc57 	bl	8003db0 <ld_dword>
 8004502:	f027 4770 	bic.w	r7, r7, #4026531840	; 0xf0000000
 8004506:	f000 4170 	and.w	r1, r0, #4026531840	; 0xf0000000
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800450a:	4339      	orrs	r1, r7
 800450c:	4620      	mov	r0, r4
 800450e:	f7ff fc57 	bl	8003dc0 <st_dword>
 8004512:	e7c5      	b.n	80044a0 <put_fat+0x80>
	FRESULT res = FR_INT_ERR;
 8004514:	2602      	movs	r6, #2
 8004516:	e7c5      	b.n	80044a4 <put_fat+0x84>

08004518 <get_fat.isra.8>:
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8004518:	2901      	cmp	r1, #1
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
 800451a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800451c:	4605      	mov	r5, r0
 800451e:	460c      	mov	r4, r1
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8004520:	d952      	bls.n	80045c8 <get_fat.isra.8+0xb0>
 8004522:	6943      	ldr	r3, [r0, #20]
 8004524:	4299      	cmp	r1, r3
 8004526:	d24f      	bcs.n	80045c8 <get_fat.isra.8+0xb0>
		switch (fs->fs_type) {
 8004528:	7803      	ldrb	r3, [r0, #0]
 800452a:	2b02      	cmp	r3, #2
 800452c:	d029      	beq.n	8004582 <get_fat.isra.8+0x6a>
 800452e:	2b03      	cmp	r3, #3
 8004530:	d038      	beq.n	80045a4 <get_fat.isra.8+0x8c>
 8004532:	2b01      	cmp	r3, #1
 8004534:	d148      	bne.n	80045c8 <get_fat.isra.8+0xb0>
			bc = (UINT)clst; bc += bc / 2;
 8004536:	eb01 0651 	add.w	r6, r1, r1, lsr #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800453a:	6a01      	ldr	r1, [r0, #32]
 800453c:	eb01 2156 	add.w	r1, r1, r6, lsr #9
 8004540:	f7ff fdb4 	bl	80040ac <move_window>
 8004544:	b110      	cbz	r0, 800454c <get_fat.isra.8+0x34>
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8004546:	f04f 30ff 	mov.w	r0, #4294967295
 800454a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			wc = fs->win[bc++ % SS(fs)];
 800454c:	1c77      	adds	r7, r6, #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800454e:	6a29      	ldr	r1, [r5, #32]
			wc = fs->win[bc++ % SS(fs)];
 8004550:	f3c6 0608 	ubfx	r6, r6, #0, #9
 8004554:	442e      	add	r6, r5
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8004556:	eb01 2157 	add.w	r1, r1, r7, lsr #9
 800455a:	4628      	mov	r0, r5
			wc = fs->win[bc++ % SS(fs)];
 800455c:	f896 6030 	ldrb.w	r6, [r6, #48]	; 0x30
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8004560:	f7ff fda4 	bl	80040ac <move_window>
 8004564:	2800      	cmp	r0, #0
 8004566:	d1ee      	bne.n	8004546 <get_fat.isra.8+0x2e>
			wc |= fs->win[bc % SS(fs)] << 8;
 8004568:	f3c7 0708 	ubfx	r7, r7, #0, #9
 800456c:	443d      	add	r5, r7
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800456e:	07e3      	lsls	r3, r4, #31
			wc |= fs->win[bc % SS(fs)] << 8;
 8004570:	f895 0030 	ldrb.w	r0, [r5, #48]	; 0x30
 8004574:	ea46 2000 	orr.w	r0, r6, r0, lsl #8
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8004578:	bf4c      	ite	mi
 800457a:	0900      	lsrmi	r0, r0, #4
 800457c:	f3c0 000b 	ubfxpl	r0, r0, #0, #12
 8004580:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8004582:	6a01      	ldr	r1, [r0, #32]
 8004584:	eb01 2114 	add.w	r1, r1, r4, lsr #8
 8004588:	f7ff fd90 	bl	80040ac <move_window>
 800458c:	2800      	cmp	r0, #0
 800458e:	d1da      	bne.n	8004546 <get_fat.isra.8+0x2e>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8004590:	0064      	lsls	r4, r4, #1
 8004592:	3530      	adds	r5, #48	; 0x30
 8004594:	f404 74ff 	and.w	r4, r4, #510	; 0x1fe
 8004598:	192b      	adds	r3, r5, r4
	rv = rv << 8 | ptr[0];
 800459a:	5d28      	ldrb	r0, [r5, r4]
 800459c:	785b      	ldrb	r3, [r3, #1]
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800459e:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
 80045a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80045a4:	6a01      	ldr	r1, [r0, #32]
 80045a6:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
 80045aa:	f7ff fd7f 	bl	80040ac <move_window>
 80045ae:	2800      	cmp	r0, #0
 80045b0:	d1c9      	bne.n	8004546 <get_fat.isra.8+0x2e>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 80045b2:	00a4      	lsls	r4, r4, #2
 80045b4:	f105 0030 	add.w	r0, r5, #48	; 0x30
 80045b8:	f404 74fe 	and.w	r4, r4, #508	; 0x1fc
 80045bc:	4420      	add	r0, r4
 80045be:	f7ff fbf7 	bl	8003db0 <ld_dword>
 80045c2:	f020 4070 	bic.w	r0, r0, #4026531840	; 0xf0000000
 80045c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			val = 1;	/* Internal error */
 80045c8:	2001      	movs	r0, #1
}
 80045ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080045cc <create_chain>:
{
 80045cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80045d0:	4680      	mov	r8, r0
	FATFS *fs = obj->fs;
 80045d2:	6805      	ldr	r5, [r0, #0]
	if (clst == 0) {	/* Create a new chain */
 80045d4:	460f      	mov	r7, r1
 80045d6:	b971      	cbnz	r1, 80045f6 <create_chain+0x2a>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 80045d8:	68ee      	ldr	r6, [r5, #12]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 80045da:	b1f6      	cbz	r6, 800461a <create_chain+0x4e>
 80045dc:	696b      	ldr	r3, [r5, #20]
 80045de:	429e      	cmp	r6, r3
 80045e0:	bf28      	it	cs
 80045e2:	2601      	movcs	r6, #1
 80045e4:	4634      	mov	r4, r6
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 80045e6:	696b      	ldr	r3, [r5, #20]
			ncl++;							/* Next cluster */
 80045e8:	3401      	adds	r4, #1
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 80045ea:	429c      	cmp	r4, r3
 80045ec:	d318      	bcc.n	8004620 <create_chain+0x54>
				if (ncl > scl) return 0;	/* No free cluster */
 80045ee:	2e01      	cmp	r6, #1
 80045f0:	d815      	bhi.n	800461e <create_chain+0x52>
 80045f2:	2400      	movs	r4, #0
 80045f4:	e009      	b.n	800460a <create_chain+0x3e>
		cs = get_fat(obj, clst);			/* Check the cluster status */
 80045f6:	4628      	mov	r0, r5
 80045f8:	f7ff ff8e 	bl	8004518 <get_fat.isra.8>
		if (cs < 2) return 1;				/* Invalid FAT value */
 80045fc:	2801      	cmp	r0, #1
		cs = get_fat(obj, clst);			/* Check the cluster status */
 80045fe:	4604      	mov	r4, r0
		if (cs < 2) return 1;				/* Invalid FAT value */
 8004600:	d937      	bls.n	8004672 <create_chain+0xa6>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8004602:	1c43      	adds	r3, r0, #1
 8004604:	d104      	bne.n	8004610 <create_chain+0x44>
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8004606:	f04f 34ff 	mov.w	r4, #4294967295
}
 800460a:	4620      	mov	r0, r4
 800460c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8004610:	696b      	ldr	r3, [r5, #20]
 8004612:	4298      	cmp	r0, r3
 8004614:	d3f9      	bcc.n	800460a <create_chain+0x3e>
 8004616:	463e      	mov	r6, r7
 8004618:	e7e4      	b.n	80045e4 <create_chain+0x18>
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800461a:	2601      	movs	r6, #1
 800461c:	e7e2      	b.n	80045e4 <create_chain+0x18>
				ncl = 2;
 800461e:	2402      	movs	r4, #2
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8004620:	4621      	mov	r1, r4
 8004622:	f8d8 0000 	ldr.w	r0, [r8]
 8004626:	f7ff ff77 	bl	8004518 <get_fat.isra.8>
			if (cs == 0) break;				/* Found a free cluster */
 800462a:	b130      	cbz	r0, 800463a <create_chain+0x6e>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800462c:	2801      	cmp	r0, #1
 800462e:	d020      	beq.n	8004672 <create_chain+0xa6>
 8004630:	3001      	adds	r0, #1
 8004632:	d0e8      	beq.n	8004606 <create_chain+0x3a>
			if (ncl == scl) return 0;		/* No free cluster */
 8004634:	42b4      	cmp	r4, r6
 8004636:	d1d6      	bne.n	80045e6 <create_chain+0x1a>
 8004638:	e7db      	b.n	80045f2 <create_chain+0x26>
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800463a:	f04f 32ff 	mov.w	r2, #4294967295
 800463e:	4621      	mov	r1, r4
 8004640:	4628      	mov	r0, r5
 8004642:	f7ff feed 	bl	8004420 <put_fat>
		if (res == FR_OK && clst != 0) {
 8004646:	b990      	cbnz	r0, 800466e <create_chain+0xa2>
 8004648:	b957      	cbnz	r7, 8004660 <create_chain+0x94>
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800464a:	696a      	ldr	r2, [r5, #20]
 800464c:	692b      	ldr	r3, [r5, #16]
		fs->last_clst = ncl;
 800464e:	60ec      	str	r4, [r5, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8004650:	3a02      	subs	r2, #2
 8004652:	4293      	cmp	r3, r2
 8004654:	d90f      	bls.n	8004676 <create_chain+0xaa>
		fs->fsi_flag |= 1;
 8004656:	792b      	ldrb	r3, [r5, #4]
 8004658:	f043 0301 	orr.w	r3, r3, #1
 800465c:	712b      	strb	r3, [r5, #4]
 800465e:	e7d4      	b.n	800460a <create_chain+0x3e>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8004660:	4622      	mov	r2, r4
 8004662:	4639      	mov	r1, r7
 8004664:	4628      	mov	r0, r5
 8004666:	f7ff fedb 	bl	8004420 <put_fat>
	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800466a:	2800      	cmp	r0, #0
 800466c:	d0ed      	beq.n	800464a <create_chain+0x7e>
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800466e:	2801      	cmp	r0, #1
 8004670:	d0c9      	beq.n	8004606 <create_chain+0x3a>
 8004672:	2401      	movs	r4, #1
 8004674:	e7c9      	b.n	800460a <create_chain+0x3e>
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8004676:	3b01      	subs	r3, #1
 8004678:	612b      	str	r3, [r5, #16]
 800467a:	e7ec      	b.n	8004656 <create_chain+0x8a>

0800467c <remove_chain>:
{
 800467c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800467e:	460d      	mov	r5, r1
	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8004680:	2d01      	cmp	r5, #1
{
 8004682:	4607      	mov	r7, r0
 8004684:	4611      	mov	r1, r2
	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8004686:	d801      	bhi.n	800468c <remove_chain+0x10>
 8004688:	2002      	movs	r0, #2
 800468a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	FATFS *fs = obj->fs;
 800468c:	6804      	ldr	r4, [r0, #0]
	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800468e:	6963      	ldr	r3, [r4, #20]
 8004690:	429d      	cmp	r5, r3
 8004692:	d2f9      	bcs.n	8004688 <remove_chain+0xc>
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8004694:	b12a      	cbz	r2, 80046a2 <remove_chain+0x26>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8004696:	f04f 32ff 	mov.w	r2, #4294967295
 800469a:	4620      	mov	r0, r4
 800469c:	f7ff fec0 	bl	8004420 <put_fat>
		if (res != FR_OK) return res;
 80046a0:	bb08      	cbnz	r0, 80046e6 <remove_chain+0x6a>
		nxt = get_fat(obj, clst);			/* Get cluster status */
 80046a2:	4629      	mov	r1, r5
 80046a4:	6838      	ldr	r0, [r7, #0]
 80046a6:	f7ff ff37 	bl	8004518 <get_fat.isra.8>
		if (nxt == 0) break;				/* Empty cluster? */
 80046aa:	4606      	mov	r6, r0
 80046ac:	b908      	cbnz	r0, 80046b2 <remove_chain+0x36>
	return FR_OK;
 80046ae:	2000      	movs	r0, #0
 80046b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 80046b2:	2801      	cmp	r0, #1
 80046b4:	d0e8      	beq.n	8004688 <remove_chain+0xc>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 80046b6:	1c43      	adds	r3, r0, #1
 80046b8:	d014      	beq.n	80046e4 <remove_chain+0x68>
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 80046ba:	2200      	movs	r2, #0
 80046bc:	4629      	mov	r1, r5
 80046be:	4620      	mov	r0, r4
 80046c0:	f7ff feae 	bl	8004420 <put_fat>
			if (res != FR_OK) return res;
 80046c4:	b978      	cbnz	r0, 80046e6 <remove_chain+0x6a>
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 80046c6:	6962      	ldr	r2, [r4, #20]
 80046c8:	6923      	ldr	r3, [r4, #16]
 80046ca:	1e91      	subs	r1, r2, #2
 80046cc:	428b      	cmp	r3, r1
 80046ce:	d205      	bcs.n	80046dc <remove_chain+0x60>
			fs->free_clst++;
 80046d0:	3301      	adds	r3, #1
 80046d2:	6123      	str	r3, [r4, #16]
			fs->fsi_flag |= 1;
 80046d4:	7923      	ldrb	r3, [r4, #4]
 80046d6:	f043 0301 	orr.w	r3, r3, #1
 80046da:	7123      	strb	r3, [r4, #4]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 80046dc:	4296      	cmp	r6, r2
 80046de:	4635      	mov	r5, r6
 80046e0:	d3df      	bcc.n	80046a2 <remove_chain+0x26>
 80046e2:	e7e4      	b.n	80046ae <remove_chain+0x32>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 80046e4:	2001      	movs	r0, #1
}
 80046e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080046e8 <dir_sdi.constprop.11>:
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 80046e8:	6882      	ldr	r2, [r0, #8]
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
 80046ea:	b538      	push	{r3, r4, r5, lr}
	dp->dptr = ofs;				/* Set current offset */
 80046ec:	2300      	movs	r3, #0
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
 80046ee:	4605      	mov	r5, r0
	FATFS *fs = dp->obj.fs;
 80046f0:	6804      	ldr	r4, [r0, #0]
	dp->dptr = ofs;				/* Set current offset */
 80046f2:	6143      	str	r3, [r0, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 80046f4:	b992      	cbnz	r2, 800471c <dir_sdi.constprop.11+0x34>
 80046f6:	7823      	ldrb	r3, [r4, #0]
 80046f8:	2b02      	cmp	r3, #2
 80046fa:	d901      	bls.n	8004700 <dir_sdi.constprop.11+0x18>
		clst = fs->dirbase;
 80046fc:	6a63      	ldr	r3, [r4, #36]	; 0x24
	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 80046fe:	b973      	cbnz	r3, 800471e <dir_sdi.constprop.11+0x36>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8004700:	8923      	ldrh	r3, [r4, #8]
 8004702:	b90b      	cbnz	r3, 8004708 <dir_sdi.constprop.11+0x20>
 8004704:	2002      	movs	r0, #2
 8004706:	bd38      	pop	{r3, r4, r5, pc}
		dp->sect = fs->dirbase;
 8004708:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800470a:	61eb      	str	r3, [r5, #28]
	if (!dp->sect) return FR_INT_ERR;
 800470c:	69eb      	ldr	r3, [r5, #28]
	dp->clust = clst;					/* Current cluster# */
 800470e:	61aa      	str	r2, [r5, #24]
	if (!dp->sect) return FR_INT_ERR;
 8004710:	2b00      	cmp	r3, #0
 8004712:	d0f7      	beq.n	8004704 <dir_sdi.constprop.11+0x1c>
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8004714:	3430      	adds	r4, #48	; 0x30
 8004716:	622c      	str	r4, [r5, #32]
	return FR_OK;
 8004718:	2000      	movs	r0, #0
 800471a:	bd38      	pop	{r3, r4, r5, pc}
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800471c:	4613      	mov	r3, r2
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800471e:	8961      	ldrh	r1, [r4, #10]
 8004720:	461a      	mov	r2, r3
		while (ofs >= csz) {				/* Follow cluster chain */
 8004722:	b961      	cbnz	r1, 800473e <dir_sdi.constprop.11+0x56>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8004724:	4611      	mov	r1, r2
 8004726:	6828      	ldr	r0, [r5, #0]
 8004728:	f7ff fef6 	bl	8004518 <get_fat.isra.8>
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800472c:	1c43      	adds	r3, r0, #1
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800472e:	4602      	mov	r2, r0
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8004730:	d00b      	beq.n	800474a <dir_sdi.constprop.11+0x62>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8004732:	2801      	cmp	r0, #1
 8004734:	d9e6      	bls.n	8004704 <dir_sdi.constprop.11+0x1c>
 8004736:	6963      	ldr	r3, [r4, #20]
 8004738:	4298      	cmp	r0, r3
 800473a:	d3f3      	bcc.n	8004724 <dir_sdi.constprop.11+0x3c>
 800473c:	e7e2      	b.n	8004704 <dir_sdi.constprop.11+0x1c>
		dp->sect = clust2sect(fs, clst);
 800473e:	4619      	mov	r1, r3
 8004740:	4620      	mov	r0, r4
 8004742:	f7ff fbcd 	bl	8003ee0 <clust2sect>
 8004746:	61e8      	str	r0, [r5, #28]
 8004748:	e7e0      	b.n	800470c <dir_sdi.constprop.11+0x24>
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800474a:	2001      	movs	r0, #1
}
 800474c:	bd38      	pop	{r3, r4, r5, pc}

0800474e <dir_next>:
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800474e:	69c3      	ldr	r3, [r0, #28]
{
 8004750:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004754:	4605      	mov	r5, r0
 8004756:	460f      	mov	r7, r1
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8004758:	b1ab      	cbz	r3, 8004786 <dir_next+0x38>
	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800475a:	6942      	ldr	r2, [r0, #20]
 800475c:	f102 0820 	add.w	r8, r2, #32
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8004760:	f5b8 1f00 	cmp.w	r8, #2097152	; 0x200000
 8004764:	d20f      	bcs.n	8004786 <dir_next+0x38>
	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8004766:	f3c8 0908 	ubfx	r9, r8, #0, #9
	FATFS *fs = dp->obj.fs;
 800476a:	6804      	ldr	r4, [r0, #0]
	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800476c:	f1b9 0f00 	cmp.w	r9, #0
 8004770:	d14f      	bne.n	8004812 <dir_next+0xc4>
		if (!dp->clust) {		/* Static table */
 8004772:	6981      	ldr	r1, [r0, #24]
		dp->sect++;				/* Next sector */
 8004774:	3301      	adds	r3, #1
 8004776:	61c3      	str	r3, [r0, #28]
		if (!dp->clust) {		/* Static table */
 8004778:	b941      	cbnz	r1, 800478c <dir_next+0x3e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800477a:	8923      	ldrh	r3, [r4, #8]
 800477c:	ebb3 1f58 	cmp.w	r3, r8, lsr #5
 8004780:	d847      	bhi.n	8004812 <dir_next+0xc4>
				dp->sect = 0; return FR_NO_FILE;
 8004782:	2300      	movs	r3, #0
 8004784:	61eb      	str	r3, [r5, #28]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8004786:	2004      	movs	r0, #4
 8004788:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800478c:	8963      	ldrh	r3, [r4, #10]
 800478e:	3b01      	subs	r3, #1
 8004790:	ea13 2358 	ands.w	r3, r3, r8, lsr #9
 8004794:	d13d      	bne.n	8004812 <dir_next+0xc4>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8004796:	4620      	mov	r0, r4
 8004798:	f7ff febe 	bl	8004518 <get_fat.isra.8>
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800479c:	2801      	cmp	r0, #1
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800479e:	4606      	mov	r6, r0
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 80047a0:	d802      	bhi.n	80047a8 <dir_next+0x5a>
 80047a2:	2002      	movs	r0, #2
 80047a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 80047a8:	1c42      	adds	r2, r0, #1
 80047aa:	d102      	bne.n	80047b2 <dir_next+0x64>
 80047ac:	2001      	movs	r0, #1
 80047ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 80047b2:	6963      	ldr	r3, [r4, #20]
 80047b4:	4298      	cmp	r0, r3
 80047b6:	d326      	bcc.n	8004806 <dir_next+0xb8>
					if (!stretch) {								/* If no stretch, report EOT */
 80047b8:	2f00      	cmp	r7, #0
 80047ba:	d0e2      	beq.n	8004782 <dir_next+0x34>
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 80047bc:	69a9      	ldr	r1, [r5, #24]
 80047be:	4628      	mov	r0, r5
 80047c0:	f7ff ff04 	bl	80045cc <create_chain>
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 80047c4:	4606      	mov	r6, r0
 80047c6:	2800      	cmp	r0, #0
 80047c8:	d037      	beq.n	800483a <dir_next+0xec>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 80047ca:	2801      	cmp	r0, #1
 80047cc:	d0e9      	beq.n	80047a2 <dir_next+0x54>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80047ce:	1c43      	adds	r3, r0, #1
 80047d0:	d0ec      	beq.n	80047ac <dir_next+0x5e>
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 80047d2:	4620      	mov	r0, r4
 80047d4:	f7ff fc19 	bl	800400a <sync_window>
 80047d8:	4607      	mov	r7, r0
 80047da:	2800      	cmp	r0, #0
 80047dc:	d1e6      	bne.n	80047ac <dir_next+0x5e>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 80047de:	4601      	mov	r1, r0
 80047e0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80047e4:	f104 0030 	add.w	r0, r4, #48	; 0x30
 80047e8:	f7ff faf2 	bl	8003dd0 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80047ec:	4631      	mov	r1, r6
 80047ee:	4620      	mov	r0, r4
 80047f0:	f7ff fb76 	bl	8003ee0 <clust2sect>
						fs->wflag = 1;
 80047f4:	f04f 0a01 	mov.w	sl, #1
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80047f8:	62e0      	str	r0, [r4, #44]	; 0x2c
 80047fa:	8963      	ldrh	r3, [r4, #10]
 80047fc:	429f      	cmp	r7, r3
 80047fe:	d310      	bcc.n	8004822 <dir_next+0xd4>
					fs->winsect -= n;							/* Restore window offset */
 8004800:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8004802:	1bdf      	subs	r7, r3, r7
 8004804:	62e7      	str	r7, [r4, #44]	; 0x2c
				dp->clust = clst;		/* Initialize data for new cluster */
 8004806:	61ae      	str	r6, [r5, #24]
				dp->sect = clust2sect(fs, clst);
 8004808:	4631      	mov	r1, r6
 800480a:	4620      	mov	r0, r4
 800480c:	f7ff fb68 	bl	8003ee0 <clust2sect>
 8004810:	61e8      	str	r0, [r5, #28]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8004812:	3430      	adds	r4, #48	; 0x30
 8004814:	444c      	add	r4, r9
	dp->dptr = ofs;						/* Current entry */
 8004816:	f8c5 8014 	str.w	r8, [r5, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800481a:	622c      	str	r4, [r5, #32]
	return FR_OK;
 800481c:	2000      	movs	r0, #0
 800481e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
						fs->wflag = 1;
 8004822:	f884 a003 	strb.w	sl, [r4, #3]
 8004826:	4620      	mov	r0, r4
 8004828:	f7ff fbcc 	bl	8003fc4 <sync_window.part.4>
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800482c:	2800      	cmp	r0, #0
 800482e:	d1bd      	bne.n	80047ac <dir_next+0x5e>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8004830:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8004832:	3301      	adds	r3, #1
 8004834:	3701      	adds	r7, #1
 8004836:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004838:	e7df      	b.n	80047fa <dir_next+0xac>
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800483a:	2007      	movs	r0, #7
}
 800483c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08004840 <follow_path>:
{
 8004840:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	FATFS *fs = obj->fs;
 8004844:	6807      	ldr	r7, [r0, #0]
{
 8004846:	4604      	mov	r4, r0
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8004848:	780b      	ldrb	r3, [r1, #0]
 800484a:	2b2f      	cmp	r3, #47	; 0x2f
 800484c:	460d      	mov	r5, r1
 800484e:	f101 0101 	add.w	r1, r1, #1
 8004852:	d0f9      	beq.n	8004848 <follow_path+0x8>
 8004854:	2b5c      	cmp	r3, #92	; 0x5c
 8004856:	d0f7      	beq.n	8004848 <follow_path+0x8>
		obj->sclust = 0;					/* Start from root directory */
 8004858:	2300      	movs	r3, #0
 800485a:	60a3      	str	r3, [r4, #8]
	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800485c:	782b      	ldrb	r3, [r5, #0]
 800485e:	2b1f      	cmp	r3, #31
 8004860:	d959      	bls.n	8004916 <follow_path+0xd6>
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8004862:	f8df 815c 	ldr.w	r8, [pc, #348]	; 80049c0 <follow_path+0x180>
	p = *path; sfn = dp->fn;
 8004866:	f104 0624 	add.w	r6, r4, #36	; 0x24
	mem_set(sfn, ' ', 11);
 800486a:	220b      	movs	r2, #11
 800486c:	2120      	movs	r1, #32
 800486e:	4630      	mov	r0, r6
 8004870:	f7ff faae 	bl	8003dd0 <mem_set>
	si = i = 0; ni = 8;
 8004874:	2200      	movs	r2, #0
 8004876:	f105 3eff 	add.w	lr, r5, #4294967295
 800487a:	4611      	mov	r1, r2
 800487c:	2008      	movs	r0, #8
		c = (BYTE)p[si++];
 800487e:	f81e 3f01 	ldrb.w	r3, [lr, #1]!
		if (c <= ' ') break; 			/* Break if end of the path name */
 8004882:	2b20      	cmp	r3, #32
		c = (BYTE)p[si++];
 8004884:	f101 0101 	add.w	r1, r1, #1
		if (c <= ' ') break; 			/* Break if end of the path name */
 8004888:	d90b      	bls.n	80048a2 <follow_path+0x62>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 800488a:	2b2f      	cmp	r3, #47	; 0x2f
 800488c:	d14b      	bne.n	8004926 <follow_path+0xe6>
 800488e:	1868      	adds	r0, r5, r1
 8004890:	1b41      	subs	r1, r0, r5
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8004892:	f810 eb01 	ldrb.w	lr, [r0], #1
 8004896:	f1be 0f2f 	cmp.w	lr, #47	; 0x2f
 800489a:	d0f9      	beq.n	8004890 <follow_path+0x50>
 800489c:	f1be 0f5c 	cmp.w	lr, #92	; 0x5c
 80048a0:	d0f6      	beq.n	8004890 <follow_path+0x50>
	*path = p + si;						/* Return pointer to the next segment */
 80048a2:	440d      	add	r5, r1
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 80048a4:	2a00      	cmp	r2, #0
 80048a6:	d054      	beq.n	8004952 <follow_path+0x112>
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 80048a8:	f894 2024 	ldrb.w	r2, [r4, #36]	; 0x24
	FATFS *fs = dp->obj.fs;
 80048ac:	f8d4 9000 	ldr.w	r9, [r4]
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 80048b0:	2ae5      	cmp	r2, #229	; 0xe5
 80048b2:	bf04      	itt	eq
 80048b4:	2205      	moveq	r2, #5
 80048b6:	f884 2024 	strbeq.w	r2, [r4, #36]	; 0x24
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 80048ba:	2b21      	cmp	r3, #33	; 0x21
 80048bc:	bf34      	ite	cc
 80048be:	2304      	movcc	r3, #4
 80048c0:	2300      	movcs	r3, #0
 80048c2:	f884 302f 	strb.w	r3, [r4, #47]	; 0x2f
	res = dir_sdi(dp, 0);			/* Rewind directory object */
 80048c6:	4620      	mov	r0, r4
 80048c8:	f7ff ff0e 	bl	80046e8 <dir_sdi.constprop.11>
	if (res != FR_OK) return res;
 80048cc:	2800      	cmp	r0, #0
 80048ce:	d145      	bne.n	800495c <follow_path+0x11c>
		res = move_window(fs, dp->sect);
 80048d0:	69e1      	ldr	r1, [r4, #28]
 80048d2:	4648      	mov	r0, r9
 80048d4:	f7ff fbea 	bl	80040ac <move_window>
		if (res != FR_OK) break;
 80048d8:	2800      	cmp	r0, #0
 80048da:	d13f      	bne.n	800495c <follow_path+0x11c>
		c = dp->dir[DIR_Name];
 80048dc:	6a23      	ldr	r3, [r4, #32]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 80048de:	781a      	ldrb	r2, [r3, #0]
 80048e0:	2a00      	cmp	r2, #0
 80048e2:	d046      	beq.n	8004972 <follow_path+0x132>
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 80048e4:	7ada      	ldrb	r2, [r3, #11]
 80048e6:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 80048ea:	71a2      	strb	r2, [r4, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 80048ec:	7ada      	ldrb	r2, [r3, #11]
 80048ee:	0711      	lsls	r1, r2, #28
 80048f0:	d40c      	bmi.n	800490c <follow_path+0xcc>
 80048f2:	f103 0e0b 	add.w	lr, r3, #11
 80048f6:	4631      	mov	r1, r6
		r = *d++ - *s++;
 80048f8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80048fc:	f811 cb01 	ldrb.w	ip, [r1], #1
	} while (--cnt && r == 0);
 8004900:	459e      	cmp	lr, r3
		r = *d++ - *s++;
 8004902:	eba2 020c 	sub.w	r2, r2, ip
	} while (--cnt && r == 0);
 8004906:	d027      	beq.n	8004958 <follow_path+0x118>
 8004908:	2a00      	cmp	r2, #0
 800490a:	d0f5      	beq.n	80048f8 <follow_path+0xb8>
		res = dir_next(dp, 0);	/* Next entry */
 800490c:	2100      	movs	r1, #0
 800490e:	4620      	mov	r0, r4
 8004910:	f7ff ff1d 	bl	800474e <dir_next>
 8004914:	e7da      	b.n	80048cc <follow_path+0x8c>
		dp->fn[NSFLAG] = NS_NONAME;
 8004916:	2380      	movs	r3, #128	; 0x80
 8004918:	f884 302f 	strb.w	r3, [r4, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800491c:	4620      	mov	r0, r4
}
 800491e:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		res = dir_sdi(dp, 0);
 8004922:	f7ff bee1 	b.w	80046e8 <dir_sdi.constprop.11>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8004926:	2b5c      	cmp	r3, #92	; 0x5c
 8004928:	d0b1      	beq.n	800488e <follow_path+0x4e>
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 800492a:	2b2e      	cmp	r3, #46	; 0x2e
 800492c:	d036      	beq.n	800499c <follow_path+0x15c>
 800492e:	4290      	cmp	r0, r2
 8004930:	d90f      	bls.n	8004952 <follow_path+0x112>
		if (c >= 0x80) {				/* Extended character? */
 8004932:	f013 0f80 	tst.w	r3, #128	; 0x80
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8004936:	bf18      	it	ne
 8004938:	3b80      	subne	r3, #128	; 0x80
 800493a:	f8df 9088 	ldr.w	r9, [pc, #136]	; 80049c4 <follow_path+0x184>
 800493e:	bf18      	it	ne
 8004940:	f818 3003 	ldrbne.w	r3, [r8, r3]
	while (*str && *str != chr) str++;
 8004944:	f819 cf01 	ldrb.w	ip, [r9, #1]!
 8004948:	f1bc 0f00 	cmp.w	ip, #0
 800494c:	d02b      	beq.n	80049a6 <follow_path+0x166>
 800494e:	4563      	cmp	r3, ip
 8004950:	d1f8      	bne.n	8004944 <follow_path+0x104>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8004952:	2006      	movs	r0, #6
	return res;
 8004954:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8004958:	2a00      	cmp	r2, #0
 800495a:	d1d7      	bne.n	800490c <follow_path+0xcc>
			ns = dp->fn[NSFLAG];
 800495c:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f
			if (res != FR_OK) {				/* Failed to find the object */
 8004960:	b148      	cbz	r0, 8004976 <follow_path+0x136>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8004962:	2804      	cmp	r0, #4
 8004964:	d129      	bne.n	80049ba <follow_path+0x17a>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8004966:	f013 0f04 	tst.w	r3, #4
 800496a:	bf08      	it	eq
 800496c:	2005      	moveq	r0, #5
 800496e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8004972:	2004      	movs	r0, #4
 8004974:	e7f2      	b.n	800495c <follow_path+0x11c>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8004976:	075a      	lsls	r2, r3, #29
 8004978:	d41f      	bmi.n	80049ba <follow_path+0x17a>
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800497a:	79a3      	ldrb	r3, [r4, #6]
 800497c:	06db      	lsls	r3, r3, #27
 800497e:	d50a      	bpl.n	8004996 <follow_path+0x156>
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8004980:	6963      	ldr	r3, [r4, #20]
 8004982:	7838      	ldrb	r0, [r7, #0]
 8004984:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004988:	f107 0130 	add.w	r1, r7, #48	; 0x30
 800498c:	4419      	add	r1, r3
 800498e:	f7ff faff 	bl	8003f90 <ld_clust.isra.1>
 8004992:	60a0      	str	r0, [r4, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8004994:	e767      	b.n	8004866 <follow_path+0x26>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8004996:	2005      	movs	r0, #5
 8004998:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 800499c:	280b      	cmp	r0, #11
 800499e:	d0d8      	beq.n	8004952 <follow_path+0x112>
			i = 8; ni = 11;				/* Goto extension */
 80049a0:	2208      	movs	r2, #8
 80049a2:	200b      	movs	r0, #11
 80049a4:	e76b      	b.n	800487e <follow_path+0x3e>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 80049a6:	f1a3 0c61 	sub.w	ip, r3, #97	; 0x61
 80049aa:	f1bc 0f19 	cmp.w	ip, #25
 80049ae:	d801      	bhi.n	80049b4 <follow_path+0x174>
 80049b0:	3b20      	subs	r3, #32
 80049b2:	b2db      	uxtb	r3, r3
			sfn[i++] = c;
 80049b4:	54b3      	strb	r3, [r6, r2]
 80049b6:	3201      	adds	r2, #1
 80049b8:	e761      	b.n	800487e <follow_path+0x3e>
}
 80049ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80049be:	bf00      	nop
 80049c0:	0800d0f0 	.word	0x0800d0f0
 80049c4:	0800d16f 	.word	0x0800d16f

080049c8 <dir_register>:
{
 80049c8:	b570      	push	{r4, r5, r6, lr}
 80049ca:	4605      	mov	r5, r0
	FATFS *fs = dp->obj.fs;
 80049cc:	6806      	ldr	r6, [r0, #0]
	res = dir_sdi(dp, 0);
 80049ce:	f7ff fe8b 	bl	80046e8 <dir_sdi.constprop.11>
	if (res == FR_OK) {
 80049d2:	4604      	mov	r4, r0
 80049d4:	bb28      	cbnz	r0, 8004a22 <dir_register+0x5a>
			res = move_window(fs, dp->sect);
 80049d6:	69e9      	ldr	r1, [r5, #28]
 80049d8:	4630      	mov	r0, r6
 80049da:	f7ff fb67 	bl	80040ac <move_window>
			if (res != FR_OK) break;
 80049de:	4604      	mov	r4, r0
 80049e0:	b9f8      	cbnz	r0, 8004a22 <dir_register+0x5a>
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 80049e2:	6a2b      	ldr	r3, [r5, #32]
 80049e4:	781b      	ldrb	r3, [r3, #0]
 80049e6:	2be5      	cmp	r3, #229	; 0xe5
 80049e8:	d114      	bne.n	8004a14 <dir_register+0x4c>
		res = move_window(fs, dp->sect);
 80049ea:	69e9      	ldr	r1, [r5, #28]
 80049ec:	4630      	mov	r0, r6
 80049ee:	f7ff fb5d 	bl	80040ac <move_window>
		if (res == FR_OK) {
 80049f2:	4604      	mov	r4, r0
 80049f4:	b960      	cbnz	r0, 8004a10 <dir_register+0x48>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 80049f6:	4601      	mov	r1, r0
 80049f8:	2220      	movs	r2, #32
 80049fa:	6a28      	ldr	r0, [r5, #32]
 80049fc:	f7ff f9e8 	bl	8003dd0 <mem_set>
 8004a00:	220b      	movs	r2, #11
 8004a02:	f105 0124 	add.w	r1, r5, #36	; 0x24
 8004a06:	6a28      	ldr	r0, [r5, #32]
 8004a08:	f7ff fab9 	bl	8003f7e <mem_cpy.part.0>
			fs->wflag = 1;
 8004a0c:	2301      	movs	r3, #1
 8004a0e:	70f3      	strb	r3, [r6, #3]
}
 8004a10:	4620      	mov	r0, r4
 8004a12:	bd70      	pop	{r4, r5, r6, pc}
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d0e8      	beq.n	80049ea <dir_register+0x22>
			res = dir_next(dp, 1);
 8004a18:	2101      	movs	r1, #1
 8004a1a:	4628      	mov	r0, r5
 8004a1c:	f7ff fe97 	bl	800474e <dir_next>
 8004a20:	e7d7      	b.n	80049d2 <dir_register+0xa>
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8004a22:	2c04      	cmp	r4, #4
 8004a24:	bf08      	it	eq
 8004a26:	2407      	moveq	r4, #7
 8004a28:	e7f2      	b.n	8004a10 <dir_register+0x48>
	...

08004a2c <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8004a2c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8004a2e:	9001      	str	r0, [sp, #4]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8004a30:	a804      	add	r0, sp, #16
{
 8004a32:	9100      	str	r1, [sp, #0]
	const TCHAR *rp = path;
 8004a34:	f840 1d04 	str.w	r1, [r0, #-4]!
{
 8004a38:	4616      	mov	r6, r2


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8004a3a:	f7ff fa6d 	bl	8003f18 <get_ldnumber>
	if (vol < 0) return FR_INVALID_DRIVE;
 8004a3e:	1e05      	subs	r5, r0, #0
 8004a40:	db1f      	blt.n	8004a82 <f_mount+0x56>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8004a42:	4912      	ldr	r1, [pc, #72]	; (8004a8c <f_mount+0x60>)
 8004a44:	f851 4025 	ldr.w	r4, [r1, r5, lsl #2]

	if (cfs) {
 8004a48:	b15c      	cbz	r4, 8004a62 <f_mount+0x36>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8004a4a:	4b11      	ldr	r3, [pc, #68]	; (8004a90 <f_mount+0x64>)
 8004a4c:	681a      	ldr	r2, [r3, #0]
 8004a4e:	4294      	cmp	r4, r2
 8004a50:	bf04      	itt	eq
 8004a52:	2200      	moveq	r2, #0
 8004a54:	601a      	streq	r2, [r3, #0]
 8004a56:	691a      	ldr	r2, [r3, #16]
 8004a58:	2000      	movs	r0, #0
 8004a5a:	4294      	cmp	r4, r2
 8004a5c:	bf08      	it	eq
 8004a5e:	6118      	streq	r0, [r3, #16]
		clear_lock(cfs);
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8004a60:	7020      	strb	r0, [r4, #0]
	}

	if (fs) {
 8004a62:	9801      	ldr	r0, [sp, #4]
 8004a64:	b108      	cbz	r0, 8004a6a <f_mount+0x3e>
		fs->fs_type = 0;				/* Clear new fs object */
 8004a66:	2300      	movs	r3, #0
 8004a68:	7003      	strb	r3, [r0, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8004a6a:	f841 0025 	str.w	r0, [r1, r5, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8004a6e:	b130      	cbz	r0, 8004a7e <f_mount+0x52>
 8004a70:	2e01      	cmp	r6, #1
 8004a72:	d108      	bne.n	8004a86 <f_mount+0x5a>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8004a74:	2200      	movs	r2, #0
 8004a76:	a901      	add	r1, sp, #4
 8004a78:	4668      	mov	r0, sp
 8004a7a:	f7ff fb73 	bl	8004164 <find_volume>
	LEAVE_FF(fs, res);
}
 8004a7e:	b004      	add	sp, #16
 8004a80:	bd70      	pop	{r4, r5, r6, pc}
	if (vol < 0) return FR_INVALID_DRIVE;
 8004a82:	200b      	movs	r0, #11
 8004a84:	e7fb      	b.n	8004a7e <f_mount+0x52>
	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8004a86:	2000      	movs	r0, #0
 8004a88:	e7f9      	b.n	8004a7e <f_mount+0x52>
 8004a8a:	bf00      	nop
 8004a8c:	200006a4 	.word	0x200006a4
 8004a90:	200006a8 	.word	0x200006a8

08004a94 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8004a94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004a98:	b090      	sub	sp, #64	; 0x40
 8004a9a:	4690      	mov	r8, r2
 8004a9c:	9101      	str	r1, [sp, #4]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8004a9e:	4604      	mov	r4, r0
 8004aa0:	2800      	cmp	r0, #0
 8004aa2:	f000 80ce 	beq.w	8004c42 <f_open+0x1ae>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8004aa6:	f002 053f 	and.w	r5, r2, #63	; 0x3f
	res = find_volume(&path, &fs, mode);
 8004aaa:	462a      	mov	r2, r5
 8004aac:	a903      	add	r1, sp, #12
 8004aae:	a801      	add	r0, sp, #4
 8004ab0:	f7ff fb58 	bl	8004164 <find_volume>
	if (res == FR_OK) {
 8004ab4:	4607      	mov	r7, r0
 8004ab6:	bb38      	cbnz	r0, 8004b08 <f_open+0x74>
		dj.obj.fs = fs;
 8004ab8:	ae10      	add	r6, sp, #64	; 0x40
 8004aba:	9b03      	ldr	r3, [sp, #12]
 8004abc:	f846 3d30 	str.w	r3, [r6, #-48]!
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8004ac0:	9901      	ldr	r1, [sp, #4]
 8004ac2:	4630      	mov	r0, r6
 8004ac4:	f7ff febc 	bl	8004840 <follow_path>
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8004ac8:	b958      	cbnz	r0, 8004ae2 <f_open+0x4e>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8004aca:	f99d 303f 	ldrsb.w	r3, [sp, #63]	; 0x3f
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	db1e      	blt.n	8004b10 <f_open+0x7c>
				res = FR_INVALID_NAME;
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8004ad2:	f015 0f3e 	tst.w	r5, #62	; 0x3e
 8004ad6:	bf14      	ite	ne
 8004ad8:	2101      	movne	r1, #1
 8004ada:	2100      	moveq	r1, #0
 8004adc:	4630      	mov	r0, r6
 8004ade:	f7ff f97d 	bl	8003ddc <chk_lock>
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8004ae2:	f018 0f1c 	tst.w	r8, #28
 8004ae6:	d073      	beq.n	8004bd0 <f_open+0x13c>
			if (res != FR_OK) {					/* No file, create new */
 8004ae8:	b1a0      	cbz	r0, 8004b14 <f_open+0x80>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8004aea:	2804      	cmp	r0, #4
 8004aec:	d109      	bne.n	8004b02 <f_open+0x6e>
	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8004aee:	4b71      	ldr	r3, [pc, #452]	; (8004cb4 <f_open+0x220>)
 8004af0:	681a      	ldr	r2, [r3, #0]
 8004af2:	2a00      	cmp	r2, #0
 8004af4:	f000 80da 	beq.w	8004cac <f_open+0x218>
 8004af8:	691b      	ldr	r3, [r3, #16]
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	f000 80d6 	beq.w	8004cac <f_open+0x218>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8004b00:	2012      	movs	r0, #18
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8004b02:	f045 0508 	orr.w	r5, r5, #8
					res = FR_DENIED;
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8004b06:	b170      	cbz	r0, 8004b26 <f_open+0x92>
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8004b08:	2300      	movs	r3, #0
 8004b0a:	6023      	str	r3, [r4, #0]
 8004b0c:	4607      	mov	r7, r0
 8004b0e:	e092      	b.n	8004c36 <f_open+0x1a2>
				res = FR_INVALID_NAME;
 8004b10:	2006      	movs	r0, #6
 8004b12:	e7e6      	b.n	8004ae2 <f_open+0x4e>
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8004b14:	f89d 3016 	ldrb.w	r3, [sp, #22]
 8004b18:	f013 0f11 	tst.w	r3, #17
 8004b1c:	d163      	bne.n	8004be6 <f_open+0x152>
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8004b1e:	f018 0f04 	tst.w	r8, #4
 8004b22:	f040 80bd 	bne.w	8004ca0 <f_open+0x20c>
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8004b26:	0728      	lsls	r0, r5, #28
 8004b28:	d53c      	bpl.n	8004ba4 <f_open+0x110>
				dw = GET_FATTIME();
 8004b2a:	f000 fd6b 	bl	8005604 <get_fattime>
 8004b2e:	4602      	mov	r2, r0
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8004b30:	4601      	mov	r1, r0
 8004b32:	980c      	ldr	r0, [sp, #48]	; 0x30
 8004b34:	300e      	adds	r0, #14
 8004b36:	f7ff f943 	bl	8003dc0 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8004b3a:	980c      	ldr	r0, [sp, #48]	; 0x30
 8004b3c:	4611      	mov	r1, r2
 8004b3e:	3016      	adds	r0, #22
 8004b40:	f7ff f93e 	bl	8003dc0 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8004b44:	9b0c      	ldr	r3, [sp, #48]	; 0x30
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8004b46:	f8dd 900c 	ldr.w	r9, [sp, #12]
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8004b4a:	2220      	movs	r2, #32
 8004b4c:	72da      	strb	r2, [r3, #11]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8004b4e:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8004b52:	f899 0000 	ldrb.w	r0, [r9]
 8004b56:	4651      	mov	r1, sl
 8004b58:	f7ff fa1a 	bl	8003f90 <ld_clust.isra.1>
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8004b5c:	2200      	movs	r2, #0
 8004b5e:	4651      	mov	r1, sl
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8004b60:	4680      	mov	r8, r0
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8004b62:	4648      	mov	r0, r9
 8004b64:	f7ff fa22 	bl	8003fac <st_clust.isra.2>
					st_dword(dj.dir + DIR_FileSize, 0);
 8004b68:	9b0c      	ldr	r3, [sp, #48]	; 0x30
	*ptr++ = (BYTE)val; val >>= 8;
 8004b6a:	2200      	movs	r2, #0
 8004b6c:	771a      	strb	r2, [r3, #28]
	*ptr++ = (BYTE)val; val >>= 8;
 8004b6e:	775a      	strb	r2, [r3, #29]
	*ptr++ = (BYTE)val; val >>= 8;
 8004b70:	779a      	strb	r2, [r3, #30]
	*ptr++ = (BYTE)val;
 8004b72:	77da      	strb	r2, [r3, #31]
					fs->wflag = 1;
 8004b74:	9b03      	ldr	r3, [sp, #12]
 8004b76:	2101      	movs	r1, #1
 8004b78:	70d9      	strb	r1, [r3, #3]
					if (cl) {							/* Remove the cluster chain if exist */
 8004b7a:	f1b8 0f00 	cmp.w	r8, #0
 8004b7e:	d011      	beq.n	8004ba4 <f_open+0x110>
						res = remove_chain(&dj.obj, cl, 0);
 8004b80:	4641      	mov	r1, r8
 8004b82:	4630      	mov	r0, r6
						dw = fs->winsect;
 8004b84:	f8d3 902c 	ldr.w	r9, [r3, #44]	; 0x2c
						res = remove_chain(&dj.obj, cl, 0);
 8004b88:	f7ff fd78 	bl	800467c <remove_chain>
						if (res == FR_OK) {
 8004b8c:	2800      	cmp	r0, #0
 8004b8e:	d1bb      	bne.n	8004b08 <f_open+0x74>
							res = move_window(fs, dw);
 8004b90:	4649      	mov	r1, r9
 8004b92:	9803      	ldr	r0, [sp, #12]
 8004b94:	f7ff fa8a 	bl	80040ac <move_window>
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8004b98:	9a03      	ldr	r2, [sp, #12]
 8004b9a:	f108 33ff 	add.w	r3, r8, #4294967295
 8004b9e:	60d3      	str	r3, [r2, #12]
		if (res == FR_OK) {
 8004ba0:	2800      	cmp	r0, #0
 8004ba2:	d1b1      	bne.n	8004b08 <f_open+0x74>
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8004ba4:	9b03      	ldr	r3, [sp, #12]
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8004ba6:	0728      	lsls	r0, r5, #28
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8004ba8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004baa:	6263      	str	r3, [r4, #36]	; 0x24
				mode |= FA_MODIFIED;
 8004bac:	bf48      	it	mi
 8004bae:	f045 0540 	orrmi.w	r5, r5, #64	; 0x40
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8004bb2:	f015 0ffe 	tst.w	r5, #254	; 0xfe
			fp->dir_ptr = dj.dir;
 8004bb6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004bb8:	62a3      	str	r3, [r4, #40]	; 0x28
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8004bba:	bf14      	ite	ne
 8004bbc:	2101      	movne	r1, #1
 8004bbe:	2100      	moveq	r1, #0
 8004bc0:	4630      	mov	r0, r6
 8004bc2:	f7ff f939 	bl	8003e38 <inc_lock>
 8004bc6:	6120      	str	r0, [r4, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8004bc8:	2800      	cmp	r0, #0
 8004bca:	d13c      	bne.n	8004c46 <f_open+0x1b2>
 8004bcc:	2002      	movs	r0, #2
 8004bce:	e79b      	b.n	8004b08 <f_open+0x74>
			if (res == FR_OK) {					/* Following succeeded */
 8004bd0:	2800      	cmp	r0, #0
 8004bd2:	d199      	bne.n	8004b08 <f_open+0x74>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8004bd4:	f89d 3016 	ldrb.w	r3, [sp, #22]
 8004bd8:	06da      	lsls	r2, r3, #27
 8004bda:	d463      	bmi.n	8004ca4 <f_open+0x210>
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8004bdc:	f018 0f02 	tst.w	r8, #2
 8004be0:	d0e0      	beq.n	8004ba4 <f_open+0x110>
 8004be2:	07db      	lsls	r3, r3, #31
 8004be4:	d5de      	bpl.n	8004ba4 <f_open+0x110>
					res = FR_DENIED;
 8004be6:	2007      	movs	r0, #7
 8004be8:	e78e      	b.n	8004b08 <f_open+0x74>
					clst = get_fat(&fp->obj, clst);
 8004bea:	6820      	ldr	r0, [r4, #0]
 8004bec:	f7ff fc94 	bl	8004518 <get_fat.isra.8>
					if (clst <= 1) res = FR_INT_ERR;
 8004bf0:	2801      	cmp	r0, #1
					clst = get_fat(&fp->obj, clst);
 8004bf2:	4601      	mov	r1, r0
					if (clst <= 1) res = FR_INT_ERR;
 8004bf4:	d923      	bls.n	8004c3e <f_open+0x1aa>
 8004bf6:	1c42      	adds	r2, r0, #1
 8004bf8:	4250      	negs	r0, r2
 8004bfa:	4150      	adcs	r0, r2
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8004bfc:	eba5 0508 	sub.w	r5, r5, r8
 8004c00:	2800      	cmp	r0, #0
 8004c02:	d049      	beq.n	8004c98 <f_open+0x204>
				fp->clust = clst;
 8004c04:	61e1      	str	r1, [r4, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8004c06:	2800      	cmp	r0, #0
 8004c08:	f47f af7e 	bne.w	8004b08 <f_open+0x74>
 8004c0c:	f3c5 0308 	ubfx	r3, r5, #0, #9
 8004c10:	b18b      	cbz	r3, 8004c36 <f_open+0x1a2>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8004c12:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8004c16:	4640      	mov	r0, r8
 8004c18:	f7ff f962 	bl	8003ee0 <clust2sect>
 8004c1c:	2800      	cmp	r0, #0
 8004c1e:	d0d5      	beq.n	8004bcc <f_open+0x138>
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8004c20:	eb00 2255 	add.w	r2, r0, r5, lsr #9
 8004c24:	6222      	str	r2, [r4, #32]
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8004c26:	2301      	movs	r3, #1
 8004c28:	4631      	mov	r1, r6
 8004c2a:	f898 0001 	ldrb.w	r0, [r8, #1]
 8004c2e:	f7ff f895 	bl	8003d5c <disk_read>
 8004c32:	2800      	cmp	r0, #0
 8004c34:	d138      	bne.n	8004ca8 <f_open+0x214>

	LEAVE_FF(fs, res);
}
 8004c36:	4638      	mov	r0, r7
 8004c38:	b010      	add	sp, #64	; 0x40
 8004c3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
					if (clst <= 1) res = FR_INT_ERR;
 8004c3e:	2002      	movs	r0, #2
 8004c40:	e7dc      	b.n	8004bfc <f_open+0x168>
	if (!fp) return FR_INVALID_OBJECT;
 8004c42:	2709      	movs	r7, #9
 8004c44:	e7f7      	b.n	8004c36 <f_open+0x1a2>
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8004c46:	9e03      	ldr	r6, [sp, #12]
 8004c48:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
 8004c4c:	7830      	ldrb	r0, [r6, #0]
 8004c4e:	4641      	mov	r1, r8
 8004c50:	f7ff f99e 	bl	8003f90 <ld_clust.isra.1>
 8004c54:	60a0      	str	r0, [r4, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8004c56:	f108 001c 	add.w	r0, r8, #28
 8004c5a:	f7ff f8a9 	bl	8003db0 <ld_dword>
			fp->obj.id = fs->id;
 8004c5e:	88f3      	ldrh	r3, [r6, #6]
			fp->obj.fs = fs;	 	/* Validate the file object */
 8004c60:	6026      	str	r6, [r4, #0]
			fp->cltbl = 0;			/* Disable fast seek mode */
 8004c62:	2100      	movs	r1, #0
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8004c64:	f104 0630 	add.w	r6, r4, #48	; 0x30
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8004c68:	60e0      	str	r0, [r4, #12]
			fp->obj.id = fs->id;
 8004c6a:	80a3      	strh	r3, [r4, #4]
			fp->cltbl = 0;			/* Disable fast seek mode */
 8004c6c:	62e1      	str	r1, [r4, #44]	; 0x2c
			fp->flag = mode;		/* Set file access mode */
 8004c6e:	7525      	strb	r5, [r4, #20]
			fp->err = 0;			/* Clear error flag */
 8004c70:	7561      	strb	r1, [r4, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8004c72:	6221      	str	r1, [r4, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8004c74:	61a1      	str	r1, [r4, #24]
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8004c76:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004c7a:	4630      	mov	r0, r6
 8004c7c:	f7ff f8a8 	bl	8003dd0 <mem_set>
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8004c80:	06ab      	lsls	r3, r5, #26
 8004c82:	d5d8      	bpl.n	8004c36 <f_open+0x1a2>
 8004c84:	68e5      	ldr	r5, [r4, #12]
 8004c86:	2d00      	cmp	r5, #0
 8004c88:	d0d5      	beq.n	8004c36 <f_open+0x1a2>
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8004c8a:	9b03      	ldr	r3, [sp, #12]
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8004c8c:	68a1      	ldr	r1, [r4, #8]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8004c8e:	f8b3 800a 	ldrh.w	r8, [r3, #10]
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8004c92:	61a5      	str	r5, [r4, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8004c94:	ea4f 2848 	mov.w	r8, r8, lsl #9
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8004c98:	45a8      	cmp	r8, r5
 8004c9a:	d3a6      	bcc.n	8004bea <f_open+0x156>
 8004c9c:	2000      	movs	r0, #0
 8004c9e:	e7b1      	b.n	8004c04 <f_open+0x170>
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8004ca0:	2008      	movs	r0, #8
 8004ca2:	e731      	b.n	8004b08 <f_open+0x74>
					res = FR_NO_FILE;
 8004ca4:	2004      	movs	r0, #4
 8004ca6:	e72f      	b.n	8004b08 <f_open+0x74>
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8004ca8:	2001      	movs	r0, #1
 8004caa:	e72d      	b.n	8004b08 <f_open+0x74>
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8004cac:	4630      	mov	r0, r6
 8004cae:	f7ff fe8b 	bl	80049c8 <dir_register>
 8004cb2:	e726      	b.n	8004b02 <f_open+0x6e>
 8004cb4:	200006a8 	.word	0x200006a8

08004cb8 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8004cb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004cbc:	469b      	mov	fp, r3
 8004cbe:	b085      	sub	sp, #20
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;


	*bw = 0;	/* Clear write byte counter */
 8004cc0:	2300      	movs	r3, #0
{
 8004cc2:	4689      	mov	r9, r1
	*bw = 0;	/* Clear write byte counter */
 8004cc4:	f8cb 3000 	str.w	r3, [fp]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8004cc8:	a903      	add	r1, sp, #12
{
 8004cca:	4604      	mov	r4, r0
 8004ccc:	4617      	mov	r7, r2
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8004cce:	f7ff f93b 	bl	8003f48 <validate>
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8004cd2:	4606      	mov	r6, r0
 8004cd4:	bb58      	cbnz	r0, 8004d2e <f_write+0x76>
 8004cd6:	7d66      	ldrb	r6, [r4, #21]
 8004cd8:	bb4e      	cbnz	r6, 8004d2e <f_write+0x76>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8004cda:	7d23      	ldrb	r3, [r4, #20]
 8004cdc:	079a      	lsls	r2, r3, #30
 8004cde:	f140 80ae 	bpl.w	8004e3e <f_write+0x186>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8004ce2:	69a3      	ldr	r3, [r4, #24]
 8004ce4:	42fb      	cmn	r3, r7
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8004ce6:	bf28      	it	cs
 8004ce8:	43df      	mvncs	r7, r3
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8004cea:	f104 0a30 	add.w	sl, r4, #48	; 0x30
	for ( ;  btw;							/* Repeat until all data written */
 8004cee:	b1d7      	cbz	r7, 8004d26 <f_write+0x6e>
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8004cf0:	69a1      	ldr	r1, [r4, #24]
 8004cf2:	f3c1 0308 	ubfx	r3, r1, #0, #9
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	f040 808f 	bne.w	8004e1a <f_write+0x162>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8004cfc:	9b03      	ldr	r3, [sp, #12]
 8004cfe:	895b      	ldrh	r3, [r3, #10]
 8004d00:	3b01      	subs	r3, #1
			if (csect == 0) {				/* On the cluster boundary? */
 8004d02:	ea13 2351 	ands.w	r3, r3, r1, lsr #9
 8004d06:	9301      	str	r3, [sp, #4]
 8004d08:	d124      	bne.n	8004d54 <f_write+0x9c>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8004d0a:	b931      	cbnz	r1, 8004d1a <f_write+0x62>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8004d0c:	68a0      	ldr	r0, [r4, #8]
					if (clst == 0) {		/* If no cluster is allocated, */
 8004d0e:	b9a0      	cbnz	r0, 8004d3a <f_write+0x82>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8004d10:	4601      	mov	r1, r0
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8004d12:	4620      	mov	r0, r4
 8004d14:	f7ff fc5a 	bl	80045cc <create_chain>
 8004d18:	e004      	b.n	8004d24 <f_write+0x6c>
					if (fp->cltbl) {
 8004d1a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8004d1c:	b15b      	cbz	r3, 8004d36 <f_write+0x7e>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8004d1e:	4620      	mov	r0, r4
 8004d20:	f7ff f8e9 	bl	8003ef6 <clmt_clust>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8004d24:	b948      	cbnz	r0, 8004d3a <f_write+0x82>
		fp->flag |= FA_DIRTY;
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8004d26:	7d23      	ldrb	r3, [r4, #20]
 8004d28:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004d2c:	7523      	strb	r3, [r4, #20]

	LEAVE_FF(fs, FR_OK);
}
 8004d2e:	4630      	mov	r0, r6
 8004d30:	b005      	add	sp, #20
 8004d32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8004d36:	69e1      	ldr	r1, [r4, #28]
 8004d38:	e7eb      	b.n	8004d12 <f_write+0x5a>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8004d3a:	2801      	cmp	r0, #1
 8004d3c:	d102      	bne.n	8004d44 <f_write+0x8c>
 8004d3e:	2602      	movs	r6, #2
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8004d40:	7566      	strb	r6, [r4, #21]
 8004d42:	e7f4      	b.n	8004d2e <f_write+0x76>
 8004d44:	1c43      	adds	r3, r0, #1
 8004d46:	d101      	bne.n	8004d4c <f_write+0x94>
 8004d48:	2601      	movs	r6, #1
 8004d4a:	e7f9      	b.n	8004d40 <f_write+0x88>
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8004d4c:	68a3      	ldr	r3, [r4, #8]
				fp->clust = clst;			/* Update current cluster */
 8004d4e:	61e0      	str	r0, [r4, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8004d50:	b903      	cbnz	r3, 8004d54 <f_write+0x9c>
 8004d52:	60a0      	str	r0, [r4, #8]
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8004d54:	f994 3014 	ldrsb.w	r3, [r4, #20]
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	da0c      	bge.n	8004d76 <f_write+0xbe>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8004d5c:	9803      	ldr	r0, [sp, #12]
 8004d5e:	6a22      	ldr	r2, [r4, #32]
 8004d60:	7840      	ldrb	r0, [r0, #1]
 8004d62:	2301      	movs	r3, #1
 8004d64:	4651      	mov	r1, sl
 8004d66:	f7ff f807 	bl	8003d78 <disk_write>
 8004d6a:	2800      	cmp	r0, #0
 8004d6c:	d1ec      	bne.n	8004d48 <f_write+0x90>
				fp->flag &= (BYTE)~FA_DIRTY;
 8004d6e:	7d23      	ldrb	r3, [r4, #20]
 8004d70:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004d74:	7523      	strb	r3, [r4, #20]
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8004d76:	9b03      	ldr	r3, [sp, #12]
 8004d78:	69e1      	ldr	r1, [r4, #28]
 8004d7a:	9300      	str	r3, [sp, #0]
 8004d7c:	4618      	mov	r0, r3
 8004d7e:	f7ff f8af 	bl	8003ee0 <clust2sect>
			if (!sect) ABORT(fs, FR_INT_ERR);
 8004d82:	2800      	cmp	r0, #0
 8004d84:	d0db      	beq.n	8004d3e <f_write+0x86>
			sect += csect;
 8004d86:	9b01      	ldr	r3, [sp, #4]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8004d88:	0a7d      	lsrs	r5, r7, #9
			sect += csect;
 8004d8a:	eb03 0800 	add.w	r8, r3, r0
			if (cc) {						/* Write maximum contiguous sectors directly */
 8004d8e:	d032      	beq.n	8004df6 <f_write+0x13e>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8004d90:	9b00      	ldr	r3, [sp, #0]
 8004d92:	9a01      	ldr	r2, [sp, #4]
 8004d94:	895b      	ldrh	r3, [r3, #10]
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8004d96:	9800      	ldr	r0, [sp, #0]
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8004d98:	442a      	add	r2, r5
 8004d9a:	429a      	cmp	r2, r3
					cc = fs->csize - csect;
 8004d9c:	bf88      	it	hi
 8004d9e:	9a01      	ldrhi	r2, [sp, #4]
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8004da0:	7840      	ldrb	r0, [r0, #1]
					cc = fs->csize - csect;
 8004da2:	bf88      	it	hi
 8004da4:	1a9d      	subhi	r5, r3, r2
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8004da6:	462b      	mov	r3, r5
 8004da8:	4642      	mov	r2, r8
 8004daa:	4649      	mov	r1, r9
 8004dac:	f7fe ffe4 	bl	8003d78 <disk_write>
 8004db0:	2800      	cmp	r0, #0
 8004db2:	d1c9      	bne.n	8004d48 <f_write+0x90>
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8004db4:	6a21      	ldr	r1, [r4, #32]
 8004db6:	eba1 0108 	sub.w	r1, r1, r8
 8004dba:	428d      	cmp	r5, r1
 8004dbc:	d90a      	bls.n	8004dd4 <f_write+0x11c>
 8004dbe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004dc2:	eb09 2141 	add.w	r1, r9, r1, lsl #9
 8004dc6:	4650      	mov	r0, sl
 8004dc8:	f7ff f8d9 	bl	8003f7e <mem_cpy.part.0>
					fp->flag &= (BYTE)~FA_DIRTY;
 8004dcc:	7d23      	ldrb	r3, [r4, #20]
 8004dce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004dd2:	7523      	strb	r3, [r4, #20]
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8004dd4:	026d      	lsls	r5, r5, #9
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8004dd6:	69a3      	ldr	r3, [r4, #24]
 8004dd8:	68e2      	ldr	r2, [r4, #12]
 8004dda:	442b      	add	r3, r5
 8004ddc:	61a3      	str	r3, [r4, #24]
 8004dde:	429a      	cmp	r2, r3
 8004de0:	bf2c      	ite	cs
 8004de2:	60e2      	strcs	r2, [r4, #12]
 8004de4:	60e3      	strcc	r3, [r4, #12]
 8004de6:	f8db 3000 	ldr.w	r3, [fp]
 8004dea:	442b      	add	r3, r5
 8004dec:	44a9      	add	r9, r5
 8004dee:	f8cb 3000 	str.w	r3, [fp]
 8004df2:	1b7f      	subs	r7, r7, r5
 8004df4:	e77b      	b.n	8004cee <f_write+0x36>
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8004df6:	6a23      	ldr	r3, [r4, #32]
 8004df8:	4598      	cmp	r8, r3
 8004dfa:	d00c      	beq.n	8004e16 <f_write+0x15e>
 8004dfc:	69a2      	ldr	r2, [r4, #24]
 8004dfe:	68e3      	ldr	r3, [r4, #12]
 8004e00:	429a      	cmp	r2, r3
 8004e02:	d208      	bcs.n	8004e16 <f_write+0x15e>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8004e04:	9800      	ldr	r0, [sp, #0]
 8004e06:	2301      	movs	r3, #1
 8004e08:	4642      	mov	r2, r8
 8004e0a:	4651      	mov	r1, sl
 8004e0c:	7840      	ldrb	r0, [r0, #1]
 8004e0e:	f7fe ffa5 	bl	8003d5c <disk_read>
				fp->fptr < fp->obj.objsize &&
 8004e12:	2800      	cmp	r0, #0
 8004e14:	d198      	bne.n	8004d48 <f_write+0x90>
			fp->sect = sect;
 8004e16:	f8c4 8020 	str.w	r8, [r4, #32]
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8004e1a:	69a0      	ldr	r0, [r4, #24]
 8004e1c:	f3c0 0008 	ubfx	r0, r0, #0, #9
 8004e20:	f5c0 7500 	rsb	r5, r0, #512	; 0x200
 8004e24:	42bd      	cmp	r5, r7
 8004e26:	bf28      	it	cs
 8004e28:	463d      	movcs	r5, r7
 8004e2a:	462a      	mov	r2, r5
 8004e2c:	4649      	mov	r1, r9
 8004e2e:	4450      	add	r0, sl
 8004e30:	f7ff f8a5 	bl	8003f7e <mem_cpy.part.0>
		fp->flag |= FA_DIRTY;
 8004e34:	7d23      	ldrb	r3, [r4, #20]
 8004e36:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004e3a:	7523      	strb	r3, [r4, #20]
 8004e3c:	e7cb      	b.n	8004dd6 <f_write+0x11e>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8004e3e:	2607      	movs	r6, #7
 8004e40:	e775      	b.n	8004d2e <f_write+0x76>

08004e42 <putc_bfd>:
{
	UINT bw;
	int i;


	if (_USE_STRFUNC == 2 && c == '\n') {	 /* LF -> CRLF conversion */
 8004e42:	290a      	cmp	r1, #10
{
 8004e44:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004e46:	4604      	mov	r4, r0
 8004e48:	460e      	mov	r6, r1
	if (_USE_STRFUNC == 2 && c == '\n') {	 /* LF -> CRLF conversion */
 8004e4a:	d102      	bne.n	8004e52 <putc_bfd+0x10>
		putc_bfd(pb, '\r');
 8004e4c:	210d      	movs	r1, #13
 8004e4e:	f7ff fff8 	bl	8004e42 <putc_bfd>
	}

	i = pb->idx;		/* Write index of pb->buf[] */
 8004e52:	6863      	ldr	r3, [r4, #4]
	if (i < 0) return;
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	db14      	blt.n	8004e82 <putc_bfd+0x40>
	if (c >= 0x100)
		pb->buf[i++] = (BYTE)(c >> 8);
	pb->buf[i++] = (BYTE)c;
#endif
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
 8004e58:	1c5d      	adds	r5, r3, #1
 8004e5a:	4423      	add	r3, r4
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 8004e5c:	2d3c      	cmp	r5, #60	; 0x3c
	pb->buf[i++] = (BYTE)c;
 8004e5e:	731e      	strb	r6, [r3, #12]
	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 8004e60:	dd0b      	ble.n	8004e7a <putc_bfd+0x38>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 8004e62:	ab01      	add	r3, sp, #4
 8004e64:	462a      	mov	r2, r5
 8004e66:	f104 010c 	add.w	r1, r4, #12
 8004e6a:	6820      	ldr	r0, [r4, #0]
 8004e6c:	f7ff ff24 	bl	8004cb8 <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 8004e70:	9b01      	ldr	r3, [sp, #4]
 8004e72:	1b5d      	subs	r5, r3, r5
 8004e74:	bf18      	it	ne
 8004e76:	f04f 35ff 	movne.w	r5, #4294967295
	}
	pb->idx = i;
	pb->nchr++;
 8004e7a:	68a3      	ldr	r3, [r4, #8]
	pb->idx = i;
 8004e7c:	6065      	str	r5, [r4, #4]
	pb->nchr++;
 8004e7e:	3301      	adds	r3, #1
 8004e80:	60a3      	str	r3, [r4, #8]
}
 8004e82:	b002      	add	sp, #8
 8004e84:	bd70      	pop	{r4, r5, r6, pc}

08004e86 <putc_flush>:
	putbuff* pb
)
{
	UINT nw;

	if (   pb->idx >= 0	/* Flush buffered characters to the file */
 8004e86:	6842      	ldr	r2, [r0, #4]
 8004e88:	2a00      	cmp	r2, #0
{
 8004e8a:	b513      	push	{r0, r1, r4, lr}
 8004e8c:	4604      	mov	r4, r0
	if (   pb->idx >= 0	/* Flush buffered characters to the file */
 8004e8e:	da03      	bge.n	8004e98 <putc_flush+0x12>
		&& f_write(pb->fp, pb->buf, (UINT)pb->idx, &nw) == FR_OK
		&& (UINT)pb->idx == nw) return pb->nchr;
	return EOF;
 8004e90:	f04f 30ff 	mov.w	r0, #4294967295
}
 8004e94:	b002      	add	sp, #8
 8004e96:	bd10      	pop	{r4, pc}
		&& f_write(pb->fp, pb->buf, (UINT)pb->idx, &nw) == FR_OK
 8004e98:	f100 010c 	add.w	r1, r0, #12
 8004e9c:	ab01      	add	r3, sp, #4
 8004e9e:	6800      	ldr	r0, [r0, #0]
 8004ea0:	f7ff ff0a 	bl	8004cb8 <f_write>
 8004ea4:	2800      	cmp	r0, #0
 8004ea6:	d1f3      	bne.n	8004e90 <putc_flush+0xa>
		&& (UINT)pb->idx == nw) return pb->nchr;
 8004ea8:	6862      	ldr	r2, [r4, #4]
 8004eaa:	9b01      	ldr	r3, [sp, #4]
 8004eac:	429a      	cmp	r2, r3
 8004eae:	d1ef      	bne.n	8004e90 <putc_flush+0xa>
 8004eb0:	68a0      	ldr	r0, [r4, #8]
 8004eb2:	e7ef      	b.n	8004e94 <putc_flush+0xe>

08004eb4 <f_sync>:
{
 8004eb4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8004eb6:	a901      	add	r1, sp, #4
{
 8004eb8:	4604      	mov	r4, r0
	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8004eba:	f7ff f845 	bl	8003f48 <validate>
	if (res == FR_OK) {
 8004ebe:	4605      	mov	r5, r0
 8004ec0:	2800      	cmp	r0, #0
 8004ec2:	d13a      	bne.n	8004f3a <f_sync+0x86>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8004ec4:	7d23      	ldrb	r3, [r4, #20]
 8004ec6:	065a      	lsls	r2, r3, #25
 8004ec8:	d537      	bpl.n	8004f3a <f_sync+0x86>
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8004eca:	061b      	lsls	r3, r3, #24
 8004ecc:	d50c      	bpl.n	8004ee8 <f_sync+0x34>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8004ece:	9801      	ldr	r0, [sp, #4]
 8004ed0:	6a22      	ldr	r2, [r4, #32]
 8004ed2:	7840      	ldrb	r0, [r0, #1]
 8004ed4:	2301      	movs	r3, #1
 8004ed6:	f104 0130 	add.w	r1, r4, #48	; 0x30
 8004eda:	f7fe ff4d 	bl	8003d78 <disk_write>
 8004ede:	bb78      	cbnz	r0, 8004f40 <f_sync+0x8c>
				fp->flag &= (BYTE)~FA_DIRTY;
 8004ee0:	7d23      	ldrb	r3, [r4, #20]
 8004ee2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004ee6:	7523      	strb	r3, [r4, #20]
			tm = GET_FATTIME();				/* Modified time */
 8004ee8:	f000 fb8c 	bl	8005604 <get_fattime>
				res = move_window(fs, fp->dir_sect);
 8004eec:	6a61      	ldr	r1, [r4, #36]	; 0x24
			tm = GET_FATTIME();				/* Modified time */
 8004eee:	4607      	mov	r7, r0
				res = move_window(fs, fp->dir_sect);
 8004ef0:	9801      	ldr	r0, [sp, #4]
 8004ef2:	f7ff f8db 	bl	80040ac <move_window>
				if (res == FR_OK) {
 8004ef6:	4605      	mov	r5, r0
 8004ef8:	b9f8      	cbnz	r0, 8004f3a <f_sync+0x86>
					dir = fp->dir_ptr;
 8004efa:	6aa6      	ldr	r6, [r4, #40]	; 0x28
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8004efc:	7af3      	ldrb	r3, [r6, #11]
 8004efe:	f043 0320 	orr.w	r3, r3, #32
 8004f02:	72f3      	strb	r3, [r6, #11]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8004f04:	68a2      	ldr	r2, [r4, #8]
 8004f06:	6820      	ldr	r0, [r4, #0]
 8004f08:	4631      	mov	r1, r6
 8004f0a:	f7ff f84f 	bl	8003fac <st_clust.isra.2>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8004f0e:	68e1      	ldr	r1, [r4, #12]
 8004f10:	f106 001c 	add.w	r0, r6, #28
 8004f14:	f7fe ff54 	bl	8003dc0 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8004f18:	4639      	mov	r1, r7
 8004f1a:	f106 0016 	add.w	r0, r6, #22
 8004f1e:	f7fe ff4f 	bl	8003dc0 <st_dword>
					fs->wflag = 1;
 8004f22:	9801      	ldr	r0, [sp, #4]
	*ptr++ = (BYTE)val; val >>= 8;
 8004f24:	74b5      	strb	r5, [r6, #18]
					fs->wflag = 1;
 8004f26:	2301      	movs	r3, #1
	*ptr++ = (BYTE)val;
 8004f28:	74f5      	strb	r5, [r6, #19]
					fs->wflag = 1;
 8004f2a:	70c3      	strb	r3, [r0, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8004f2c:	f7ff f873 	bl	8004016 <sync_fs>
					fp->flag &= (BYTE)~FA_MODIFIED;
 8004f30:	7d23      	ldrb	r3, [r4, #20]
 8004f32:	f023 0340 	bic.w	r3, r3, #64	; 0x40
					res = sync_fs(fs);					/* Restore it to the directory */
 8004f36:	4605      	mov	r5, r0
					fp->flag &= (BYTE)~FA_MODIFIED;
 8004f38:	7523      	strb	r3, [r4, #20]
}
 8004f3a:	4628      	mov	r0, r5
 8004f3c:	b003      	add	sp, #12
 8004f3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8004f40:	2501      	movs	r5, #1
 8004f42:	e7fa      	b.n	8004f3a <f_sync+0x86>

08004f44 <f_close>:
{
 8004f44:	b513      	push	{r0, r1, r4, lr}
 8004f46:	4604      	mov	r4, r0
	res = f_sync(fp);					/* Flush cached data */
 8004f48:	f7ff ffb4 	bl	8004eb4 <f_sync>
	if (res == FR_OK)
 8004f4c:	b948      	cbnz	r0, 8004f62 <f_close+0x1e>
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8004f4e:	a901      	add	r1, sp, #4
 8004f50:	4620      	mov	r0, r4
 8004f52:	f7fe fff9 	bl	8003f48 <validate>
		if (res == FR_OK) {
 8004f56:	b920      	cbnz	r0, 8004f62 <f_close+0x1e>
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8004f58:	6920      	ldr	r0, [r4, #16]
 8004f5a:	f7fe ffa9 	bl	8003eb0 <dec_lock>
			if (res == FR_OK)
 8004f5e:	b900      	cbnz	r0, 8004f62 <f_close+0x1e>
				fp->obj.fs = 0;			/* Invalidate file object */
 8004f60:	6020      	str	r0, [r4, #0]
}
 8004f62:	b002      	add	sp, #8
 8004f64:	bd10      	pop	{r4, pc}

08004f66 <f_puts>:

int f_puts (
	const TCHAR* str,	/* Pointer to the string to be output */
	FIL* fp				/* Pointer to the file object */
)
{
 8004f66:	b510      	push	{r4, lr}
 8004f68:	b094      	sub	sp, #80	; 0x50
	pb->nchr = pb->idx = 0;
 8004f6a:	2300      	movs	r3, #0
	pb->fp = fp;
 8004f6c:	9101      	str	r1, [sp, #4]
	pb->nchr = pb->idx = 0;
 8004f6e:	9302      	str	r3, [sp, #8]
 8004f70:	9303      	str	r3, [sp, #12]
 8004f72:	1e44      	subs	r4, r0, #1
	putbuff pb;


	putc_init(&pb, fp);
	while (*str) putc_bfd(&pb, *str++);		/* Put the string */
 8004f74:	f814 1f01 	ldrb.w	r1, [r4, #1]!
 8004f78:	a801      	add	r0, sp, #4
 8004f7a:	b919      	cbnz	r1, 8004f84 <f_puts+0x1e>
	return putc_flush(&pb);
 8004f7c:	f7ff ff83 	bl	8004e86 <putc_flush>
}
 8004f80:	b014      	add	sp, #80	; 0x50
 8004f82:	bd10      	pop	{r4, pc}
	while (*str) putc_bfd(&pb, *str++);		/* Put the string */
 8004f84:	f7ff ff5d 	bl	8004e42 <putc_bfd>
 8004f88:	e7f4      	b.n	8004f74 <f_puts+0xe>
	...

08004f8c <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8004f8c:	b530      	push	{r4, r5, lr}
  uint8_t ret = 1;
  uint8_t DiskNum = 0;

  if(disk.nbr < _VOLUMES)
 8004f8e:	4b0f      	ldr	r3, [pc, #60]	; (8004fcc <FATFS_LinkDriverEx+0x40>)
 8004f90:	7a5d      	ldrb	r5, [r3, #9]
 8004f92:	f005 04ff 	and.w	r4, r5, #255	; 0xff
 8004f96:	b9b5      	cbnz	r5, 8004fc6 <FATFS_LinkDriverEx+0x3a>
  {
    disk.is_initialized[disk.nbr] = 0;
 8004f98:	7a5d      	ldrb	r5, [r3, #9]
 8004f9a:	555c      	strb	r4, [r3, r5]
    disk.drv[disk.nbr] = drv;
 8004f9c:	7a5d      	ldrb	r5, [r3, #9]
 8004f9e:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 8004fa2:	6068      	str	r0, [r5, #4]
    disk.lun[disk.nbr] = lun;
 8004fa4:	7a58      	ldrb	r0, [r3, #9]
 8004fa6:	4418      	add	r0, r3
 8004fa8:	7202      	strb	r2, [r0, #8]
    DiskNum = disk.nbr++;
 8004faa:	7a5a      	ldrb	r2, [r3, #9]
 8004fac:	b2d2      	uxtb	r2, r2
 8004fae:	1c50      	adds	r0, r2, #1
 8004fb0:	b2c0      	uxtb	r0, r0
 8004fb2:	7258      	strb	r0, [r3, #9]
    path[0] = DiskNum + '0';
    path[1] = ':';
 8004fb4:	233a      	movs	r3, #58	; 0x3a
    path[0] = DiskNum + '0';
 8004fb6:	3230      	adds	r2, #48	; 0x30
    path[1] = ':';
 8004fb8:	704b      	strb	r3, [r1, #1]
    path[2] = '/';
 8004fba:	232f      	movs	r3, #47	; 0x2f
    path[0] = DiskNum + '0';
 8004fbc:	700a      	strb	r2, [r1, #0]
    path[2] = '/';
 8004fbe:	708b      	strb	r3, [r1, #2]
    path[3] = 0;
 8004fc0:	70cc      	strb	r4, [r1, #3]
 8004fc2:	4620      	mov	r0, r4
 8004fc4:	bd30      	pop	{r4, r5, pc}
  uint8_t ret = 1;
 8004fc6:	2001      	movs	r0, #1
    ret = 0;
  }

  return ret;
}
 8004fc8:	bd30      	pop	{r4, r5, pc}
 8004fca:	bf00      	nop
 8004fcc:	200006cc 	.word	0x200006cc

08004fd0 <FATFS_LinkDriver>:
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
  return FATFS_LinkDriverEx(drv, path, 0);
 8004fd0:	2200      	movs	r2, #0
 8004fd2:	f7ff bfdb 	b.w	8004f8c <FATFS_LinkDriverEx>
	...

08004fd8 <ILI9341_SetCursorPosition>:
void ILI9341_SendData(uint8_t data)
{
	*(volatile uint8_t *)(0x60040000) = data;
}
//3. Set cursor position
void ILI9341_SetCursorPosition(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2) {
 8004fd8:	b570      	push	{r4, r5, r6, lr}
	*(volatile uint8_t *)(0x60000000) = com;
 8004fda:	f04f 45c0 	mov.w	r5, #1610612736	; 0x60000000
 8004fde:	242a      	movs	r4, #42	; 0x2a
 8004fe0:	702c      	strb	r4, [r5, #0]
	*(volatile uint8_t *)(0x60040000) = data;
 8004fe2:	4c0b      	ldr	r4, [pc, #44]	; (8005010 <ILI9341_SetCursorPosition+0x38>)

  ILI9341_SendCommand (ILI9341_COLUMN_ADDR);
  ILI9341_SendData(x1>>8);
 8004fe4:	0a06      	lsrs	r6, r0, #8
  ILI9341_SendData(x1 & 0xFF);
 8004fe6:	b2c0      	uxtb	r0, r0
	*(volatile uint8_t *)(0x60040000) = data;
 8004fe8:	7026      	strb	r6, [r4, #0]
 8004fea:	7020      	strb	r0, [r4, #0]
  ILI9341_SendData(x2>>8);
 8004fec:	0a10      	lsrs	r0, r2, #8
  ILI9341_SendData(x2 & 0xFF);
 8004fee:	b2d2      	uxtb	r2, r2
	*(volatile uint8_t *)(0x60040000) = data;
 8004ff0:	7020      	strb	r0, [r4, #0]
 8004ff2:	7022      	strb	r2, [r4, #0]
	*(volatile uint8_t *)(0x60000000) = com;
 8004ff4:	222b      	movs	r2, #43	; 0x2b
 8004ff6:	702a      	strb	r2, [r5, #0]

  ILI9341_SendCommand (ILI9341_PAGE_ADDR);
  ILI9341_SendData(y1>>8);
 8004ff8:	0a0a      	lsrs	r2, r1, #8
	*(volatile uint8_t *)(0x60040000) = data;
 8004ffa:	7022      	strb	r2, [r4, #0]
  ILI9341_SendData(y1 & 0xFF);
 8004ffc:	b2c9      	uxtb	r1, r1
  ILI9341_SendData(y2>>8);
 8004ffe:	0a1a      	lsrs	r2, r3, #8
  ILI9341_SendData(y2 & 0xFF);
 8005000:	b2db      	uxtb	r3, r3
	*(volatile uint8_t *)(0x60040000) = data;
 8005002:	7021      	strb	r1, [r4, #0]
 8005004:	7022      	strb	r2, [r4, #0]
 8005006:	7023      	strb	r3, [r4, #0]
	*(volatile uint8_t *)(0x60000000) = com;
 8005008:	232c      	movs	r3, #44	; 0x2c
 800500a:	702b      	strb	r3, [r5, #0]
 800500c:	bd70      	pop	{r4, r5, r6, pc}
 800500e:	bf00      	nop
 8005010:	60040000 	.word	0x60040000

08005014 <ILI9341_Init>:
  ILI9341_SendCommand (ILI9341_GRAM);
}
//4. Initialise function
void ILI9341_Init(void)
 {
 8005014:	b538      	push	{r3, r4, r5, lr}
	*(volatile uint8_t *)(0x60000000) = com;
 8005016:	f04f 44c0 	mov.w	r4, #1610612736	; 0x60000000
 800501a:	2501      	movs	r5, #1
 800501c:	7025      	strb	r5, [r4, #0]
   ILI9341_SendCommand (ILI9341_RESET); // software reset comand
   HAL_Delay(100);
 800501e:	2064      	movs	r0, #100	; 0x64
 8005020:	f7fc f806 	bl	8001030 <HAL_Delay>
	*(volatile uint8_t *)(0x60000000) = com;
 8005024:	2328      	movs	r3, #40	; 0x28
 8005026:	7023      	strb	r3, [r4, #0]
 8005028:	23c0      	movs	r3, #192	; 0xc0
 800502a:	7023      	strb	r3, [r4, #0]
	*(volatile uint8_t *)(0x60040000) = data;
 800502c:	4b25      	ldr	r3, [pc, #148]	; (80050c4 <ILI9341_Init+0xb0>)
 800502e:	2226      	movs	r2, #38	; 0x26
 8005030:	701a      	strb	r2, [r3, #0]
	*(volatile uint8_t *)(0x60000000) = com;
 8005032:	22c1      	movs	r2, #193	; 0xc1
 8005034:	7022      	strb	r2, [r4, #0]
	*(volatile uint8_t *)(0x60040000) = data;
 8005036:	2111      	movs	r1, #17
	*(volatile uint8_t *)(0x60000000) = com;
 8005038:	22c5      	movs	r2, #197	; 0xc5
	*(volatile uint8_t *)(0x60040000) = data;
 800503a:	7019      	strb	r1, [r3, #0]
	*(volatile uint8_t *)(0x60000000) = com;
 800503c:	7022      	strb	r2, [r4, #0]
	*(volatile uint8_t *)(0x60040000) = data;
 800503e:	2235      	movs	r2, #53	; 0x35
 8005040:	701a      	strb	r2, [r3, #0]
 8005042:	223e      	movs	r2, #62	; 0x3e
 8005044:	701a      	strb	r2, [r3, #0]
	*(volatile uint8_t *)(0x60000000) = com;
 8005046:	22c7      	movs	r2, #199	; 0xc7
 8005048:	7022      	strb	r2, [r4, #0]
	*(volatile uint8_t *)(0x60040000) = data;
 800504a:	22be      	movs	r2, #190	; 0xbe
 800504c:	701a      	strb	r2, [r3, #0]
	*(volatile uint8_t *)(0x60000000) = com;
 800504e:	2236      	movs	r2, #54	; 0x36
 8005050:	7022      	strb	r2, [r4, #0]
	*(volatile uint8_t *)(0x60040000) = data;
 8005052:	2248      	movs	r2, #72	; 0x48
 8005054:	701a      	strb	r2, [r3, #0]
	*(volatile uint8_t *)(0x60000000) = com;
 8005056:	223a      	movs	r2, #58	; 0x3a
 8005058:	7022      	strb	r2, [r4, #0]
	*(volatile uint8_t *)(0x60040000) = data;
 800505a:	2255      	movs	r2, #85	; 0x55
 800505c:	701a      	strb	r2, [r3, #0]
	*(volatile uint8_t *)(0x60000000) = com;
 800505e:	22b1      	movs	r2, #177	; 0xb1
 8005060:	7022      	strb	r2, [r4, #0]
	*(volatile uint8_t *)(0x60040000) = data;
 8005062:	201f      	movs	r0, #31
 8005064:	2200      	movs	r2, #0
 8005066:	701a      	strb	r2, [r3, #0]
 8005068:	7018      	strb	r0, [r3, #0]
	*(volatile uint8_t *)(0x60000000) = com;
 800506a:	202a      	movs	r0, #42	; 0x2a
 800506c:	7020      	strb	r0, [r4, #0]
	*(volatile uint8_t *)(0x60040000) = data;
 800506e:	20ef      	movs	r0, #239	; 0xef
 8005070:	701a      	strb	r2, [r3, #0]
 8005072:	701a      	strb	r2, [r3, #0]
 8005074:	701a      	strb	r2, [r3, #0]
 8005076:	7018      	strb	r0, [r3, #0]
	*(volatile uint8_t *)(0x60000000) = com;
 8005078:	202b      	movs	r0, #43	; 0x2b
 800507a:	7020      	strb	r0, [r4, #0]
	*(volatile uint8_t *)(0x60040000) = data;
 800507c:	203f      	movs	r0, #63	; 0x3f
 800507e:	701a      	strb	r2, [r3, #0]
 8005080:	701a      	strb	r2, [r3, #0]
 8005082:	701d      	strb	r5, [r3, #0]
 8005084:	7018      	strb	r0, [r3, #0]
	*(volatile uint8_t *)(0x60000000) = com;
 8005086:	2034      	movs	r0, #52	; 0x34
 8005088:	7020      	strb	r0, [r4, #0]
 800508a:	20b7      	movs	r0, #183	; 0xb7
 800508c:	7020      	strb	r0, [r4, #0]
	*(volatile uint8_t *)(0x60040000) = data;
 800508e:	2007      	movs	r0, #7
 8005090:	7018      	strb	r0, [r3, #0]
	*(volatile uint8_t *)(0x60000000) = com;
 8005092:	20b6      	movs	r0, #182	; 0xb6
 8005094:	7020      	strb	r0, [r4, #0]
	*(volatile uint8_t *)(0x60040000) = data;
 8005096:	200a      	movs	r0, #10
 8005098:	7018      	strb	r0, [r3, #0]
 800509a:	2082      	movs	r0, #130	; 0x82
 800509c:	7018      	strb	r0, [r3, #0]
 800509e:	2027      	movs	r0, #39	; 0x27
 80050a0:	7018      	strb	r0, [r3, #0]
 80050a2:	701a      	strb	r2, [r3, #0]
   // Sets the number of lines to drive the LCD at an interval of 8 lines
   ILI9341_SendData   (0x27);
   ILI9341_SendData   (0x00); // clock divisor

   ILI9341_SendCommand (ILI9341_SLEEP_OUT); // sleep out
   HAL_Delay(100);
 80050a4:	2064      	movs	r0, #100	; 0x64
	*(volatile uint8_t *)(0x60000000) = com;
 80050a6:	7021      	strb	r1, [r4, #0]
   HAL_Delay(100);
 80050a8:	f7fb ffc2 	bl	8001030 <HAL_Delay>
	*(volatile uint8_t *)(0x60000000) = com;
 80050ac:	2329      	movs	r3, #41	; 0x29
 80050ae:	7023      	strb	r3, [r4, #0]
   ILI9341_SendCommand (ILI9341_DISPLAY_ON); // display on
   HAL_Delay(100);
 80050b0:	2064      	movs	r0, #100	; 0x64
 80050b2:	f7fb ffbd 	bl	8001030 <HAL_Delay>
	*(volatile uint8_t *)(0x60000000) = com;
 80050b6:	232c      	movs	r3, #44	; 0x2c
 80050b8:	7023      	strb	r3, [r4, #0]
   ILI9341_SendCommand (ILI9341_GRAM); // memory write
   HAL_Delay(5);
 80050ba:	2005      	movs	r0, #5
 }
 80050bc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   HAL_Delay(5);
 80050c0:	f7fb bfb6 	b.w	8001030 <HAL_Delay>
 80050c4:	60040000 	.word	0x60040000

080050c8 <ILI9341_DrawPixel>:

//5. Write data to a single pixel
void ILI9341_DrawPixel(uint16_t x, uint16_t y, uint16_t color) {
 80050c8:	b510      	push	{r4, lr}
  ILI9341_SetCursorPosition(x, y, x, y);
 80050ca:	460b      	mov	r3, r1
void ILI9341_DrawPixel(uint16_t x, uint16_t y, uint16_t color) {
 80050cc:	4614      	mov	r4, r2
  ILI9341_SetCursorPosition(x, y, x, y);
 80050ce:	4602      	mov	r2, r0
 80050d0:	f7ff ff82 	bl	8004fd8 <ILI9341_SetCursorPosition>
	*(volatile uint8_t *)(0x60040000) = data;
 80050d4:	4b02      	ldr	r3, [pc, #8]	; (80050e0 <ILI9341_DrawPixel+0x18>)
	ILI9341_SendData(color>>8);
 80050d6:	0a22      	lsrs	r2, r4, #8
	ILI9341_SendData(color&0xFF);
 80050d8:	b2e4      	uxtb	r4, r4
	*(volatile uint8_t *)(0x60040000) = data;
 80050da:	701a      	strb	r2, [r3, #0]
 80050dc:	701c      	strb	r4, [r3, #0]
 80050de:	bd10      	pop	{r4, pc}
 80050e0:	60040000 	.word	0x60040000

080050e4 <ILI9341_Fill>:
}
//6. Fill the entire screen with a background color
void ILI9341_Fill(uint16_t color) {
 80050e4:	b510      	push	{r4, lr}
	uint32_t n = ILI9341_PIXEL_COUNT;

	if(rotationNum==1 || rotationNum==3)
 80050e6:	4b0f      	ldr	r3, [pc, #60]	; (8005124 <ILI9341_Fill+0x40>)
 80050e8:	781b      	ldrb	r3, [r3, #0]
 80050ea:	f003 02fd 	and.w	r2, r3, #253	; 0xfd
 80050ee:	2a01      	cmp	r2, #1
void ILI9341_Fill(uint16_t color) {
 80050f0:	4604      	mov	r4, r0
	if(rotationNum==1 || rotationNum==3)
 80050f2:	d10f      	bne.n	8005114 <ILI9341_Fill+0x30>
	{
		ILI9341_SetCursorPosition(0, 0,   ILI9341_WIDTH -1, ILI9341_HEIGHT -1);
 80050f4:	f240 133f 	movw	r3, #319	; 0x13f
 80050f8:	22ef      	movs	r2, #239	; 0xef
	}
	else if(rotationNum==2 || rotationNum==4)
	{
		ILI9341_SetCursorPosition(0, 0, ILI9341_HEIGHT -1, ILI9341_WIDTH -1);
 80050fa:	2100      	movs	r1, #0
 80050fc:	4608      	mov	r0, r1
 80050fe:	f7ff ff6b 	bl	8004fd8 <ILI9341_SetCursorPosition>
	*(volatile uint8_t *)(0x60040000) = data;
 8005102:	4a09      	ldr	r2, [pc, #36]	; (8005128 <ILI9341_Fill+0x44>)
	}

	while (n) {
			n--;
       ILI9341_SendData(color>>8);
 8005104:	0a21      	lsrs	r1, r4, #8
 8005106:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
	while (n) {
 800510a:	3b01      	subs	r3, #1
	*(volatile uint8_t *)(0x60040000) = data;
 800510c:	7011      	strb	r1, [r2, #0]
 800510e:	7014      	strb	r4, [r2, #0]
	while (n) {
 8005110:	d1fb      	bne.n	800510a <ILI9341_Fill+0x26>
				ILI9341_SendData(color&0xff);
	}
}
 8005112:	bd10      	pop	{r4, pc}
	else if(rotationNum==2 || rotationNum==4)
 8005114:	2b02      	cmp	r3, #2
 8005116:	d001      	beq.n	800511c <ILI9341_Fill+0x38>
 8005118:	2b04      	cmp	r3, #4
 800511a:	d1f2      	bne.n	8005102 <ILI9341_Fill+0x1e>
		ILI9341_SetCursorPosition(0, 0, ILI9341_HEIGHT -1, ILI9341_WIDTH -1);
 800511c:	23ef      	movs	r3, #239	; 0xef
 800511e:	f240 123f 	movw	r2, #319	; 0x13f
 8005122:	e7ea      	b.n	80050fa <ILI9341_Fill+0x16>
 8005124:	20000008 	.word	0x20000008
 8005128:	60040000 	.word	0x60040000

0800512c <ILI9341_Fill_Rect>:
//7. Rectangle drawing functions
void ILI9341_Fill_Rect(unsigned int x0,unsigned int y0, unsigned int x1,unsigned int y1, uint16_t color) {
 800512c:	b570      	push	{r4, r5, r6, lr}
	uint32_t n = ((x1+1)-x0)*((y1+1)-y0);
 800512e:	1a5c      	subs	r4, r3, r1
 8005130:	1a16      	subs	r6, r2, r0
 8005132:	3401      	adds	r4, #1
 8005134:	fb06 4404 	mla	r4, r6, r4, r4
void ILI9341_Fill_Rect(unsigned int x0,unsigned int y0, unsigned int x1,unsigned int y1, uint16_t color) {
 8005138:	f8bd 5010 	ldrh.w	r5, [sp, #16]
 800513c:	f5b4 3f96 	cmp.w	r4, #76800	; 0x12c00
	if (n>ILI9341_PIXEL_COUNT) n=ILI9341_PIXEL_COUNT;
	ILI9341_SetCursorPosition(x0, y0, x1, y1);
 8005140:	b29b      	uxth	r3, r3
 8005142:	b292      	uxth	r2, r2
 8005144:	b289      	uxth	r1, r1
 8005146:	b280      	uxth	r0, r0
 8005148:	bf28      	it	cs
 800514a:	f44f 3496 	movcs.w	r4, #76800	; 0x12c00
 800514e:	f7ff ff43 	bl	8004fd8 <ILI9341_SetCursorPosition>
	*(volatile uint8_t *)(0x60040000) = data;
 8005152:	4b04      	ldr	r3, [pc, #16]	; (8005164 <ILI9341_Fill_Rect+0x38>)
	while (n) {
			n--;
      ILI9341_SendData(color>>8);
 8005154:	0a2a      	lsrs	r2, r5, #8
				ILI9341_SendData(color&0xff);
 8005156:	b2ed      	uxtb	r5, r5
	while (n) {
 8005158:	b904      	cbnz	r4, 800515c <ILI9341_Fill_Rect+0x30>
	}
}
 800515a:	bd70      	pop	{r4, r5, r6, pc}
	*(volatile uint8_t *)(0x60040000) = data;
 800515c:	701a      	strb	r2, [r3, #0]
			n--;
 800515e:	3c01      	subs	r4, #1
	*(volatile uint8_t *)(0x60040000) = data;
 8005160:	701d      	strb	r5, [r3, #0]
 8005162:	e7f9      	b.n	8005158 <ILI9341_Fill_Rect+0x2c>
 8005164:	60040000 	.word	0x60040000

08005168 <ILI9341_drawChar>:
	}
}

//11. Text printing functions
void ILI9341_drawChar(int16_t x, int16_t y, unsigned char c, uint16_t color, uint16_t bg, uint8_t size)
{
 8005168:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800516c:	b08d      	sub	sp, #52	; 0x34
//     (y >= ILI9341_HEIGHT)           || // Clip bottom
//     ((x + 6 * size - 1) < 0) || // Clip left
//     ((y + 8 * size - 1) < 0))   // Clip top
//    return;

  if(!_cp437 && (c >= 176)) c++; // Handle 'classic' charset behavior
 800516e:	2aaf      	cmp	r2, #175	; 0xaf
 8005170:	bf88      	it	hi
 8005172:	3201      	addhi	r2, #1
{
 8005174:	9304      	str	r3, [sp, #16]
 8005176:	f8bd 3058 	ldrh.w	r3, [sp, #88]	; 0x58
 800517a:	9305      	str	r3, [sp, #20]
  if(!_cp437 && (c >= 176)) c++; // Handle 'classic' charset behavior
 800517c:	bf88      	it	hi
 800517e:	b2d2      	uxtbhi	r2, r2
  for (int8_t i=0; i<6; i++ ) {
    uint8_t line;
    if (i == 5)
      line = 0x0;
    else
      line = pgm_read_byte(font1+(c*5)+i);
 8005180:	4b2b      	ldr	r3, [pc, #172]	; (8005230 <ILI9341_drawChar+0xc8>)
{
 8005182:	9103      	str	r1, [sp, #12]
      line = pgm_read_byte(font1+(c*5)+i);
 8005184:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8005188:	4413      	add	r3, r2
 800518a:	930b      	str	r3, [sp, #44]	; 0x2c
 800518c:	f8bd 300c 	ldrh.w	r3, [sp, #12]
{
 8005190:	9006      	str	r0, [sp, #24]
 8005192:	9309      	str	r3, [sp, #36]	; 0x24
 8005194:	3308      	adds	r3, #8
 8005196:	b29b      	uxth	r3, r3
 8005198:	f89d 605c 	ldrb.w	r6, [sp, #92]	; 0x5c
 800519c:	9f06      	ldr	r7, [sp, #24]
 800519e:	930a      	str	r3, [sp, #40]	; 0x28
      line = pgm_read_byte(font1+(c*5)+i);
 80051a0:	2500      	movs	r5, #0
    if (i == 5)
 80051a2:	2d05      	cmp	r5, #5
      line = pgm_read_byte(font1+(c*5)+i);
 80051a4:	bf18      	it	ne
 80051a6:	9b0b      	ldrne	r3, [sp, #44]	; 0x2c
 80051a8:	f8dd 900c 	ldr.w	r9, [sp, #12]
 80051ac:	bf18      	it	ne
 80051ae:	f813 a005 	ldrbne.w	sl, [r3, r5]
 80051b2:	9c09      	ldr	r4, [sp, #36]	; 0x24
        }
      } else if (bg != color) {
        if (size == 1) // default size
          ILI9341_DrawPixel(x+i, y+j, bg);
        else {  // big size
          ILI9341_Fill_Rect(x+i*size, y+j*size, size + x+i*size, size+1 + y+j*size, bg);
 80051b4:	f106 0301 	add.w	r3, r6, #1
 80051b8:	9307      	str	r3, [sp, #28]
          ILI9341_DrawPixel(x+i, y+j, bg);
 80051ba:	9b06      	ldr	r3, [sp, #24]
 80051bc:	442b      	add	r3, r5
 80051be:	b29b      	uxth	r3, r3
      line = 0x0;
 80051c0:	bf08      	it	eq
 80051c2:	f04f 0a00 	moveq.w	sl, #0
 80051c6:	eb07 0b06 	add.w	fp, r7, r6
 80051ca:	46c8      	mov	r8, r9
          ILI9341_DrawPixel(x+i, y+j, bg);
 80051cc:	9308      	str	r3, [sp, #32]
      if (line & 0x1) {
 80051ce:	f01a 0f01 	tst.w	sl, #1
 80051d2:	d020      	beq.n	8005216 <ILI9341_drawChar+0xae>
        if (size == 1) // default size
 80051d4:	2e01      	cmp	r6, #1
 80051d6:	d114      	bne.n	8005202 <ILI9341_drawChar+0x9a>
          ILI9341_DrawPixel(x+i, y+j, color);
 80051d8:	9a04      	ldr	r2, [sp, #16]
          ILI9341_DrawPixel(x+i, y+j, bg);
 80051da:	9808      	ldr	r0, [sp, #32]
 80051dc:	4621      	mov	r1, r4
 80051de:	f7ff ff73 	bl	80050c8 <ILI9341_DrawPixel>
 80051e2:	3401      	adds	r4, #1
    for (int8_t j = 0; j<8; j++) {
 80051e4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80051e6:	b2a4      	uxth	r4, r4
 80051e8:	429c      	cmp	r4, r3
        }
      }
      line >>= 1;
 80051ea:	ea4f 0a5a 	mov.w	sl, sl, lsr #1
 80051ee:	44b1      	add	r9, r6
 80051f0:	44b0      	add	r8, r6
    for (int8_t j = 0; j<8; j++) {
 80051f2:	d1ec      	bne.n	80051ce <ILI9341_drawChar+0x66>
 80051f4:	3501      	adds	r5, #1
  for (int8_t i=0; i<6; i++ ) {
 80051f6:	2d06      	cmp	r5, #6
 80051f8:	465f      	mov	r7, fp
 80051fa:	d1d2      	bne.n	80051a2 <ILI9341_drawChar+0x3a>
    }
  }
}
 80051fc:	b00d      	add	sp, #52	; 0x34
 80051fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
          ILI9341_Fill_Rect(x+(i*size), y+(j*size), size + x+(i*size), size+1 + y+(j*size), color);
 8005202:	9b04      	ldr	r3, [sp, #16]
 8005204:	9300      	str	r3, [sp, #0]
 8005206:	9b07      	ldr	r3, [sp, #28]
 8005208:	465a      	mov	r2, fp
 800520a:	444b      	add	r3, r9
 800520c:	4649      	mov	r1, r9
          ILI9341_Fill_Rect(x+i*size, y+j*size, size + x+i*size, size+1 + y+j*size, bg);
 800520e:	4638      	mov	r0, r7
 8005210:	f7ff ff8c 	bl	800512c <ILI9341_Fill_Rect>
 8005214:	e7e5      	b.n	80051e2 <ILI9341_drawChar+0x7a>
      } else if (bg != color) {
 8005216:	9b04      	ldr	r3, [sp, #16]
 8005218:	9a05      	ldr	r2, [sp, #20]
 800521a:	4293      	cmp	r3, r2
 800521c:	d0e1      	beq.n	80051e2 <ILI9341_drawChar+0x7a>
        if (size == 1) // default size
 800521e:	2e01      	cmp	r6, #1
 8005220:	d0db      	beq.n	80051da <ILI9341_drawChar+0x72>
          ILI9341_Fill_Rect(x+i*size, y+j*size, size + x+i*size, size+1 + y+j*size, bg);
 8005222:	9b05      	ldr	r3, [sp, #20]
 8005224:	9300      	str	r3, [sp, #0]
 8005226:	9b07      	ldr	r3, [sp, #28]
 8005228:	465a      	mov	r2, fp
 800522a:	4443      	add	r3, r8
 800522c:	4641      	mov	r1, r8
 800522e:	e7ee      	b.n	800520e <ILI9341_drawChar+0xa6>
 8005230:	0800d17f 	.word	0x0800d17f

08005234 <ILI9341_printText>:
void ILI9341_printText(char text[], int16_t x, int16_t y, uint16_t color, uint16_t bg, uint8_t size)
{
 8005234:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005238:	f89d 8034 	ldrb.w	r8, [sp, #52]	; 0x34
 800523c:	f8bd b030 	ldrh.w	fp, [sp, #48]	; 0x30
	int16_t offset;
	offset = size*6;
 8005240:	eb08 0748 	add.w	r7, r8, r8, lsl #1
{
 8005244:	4691      	mov	r9, r2
 8005246:	469a      	mov	sl, r3
	offset = size*6;
 8005248:	007f      	lsls	r7, r7, #1
 800524a:	1e46      	subs	r6, r0, #1
 800524c:	b28c      	uxth	r4, r1
 800524e:	f100 0527 	add.w	r5, r0, #39	; 0x27
	for(uint16_t i=0; i<40 && text[i] != NULL; i++)
 8005252:	f816 2f01 	ldrb.w	r2, [r6, #1]!
 8005256:	b162      	cbz	r2, 8005272 <ILI9341_printText+0x3e>
	{
		ILI9341_drawChar(x+(offset*i), y, text[i],color,bg,size);
 8005258:	b220      	sxth	r0, r4
 800525a:	f8cd 8004 	str.w	r8, [sp, #4]
 800525e:	f8cd b000 	str.w	fp, [sp]
 8005262:	4653      	mov	r3, sl
 8005264:	4649      	mov	r1, r9
 8005266:	f7ff ff7f 	bl	8005168 <ILI9341_drawChar>
 800526a:	443c      	add	r4, r7
	for(uint16_t i=0; i<40 && text[i] != NULL; i++)
 800526c:	42ae      	cmp	r6, r5
 800526e:	b2a4      	uxth	r4, r4
 8005270:	d1ef      	bne.n	8005252 <ILI9341_printText+0x1e>
	}
}
 8005272:	b003      	add	sp, #12
 8005274:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08005278 <ILI9341_setRotation>:
}

//13. Set screen rotation
void ILI9341_setRotation(uint8_t rotate)
{
	switch(rotate)
 8005278:	3801      	subs	r0, #1
{
 800527a:	b500      	push	{lr}
 800527c:	4911      	ldr	r1, [pc, #68]	; (80052c4 <ILI9341_setRotation+0x4c>)
 800527e:	4b12      	ldr	r3, [pc, #72]	; (80052c8 <ILI9341_setRotation+0x50>)
 8005280:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
	switch(rotate)
 8005284:	2803      	cmp	r0, #3
 8005286:	d817      	bhi.n	80052b8 <ILI9341_setRotation+0x40>
 8005288:	e8df f000 	tbb	[pc, r0]
 800528c:	100a0216 	.word	0x100a0216
			rotationNum = 1;
			ILI9341_SendCommand(ILI9341_MEMCONTROL);
			ILI9341_SendData(ILI9341_MADCTL_MY | ILI9341_MADCTL_BGR);
			break;
		case 2:
			rotationNum = 2;
 8005290:	2002      	movs	r0, #2
 8005292:	7008      	strb	r0, [r1, #0]
	*(volatile uint8_t *)(0x60000000) = com;
 8005294:	2136      	movs	r1, #54	; 0x36
 8005296:	7011      	strb	r1, [r2, #0]
	*(volatile uint8_t *)(0x60040000) = data;
 8005298:	2228      	movs	r2, #40	; 0x28
 800529a:	701a      	strb	r2, [r3, #0]
 800529c:	f85d fb04 	ldr.w	pc, [sp], #4
			ILI9341_SendCommand(ILI9341_MEMCONTROL);
			ILI9341_SendData(ILI9341_MADCTL_MV | ILI9341_MADCTL_BGR);
			break;
		case 3:
			rotationNum = 3;
 80052a0:	2003      	movs	r0, #3
 80052a2:	7008      	strb	r0, [r1, #0]
	*(volatile uint8_t *)(0x60000000) = com;
 80052a4:	2136      	movs	r1, #54	; 0x36
 80052a6:	7011      	strb	r1, [r2, #0]
	*(volatile uint8_t *)(0x60040000) = data;
 80052a8:	2248      	movs	r2, #72	; 0x48
 80052aa:	e7f6      	b.n	800529a <ILI9341_setRotation+0x22>
			ILI9341_SendCommand(ILI9341_MEMCONTROL);
			ILI9341_SendData(ILI9341_MADCTL_MX | ILI9341_MADCTL_BGR);
			break;
		case 4:
			rotationNum = 4;
 80052ac:	2004      	movs	r0, #4
 80052ae:	7008      	strb	r0, [r1, #0]
	*(volatile uint8_t *)(0x60000000) = com;
 80052b0:	2136      	movs	r1, #54	; 0x36
 80052b2:	7011      	strb	r1, [r2, #0]
	*(volatile uint8_t *)(0x60040000) = data;
 80052b4:	22e8      	movs	r2, #232	; 0xe8
 80052b6:	e7f0      	b.n	800529a <ILI9341_setRotation+0x22>
			ILI9341_SendCommand(ILI9341_MEMCONTROL);
			ILI9341_SendData(ILI9341_MADCTL_MX | ILI9341_MADCTL_MY | ILI9341_MADCTL_MV | ILI9341_MADCTL_BGR);
			break;
		default:
			rotationNum = 1;
 80052b8:	2001      	movs	r0, #1
 80052ba:	7008      	strb	r0, [r1, #0]
	*(volatile uint8_t *)(0x60000000) = com;
 80052bc:	2136      	movs	r1, #54	; 0x36
 80052be:	7011      	strb	r1, [r2, #0]
	*(volatile uint8_t *)(0x60040000) = data;
 80052c0:	2288      	movs	r2, #136	; 0x88
 80052c2:	e7ea      	b.n	800529a <ILI9341_setRotation+0x22>
 80052c4:	20000008 	.word	0x20000008
 80052c8:	60040000 	.word	0x60040000

080052cc <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80052cc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  ADC_ChannelConfTypeDef sConfig;

    /**Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
    */
  hadc1.Instance = ADC1;
 80052ce:	481a      	ldr	r0, [pc, #104]	; (8005338 <MX_ADC1_Init+0x6c>)
 80052d0:	4b1a      	ldr	r3, [pc, #104]	; (800533c <MX_ADC1_Init+0x70>)
 80052d2:	6003      	str	r3, [r0, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80052d4:	2300      	movs	r3, #0
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
  hadc1.Init.ScanConvMode = ENABLE;
 80052d6:	2401      	movs	r4, #1
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80052d8:	6043      	str	r3, [r0, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80052da:	6083      	str	r3, [r0, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80052dc:	6203      	str	r3, [r0, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80052de:	62c3      	str	r3, [r0, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80052e0:	4a17      	ldr	r2, [pc, #92]	; (8005340 <MX_ADC1_Init+0x74>)
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80052e2:	60c3      	str	r3, [r0, #12]
  hadc1.Init.NbrOfConversion = 2;
 80052e4:	2302      	movs	r3, #2
  hadc1.Init.ScanConvMode = ENABLE;
 80052e6:	6104      	str	r4, [r0, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80052e8:	6184      	str	r4, [r0, #24]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80052ea:	6282      	str	r2, [r0, #40]	; 0x28
  hadc1.Init.NbrOfConversion = 2;
 80052ec:	61c3      	str	r3, [r0, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80052ee:	6304      	str	r4, [r0, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80052f0:	6144      	str	r4, [r0, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80052f2:	f7fb feb1 	bl	8001058 <HAL_ADC_Init>
 80052f6:	b118      	cbz	r0, 8005300 <MX_ADC1_Init+0x34>
  {
    _Error_Handler(__FILE__, __LINE__);
 80052f8:	2154      	movs	r1, #84	; 0x54
 80052fa:	4812      	ldr	r0, [pc, #72]	; (8005344 <MX_ADC1_Init+0x78>)
 80052fc:	f002 f948 	bl	8007590 <_Error_Handler>

    /**Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
    */
  sConfig.Channel = ADC_CHANNEL_1;
  sConfig.Rank = 1;
  sConfig.SamplingTime = ADC_SAMPLETIME_112CYCLES;
 8005300:	2305      	movs	r3, #5
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8005302:	4669      	mov	r1, sp
 8005304:	480c      	ldr	r0, [pc, #48]	; (8005338 <MX_ADC1_Init+0x6c>)
  sConfig.Channel = ADC_CHANNEL_1;
 8005306:	9400      	str	r4, [sp, #0]
  sConfig.Rank = 1;
 8005308:	9401      	str	r4, [sp, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_112CYCLES;
 800530a:	9302      	str	r3, [sp, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800530c:	f7fc f80a 	bl	8001324 <HAL_ADC_ConfigChannel>
 8005310:	b118      	cbz	r0, 800531a <MX_ADC1_Init+0x4e>
  {
    _Error_Handler(__FILE__, __LINE__);
 8005312:	215e      	movs	r1, #94	; 0x5e
 8005314:	480b      	ldr	r0, [pc, #44]	; (8005344 <MX_ADC1_Init+0x78>)
 8005316:	f002 f93b 	bl	8007590 <_Error_Handler>
  }

    /**Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
    */
  sConfig.Channel = ADC_CHANNEL_0;
  sConfig.Rank = 2;
 800531a:	2200      	movs	r2, #0
 800531c:	2302      	movs	r3, #2
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800531e:	4669      	mov	r1, sp
 8005320:	4805      	ldr	r0, [pc, #20]	; (8005338 <MX_ADC1_Init+0x6c>)
  sConfig.Rank = 2;
 8005322:	e88d 000c 	stmia.w	sp, {r2, r3}
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8005326:	f7fb fffd 	bl	8001324 <HAL_ADC_ConfigChannel>
 800532a:	b118      	cbz	r0, 8005334 <MX_ADC1_Init+0x68>
  {
    _Error_Handler(__FILE__, __LINE__);
 800532c:	2167      	movs	r1, #103	; 0x67
 800532e:	4805      	ldr	r0, [pc, #20]	; (8005344 <MX_ADC1_Init+0x78>)
 8005330:	f002 f92e 	bl	8007590 <_Error_Handler>
  }

}
 8005334:	b004      	add	sp, #16
 8005336:	bd10      	pop	{r4, pc}
 8005338:	20006788 	.word	0x20006788
 800533c:	40012000 	.word	0x40012000
 8005340:	0f000001 	.word	0x0f000001
 8005344:	0800d67f 	.word	0x0800d67f

08005348 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8005348:	b570      	push	{r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(adcHandle->Instance==ADC1)
 800534a:	6802      	ldr	r2, [r0, #0]
 800534c:	4b1c      	ldr	r3, [pc, #112]	; (80053c0 <HAL_ADC_MspInit+0x78>)
 800534e:	429a      	cmp	r2, r3
{
 8005350:	b086      	sub	sp, #24
 8005352:	4606      	mov	r6, r0
  if(adcHandle->Instance==ADC1)
 8005354:	d132      	bne.n	80053bc <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8005356:	2500      	movs	r5, #0
 8005358:	f503 338c 	add.w	r3, r3, #71680	; 0x11800
 800535c:	9500      	str	r5, [sp, #0]
 800535e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    PA1     ------> ADC1_IN1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005360:	4818      	ldr	r0, [pc, #96]	; (80053c4 <HAL_ADC_MspInit+0x7c>)

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8005362:	4c19      	ldr	r4, [pc, #100]	; (80053c8 <HAL_ADC_MspInit+0x80>)
    __HAL_RCC_ADC1_CLK_ENABLE();
 8005364:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005368:	645a      	str	r2, [r3, #68]	; 0x44
 800536a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800536c:	9503      	str	r5, [sp, #12]
    __HAL_RCC_ADC1_CLK_ENABLE();
 800536e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005372:	9300      	str	r3, [sp, #0]
 8005374:	9b00      	ldr	r3, [sp, #0]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005376:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8005378:	2303      	movs	r3, #3
 800537a:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800537c:	9302      	str	r3, [sp, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800537e:	f7fc fbdb 	bl	8001b38 <HAL_GPIO_Init>
    hdma_adc1.Instance = DMA2_Stream0;
 8005382:	4b12      	ldr	r3, [pc, #72]	; (80053cc <HAL_ADC_MspInit+0x84>)
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005384:	60a5      	str	r5, [r4, #8]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8005386:	e884 0028 	stmia.w	r4, {r3, r5}
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800538a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800538e:	6123      	str	r3, [r4, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8005390:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005394:	6163      	str	r3, [r4, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8005396:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800539a:	61a3      	str	r3, [r4, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800539c:	4620      	mov	r0, r4
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800539e:	f44f 7380 	mov.w	r3, #256	; 0x100
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80053a2:	60e5      	str	r5, [r4, #12]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80053a4:	61e3      	str	r3, [r4, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80053a6:	6225      	str	r5, [r4, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80053a8:	6265      	str	r5, [r4, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80053aa:	f7fc f9f9 	bl	80017a0 <HAL_DMA_Init>
 80053ae:	b118      	cbz	r0, 80053b8 <HAL_ADC_MspInit+0x70>
    {
      _Error_Handler(__FILE__, __LINE__);
 80053b0:	218f      	movs	r1, #143	; 0x8f
 80053b2:	4807      	ldr	r0, [pc, #28]	; (80053d0 <HAL_ADC_MspInit+0x88>)
 80053b4:	f002 f8ec 	bl	8007590 <_Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 80053b8:	63b4      	str	r4, [r6, #56]	; 0x38
 80053ba:	63a6      	str	r6, [r4, #56]	; 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80053bc:	b006      	add	sp, #24
 80053be:	bd70      	pop	{r4, r5, r6, pc}
 80053c0:	40012000 	.word	0x40012000
 80053c4:	40020000 	.word	0x40020000
 80053c8:	200067d0 	.word	0x200067d0
 80053cc:	40026410 	.word	0x40026410
 80053d0:	0800d67f 	.word	0x0800d67f

080053d4 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
uint8_t BSP_SD_Init(void)
{
 80053d4:	b507      	push	{r0, r1, r2, lr}
 * @param  None
 * @retval Returns if SD is detected or not
 */
uint8_t BSP_SD_IsDetected(void)
{
  __IO uint8_t status = SD_PRESENT;
 80053d6:	2001      	movs	r0, #1
 80053d8:	f88d 0007 	strb.w	r0, [sp, #7]

  /* USER CODE BEGIN 1 */
  /* user code can be inserted here */
  /* USER CODE END 1 */    	

  return status;
 80053dc:	f89d 3007 	ldrb.w	r3, [sp, #7]
  if (BSP_SD_IsDetected() != SD_PRESENT)
 80053e0:	4283      	cmp	r3, r0
 80053e2:	d10b      	bne.n	80053fc <BSP_SD_Init+0x28>
  sd_state = HAL_SD_Init(&hsd);
 80053e4:	4807      	ldr	r0, [pc, #28]	; (8005404 <BSP_SD_Init+0x30>)
 80053e6:	f7fd fce1 	bl	8002dac <HAL_SD_Init>
  if (sd_state == MSD_OK)
 80053ea:	b938      	cbnz	r0, 80053fc <BSP_SD_Init+0x28>
    if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 80053ec:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80053f0:	4804      	ldr	r0, [pc, #16]	; (8005404 <BSP_SD_Init+0x30>)
 80053f2:	f7fd fd07 	bl	8002e04 <HAL_SD_ConfigWideBusOperation>
    return MSD_ERROR;
 80053f6:	3000      	adds	r0, #0
 80053f8:	bf18      	it	ne
 80053fa:	2001      	movne	r0, #1
}
 80053fc:	b003      	add	sp, #12
 80053fe:	f85d fb04 	ldr.w	pc, [sp], #4
 8005402:	bf00      	nop
 8005404:	2000eff8 	.word	0x2000eff8

08005408 <BSP_SD_ReadBlocks>:
{
 8005408:	b507      	push	{r0, r1, r2, lr}
  if (HAL_SD_ReadBlocks(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 800540a:	9300      	str	r3, [sp, #0]
 800540c:	4613      	mov	r3, r2
 800540e:	460a      	mov	r2, r1
 8005410:	4601      	mov	r1, r0
 8005412:	4804      	ldr	r0, [pc, #16]	; (8005424 <BSP_SD_ReadBlocks+0x1c>)
 8005414:	f7fd f961 	bl	80026da <HAL_SD_ReadBlocks>
}
 8005418:	3000      	adds	r0, #0
 800541a:	bf18      	it	ne
 800541c:	2001      	movne	r0, #1
 800541e:	b003      	add	sp, #12
 8005420:	f85d fb04 	ldr.w	pc, [sp], #4
 8005424:	2000eff8 	.word	0x2000eff8

08005428 <BSP_SD_WriteBlocks>:
{
 8005428:	b507      	push	{r0, r1, r2, lr}
  if (HAL_SD_WriteBlocks(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK) 
 800542a:	9300      	str	r3, [sp, #0]
 800542c:	4613      	mov	r3, r2
 800542e:	460a      	mov	r2, r1
 8005430:	4601      	mov	r1, r0
 8005432:	4804      	ldr	r0, [pc, #16]	; (8005444 <BSP_SD_WriteBlocks+0x1c>)
 8005434:	f7fd fa30 	bl	8002898 <HAL_SD_WriteBlocks>
}
 8005438:	3000      	adds	r0, #0
 800543a:	bf18      	it	ne
 800543c:	2001      	movne	r0, #1
 800543e:	b003      	add	sp, #12
 8005440:	f85d fb04 	ldr.w	pc, [sp], #4
 8005444:	2000eff8 	.word	0x2000eff8

08005448 <BSP_SD_GetCardState>:
{
 8005448:	b508      	push	{r3, lr}
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800544a:	4803      	ldr	r0, [pc, #12]	; (8005458 <BSP_SD_GetCardState+0x10>)
 800544c:	f7fd fd5e 	bl	8002f0c <HAL_SD_GetCardState>
}
 8005450:	3804      	subs	r0, #4
 8005452:	bf18      	it	ne
 8005454:	2001      	movne	r0, #1
 8005456:	bd08      	pop	{r3, pc}
 8005458:	2000eff8 	.word	0x2000eff8

0800545c <BSP_SD_GetCardInfo>:
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 800545c:	4601      	mov	r1, r0
 800545e:	4801      	ldr	r0, [pc, #4]	; (8005464 <BSP_SD_GetCardInfo+0x8>)
 8005460:	f7fd bcbe 	b.w	8002de0 <HAL_SD_GetCardInfo>
 8005464:	2000eff8 	.word	0x2000eff8

08005468 <BSP_SD_AbortCallback>:
 8005468:	4770      	bx	lr

0800546a <HAL_SD_AbortCallback>:
{
 800546a:	b508      	push	{r3, lr}
  BSP_SD_AbortCallback();
 800546c:	f7ff fffc 	bl	8005468 <BSP_SD_AbortCallback>
 8005470:	bd08      	pop	{r3, pc}

08005472 <BSP_SD_WriteCpltCallback>:
 8005472:	4770      	bx	lr

08005474 <HAL_SD_TxCpltCallback>:
{
 8005474:	b508      	push	{r3, lr}
  BSP_SD_WriteCpltCallback();
 8005476:	f7ff fffc 	bl	8005472 <BSP_SD_WriteCpltCallback>
 800547a:	bd08      	pop	{r3, pc}

0800547c <BSP_SD_ReadCpltCallback>:
{
 800547c:	4770      	bx	lr

0800547e <HAL_SD_RxCpltCallback>:
{
 800547e:	b508      	push	{r3, lr}
  BSP_SD_ReadCpltCallback();
 8005480:	f7ff fffc 	bl	800547c <BSP_SD_ReadCpltCallback>
 8005484:	bd08      	pop	{r3, pc}
	...

08005488 <MX_DAC_Init>:
DAC_HandleTypeDef hdac;
DMA_HandleTypeDef hdma_dac1;

/* DAC init function */
void MX_DAC_Init(void)
{
 8005488:	b507      	push	{r0, r1, r2, lr}
  DAC_ChannelConfTypeDef sConfig;

    /**DAC Initialization 
    */
  hdac.Instance = DAC;
 800548a:	480d      	ldr	r0, [pc, #52]	; (80054c0 <MX_DAC_Init+0x38>)
 800548c:	4b0d      	ldr	r3, [pc, #52]	; (80054c4 <MX_DAC_Init+0x3c>)
 800548e:	6003      	str	r3, [r0, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8005490:	f7fc f857 	bl	8001542 <HAL_DAC_Init>
 8005494:	b118      	cbz	r0, 800549e <MX_DAC_Init+0x16>
  {
    _Error_Handler(__FILE__, __LINE__);
 8005496:	2149      	movs	r1, #73	; 0x49
 8005498:	480b      	ldr	r0, [pc, #44]	; (80054c8 <MX_DAC_Init+0x40>)
 800549a:	f002 f879 	bl	8007590 <_Error_Handler>
  }

    /**DAC channel OUT1 config 
    */
  sConfig.DAC_Trigger = DAC_TRIGGER_T8_TRGO;
 800549e:	230c      	movs	r3, #12
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80054a0:	2200      	movs	r2, #0
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80054a2:	4669      	mov	r1, sp
 80054a4:	4806      	ldr	r0, [pc, #24]	; (80054c0 <MX_DAC_Init+0x38>)
  sConfig.DAC_Trigger = DAC_TRIGGER_T8_TRGO;
 80054a6:	9300      	str	r3, [sp, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80054a8:	9201      	str	r2, [sp, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80054aa:	f7fc f926 	bl	80016fa <HAL_DAC_ConfigChannel>
 80054ae:	b118      	cbz	r0, 80054b8 <MX_DAC_Init+0x30>
  {
    _Error_Handler(__FILE__, __LINE__);
 80054b0:	2152      	movs	r1, #82	; 0x52
 80054b2:	4805      	ldr	r0, [pc, #20]	; (80054c8 <MX_DAC_Init+0x40>)
 80054b4:	f002 f86c 	bl	8007590 <_Error_Handler>
  }

}
 80054b8:	b003      	add	sp, #12
 80054ba:	f85d fb04 	ldr.w	pc, [sp], #4
 80054be:	bf00      	nop
 80054c0:	20006890 	.word	0x20006890
 80054c4:	40007400 	.word	0x40007400
 80054c8:	0800d68c 	.word	0x0800d68c

080054cc <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 80054cc:	b570      	push	{r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(dacHandle->Instance==DAC)
 80054ce:	6802      	ldr	r2, [r0, #0]
 80054d0:	4b22      	ldr	r3, [pc, #136]	; (800555c <HAL_DAC_MspInit+0x90>)
 80054d2:	429a      	cmp	r2, r3
{
 80054d4:	b086      	sub	sp, #24
 80054d6:	4606      	mov	r6, r0
  if(dacHandle->Instance==DAC)
 80054d8:	d13d      	bne.n	8005556 <HAL_DAC_MspInit+0x8a>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* DAC clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 80054da:	2500      	movs	r5, #0
 80054dc:	f503 33e2 	add.w	r3, r3, #115712	; 0x1c400
 80054e0:	9500      	str	r5, [sp, #0]
 80054e2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    PA4     ------> DAC_OUT1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80054e4:	481e      	ldr	r0, [pc, #120]	; (8005560 <HAL_DAC_MspInit+0x94>)

    /* DAC DMA Init */
    /* DAC1 Init */
    hdma_dac1.Instance = DMA1_Stream5;
 80054e6:	4c1f      	ldr	r4, [pc, #124]	; (8005564 <HAL_DAC_MspInit+0x98>)
    __HAL_RCC_DAC_CLK_ENABLE();
 80054e8:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 80054ec:	641a      	str	r2, [r3, #64]	; 0x40
 80054ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80054f0:	9503      	str	r5, [sp, #12]
    __HAL_RCC_DAC_CLK_ENABLE();
 80054f2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80054f6:	9300      	str	r3, [sp, #0]
 80054f8:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80054fa:	2310      	movs	r3, #16
 80054fc:	9301      	str	r3, [sp, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80054fe:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005500:	2303      	movs	r3, #3
 8005502:	9302      	str	r3, [sp, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005504:	f7fc fb18 	bl	8001b38 <HAL_GPIO_Init>
    hdma_dac1.Init.Channel = DMA_CHANNEL_7;
    hdma_dac1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8005508:	4917      	ldr	r1, [pc, #92]	; (8005568 <HAL_DAC_MspInit+0x9c>)
    hdma_dac1.Init.PeriphInc = DMA_PINC_DISABLE;
 800550a:	60e5      	str	r5, [r4, #12]
    hdma_dac1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800550c:	2340      	movs	r3, #64	; 0x40
 800550e:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 8005512:	e884 000e 	stmia.w	r4, {r1, r2, r3}
    hdma_dac1.Init.MemInc = DMA_MINC_ENABLE;
 8005516:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800551a:	6123      	str	r3, [r4, #16]
    hdma_dac1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800551c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005520:	6163      	str	r3, [r4, #20]
    hdma_dac1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8005522:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005526:	61a3      	str	r3, [r4, #24]
    hdma_dac1.Init.Mode = DMA_CIRCULAR;
    hdma_dac1.Init.Priority = DMA_PRIORITY_LOW;
    hdma_dac1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
    if (HAL_DMA_Init(&hdma_dac1) != HAL_OK)
 8005528:	4620      	mov	r0, r4
    hdma_dac1.Init.Mode = DMA_CIRCULAR;
 800552a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800552e:	61e3      	str	r3, [r4, #28]
    hdma_dac1.Init.Priority = DMA_PRIORITY_LOW;
 8005530:	6225      	str	r5, [r4, #32]
    hdma_dac1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8005532:	6265      	str	r5, [r4, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_dac1) != HAL_OK)
 8005534:	f7fc f934 	bl	80017a0 <HAL_DMA_Init>
 8005538:	b118      	cbz	r0, 8005542 <HAL_DAC_MspInit+0x76>
    {
      _Error_Handler(__FILE__, __LINE__);
 800553a:	2179      	movs	r1, #121	; 0x79
 800553c:	480b      	ldr	r0, [pc, #44]	; (800556c <HAL_DAC_MspInit+0xa0>)
 800553e:	f002 f827 	bl	8007590 <_Error_Handler>
    }

    __HAL_LINKDMA(dacHandle,DMA_Handle1,hdma_dac1);

    /* DAC interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8005542:	2200      	movs	r2, #0
    __HAL_LINKDMA(dacHandle,DMA_Handle1,hdma_dac1);
 8005544:	60b4      	str	r4, [r6, #8]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8005546:	2036      	movs	r0, #54	; 0x36
 8005548:	4611      	mov	r1, r2
    __HAL_LINKDMA(dacHandle,DMA_Handle1,hdma_dac1);
 800554a:	63a6      	str	r6, [r4, #56]	; 0x38
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 800554c:	f7fb ff92 	bl	8001474 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8005550:	2036      	movs	r0, #54	; 0x36
 8005552:	f7fb ffc3 	bl	80014dc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }
}
 8005556:	b006      	add	sp, #24
 8005558:	bd70      	pop	{r4, r5, r6, pc}
 800555a:	bf00      	nop
 800555c:	40007400 	.word	0x40007400
 8005560:	40020000 	.word	0x40020000
 8005564:	20006830 	.word	0x20006830
 8005568:	40026088 	.word	0x40026088
 800556c:	0800d68c 	.word	0x0800d68c

08005570 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
 8005570:	b513      	push	{r0, r1, r4, lr}
  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8005572:	4b1c      	ldr	r3, [pc, #112]	; (80055e4 <MX_DMA_Init+0x74>)
 8005574:	2400      	movs	r4, #0
 8005576:	9400      	str	r4, [sp, #0]
 8005578:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800557a:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 800557e:	631a      	str	r2, [r3, #48]	; 0x30
 8005580:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005582:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8005586:	9200      	str	r2, [sp, #0]
 8005588:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_DMA2_CLK_ENABLE();
 800558a:	9401      	str	r4, [sp, #4]
 800558c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800558e:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8005592:	631a      	str	r2, [r3, #48]	; 0x30
 8005594:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005596:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 800559a:	4622      	mov	r2, r4
 800559c:	4621      	mov	r1, r4
  __HAL_RCC_DMA2_CLK_ENABLE();
 800559e:	9301      	str	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 80055a0:	2010      	movs	r0, #16
  __HAL_RCC_DMA2_CLK_ENABLE();
 80055a2:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 80055a4:	f7fb ff66 	bl	8001474 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 80055a8:	2010      	movs	r0, #16
 80055aa:	f7fb ff97 	bl	80014dc <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80055ae:	4622      	mov	r2, r4
 80055b0:	4621      	mov	r1, r4
 80055b2:	2038      	movs	r0, #56	; 0x38
 80055b4:	f7fb ff5e 	bl	8001474 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80055b8:	2038      	movs	r0, #56	; 0x38
 80055ba:	f7fb ff8f 	bl	80014dc <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 80055be:	4622      	mov	r2, r4
 80055c0:	4621      	mov	r1, r4
 80055c2:	203b      	movs	r0, #59	; 0x3b
 80055c4:	f7fb ff56 	bl	8001474 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 80055c8:	203b      	movs	r0, #59	; 0x3b
 80055ca:	f7fb ff87 	bl	80014dc <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 80055ce:	4622      	mov	r2, r4
 80055d0:	4621      	mov	r1, r4
 80055d2:	2045      	movs	r0, #69	; 0x45
 80055d4:	f7fb ff4e 	bl	8001474 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 80055d8:	2045      	movs	r0, #69	; 0x45
 80055da:	f7fb ff7f 	bl	80014dc <HAL_NVIC_EnableIRQ>

}
 80055de:	b002      	add	sp, #8
 80055e0:	bd10      	pop	{r4, pc}
 80055e2:	bf00      	nop
 80055e4:	40023800 	.word	0x40023800

080055e8 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */    

void MX_FATFS_Init(void) 
{
 80055e8:	b508      	push	{r3, lr}
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 80055ea:	4903      	ldr	r1, [pc, #12]	; (80055f8 <MX_FATFS_Init+0x10>)
 80055ec:	4803      	ldr	r0, [pc, #12]	; (80055fc <MX_FATFS_Init+0x14>)
 80055ee:	f7ff fcef 	bl	8004fd0 <FATFS_LinkDriver>
 80055f2:	4b03      	ldr	r3, [pc, #12]	; (8005600 <MX_FATFS_Init+0x18>)
 80055f4:	7018      	strb	r0, [r3, #0]
 80055f6:	bd08      	pop	{r3, pc}
 80055f8:	200068a5 	.word	0x200068a5
 80055fc:	0800d7e8 	.word	0x0800d7e8
 8005600:	200068a4 	.word	0x200068a4

08005604 <get_fattime>:
DWORD get_fattime(void)
{
  /* USER CODE BEGIN get_fattime */
  return 0;
  /* USER CODE END get_fattime */  
}
 8005604:	2000      	movs	r0, #0
 8005606:	4770      	bx	lr

08005608 <MX_FSMC_Init>:

SRAM_HandleTypeDef hsram1;

/* FSMC initialization function */
void MX_FSMC_Init(void)
{
 8005608:	b500      	push	{lr}
  FSMC_NORSRAM_TimingTypeDef Timing;

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 800560a:	4817      	ldr	r0, [pc, #92]	; (8005668 <MX_FSMC_Init+0x60>)
 800560c:	f04f 4320 	mov.w	r3, #2684354560	; 0xa0000000
 8005610:	6003      	str	r3, [r0, #0]
  hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 8005612:	f503 7382 	add.w	r3, r3, #260	; 0x104
{
 8005616:	b089      	sub	sp, #36	; 0x24
  hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 8005618:	6043      	str	r3, [r0, #4]
  hsram1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_8;
  hsram1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
  hsram1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
  hsram1.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
  hsram1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
  hsram1.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 800561a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800561e:	6283      	str	r3, [r0, #40]	; 0x28
  hsram1.Init.ExtendedMode = FSMC_EXTENDED_MODE_DISABLE;
  hsram1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
  hsram1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
  hsram1.Init.PageSize = FSMC_PAGE_SIZE_NONE;
  /* Timing */
  Timing.AddressSetupTime = 6;
 8005620:	2306      	movs	r3, #6
  Timing.AddressHoldTime = 15;
 8005622:	210f      	movs	r1, #15
  Timing.AddressSetupTime = 6;
 8005624:	9301      	str	r3, [sp, #4]
  Timing.DataSetupTime = 6;
 8005626:	9303      	str	r3, [sp, #12]
  Timing.BusTurnAroundDuration = 0;
  Timing.CLKDivision = 16;
 8005628:	2310      	movs	r3, #16
  hsram1.Init.NSBank = FSMC_NORSRAM_BANK1;
 800562a:	2200      	movs	r2, #0
  Timing.AddressHoldTime = 15;
 800562c:	9102      	str	r1, [sp, #8]
  Timing.CLKDivision = 16;
 800562e:	9305      	str	r3, [sp, #20]
  Timing.DataLatency = 17;
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram1, &Timing, NULL) != HAL_OK)
 8005630:	a901      	add	r1, sp, #4
  Timing.DataLatency = 17;
 8005632:	2311      	movs	r3, #17
  hsram1.Init.NSBank = FSMC_NORSRAM_BANK1;
 8005634:	6082      	str	r2, [r0, #8]
  hsram1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 8005636:	60c2      	str	r2, [r0, #12]
  hsram1.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 8005638:	6102      	str	r2, [r0, #16]
  hsram1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_8;
 800563a:	6142      	str	r2, [r0, #20]
  hsram1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 800563c:	6182      	str	r2, [r0, #24]
  hsram1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 800563e:	61c2      	str	r2, [r0, #28]
  hsram1.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 8005640:	6202      	str	r2, [r0, #32]
  hsram1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 8005642:	6242      	str	r2, [r0, #36]	; 0x24
  hsram1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 8005644:	62c2      	str	r2, [r0, #44]	; 0x2c
  hsram1.Init.ExtendedMode = FSMC_EXTENDED_MODE_DISABLE;
 8005646:	6302      	str	r2, [r0, #48]	; 0x30
  hsram1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 8005648:	6342      	str	r2, [r0, #52]	; 0x34
  hsram1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 800564a:	6382      	str	r2, [r0, #56]	; 0x38
  hsram1.Init.PageSize = FSMC_PAGE_SIZE_NONE;
 800564c:	6442      	str	r2, [r0, #68]	; 0x44
  Timing.BusTurnAroundDuration = 0;
 800564e:	9204      	str	r2, [sp, #16]
  Timing.DataLatency = 17;
 8005650:	9306      	str	r3, [sp, #24]
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 8005652:	9207      	str	r2, [sp, #28]
  if (HAL_SRAM_Init(&hsram1, &Timing, NULL) != HAL_OK)
 8005654:	f7fd fd92 	bl	800317c <HAL_SRAM_Init>
 8005658:	b118      	cbz	r0, 8005662 <MX_FSMC_Init+0x5a>
  {
    _Error_Handler(__FILE__, __LINE__);
 800565a:	2160      	movs	r1, #96	; 0x60
 800565c:	4803      	ldr	r0, [pc, #12]	; (800566c <MX_FSMC_Init+0x64>)
 800565e:	f001 ff97 	bl	8007590 <_Error_Handler>
  }

}
 8005662:	b009      	add	sp, #36	; 0x24
 8005664:	f85d fb04 	ldr.w	pc, [sp], #4
 8005668:	20006d0c 	.word	0x20006d0c
 800566c:	0800d699 	.word	0x0800d699

08005670 <HAL_SRAM_MspInit>:
  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* sramHandle){
 8005670:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (FSMC_Initialized) {
 8005672:	4b16      	ldr	r3, [pc, #88]	; (80056cc <HAL_SRAM_MspInit+0x5c>)
 8005674:	681c      	ldr	r4, [r3, #0]
void HAL_SRAM_MspInit(SRAM_HandleTypeDef* sramHandle){
 8005676:	b087      	sub	sp, #28
  if (FSMC_Initialized) {
 8005678:	bb2c      	cbnz	r4, 80056c6 <HAL_SRAM_MspInit+0x56>
  FSMC_Initialized = 1;
 800567a:	2201      	movs	r2, #1
 800567c:	601a      	str	r2, [r3, #0]
  __HAL_RCC_FSMC_CLK_ENABLE();
 800567e:	4b14      	ldr	r3, [pc, #80]	; (80056d0 <HAL_SRAM_MspInit+0x60>)
 8005680:	9400      	str	r4, [sp, #0]
 8005682:	6b9a      	ldr	r2, [r3, #56]	; 0x38
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8005684:	4813      	ldr	r0, [pc, #76]	; (80056d4 <HAL_SRAM_MspInit+0x64>)
  __HAL_RCC_FSMC_CLK_ENABLE();
 8005686:	f042 0201 	orr.w	r2, r2, #1
 800568a:	639a      	str	r2, [r3, #56]	; 0x38
 800568c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800568e:	9403      	str	r4, [sp, #12]
  __HAL_RCC_FSMC_CLK_ENABLE();
 8005690:	f003 0301 	and.w	r3, r3, #1
 8005694:	9300      	str	r3, [sp, #0]
 8005696:	9b00      	ldr	r3, [sp, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005698:	2702      	movs	r7, #2
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 800569a:	f44f 63f0 	mov.w	r3, #1920	; 0x780
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800569e:	2603      	movs	r6, #3
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 80056a0:	250c      	movs	r5, #12
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80056a2:	a901      	add	r1, sp, #4
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 80056a4:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80056a6:	9702      	str	r7, [sp, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80056a8:	9604      	str	r6, [sp, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 80056aa:	9505      	str	r5, [sp, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80056ac:	f7fc fa44 	bl	8001b38 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0 
 80056b0:	f24e 03b3 	movw	r3, #57523	; 0xe0b3
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80056b4:	a901      	add	r1, sp, #4
 80056b6:	4808      	ldr	r0, [pc, #32]	; (80056d8 <HAL_SRAM_MspInit+0x68>)
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0 
 80056b8:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80056ba:	9702      	str	r7, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80056bc:	9403      	str	r4, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80056be:	9604      	str	r6, [sp, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 80056c0:	9505      	str	r5, [sp, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80056c2:	f7fc fa39 	bl	8001b38 <HAL_GPIO_Init>
  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 80056c6:	b007      	add	sp, #28
 80056c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80056ca:	bf00      	nop
 80056cc:	200006d8 	.word	0x200006d8
 80056d0:	40023800 	.word	0x40023800
 80056d4:	40021000 	.word	0x40021000
 80056d8:	40020c00 	.word	0x40020c00

080056dc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80056dc:	b530      	push	{r4, r5, lr}
 80056de:	b08b      	sub	sp, #44	; 0x2c

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80056e0:	2400      	movs	r4, #0
 80056e2:	4b3c      	ldr	r3, [pc, #240]	; (80057d4 <MX_GPIO_Init+0xf8>)
 80056e4:	9400      	str	r4, [sp, #0]
 80056e6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  __HAL_RCC_GPIOE_CLK_ENABLE();
  __HAL_RCC_GPIOD_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, SD_LED_Pin|LCD_RST_Pin, GPIO_PIN_RESET);
 80056e8:	4d3b      	ldr	r5, [pc, #236]	; (80057d8 <MX_GPIO_Init+0xfc>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80056ea:	f042 0204 	orr.w	r2, r2, #4
 80056ee:	631a      	str	r2, [r3, #48]	; 0x30
 80056f0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80056f2:	f002 0204 	and.w	r2, r2, #4
 80056f6:	9200      	str	r2, [sp, #0]
 80056f8:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80056fa:	9401      	str	r4, [sp, #4]
 80056fc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80056fe:	f042 0201 	orr.w	r2, r2, #1
 8005702:	631a      	str	r2, [r3, #48]	; 0x30
 8005704:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005706:	f002 0201 	and.w	r2, r2, #1
 800570a:	9201      	str	r2, [sp, #4]
 800570c:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800570e:	9402      	str	r4, [sp, #8]
 8005710:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005712:	f042 0210 	orr.w	r2, r2, #16
 8005716:	631a      	str	r2, [r3, #48]	; 0x30
 8005718:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800571a:	f002 0210 	and.w	r2, r2, #16
 800571e:	9202      	str	r2, [sp, #8]
 8005720:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8005722:	9403      	str	r4, [sp, #12]
 8005724:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005726:	f042 0208 	orr.w	r2, r2, #8
 800572a:	631a      	str	r2, [r3, #48]	; 0x30
 800572c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800572e:	f002 0208 	and.w	r2, r2, #8
 8005732:	9203      	str	r2, [sp, #12]
 8005734:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8005736:	9404      	str	r4, [sp, #16]
 8005738:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800573a:	f042 0202 	orr.w	r2, r2, #2
 800573e:	631a      	str	r2, [r3, #48]	; 0x30
 8005740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005742:	f003 0302 	and.w	r3, r3, #2
  HAL_GPIO_WritePin(GPIOD, SD_LED_Pin|LCD_RST_Pin, GPIO_PIN_RESET);
 8005746:	4622      	mov	r2, r4
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8005748:	9304      	str	r3, [sp, #16]
  HAL_GPIO_WritePin(GPIOD, SD_LED_Pin|LCD_RST_Pin, GPIO_PIN_RESET);
 800574a:	4628      	mov	r0, r5
 800574c:	f241 0108 	movw	r1, #4104	; 0x1008
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8005750:	9b04      	ldr	r3, [sp, #16]
  HAL_GPIO_WritePin(GPIOD, SD_LED_Pin|LCD_RST_Pin, GPIO_PIN_RESET);
 8005752:	f7fc fad7 	bl	8001d04 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC0 PC1 PC2 PC3 
                           PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3 
 8005756:	232f      	movs	r3, #47	; 0x2f
 8005758:	9305      	str	r3, [sp, #20]
                          |GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800575a:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800575c:	4b1f      	ldr	r3, [pc, #124]	; (80057dc <MX_GPIO_Init+0x100>)
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800575e:	4820      	ldr	r0, [pc, #128]	; (80057e0 <MX_GPIO_Init+0x104>)
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8005760:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005762:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005764:	f7fc f9e8 	bl	8001b38 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = SD_LED_Pin|LCD_RST_Pin;
 8005768:	f241 0308 	movw	r3, #4104	; 0x1008
 800576c:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800576e:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005770:	2301      	movs	r3, #1
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005772:	4628      	mov	r0, r5
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005774:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005776:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005778:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800577a:	f7fc f9dd 	bl	8001b38 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 800577e:	4622      	mov	r2, r4
 8005780:	4621      	mov	r1, r4
 8005782:	2006      	movs	r0, #6
 8005784:	f7fb fe76 	bl	8001474 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8005788:	2006      	movs	r0, #6
 800578a:	f7fb fea7 	bl	80014dc <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 800578e:	4622      	mov	r2, r4
 8005790:	4621      	mov	r1, r4
 8005792:	2007      	movs	r0, #7
 8005794:	f7fb fe6e 	bl	8001474 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8005798:	2007      	movs	r0, #7
 800579a:	f7fb fe9f 	bl	80014dc <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 800579e:	4622      	mov	r2, r4
 80057a0:	4621      	mov	r1, r4
 80057a2:	2008      	movs	r0, #8
 80057a4:	f7fb fe66 	bl	8001474 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 80057a8:	2008      	movs	r0, #8
 80057aa:	f7fb fe97 	bl	80014dc <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 80057ae:	4622      	mov	r2, r4
 80057b0:	4621      	mov	r1, r4
 80057b2:	2009      	movs	r0, #9
 80057b4:	f7fb fe5e 	bl	8001474 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 80057b8:	2009      	movs	r0, #9
 80057ba:	f7fb fe8f 	bl	80014dc <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80057be:	4622      	mov	r2, r4
 80057c0:	4621      	mov	r1, r4
 80057c2:	2017      	movs	r0, #23
 80057c4:	f7fb fe56 	bl	8001474 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80057c8:	2017      	movs	r0, #23
 80057ca:	f7fb fe87 	bl	80014dc <HAL_NVIC_EnableIRQ>

}
 80057ce:	b00b      	add	sp, #44	; 0x2c
 80057d0:	bd30      	pop	{r4, r5, pc}
 80057d2:	bf00      	nop
 80057d4:	40023800 	.word	0x40023800
 80057d8:	40020c00 	.word	0x40020c00
 80057dc:	10110000 	.word	0x10110000
 80057e0:	40020800 	.word	0x40020800

080057e4 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80057e4:	b508      	push	{r3, lr}

  hi2c1.Instance = I2C1;
 80057e6:	480d      	ldr	r0, [pc, #52]	; (800581c <MX_I2C1_Init+0x38>)
  hi2c1.Init.ClockSpeed = 400000;
 80057e8:	4b0d      	ldr	r3, [pc, #52]	; (8005820 <MX_I2C1_Init+0x3c>)
 80057ea:	f8df e03c 	ldr.w	lr, [pc, #60]	; 8005828 <MX_I2C1_Init+0x44>
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
  hi2c1.Init.OwnAddress1 = 0;
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80057ee:	f44f 4280 	mov.w	r2, #16384	; 0x4000
  hi2c1.Init.ClockSpeed = 400000;
 80057f2:	e880 4008 	stmia.w	r0, {r3, lr}
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80057f6:	2300      	movs	r3, #0
 80057f8:	6083      	str	r3, [r0, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80057fa:	60c3      	str	r3, [r0, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80057fc:	6102      	str	r2, [r0, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80057fe:	6143      	str	r3, [r0, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8005800:	6183      	str	r3, [r0, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8005802:	61c3      	str	r3, [r0, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8005804:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8005806:	f7fc fb5f 	bl	8001ec8 <HAL_I2C_Init>
 800580a:	b128      	cbz	r0, 8005818 <MX_I2C1_Init+0x34>
  {
    _Error_Handler(__FILE__, __LINE__);
 800580c:	214c      	movs	r1, #76	; 0x4c
 800580e:	4805      	ldr	r0, [pc, #20]	; (8005824 <MX_I2C1_Init+0x40>)
  }

}
 8005810:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _Error_Handler(__FILE__, __LINE__);
 8005814:	f001 bebc 	b.w	8007590 <_Error_Handler>
 8005818:	bd08      	pop	{r3, pc}
 800581a:	bf00      	nop
 800581c:	20006d5c 	.word	0x20006d5c
 8005820:	40005400 	.word	0x40005400
 8005824:	0800d6a7 	.word	0x0800d6a7
 8005828:	00061a80 	.word	0x00061a80

0800582c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800582c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(i2cHandle->Instance==I2C1)
 800582e:	6802      	ldr	r2, [r0, #0]
 8005830:	4b10      	ldr	r3, [pc, #64]	; (8005874 <HAL_I2C_MspInit+0x48>)
 8005832:	429a      	cmp	r2, r3
 8005834:	d11a      	bne.n	800586c <HAL_I2C_MspInit+0x40>
  
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8005836:	23c0      	movs	r3, #192	; 0xc0
 8005838:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800583a:	2312      	movs	r3, #18
 800583c:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800583e:	2301      	movs	r3, #1
 8005840:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005842:	2303      	movs	r3, #3
 8005844:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8005846:	2304      	movs	r3, #4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005848:	eb0d 0103 	add.w	r1, sp, r3
 800584c:	480a      	ldr	r0, [pc, #40]	; (8005878 <HAL_I2C_MspInit+0x4c>)
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800584e:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005850:	f7fc f972 	bl	8001b38 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8005854:	2300      	movs	r3, #0
 8005856:	9300      	str	r3, [sp, #0]
 8005858:	4b08      	ldr	r3, [pc, #32]	; (800587c <HAL_I2C_MspInit+0x50>)
 800585a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800585c:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 8005860:	641a      	str	r2, [r3, #64]	; 0x40
 8005862:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005864:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005868:	9300      	str	r3, [sp, #0]
 800586a:	9b00      	ldr	r3, [sp, #0]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800586c:	b007      	add	sp, #28
 800586e:	f85d fb04 	ldr.w	pc, [sp], #4
 8005872:	bf00      	nop
 8005874:	40005400 	.word	0x40005400
 8005878:	40020400 	.word	0x40020400
 800587c:	40023800 	.word	0x40023800

08005880 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8005880:	b510      	push	{r4, lr}
 8005882:	b094      	sub	sp, #80	; 0x50
	RCC_OscInitTypeDef RCC_OscInitStruct;
	RCC_ClkInitTypeDef RCC_ClkInitStruct;

	/**Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8005884:	2300      	movs	r3, #0
 8005886:	4a27      	ldr	r2, [pc, #156]	; (8005924 <SystemClock_Config+0xa4>)
 8005888:	9301      	str	r3, [sp, #4]
 800588a:	6c11      	ldr	r1, [r2, #64]	; 0x40
 800588c:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 8005890:	6411      	str	r1, [r2, #64]	; 0x40
 8005892:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8005894:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 8005898:	9201      	str	r2, [sp, #4]
 800589a:	9a01      	ldr	r2, [sp, #4]

	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800589c:	4a22      	ldr	r2, [pc, #136]	; (8005928 <SystemClock_Config+0xa8>)
 800589e:	9302      	str	r3, [sp, #8]
 80058a0:	6811      	ldr	r1, [r2, #0]
 80058a2:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
 80058a6:	6011      	str	r1, [r2, #0]
 80058a8:	6812      	ldr	r2, [r2, #0]
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
	RCC_OscInitStruct.HSICalibrationValue = 16;
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80058aa:	930f      	str	r3, [sp, #60]	; 0x3c
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80058ac:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
	RCC_OscInitStruct.PLL.PLLM = 8;
 80058b0:	2308      	movs	r3, #8
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80058b2:	9202      	str	r2, [sp, #8]
 80058b4:	9a02      	ldr	r2, [sp, #8]
	RCC_OscInitStruct.PLL.PLLM = 8;
 80058b6:	9310      	str	r3, [sp, #64]	; 0x40
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80058b8:	2201      	movs	r2, #1
	RCC_OscInitStruct.PLL.PLLN = 100;
 80058ba:	2364      	movs	r3, #100	; 0x64
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80058bc:	2402      	movs	r4, #2
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80058be:	920b      	str	r2, [sp, #44]	; 0x2c
	RCC_OscInitStruct.PLL.PLLN = 100;
 80058c0:	9311      	str	r3, [sp, #68]	; 0x44
	RCC_OscInitStruct.HSICalibrationValue = 16;
 80058c2:	2210      	movs	r2, #16
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
	RCC_OscInitStruct.PLL.PLLQ = 5;
 80058c4:	2305      	movs	r3, #5
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80058c6:	a808      	add	r0, sp, #32
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80058c8:	9408      	str	r4, [sp, #32]
	RCC_OscInitStruct.HSICalibrationValue = 16;
 80058ca:	920c      	str	r2, [sp, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80058cc:	940e      	str	r4, [sp, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80058ce:	9412      	str	r4, [sp, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 5;
 80058d0:	9313      	str	r3, [sp, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80058d2:	f7fc fc3d 	bl	8002150 <HAL_RCC_OscConfig>
 80058d6:	b100      	cbz	r0, 80058da <SystemClock_Config+0x5a>
 80058d8:	e7fe      	b.n	80058d8 <SystemClock_Config+0x58>
		_Error_Handler(__FILE__, __LINE__);
	}

	/**Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80058da:	230f      	movs	r3, #15
 80058dc:	9303      	str	r3, [sp, #12]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80058de:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80058e2:	9005      	str	r0, [sp, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80058e4:	9306      	str	r3, [sp, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80058e6:	2103      	movs	r1, #3
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80058e8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80058ec:	a803      	add	r0, sp, #12
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80058ee:	9404      	str	r4, [sp, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80058f0:	9307      	str	r3, [sp, #28]
	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80058f2:	f7fc fddd 	bl	80024b0 <HAL_RCC_ClockConfig>
 80058f6:	4604      	mov	r4, r0
 80058f8:	b100      	cbz	r0, 80058fc <SystemClock_Config+0x7c>
 80058fa:	e7fe      	b.n	80058fa <SystemClock_Config+0x7a>
		_Error_Handler(__FILE__, __LINE__);
	}

	/**Configure the Systick interrupt time
	 */
	HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 80058fc:	f7fc fe72 	bl	80025e4 <HAL_RCC_GetHCLKFreq>
 8005900:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005904:	fbb0 f0f3 	udiv	r0, r0, r3
 8005908:	f7fb fdf4 	bl	80014f4 <HAL_SYSTICK_Config>

	/**Configure the Systick
	 */
	HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 800590c:	2004      	movs	r0, #4
 800590e:	f7fb fe07 	bl	8001520 <HAL_SYSTICK_CLKSourceConfig>

	/* SysTick_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8005912:	4622      	mov	r2, r4
 8005914:	4621      	mov	r1, r4
 8005916:	f04f 30ff 	mov.w	r0, #4294967295
 800591a:	f7fb fdab 	bl	8001474 <HAL_NVIC_SetPriority>
}
 800591e:	b014      	add	sp, #80	; 0x50
 8005920:	bd10      	pop	{r4, pc}
 8005922:	bf00      	nop
 8005924:	40023800 	.word	0x40023800
 8005928:	40007000 	.word	0x40007000

0800592c <HAL_TIM_PeriodElapsedCallback>:


/*timer for screen printing*/
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
	if(htim == &htim1)
 800592c:	4b03      	ldr	r3, [pc, #12]	; (800593c <HAL_TIM_PeriodElapsedCallback+0x10>)
 800592e:	4283      	cmp	r3, r0
	{
		debounceTime++;
 8005930:	bf01      	itttt	eq
 8005932:	4a03      	ldreq	r2, [pc, #12]	; (8005940 <HAL_TIM_PeriodElapsedCallback+0x14>)
 8005934:	6813      	ldreq	r3, [r2, #0]
 8005936:	3301      	addeq	r3, #1
 8005938:	6013      	streq	r3, [r2, #0]
 800593a:	4770      	bx	lr
 800593c:	2000f0b8 	.word	0x2000f0b8
 8005940:	20006710 	.word	0x20006710
 8005944:	00000000 	.word	0x00000000

08005948 <create_sine>:
	}
}

/*creates a sinusoid*/
void create_sine(uint16_t *sine, uint32_t samples, int frequency)
{
 8005948:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800594c:	ed2d 8b02 	vpush	{d8}
	if(dc)
 8005950:	4b2d      	ldr	r3, [pc, #180]	; (8005a08 <create_sine+0xc0>)
 8005952:	781b      	ldrb	r3, [r3, #0]
{
 8005954:	4604      	mov	r4, r0
 8005956:	460d      	mov	r5, r1
	if(dc)
 8005958:	b163      	cbz	r3, 8005974 <create_sine+0x2c>
 800595a:	eb00 0541 	add.w	r5, r0, r1, lsl #1
	{
		for(int i = 0; i < samples; i++)
		{
			*(sine+i) = 4000;
 800595e:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
		for(int i = 0; i < samples; i++)
 8005962:	42ac      	cmp	r4, r5
 8005964:	d103      	bne.n	800596e <create_sine+0x26>
		{
			*(sine+i) = (uint16_t) (((sin(((i*2*PI)/samples) )+1)*(4096/2)*0.96)+80);
		}
	}

}
 8005966:	ecbd 8b02 	vpop	{d8}
 800596a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			*(sine+i) = 4000;
 800596e:	f824 3b02 	strh.w	r3, [r4], #2
 8005972:	e7f6      	b.n	8005962 <create_sine+0x1a>
	else if(frequency > 0.0) //it's a sinusoidal
 8005974:	4610      	mov	r0, r2
 8005976:	f7fa fdd5 	bl	8000524 <__aeabi_i2d>
 800597a:	2200      	movs	r2, #0
 800597c:	2300      	movs	r3, #0
 800597e:	f7fb f8c7 	bl	8000b10 <__aeabi_dcmpgt>
 8005982:	2800      	cmp	r0, #0
 8005984:	d0ef      	beq.n	8005966 <create_sine+0x1e>
			*(sine+i) = (uint16_t) (((sin(((i*2*PI)/samples) )+1)*(4096/2)*0.96)+80);
 8005986:	a71e      	add	r7, pc, #120	; (adr r7, 8005a00 <create_sine+0xb8>)
 8005988:	e9d7 6700 	ldrd	r6, r7, [r7]
 800598c:	ed9f 8a1f 	vldr	s16, [pc, #124]	; 8005a0c <create_sine+0xc4>
 8005990:	f8df 9084 	ldr.w	r9, [pc, #132]	; 8005a18 <create_sine+0xd0>
 8005994:	eb04 0b45 	add.w	fp, r4, r5, lsl #1
	else if(frequency > 0.0) //it's a sinusoidal
 8005998:	46a2      	mov	sl, r4
			*(sine+i) = (uint16_t) (((sin(((i*2*PI)/samples) )+1)*(4096/2)*0.96)+80);
 800599a:	f04f 0800 	mov.w	r8, #0
		for(int i = 0; i< samples; i++)
 800599e:	45da      	cmp	sl, fp
 80059a0:	d0e1      	beq.n	8005966 <create_sine+0x1e>
			*(sine+i) = (uint16_t) (((sin(((i*2*PI)/samples) )+1)*(4096/2)*0.96)+80);
 80059a2:	ebaa 0304 	sub.w	r3, sl, r4
 80059a6:	ee07 3a90 	vmov	s15, r3
 80059aa:	ee07 5a10 	vmov	s14, r5
 80059ae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80059b2:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 80059b6:	ee67 7a88 	vmul.f32	s15, s15, s16
 80059ba:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80059be:	ee16 0a90 	vmov	r0, s13
 80059c2:	f7fa fdc1 	bl	8000548 <__aeabi_f2d>
 80059c6:	ec41 0b10 	vmov	d0, r0, r1
 80059ca:	f004 ffe5 	bl	800a998 <sin>
 80059ce:	2200      	movs	r2, #0
 80059d0:	ec51 0b10 	vmov	r0, r1, d0
 80059d4:	4b0e      	ldr	r3, [pc, #56]	; (8005a10 <create_sine+0xc8>)
 80059d6:	f7fa fc59 	bl	800028c <__adddf3>
 80059da:	2200      	movs	r2, #0
 80059dc:	4b0d      	ldr	r3, [pc, #52]	; (8005a14 <create_sine+0xcc>)
 80059de:	f7fa fe07 	bl	80005f0 <__aeabi_dmul>
 80059e2:	4632      	mov	r2, r6
 80059e4:	463b      	mov	r3, r7
 80059e6:	f7fa fe03 	bl	80005f0 <__aeabi_dmul>
 80059ea:	4642      	mov	r2, r8
 80059ec:	464b      	mov	r3, r9
 80059ee:	f7fa fc4d 	bl	800028c <__adddf3>
 80059f2:	f7fb f8d5 	bl	8000ba0 <__aeabi_d2uiz>
 80059f6:	f82a 0b02 	strh.w	r0, [sl], #2
 80059fa:	e7d0      	b.n	800599e <create_sine+0x56>
 80059fc:	f3af 8000 	nop.w
 8005a00:	eb851eb8 	.word	0xeb851eb8
 8005a04:	3feeb851 	.word	0x3feeb851
 8005a08:	20006704 	.word	0x20006704
 8005a0c:	40490fdb 	.word	0x40490fdb
 8005a10:	3ff00000 	.word	0x3ff00000
 8005a14:	40a00000 	.word	0x40a00000
 8005a18:	40540000 	.word	0x40540000

08005a1c <clear_ui>:
}

/*reset the ui, i.e. the elements of the structure 'frame'*/
void clear_ui(UI *ui)
{
	ui->amplify = 0;
 8005a1c:	2300      	movs	r3, #0
 8005a1e:	70c3      	strb	r3, [r0, #3]
	ui->frequency = 0;
 8005a20:	7043      	strb	r3, [r0, #1]
	ui->start = 0;
 8005a22:	7003      	strb	r3, [r0, #0]
	ui->sweep = 0;
 8005a24:	7083      	strb	r3, [r0, #2]
	ui->measure = 0;
 8005a26:	7103      	strb	r3, [r0, #4]
 8005a28:	4770      	bx	lr
	...

08005a2c <start_ui>:
}

/*print startscreen*/
void start_ui(void)
{
 8005a2c:	b537      	push	{r0, r1, r2, r4, r5, lr}
	ILI9341_Fill(BGCOLOR);
	ILI9341_printText("Choose:", 10, 20, FCOLOR, BGCOLOR, 2);
 8005a2e:	f64f 74ff 	movw	r4, #65535	; 0xffff
 8005a32:	2502      	movs	r5, #2
	ILI9341_Fill(BGCOLOR);
 8005a34:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8005a38:	f7ff fb54 	bl	80050e4 <ILI9341_Fill>
	ILI9341_printText("Choose:", 10, 20, FCOLOR, BGCOLOR, 2);
 8005a3c:	e88d 0030 	stmia.w	sp, {r4, r5}
 8005a40:	2300      	movs	r3, #0
 8005a42:	2214      	movs	r2, #20
 8005a44:	210a      	movs	r1, #10
 8005a46:	480a      	ldr	r0, [pc, #40]	; (8005a70 <start_ui+0x44>)
 8005a48:	f7ff fbf4 	bl	8005234 <ILI9341_printText>
	ILI9341_printText("Single Frequency (Up)", 20, 60, FCOLOR, BGCOLOR, 2);
 8005a4c:	e88d 0030 	stmia.w	sp, {r4, r5}
 8005a50:	2300      	movs	r3, #0
 8005a52:	223c      	movs	r2, #60	; 0x3c
 8005a54:	2114      	movs	r1, #20
 8005a56:	4807      	ldr	r0, [pc, #28]	; (8005a74 <start_ui+0x48>)
 8005a58:	f7ff fbec 	bl	8005234 <ILI9341_printText>
	ILI9341_printText("Frequency Sweep (Down)", 20, 90, FCOLOR, BGCOLOR, 2);
 8005a5c:	e88d 0030 	stmia.w	sp, {r4, r5}
 8005a60:	2300      	movs	r3, #0
 8005a62:	225a      	movs	r2, #90	; 0x5a
 8005a64:	2114      	movs	r1, #20
 8005a66:	4804      	ldr	r0, [pc, #16]	; (8005a78 <start_ui+0x4c>)
 8005a68:	f7ff fbe4 	bl	8005234 <ILI9341_printText>
}
 8005a6c:	b003      	add	sp, #12
 8005a6e:	bd30      	pop	{r4, r5, pc}
 8005a70:	0800d77f 	.word	0x0800d77f
 8005a74:	0800d787 	.word	0x0800d787
 8005a78:	0800d79d 	.word	0x0800d79d

08005a7c <frequency_ui>:

/*print screen for frequency choice*/
void frequency_ui(void)
{
 8005a7c:	b570      	push	{r4, r5, r6, lr}
 8005a7e:	b086      	sub	sp, #24
	char c[5] = {0};
 8005a80:	2600      	movs	r6, #0
	ILI9341_Fill(BGCOLOR);
 8005a82:	f64f 70ff 	movw	r0, #65535	; 0xffff
	char c[5] = {0};
 8005a86:	9604      	str	r6, [sp, #16]
 8005a88:	f88d 6014 	strb.w	r6, [sp, #20]
	ILI9341_Fill(BGCOLOR);
 8005a8c:	f7ff fb2a 	bl	80050e4 <ILI9341_Fill>
	sprintf(c, "%d%d%d%d%d",fDigit[0],fDigit[1],fDigit[2],fDigit[3],fDigit[4] );
 8005a90:	4a41      	ldr	r2, [pc, #260]	; (8005b98 <frequency_ui+0x11c>)
 8005a92:	4942      	ldr	r1, [pc, #264]	; (8005b9c <frequency_ui+0x120>)
 8005a94:	6913      	ldr	r3, [r2, #16]
 8005a96:	9302      	str	r3, [sp, #8]
 8005a98:	68d3      	ldr	r3, [r2, #12]
 8005a9a:	9301      	str	r3, [sp, #4]
 8005a9c:	6893      	ldr	r3, [r2, #8]
 8005a9e:	9300      	str	r3, [sp, #0]
 8005aa0:	ca0c      	ldmia	r2, {r2, r3}
 8005aa2:	a804      	add	r0, sp, #16
	ILI9341_printText("Choose Frequency:", 10, 20, FCOLOR, BGCOLOR, 2);
 8005aa4:	f64f 74ff 	movw	r4, #65535	; 0xffff
	sprintf(c, "%d%d%d%d%d",fDigit[0],fDigit[1],fDigit[2],fDigit[3],fDigit[4] );
 8005aa8:	f002 faaa 	bl	8008000 <sprintf>
	ILI9341_printText("Choose Frequency:", 10, 20, FCOLOR, BGCOLOR, 2);
 8005aac:	2302      	movs	r3, #2
	ILI9341_drawChar(50,110,c[0],FCOLOR,BGCOLOR,3);
 8005aae:	2503      	movs	r5, #3
	ILI9341_printText("Choose Frequency:", 10, 20, FCOLOR, BGCOLOR, 2);
 8005ab0:	9301      	str	r3, [sp, #4]
 8005ab2:	2214      	movs	r2, #20
 8005ab4:	4633      	mov	r3, r6
 8005ab6:	210a      	movs	r1, #10
 8005ab8:	4839      	ldr	r0, [pc, #228]	; (8005ba0 <frequency_ui+0x124>)
 8005aba:	9400      	str	r4, [sp, #0]
 8005abc:	f7ff fbba 	bl	8005234 <ILI9341_printText>
	ILI9341_drawChar(50,110,c[0],FCOLOR,BGCOLOR,3);
 8005ac0:	f89d 2010 	ldrb.w	r2, [sp, #16]
 8005ac4:	4633      	mov	r3, r6
 8005ac6:	216e      	movs	r1, #110	; 0x6e
 8005ac8:	2032      	movs	r0, #50	; 0x32
 8005aca:	e88d 0030 	stmia.w	sp, {r4, r5}
 8005ace:	f7ff fb4b 	bl	8005168 <ILI9341_drawChar>
	ILI9341_drawChar(70,110,c[1],FCOLOR,BGCOLOR,3);
 8005ad2:	f89d 2011 	ldrb.w	r2, [sp, #17]
 8005ad6:	4633      	mov	r3, r6
 8005ad8:	216e      	movs	r1, #110	; 0x6e
 8005ada:	2046      	movs	r0, #70	; 0x46
 8005adc:	e88d 0030 	stmia.w	sp, {r4, r5}
 8005ae0:	f7ff fb42 	bl	8005168 <ILI9341_drawChar>
	ILI9341_drawChar(90,110,c[2],FCOLOR,BGCOLOR,3);
 8005ae4:	f89d 2012 	ldrb.w	r2, [sp, #18]
 8005ae8:	4633      	mov	r3, r6
 8005aea:	216e      	movs	r1, #110	; 0x6e
 8005aec:	205a      	movs	r0, #90	; 0x5a
 8005aee:	e88d 0030 	stmia.w	sp, {r4, r5}
 8005af2:	f7ff fb39 	bl	8005168 <ILI9341_drawChar>
	ILI9341_drawChar(110,110,c[3],FCOLOR,BGCOLOR,3);
 8005af6:	216e      	movs	r1, #110	; 0x6e
 8005af8:	4608      	mov	r0, r1
 8005afa:	f89d 2013 	ldrb.w	r2, [sp, #19]
 8005afe:	4633      	mov	r3, r6
 8005b00:	e88d 0030 	stmia.w	sp, {r4, r5}
 8005b04:	f7ff fb30 	bl	8005168 <ILI9341_drawChar>
	ILI9341_drawChar(130,110,c[4],FCOLOR,BGCOLOR,3);
 8005b08:	f89d 2014 	ldrb.w	r2, [sp, #20]
 8005b0c:	4633      	mov	r3, r6
 8005b0e:	216e      	movs	r1, #110	; 0x6e
 8005b10:	2082      	movs	r0, #130	; 0x82
 8005b12:	e88d 0030 	stmia.w	sp, {r4, r5}
 8005b16:	f7ff fb27 	bl	8005168 <ILI9341_drawChar>
	ILI9341_printText("Hz", 160, 110, FCOLOR, BGCOLOR, 3);
 8005b1a:	4633      	mov	r3, r6
 8005b1c:	226e      	movs	r2, #110	; 0x6e
 8005b1e:	21a0      	movs	r1, #160	; 0xa0
 8005b20:	4820      	ldr	r0, [pc, #128]	; (8005ba4 <frequency_ui+0x128>)
 8005b22:	e88d 0030 	stmia.w	sp, {r4, r5}
 8005b26:	f7ff fb85 	bl	8005234 <ILI9341_printText>
	ILI9341_printText("                    ", 50, 130, FCOLOR, BGCOLOR, 3);
 8005b2a:	4633      	mov	r3, r6
 8005b2c:	e88d 0030 	stmia.w	sp, {r4, r5}
 8005b30:	2282      	movs	r2, #130	; 0x82
 8005b32:	2132      	movs	r1, #50	; 0x32
 8005b34:	481c      	ldr	r0, [pc, #112]	; (8005ba8 <frequency_ui+0x12c>)
 8005b36:	f7ff fb7d 	bl	8005234 <ILI9341_printText>
	switch(fcDigit) /*underline the current digit*/
 8005b3a:	4b1c      	ldr	r3, [pc, #112]	; (8005bac <frequency_ui+0x130>)
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	2b04      	cmp	r3, #4
 8005b40:	d80c      	bhi.n	8005b5c <frequency_ui+0xe0>
 8005b42:	e8df f003 	tbb	[pc, r3]
 8005b46:	0d03      	.short	0x0d03
 8005b48:	1b14      	.short	0x1b14
 8005b4a:	22          	.byte	0x22
 8005b4b:	00          	.byte	0x00
	{
	case 0: ILI9341_drawChar(50,130,'-',FCOLOR,BGCOLOR,3);
 8005b4c:	e88d 0030 	stmia.w	sp, {r4, r5}
 8005b50:	2300      	movs	r3, #0
 8005b52:	222d      	movs	r2, #45	; 0x2d
 8005b54:	2182      	movs	r1, #130	; 0x82
 8005b56:	2032      	movs	r0, #50	; 0x32
	break;
	case 2:	ILI9341_drawChar(90,130,'-',FCOLOR,BGCOLOR,3);
	break;
	case 3:	ILI9341_drawChar(110,130,'-',FCOLOR,BGCOLOR,3);
	break;
	case 4:	ILI9341_drawChar(130,130,'-',FCOLOR,BGCOLOR,3);
 8005b58:	f7ff fb06 	bl	8005168 <ILI9341_drawChar>
	break;
	}
}
 8005b5c:	b006      	add	sp, #24
 8005b5e:	bd70      	pop	{r4, r5, r6, pc}
	case 1:	ILI9341_drawChar(70,130,'-',FCOLOR,BGCOLOR,3);
 8005b60:	e88d 0030 	stmia.w	sp, {r4, r5}
 8005b64:	2300      	movs	r3, #0
 8005b66:	222d      	movs	r2, #45	; 0x2d
 8005b68:	2182      	movs	r1, #130	; 0x82
 8005b6a:	2046      	movs	r0, #70	; 0x46
 8005b6c:	e7f4      	b.n	8005b58 <frequency_ui+0xdc>
	case 2:	ILI9341_drawChar(90,130,'-',FCOLOR,BGCOLOR,3);
 8005b6e:	e88d 0030 	stmia.w	sp, {r4, r5}
 8005b72:	2300      	movs	r3, #0
 8005b74:	222d      	movs	r2, #45	; 0x2d
 8005b76:	2182      	movs	r1, #130	; 0x82
 8005b78:	205a      	movs	r0, #90	; 0x5a
 8005b7a:	e7ed      	b.n	8005b58 <frequency_ui+0xdc>
	case 3:	ILI9341_drawChar(110,130,'-',FCOLOR,BGCOLOR,3);
 8005b7c:	e88d 0030 	stmia.w	sp, {r4, r5}
 8005b80:	2300      	movs	r3, #0
 8005b82:	222d      	movs	r2, #45	; 0x2d
 8005b84:	2182      	movs	r1, #130	; 0x82
 8005b86:	206e      	movs	r0, #110	; 0x6e
 8005b88:	e7e6      	b.n	8005b58 <frequency_ui+0xdc>
	case 4:	ILI9341_drawChar(130,130,'-',FCOLOR,BGCOLOR,3);
 8005b8a:	2182      	movs	r1, #130	; 0x82
 8005b8c:	e88d 0030 	stmia.w	sp, {r4, r5}
 8005b90:	2300      	movs	r3, #0
 8005b92:	222d      	movs	r2, #45	; 0x2d
 8005b94:	4608      	mov	r0, r1
 8005b96:	e7df      	b.n	8005b58 <frequency_ui+0xdc>
 8005b98:	20006714 	.word	0x20006714
 8005b9c:	0800d723 	.word	0x0800d723
 8005ba0:	0800d72e 	.word	0x0800d72e
 8005ba4:	0800d77c 	.word	0x0800d77c
 8005ba8:	0800d740 	.word	0x0800d740
 8005bac:	20006728 	.word	0x20006728

08005bb0 <amplify_ui>:

/*print screen for adjusting gain*/
void amplify_ui(void)
{
 8005bb0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	char c[4] = {0};
 8005bb2:	ac04      	add	r4, sp, #16
 8005bb4:	2600      	movs	r6, #0
	ILI9341_Fill(BGCOLOR);
 8005bb6:	f64f 70ff 	movw	r0, #65535	; 0xffff
	char c[4] = {0};
 8005bba:	f844 6d04 	str.w	r6, [r4, #-4]!
	ILI9341_Fill(BGCOLOR);
 8005bbe:	f7ff fa91 	bl	80050e4 <ILI9341_Fill>
	sprintf(c, "%d%d%d%d",aDigit[0],aDigit[1],aDigit[2], aDigit[3]);
 8005bc2:	4a3c      	ldr	r2, [pc, #240]	; (8005cb4 <amplify_ui+0x104>)
 8005bc4:	493c      	ldr	r1, [pc, #240]	; (8005cb8 <amplify_ui+0x108>)
 8005bc6:	68d3      	ldr	r3, [r2, #12]
 8005bc8:	9301      	str	r3, [sp, #4]
 8005bca:	6893      	ldr	r3, [r2, #8]
 8005bcc:	9300      	str	r3, [sp, #0]
 8005bce:	ca0c      	ldmia	r2, {r2, r3}
 8005bd0:	4620      	mov	r0, r4
 8005bd2:	f002 fa15 	bl	8008000 <sprintf>
	ILI9341_printText("Choose Amplitude (Vpp):", 10, 20, FCOLOR, BGCOLOR, 2);
 8005bd6:	f64f 74ff 	movw	r4, #65535	; 0xffff
 8005bda:	2302      	movs	r3, #2
	ILI9341_drawChar(50,110,c[0],FCOLOR,BGCOLOR,3);
 8005bdc:	2503      	movs	r5, #3
	ILI9341_printText("Choose Amplitude (Vpp):", 10, 20, FCOLOR, BGCOLOR, 2);
 8005bde:	9301      	str	r3, [sp, #4]
 8005be0:	2214      	movs	r2, #20
 8005be2:	4633      	mov	r3, r6
 8005be4:	210a      	movs	r1, #10
 8005be6:	4835      	ldr	r0, [pc, #212]	; (8005cbc <amplify_ui+0x10c>)
 8005be8:	9400      	str	r4, [sp, #0]
 8005bea:	f7ff fb23 	bl	8005234 <ILI9341_printText>
	ILI9341_drawChar(50,110,c[0],FCOLOR,BGCOLOR,3);
 8005bee:	f89d 200c 	ldrb.w	r2, [sp, #12]
 8005bf2:	4633      	mov	r3, r6
 8005bf4:	216e      	movs	r1, #110	; 0x6e
 8005bf6:	2032      	movs	r0, #50	; 0x32
 8005bf8:	e88d 0030 	stmia.w	sp, {r4, r5}
 8005bfc:	f7ff fab4 	bl	8005168 <ILI9341_drawChar>
	ILI9341_drawChar(70,110,c[1],FCOLOR,BGCOLOR,3);
 8005c00:	f89d 200d 	ldrb.w	r2, [sp, #13]
 8005c04:	4633      	mov	r3, r6
 8005c06:	216e      	movs	r1, #110	; 0x6e
 8005c08:	2046      	movs	r0, #70	; 0x46
 8005c0a:	e88d 0030 	stmia.w	sp, {r4, r5}
 8005c0e:	f7ff faab 	bl	8005168 <ILI9341_drawChar>
	ILI9341_drawChar(90,110,'.',FCOLOR,BGCOLOR,3);
 8005c12:	4633      	mov	r3, r6
 8005c14:	222e      	movs	r2, #46	; 0x2e
 8005c16:	216e      	movs	r1, #110	; 0x6e
 8005c18:	205a      	movs	r0, #90	; 0x5a
 8005c1a:	e88d 0030 	stmia.w	sp, {r4, r5}
 8005c1e:	f7ff faa3 	bl	8005168 <ILI9341_drawChar>
	ILI9341_drawChar(110,110,c[2],FCOLOR,BGCOLOR,3);
 8005c22:	216e      	movs	r1, #110	; 0x6e
 8005c24:	4608      	mov	r0, r1
 8005c26:	f89d 200e 	ldrb.w	r2, [sp, #14]
 8005c2a:	4633      	mov	r3, r6
 8005c2c:	e88d 0030 	stmia.w	sp, {r4, r5}
 8005c30:	f7ff fa9a 	bl	8005168 <ILI9341_drawChar>
	ILI9341_drawChar(130,110,c[3],FCOLOR,BGCOLOR,3);
 8005c34:	f89d 200f 	ldrb.w	r2, [sp, #15]
 8005c38:	4633      	mov	r3, r6
 8005c3a:	216e      	movs	r1, #110	; 0x6e
 8005c3c:	2082      	movs	r0, #130	; 0x82
 8005c3e:	e88d 0030 	stmia.w	sp, {r4, r5}
 8005c42:	f7ff fa91 	bl	8005168 <ILI9341_drawChar>
	ILI9341_printText("Vpp", 160, 110, FCOLOR, BGCOLOR, 3);
 8005c46:	4633      	mov	r3, r6
 8005c48:	226e      	movs	r2, #110	; 0x6e
 8005c4a:	21a0      	movs	r1, #160	; 0xa0
 8005c4c:	481c      	ldr	r0, [pc, #112]	; (8005cc0 <amplify_ui+0x110>)
 8005c4e:	e88d 0030 	stmia.w	sp, {r4, r5}
 8005c52:	f7ff faef 	bl	8005234 <ILI9341_printText>
	ILI9341_printText("                    ", 50, 135, FCOLOR, BGCOLOR, 3);
 8005c56:	4633      	mov	r3, r6
 8005c58:	e88d 0030 	stmia.w	sp, {r4, r5}
 8005c5c:	2287      	movs	r2, #135	; 0x87
 8005c5e:	2132      	movs	r1, #50	; 0x32
 8005c60:	4818      	ldr	r0, [pc, #96]	; (8005cc4 <amplify_ui+0x114>)
 8005c62:	f7ff fae7 	bl	8005234 <ILI9341_printText>
	switch(acDigit) /*underline the current digit*/
 8005c66:	4b18      	ldr	r3, [pc, #96]	; (8005cc8 <amplify_ui+0x118>)
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	42ab      	cmp	r3, r5
 8005c6c:	d80b      	bhi.n	8005c86 <amplify_ui+0xd6>
 8005c6e:	e8df f003 	tbb	[pc, r3]
 8005c72:	0c02      	.short	0x0c02
 8005c74:	1a13      	.short	0x1a13
	{
	case 0: ILI9341_drawChar(50,135,'-',FCOLOR,BGCOLOR,3);
 8005c76:	e88d 0030 	stmia.w	sp, {r4, r5}
 8005c7a:	2300      	movs	r3, #0
 8005c7c:	222d      	movs	r2, #45	; 0x2d
 8005c7e:	2187      	movs	r1, #135	; 0x87
 8005c80:	2032      	movs	r0, #50	; 0x32
	break;
	case 1:	ILI9341_drawChar(70,135,'-',FCOLOR,BGCOLOR,3);
	break;
	case 2:	ILI9341_drawChar(110,135,'-',FCOLOR,BGCOLOR,3);
	break;
	case 3:	ILI9341_drawChar(130,135,'-',FCOLOR,BGCOLOR,3);
 8005c82:	f7ff fa71 	bl	8005168 <ILI9341_drawChar>
	break;
	}

}
 8005c86:	b004      	add	sp, #16
 8005c88:	bd70      	pop	{r4, r5, r6, pc}
	case 1:	ILI9341_drawChar(70,135,'-',FCOLOR,BGCOLOR,3);
 8005c8a:	e88d 0030 	stmia.w	sp, {r4, r5}
 8005c8e:	2300      	movs	r3, #0
 8005c90:	222d      	movs	r2, #45	; 0x2d
 8005c92:	2187      	movs	r1, #135	; 0x87
 8005c94:	2046      	movs	r0, #70	; 0x46
 8005c96:	e7f4      	b.n	8005c82 <amplify_ui+0xd2>
	case 2:	ILI9341_drawChar(110,135,'-',FCOLOR,BGCOLOR,3);
 8005c98:	e88d 0030 	stmia.w	sp, {r4, r5}
 8005c9c:	2300      	movs	r3, #0
 8005c9e:	222d      	movs	r2, #45	; 0x2d
 8005ca0:	2187      	movs	r1, #135	; 0x87
 8005ca2:	206e      	movs	r0, #110	; 0x6e
 8005ca4:	e7ed      	b.n	8005c82 <amplify_ui+0xd2>
	case 3:	ILI9341_drawChar(130,135,'-',FCOLOR,BGCOLOR,3);
 8005ca6:	e88d 0030 	stmia.w	sp, {r4, r5}
 8005caa:	2300      	movs	r3, #0
 8005cac:	222d      	movs	r2, #45	; 0x2d
 8005cae:	2187      	movs	r1, #135	; 0x87
 8005cb0:	2082      	movs	r0, #130	; 0x82
 8005cb2:	e7e6      	b.n	8005c82 <amplify_ui+0xd2>
 8005cb4:	200066dc 	.word	0x200066dc
 8005cb8:	0800d725 	.word	0x0800d725
 8005cbc:	0800d707 	.word	0x0800d707
 8005cc0:	0800d71f 	.word	0x0800d71f
 8005cc4:	0800d740 	.word	0x0800d740
 8005cc8:	200066ec 	.word	0x200066ec

08005ccc <sweep_ui>:
/*ToDo: new screen for sweep results, showing the actual graph*/


/*print screen for sweep information*/
void sweep_ui(void)
{
 8005ccc:	b537      	push	{r0, r1, r2, r4, r5, lr}
	ILI9341_Fill(BGCOLOR);
 8005cce:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8005cd2:	f7ff fa07 	bl	80050e4 <ILI9341_Fill>
	ILI9341_printText("Analysis started,", 10, 20, FCOLOR, BGCOLOR, 3);
 8005cd6:	f64f 74ff 	movw	r4, #65535	; 0xffff
 8005cda:	2303      	movs	r3, #3
 8005cdc:	9301      	str	r3, [sp, #4]
 8005cde:	2214      	movs	r2, #20
 8005ce0:	2300      	movs	r3, #0
 8005ce2:	210a      	movs	r1, #10
 8005ce4:	480c      	ldr	r0, [pc, #48]	; (8005d18 <sweep_ui+0x4c>)
 8005ce6:	9400      	str	r4, [sp, #0]
	ILI9341_printText("please be patient.", 10, 60, FCOLOR, BGCOLOR, 2);
 8005ce8:	2502      	movs	r5, #2
	ILI9341_printText("Analysis started,", 10, 20, FCOLOR, BGCOLOR, 3);
 8005cea:	f7ff faa3 	bl	8005234 <ILI9341_printText>
	ILI9341_printText("please be patient.", 10, 60, FCOLOR, BGCOLOR, 2);
 8005cee:	2300      	movs	r3, #0
 8005cf0:	e88d 0030 	stmia.w	sp, {r4, r5}
 8005cf4:	223c      	movs	r2, #60	; 0x3c
 8005cf6:	210a      	movs	r1, #10
 8005cf8:	4808      	ldr	r0, [pc, #32]	; (8005d1c <sweep_ui+0x50>)
 8005cfa:	f7ff fa9b 	bl	8005234 <ILI9341_printText>
	if(!swp)
 8005cfe:	4b08      	ldr	r3, [pc, #32]	; (8005d20 <sweep_ui+0x54>)
 8005d00:	781b      	ldrb	r3, [r3, #0]
 8005d02:	b933      	cbnz	r3, 8005d12 <sweep_ui+0x46>
	{
		ILI9341_printText("Results saved." , 20, 140, FCOLOR, BGCOLOR,2);
 8005d04:	e88d 0030 	stmia.w	sp, {r4, r5}
 8005d08:	228c      	movs	r2, #140	; 0x8c
 8005d0a:	2114      	movs	r1, #20
 8005d0c:	4805      	ldr	r0, [pc, #20]	; (8005d24 <sweep_ui+0x58>)
 8005d0e:	f7ff fa91 	bl	8005234 <ILI9341_printText>
	}
}
 8005d12:	b003      	add	sp, #12
 8005d14:	bd30      	pop	{r4, r5, pc}
 8005d16:	bf00      	nop
 8005d18:	0800d7b4 	.word	0x0800d7b4
 8005d1c:	0800d7c6 	.word	0x0800d7c6
 8005d20:	20006748 	.word	0x20006748
 8005d24:	0800d7d9 	.word	0x0800d7d9

08005d28 <measure_ui>:

/*prints the measurement on the screen*/
void measure_ui(void)
{
 8005d28:	b570      	push	{r4, r5, r6, lr}
	char c[10];
	char vpp[6] = "  VPP";
 8005d2a:	4b73      	ldr	r3, [pc, #460]	; (8005ef8 <measure_ui+0x1d0>)
{
 8005d2c:	b08c      	sub	sp, #48	; 0x30
	char vpp[6] = "  VPP";
 8005d2e:	6818      	ldr	r0, [r3, #0]
 8005d30:	889b      	ldrh	r3, [r3, #4]
 8005d32:	f8ad 3018 	strh.w	r3, [sp, #24]
	char rms[6] = "  RMS";
 8005d36:	4b71      	ldr	r3, [pc, #452]	; (8005efc <measure_ui+0x1d4>)
	char vpp[6] = "  VPP";
 8005d38:	9005      	str	r0, [sp, #20]
	char rms[6] = "  RMS";
 8005d3a:	6818      	ldr	r0, [r3, #0]
 8005d3c:	889b      	ldrh	r3, [r3, #4]
 8005d3e:	f8ad 3020 	strh.w	r3, [sp, #32]
	char hz[5] = "  Hz";
 8005d42:	4b6f      	ldr	r3, [pc, #444]	; (8005f00 <measure_ui+0x1d8>)
	char rms[6] = "  RMS";
 8005d44:	9007      	str	r0, [sp, #28]
	char hz[5] = "  Hz";
 8005d46:	6818      	ldr	r0, [r3, #0]
 8005d48:	791b      	ldrb	r3, [r3, #4]
 8005d4a:	9003      	str	r0, [sp, #12]
 8005d4c:	f88d 3010 	strb.w	r3, [sp, #16]
	char dC[4] = "  DC";
	ILI9341_Fill(BGCOLOR);
 8005d50:	f64f 70ff 	movw	r0, #65535	; 0xffff
	char dC[4] = "  DC";
 8005d54:	4b6b      	ldr	r3, [pc, #428]	; (8005f04 <measure_ui+0x1dc>)
 8005d56:	9302      	str	r3, [sp, #8]
	ILI9341_printText("Results", 100, 20, FCOLOR, BGCOLOR, 3);
 8005d58:	f64f 74ff 	movw	r4, #65535	; 0xffff
	ILI9341_Fill(BGCOLOR);
 8005d5c:	f7ff f9c2 	bl	80050e4 <ILI9341_Fill>
	ILI9341_printText("Results", 100, 20, FCOLOR, BGCOLOR, 3);
 8005d60:	2303      	movs	r3, #3
 8005d62:	9301      	str	r3, [sp, #4]
 8005d64:	9400      	str	r4, [sp, #0]
 8005d66:	2300      	movs	r3, #0
 8005d68:	2214      	movs	r2, #20
 8005d6a:	2164      	movs	r1, #100	; 0x64
 8005d6c:	4866      	ldr	r0, [pc, #408]	; (8005f08 <measure_ui+0x1e0>)
 8005d6e:	f7ff fa61 	bl	8005234 <ILI9341_printText>
	if(dc)
 8005d72:	4b66      	ldr	r3, [pc, #408]	; (8005f0c <measure_ui+0x1e4>)
 8005d74:	781d      	ldrb	r5, [r3, #0]
 8005d76:	2d00      	cmp	r5, #0
 8005d78:	d046      	beq.n	8005e08 <measure_ui+0xe0>
	{
		ILI9341_printText(dC, 100, 60, FCOLOR, BGCOLOR, 2);
 8005d7a:	2502      	movs	r5, #2
 8005d7c:	2300      	movs	r3, #0
 8005d7e:	223c      	movs	r2, #60	; 0x3c
 8005d80:	2164      	movs	r1, #100	; 0x64
 8005d82:	a802      	add	r0, sp, #8
 8005d84:	e88d 0030 	stmia.w	sp, {r4, r5}
 8005d88:	f7ff fa54 	bl	8005234 <ILI9341_printText>
		ILI9341_printText("In: ", 30, 100, FCOLOR, BGCOLOR, 2);
 8005d8c:	2264      	movs	r2, #100	; 0x64
 8005d8e:	2300      	movs	r3, #0
 8005d90:	211e      	movs	r1, #30
 8005d92:	485f      	ldr	r0, [pc, #380]	; (8005f10 <measure_ui+0x1e8>)
 8005d94:	e88d 0030 	stmia.w	sp, {r4, r5}
 8005d98:	f7ff fa4c 	bl	8005234 <ILI9341_printText>
		sprintf(c, "%.2f ",dc1);
 8005d9c:	4b5d      	ldr	r3, [pc, #372]	; (8005f14 <measure_ui+0x1ec>)
 8005d9e:	6818      	ldr	r0, [r3, #0]
 8005da0:	f7fa fbd2 	bl	8000548 <__aeabi_f2d>
 8005da4:	4602      	mov	r2, r0
 8005da6:	460b      	mov	r3, r1
 8005da8:	a809      	add	r0, sp, #36	; 0x24
 8005daa:	495b      	ldr	r1, [pc, #364]	; (8005f18 <measure_ui+0x1f0>)
 8005dac:	f002 f928 	bl	8008000 <sprintf>
		strcat(c, dC);
 8005db0:	a902      	add	r1, sp, #8
 8005db2:	a809      	add	r0, sp, #36	; 0x24
 8005db4:	f002 f948 	bl	8008048 <strcat>
		ILI9341_printText(c, 100,100, FCOLOR, BGCOLOR, 2);
 8005db8:	2264      	movs	r2, #100	; 0x64
 8005dba:	4611      	mov	r1, r2
 8005dbc:	2300      	movs	r3, #0
 8005dbe:	a809      	add	r0, sp, #36	; 0x24
 8005dc0:	e88d 0030 	stmia.w	sp, {r4, r5}
 8005dc4:	f7ff fa36 	bl	8005234 <ILI9341_printText>

		ILI9341_printText("Out: ", 30, 160, FCOLOR, BGCOLOR, 2);
 8005dc8:	22a0      	movs	r2, #160	; 0xa0
 8005dca:	2300      	movs	r3, #0
 8005dcc:	211e      	movs	r1, #30
 8005dce:	4853      	ldr	r0, [pc, #332]	; (8005f1c <measure_ui+0x1f4>)
 8005dd0:	e88d 0030 	stmia.w	sp, {r4, r5}
 8005dd4:	f7ff fa2e 	bl	8005234 <ILI9341_printText>
		sprintf(c, "%.2f ", dc0);
 8005dd8:	4b51      	ldr	r3, [pc, #324]	; (8005f20 <measure_ui+0x1f8>)
 8005dda:	6818      	ldr	r0, [r3, #0]
 8005ddc:	f7fa fbb4 	bl	8000548 <__aeabi_f2d>
 8005de0:	4602      	mov	r2, r0
 8005de2:	460b      	mov	r3, r1
 8005de4:	a809      	add	r0, sp, #36	; 0x24
 8005de6:	494c      	ldr	r1, [pc, #304]	; (8005f18 <measure_ui+0x1f0>)
 8005de8:	f002 f90a 	bl	8008000 <sprintf>
		strcat(c, dC);
 8005dec:	a902      	add	r1, sp, #8
 8005dee:	a809      	add	r0, sp, #36	; 0x24
 8005df0:	f002 f92a 	bl	8008048 <strcat>
		ILI9341_printText(c, 100,160, FCOLOR, BGCOLOR, 2);
 8005df4:	e88d 0030 	stmia.w	sp, {r4, r5}
 8005df8:	2300      	movs	r3, #0
 8005dfa:	22a0      	movs	r2, #160	; 0xa0
		sprintf(c, "%.2f ", rmsMean0);
		strcat(c, rms);
		ILI9341_printText(c, 100,160, FCOLOR, BGCOLOR, 2);
		sprintf(c, "%.2f ", amp0);
		strcat(c, vpp);
		ILI9341_printText(c, 100,180, FCOLOR, BGCOLOR, 2);
 8005dfc:	2164      	movs	r1, #100	; 0x64
 8005dfe:	a809      	add	r0, sp, #36	; 0x24
 8005e00:	f7ff fa18 	bl	8005234 <ILI9341_printText>

	}
}
 8005e04:	b00c      	add	sp, #48	; 0x30
 8005e06:	bd70      	pop	{r4, r5, r6, pc}
		sprintf(c, "%d", frequency);
 8005e08:	4b46      	ldr	r3, [pc, #280]	; (8005f24 <measure_ui+0x1fc>)
 8005e0a:	4947      	ldr	r1, [pc, #284]	; (8005f28 <measure_ui+0x200>)
 8005e0c:	681a      	ldr	r2, [r3, #0]
 8005e0e:	a809      	add	r0, sp, #36	; 0x24
		ILI9341_printText(c, 100, 60, FCOLOR, BGCOLOR, 2);
 8005e10:	2602      	movs	r6, #2
		sprintf(c, "%d", frequency);
 8005e12:	f002 f8f5 	bl	8008000 <sprintf>
		strcat(c, hz);
 8005e16:	a903      	add	r1, sp, #12
 8005e18:	a809      	add	r0, sp, #36	; 0x24
 8005e1a:	f002 f915 	bl	8008048 <strcat>
		ILI9341_printText(c, 100, 60, FCOLOR, BGCOLOR, 2);
 8005e1e:	462b      	mov	r3, r5
 8005e20:	223c      	movs	r2, #60	; 0x3c
 8005e22:	2164      	movs	r1, #100	; 0x64
 8005e24:	a809      	add	r0, sp, #36	; 0x24
 8005e26:	e88d 0050 	stmia.w	sp, {r4, r6}
 8005e2a:	f7ff fa03 	bl	8005234 <ILI9341_printText>
		ILI9341_printText("In: ", 30, 100, FCOLOR, BGCOLOR, 2);
 8005e2e:	2264      	movs	r2, #100	; 0x64
 8005e30:	462b      	mov	r3, r5
 8005e32:	211e      	movs	r1, #30
 8005e34:	4836      	ldr	r0, [pc, #216]	; (8005f10 <measure_ui+0x1e8>)
 8005e36:	e88d 0050 	stmia.w	sp, {r4, r6}
 8005e3a:	f7ff f9fb 	bl	8005234 <ILI9341_printText>
		sprintf(c, "%.2f ",rmsMean1);
 8005e3e:	4b3b      	ldr	r3, [pc, #236]	; (8005f2c <measure_ui+0x204>)
 8005e40:	6818      	ldr	r0, [r3, #0]
 8005e42:	f7fa fb81 	bl	8000548 <__aeabi_f2d>
 8005e46:	4602      	mov	r2, r0
 8005e48:	460b      	mov	r3, r1
 8005e4a:	a809      	add	r0, sp, #36	; 0x24
 8005e4c:	4932      	ldr	r1, [pc, #200]	; (8005f18 <measure_ui+0x1f0>)
 8005e4e:	f002 f8d7 	bl	8008000 <sprintf>
		strcat(c, rms);
 8005e52:	a907      	add	r1, sp, #28
 8005e54:	a809      	add	r0, sp, #36	; 0x24
 8005e56:	f002 f8f7 	bl	8008048 <strcat>
		ILI9341_printText(c, 100,100, FCOLOR, BGCOLOR, 2);
 8005e5a:	2264      	movs	r2, #100	; 0x64
 8005e5c:	4611      	mov	r1, r2
 8005e5e:	462b      	mov	r3, r5
 8005e60:	a809      	add	r0, sp, #36	; 0x24
 8005e62:	e88d 0050 	stmia.w	sp, {r4, r6}
 8005e66:	f7ff f9e5 	bl	8005234 <ILI9341_printText>
		sprintf(c, "%.2f",amp1);
 8005e6a:	4b31      	ldr	r3, [pc, #196]	; (8005f30 <measure_ui+0x208>)
 8005e6c:	6818      	ldr	r0, [r3, #0]
 8005e6e:	f7fa fb6b 	bl	8000548 <__aeabi_f2d>
 8005e72:	4602      	mov	r2, r0
 8005e74:	460b      	mov	r3, r1
 8005e76:	a809      	add	r0, sp, #36	; 0x24
 8005e78:	492e      	ldr	r1, [pc, #184]	; (8005f34 <measure_ui+0x20c>)
 8005e7a:	f002 f8c1 	bl	8008000 <sprintf>
		strcat(c, vpp);
 8005e7e:	a905      	add	r1, sp, #20
 8005e80:	a809      	add	r0, sp, #36	; 0x24
 8005e82:	f002 f8e1 	bl	8008048 <strcat>
		ILI9341_printText(c, 100,120, FCOLOR, BGCOLOR, 2);
 8005e86:	462b      	mov	r3, r5
 8005e88:	2278      	movs	r2, #120	; 0x78
 8005e8a:	2164      	movs	r1, #100	; 0x64
 8005e8c:	a809      	add	r0, sp, #36	; 0x24
 8005e8e:	e88d 0050 	stmia.w	sp, {r4, r6}
 8005e92:	f7ff f9cf 	bl	8005234 <ILI9341_printText>
		ILI9341_printText("Out: ", 30, 160, FCOLOR, BGCOLOR, 2);
 8005e96:	22a0      	movs	r2, #160	; 0xa0
 8005e98:	462b      	mov	r3, r5
 8005e9a:	211e      	movs	r1, #30
 8005e9c:	481f      	ldr	r0, [pc, #124]	; (8005f1c <measure_ui+0x1f4>)
 8005e9e:	e88d 0050 	stmia.w	sp, {r4, r6}
 8005ea2:	f7ff f9c7 	bl	8005234 <ILI9341_printText>
		sprintf(c, "%.2f ", rmsMean0);
 8005ea6:	4b24      	ldr	r3, [pc, #144]	; (8005f38 <measure_ui+0x210>)
 8005ea8:	6818      	ldr	r0, [r3, #0]
 8005eaa:	f7fa fb4d 	bl	8000548 <__aeabi_f2d>
 8005eae:	4602      	mov	r2, r0
 8005eb0:	460b      	mov	r3, r1
 8005eb2:	a809      	add	r0, sp, #36	; 0x24
 8005eb4:	4918      	ldr	r1, [pc, #96]	; (8005f18 <measure_ui+0x1f0>)
 8005eb6:	f002 f8a3 	bl	8008000 <sprintf>
		strcat(c, rms);
 8005eba:	a907      	add	r1, sp, #28
 8005ebc:	a809      	add	r0, sp, #36	; 0x24
 8005ebe:	f002 f8c3 	bl	8008048 <strcat>
		ILI9341_printText(c, 100,160, FCOLOR, BGCOLOR, 2);
 8005ec2:	22a0      	movs	r2, #160	; 0xa0
 8005ec4:	462b      	mov	r3, r5
 8005ec6:	2164      	movs	r1, #100	; 0x64
 8005ec8:	a809      	add	r0, sp, #36	; 0x24
 8005eca:	e88d 0050 	stmia.w	sp, {r4, r6}
 8005ece:	f7ff f9b1 	bl	8005234 <ILI9341_printText>
		sprintf(c, "%.2f ", amp0);
 8005ed2:	4b1a      	ldr	r3, [pc, #104]	; (8005f3c <measure_ui+0x214>)
 8005ed4:	6818      	ldr	r0, [r3, #0]
 8005ed6:	f7fa fb37 	bl	8000548 <__aeabi_f2d>
 8005eda:	4602      	mov	r2, r0
 8005edc:	460b      	mov	r3, r1
 8005ede:	a809      	add	r0, sp, #36	; 0x24
 8005ee0:	490d      	ldr	r1, [pc, #52]	; (8005f18 <measure_ui+0x1f0>)
 8005ee2:	f002 f88d 	bl	8008000 <sprintf>
		strcat(c, vpp);
 8005ee6:	a905      	add	r1, sp, #20
 8005ee8:	a809      	add	r0, sp, #36	; 0x24
 8005eea:	f002 f8ad 	bl	8008048 <strcat>
		ILI9341_printText(c, 100,180, FCOLOR, BGCOLOR, 2);
 8005eee:	e88d 0050 	stmia.w	sp, {r4, r6}
 8005ef2:	462b      	mov	r3, r5
 8005ef4:	22b4      	movs	r2, #180	; 0xb4
 8005ef6:	e781      	b.n	8005dfc <measure_ui+0xd4>
 8005ef8:	0800d76e 	.word	0x0800d76e
 8005efc:	0800d774 	.word	0x0800d774
 8005f00:	0800d77a 	.word	0x0800d77a
 8005f04:	43442020 	.word	0x43442020
 8005f08:	0800d755 	.word	0x0800d755
 8005f0c:	20006704 	.word	0x20006704
 8005f10:	0800d75d 	.word	0x0800d75d
 8005f14:	2000670c 	.word	0x2000670c
 8005f18:	0800d762 	.word	0x0800d762
 8005f1c:	0800d768 	.word	0x0800d768
 8005f20:	20006708 	.word	0x20006708
 8005f24:	2000672c 	.word	0x2000672c
 8005f28:	0800d72b 	.word	0x0800d72b
 8005f2c:	2000673c 	.word	0x2000673c
 8005f30:	200066f8 	.word	0x200066f8
 8005f34:	0800d702 	.word	0x0800d702
 8005f38:	20006738 	.word	0x20006738
 8005f3c:	200066f4 	.word	0x200066f4

08005f40 <call_ui>:
{
 8005f40:	b510      	push	{r4, lr}
	if(ui.start)
 8005f42:	4c0c      	ldr	r4, [pc, #48]	; (8005f74 <call_ui+0x34>)
 8005f44:	7823      	ldrb	r3, [r4, #0]
 8005f46:	b10b      	cbz	r3, 8005f4c <call_ui+0xc>
		start_ui();
 8005f48:	f7ff fd70 	bl	8005a2c <start_ui>
	if(ui.frequency)
 8005f4c:	7863      	ldrb	r3, [r4, #1]
 8005f4e:	b10b      	cbz	r3, 8005f54 <call_ui+0x14>
		frequency_ui();
 8005f50:	f7ff fd94 	bl	8005a7c <frequency_ui>
	if(ui.sweep)
 8005f54:	78a3      	ldrb	r3, [r4, #2]
 8005f56:	b10b      	cbz	r3, 8005f5c <call_ui+0x1c>
		sweep_ui();
 8005f58:	f7ff feb8 	bl	8005ccc <sweep_ui>
	if(ui.amplify)
 8005f5c:	78e3      	ldrb	r3, [r4, #3]
 8005f5e:	b10b      	cbz	r3, 8005f64 <call_ui+0x24>
		amplify_ui();
 8005f60:	f7ff fe26 	bl	8005bb0 <amplify_ui>
	if(ui.measure)
 8005f64:	7923      	ldrb	r3, [r4, #4]
 8005f66:	b11b      	cbz	r3, 8005f70 <call_ui+0x30>
}
 8005f68:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		measure_ui();
 8005f6c:	f7ff bedc 	b.w	8005d28 <measure_ui>
 8005f70:	bd10      	pop	{r4, pc}
 8005f72:	bf00      	nop
 8005f74:	20000009 	.word	0x20000009

08005f78 <HAL_ADC_ConvCpltCallback>:
{//ToDo: Make averaging a user driven parameter
 8005f78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f7c:	ed2d 8b06 	vpush	{d8-d10}
	if(ctrl)
 8005f80:	4bd7      	ldr	r3, [pc, #860]	; (80062e0 <HAL_ADC_ConvCpltCallback+0x368>)
	rms0 = 0, rms1 = 0;
 8005f82:	49d8      	ldr	r1, [pc, #864]	; (80062e4 <HAL_ADC_ConvCpltCallback+0x36c>)
 8005f84:	ed9f 8ad8 	vldr	s16, [pc, #864]	; 80062e8 <HAL_ADC_ConvCpltCallback+0x370>
 8005f88:	4ad8      	ldr	r2, [pc, #864]	; (80062ec <HAL_ADC_ConvCpltCallback+0x374>)
	if(ctrl)
 8005f8a:	7818      	ldrb	r0, [r3, #0]
	rms0 = 0, rms1 = 0;
 8005f8c:	ed81 8a00 	vstr	s16, [r1]
{//ToDo: Make averaging a user driven parameter
 8005f90:	b089      	sub	sp, #36	; 0x24
	rms0 = 0, rms1 = 0;
 8005f92:	ed82 8a00 	vstr	s16, [r2]
 8005f96:	9103      	str	r1, [sp, #12]
 8005f98:	4693      	mov	fp, r2
 8005f9a:	9304      	str	r3, [sp, #16]
	if(ctrl)
 8005f9c:	2800      	cmp	r0, #0
 8005f9e:	f000 8128 	beq.w	80061f2 <HAL_ADC_ConvCpltCallback+0x27a>
		for(int i = 100; i< 100+2*samples; i+=2) // mean value (DC) as float
 8005fa2:	48d3      	ldr	r0, [pc, #844]	; (80062f0 <HAL_ADC_ConvCpltCallback+0x378>)
 8005fa4:	4cd3      	ldr	r4, [pc, #844]	; (80062f4 <HAL_ADC_ConvCpltCallback+0x37c>)
 8005fa6:	6803      	ldr	r3, [r0, #0]
 8005fa8:	9006      	str	r0, [sp, #24]
 8005faa:	f103 0a32 	add.w	sl, r3, #50	; 0x32
			ADC_Result[i] = (float)ADC_Measurement[i];  // copy ADC data into a float array.
 8005fae:	48d2      	ldr	r0, [pc, #840]	; (80062f8 <HAL_ADC_ConvCpltCallback+0x380>)
		for(int i = 100; i< 100+2*samples; i+=2) // mean value (DC) as float
 8005fb0:	ea4f 0a4a 	mov.w	sl, sl, lsl #1
 8005fb4:	4621      	mov	r1, r4
 8005fb6:	2264      	movs	r2, #100	; 0x64
 8005fb8:	eeb0 6a48 	vmov.f32	s12, s16
 8005fbc:	eef0 6a48 	vmov.f32	s13, s16
 8005fc0:	4592      	cmp	sl, r2
 8005fc2:	f101 0108 	add.w	r1, r1, #8
 8005fc6:	f200 84d2 	bhi.w	800696e <HAL_ADC_ConvCpltCallback+0x9f6>
		offSet1/=samples;
 8005fca:	ee07 3a90 	vmov	s15, r3
 8005fce:	eef8 8a67 	vcvt.f32.u32	s17, s15
		for(int i = 100; i< 100+2*samples; i+=2)
 8005fd2:	4623      	mov	r3, r4
		offSet1/=samples;
 8005fd4:	ee86 7a28 	vdiv.f32	s14, s12, s17
		for(int i = 100; i< 100+2*samples; i+=2)
 8005fd8:	2264      	movs	r2, #100	; 0x64
		offSet0/=samples;
 8005fda:	ee86 6aa8 	vdiv.f32	s12, s13, s17
		for(int i = 100; i< 100+2*samples; i+=2)
 8005fde:	4592      	cmp	sl, r2
 8005fe0:	f103 0308 	add.w	r3, r3, #8
 8005fe4:	f200 84db 	bhi.w	800699e <HAL_ADC_ConvCpltCallback+0xa26>
			ADC_Result[i]/=BITDIVIDER;
 8005fe8:	f20f 29c4 	addw	r9, pc, #708	; 0x2c4
 8005fec:	e9d9 8900 	ldrd	r8, r9, [r9]
 8005ff0:	4625      	mov	r5, r4
 8005ff2:	2664      	movs	r6, #100	; 0x64
		for(int i = 100; i< 100+2*samples; i+=2)
 8005ff4:	45b2      	cmp	sl, r6
 8005ff6:	f105 0508 	add.w	r5, r5, #8
 8005ffa:	f200 84df 	bhi.w	80069bc <HAL_ADC_ConvCpltCallback+0xa44>
 8005ffe:	2500      	movs	r5, #0
 8006000:	2300      	movs	r3, #0
 8006002:	462e      	mov	r6, r5
 8006004:	2764      	movs	r7, #100	; 0x64
		for(int i = 100; i< 100+2*samples; i+=2)
 8006006:	45ba      	cmp	sl, r7
 8006008:	f104 0408 	add.w	r4, r4, #8
 800600c:	f200 84f1 	bhi.w	80069f2 <HAL_ADC_ConvCpltCallback+0xa7a>
 8006010:	b11b      	cbz	r3, 800601a <HAL_ADC_ConvCpltCallback+0xa2>
 8006012:	9b03      	ldr	r3, [sp, #12]
 8006014:	f8cb 6000 	str.w	r6, [fp]
 8006018:	601d      	str	r5, [r3, #0]
		rms1=sqrt(rms1/samples)*ADC_PRESCALER;
 800601a:	eddb 7a00 	vldr	s15, [fp]
 800601e:	ee87 7aa8 	vdiv.f32	s14, s15, s17
 8006022:	ee17 0a10 	vmov	r0, s14
 8006026:	f7fa fa8f 	bl	8000548 <__aeabi_f2d>
 800602a:	ec41 0b10 	vmov	d0, r0, r1
 800602e:	f004 fef3 	bl	800ae18 <sqrt>
 8006032:	ec51 0b10 	vmov	r0, r1, d0
 8006036:	f7fa fdd3 	bl	8000be0 <__aeabi_d2f>
		rms0=sqrt(rms0/samples)*ADC_PRESCALER;
 800603a:	9b06      	ldr	r3, [sp, #24]
		rms1=sqrt(rms1/samples)*ADC_PRESCALER;
 800603c:	f8cb 0000 	str.w	r0, [fp]
		rms0=sqrt(rms0/samples)*ADC_PRESCALER;
 8006040:	edd3 7a00 	vldr	s15, [r3]
 8006044:	9b03      	ldr	r3, [sp, #12]
 8006046:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800604a:	ed93 7a00 	vldr	s14, [r3]
 800604e:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8006052:	ee16 0a90 	vmov	r0, s13
 8006056:	f7fa fa77 	bl	8000548 <__aeabi_f2d>
 800605a:	ec41 0b10 	vmov	d0, r0, r1
 800605e:	f004 fedb 	bl	800ae18 <sqrt>
		rms1 *= MULTIPLIER;
 8006062:	f8db 0000 	ldr.w	r0, [fp]
		rms0=sqrt(rms0/samples)*ADC_PRESCALER;
 8006066:	ed8d 0b06 	vstr	d0, [sp, #24]
		rms1 *= MULTIPLIER;
 800606a:	f7fa fa6d 	bl	8000548 <__aeabi_f2d>
 800606e:	a392      	add	r3, pc, #584	; (adr r3, 80062b8 <HAL_ADC_ConvCpltCallback+0x340>)
 8006070:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006074:	f7fa fabc 	bl	80005f0 <__aeabi_dmul>
 8006078:	f7fa fdb2 	bl	8000be0 <__aeabi_d2f>
		rms0 *= 1/(8.5e-11*pow(frequency,2)-2.7e-6*frequency+1);
 800607c:	4b9f      	ldr	r3, [pc, #636]	; (80062fc <HAL_ADC_ConvCpltCallback+0x384>)
		rms1 *= MULTIPLIER;
 800607e:	f8cb 0000 	str.w	r0, [fp]
 8006082:	ee09 0a10 	vmov	s18, r0
		rms0 *= 1/(8.5e-11*pow(frequency,2)-2.7e-6*frequency+1);
 8006086:	6818      	ldr	r0, [r3, #0]
 8006088:	f7fa fa4c 	bl	8000524 <__aeabi_i2d>
 800608c:	4602      	mov	r2, r0
 800608e:	460b      	mov	r3, r1
 8006090:	4604      	mov	r4, r0
 8006092:	460d      	mov	r5, r1
 8006094:	f7fa faac 	bl	80005f0 <__aeabi_dmul>
 8006098:	a389      	add	r3, pc, #548	; (adr r3, 80062c0 <HAL_ADC_ConvCpltCallback+0x348>)
 800609a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800609e:	f7fa faa7 	bl	80005f0 <__aeabi_dmul>
 80060a2:	a389      	add	r3, pc, #548	; (adr r3, 80062c8 <HAL_ADC_ConvCpltCallback+0x350>)
 80060a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060a8:	4606      	mov	r6, r0
 80060aa:	460f      	mov	r7, r1
 80060ac:	4620      	mov	r0, r4
 80060ae:	4629      	mov	r1, r5
 80060b0:	f7fa fa9e 	bl	80005f0 <__aeabi_dmul>
 80060b4:	4602      	mov	r2, r0
 80060b6:	460b      	mov	r3, r1
 80060b8:	4630      	mov	r0, r6
 80060ba:	4639      	mov	r1, r7
 80060bc:	f7fa f8e4 	bl	8000288 <__aeabi_dsub>
 80060c0:	2200      	movs	r2, #0
 80060c2:	4b8f      	ldr	r3, [pc, #572]	; (8006300 <HAL_ADC_ConvCpltCallback+0x388>)
		if(amp<1)
 80060c4:	4e8f      	ldr	r6, [pc, #572]	; (8006304 <HAL_ADC_ConvCpltCallback+0x38c>)
		rms0 *= 1/(8.5e-11*pow(frequency,2)-2.7e-6*frequency+1);
 80060c6:	f7fa f8e1 	bl	800028c <__adddf3>
 80060ca:	4602      	mov	r2, r0
 80060cc:	460b      	mov	r3, r1
 80060ce:	2000      	movs	r0, #0
 80060d0:	498b      	ldr	r1, [pc, #556]	; (8006300 <HAL_ADC_ConvCpltCallback+0x388>)
 80060d2:	f7fa fbb7 	bl	8000844 <__aeabi_ddiv>
		rms0=sqrt(rms0/samples)*ADC_PRESCALER;
 80060d6:	ed9d 0b06 	vldr	d0, [sp, #24]
		rms0 *= 1/(8.5e-11*pow(frequency,2)-2.7e-6*frequency+1);
 80060da:	4604      	mov	r4, r0
 80060dc:	460d      	mov	r5, r1
		rms0=sqrt(rms0/samples)*ADC_PRESCALER;
 80060de:	ec51 0b10 	vmov	r0, r1, d0
 80060e2:	f7fa fd7d 	bl	8000be0 <__aeabi_d2f>
		rms0 *= MULTIPLIER;
 80060e6:	f7fa fa2f 	bl	8000548 <__aeabi_f2d>
 80060ea:	a373      	add	r3, pc, #460	; (adr r3, 80062b8 <HAL_ADC_ConvCpltCallback+0x340>)
 80060ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060f0:	f7fa fa7e 	bl	80005f0 <__aeabi_dmul>
 80060f4:	f7fa fd74 	bl	8000be0 <__aeabi_d2f>
		rms0 *= 1/(8.5e-11*pow(frequency,2)-2.7e-6*frequency+1);
 80060f8:	f7fa fa26 	bl	8000548 <__aeabi_f2d>
 80060fc:	4602      	mov	r2, r0
 80060fe:	460b      	mov	r3, r1
 8006100:	4620      	mov	r0, r4
 8006102:	4629      	mov	r1, r5
 8006104:	f7fa fa74 	bl	80005f0 <__aeabi_dmul>
 8006108:	f7fa fd6a 	bl	8000be0 <__aeabi_d2f>
		amp1 = 2*rms1*sqrt(2);
 800610c:	ee79 7a09 	vadd.f32	s15, s18, s18
		rms0 *= 1/(8.5e-11*pow(frequency,2)-2.7e-6*frequency+1);
 8006110:	9b03      	ldr	r3, [sp, #12]
		amp1 = 2*rms1*sqrt(2);
 8006112:	4c7d      	ldr	r4, [pc, #500]	; (8006308 <HAL_ADC_ConvCpltCallback+0x390>)
		rms0 *= 1/(8.5e-11*pow(frequency,2)-2.7e-6*frequency+1);
 8006114:	6018      	str	r0, [r3, #0]
 8006116:	ee08 0a90 	vmov	s17, r0
		amp1 = 2*rms1*sqrt(2);
 800611a:	ee17 0a90 	vmov	r0, s15
 800611e:	f7fa fa13 	bl	8000548 <__aeabi_f2d>
 8006122:	a36b      	add	r3, pc, #428	; (adr r3, 80062d0 <HAL_ADC_ConvCpltCallback+0x358>)
 8006124:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006128:	f7fa fa62 	bl	80005f0 <__aeabi_dmul>
 800612c:	f7fa fd58 	bl	8000be0 <__aeabi_d2f>
		amp0 = 2*rms0*sqrt(2);
 8006130:	ee78 7aa8 	vadd.f32	s15, s17, s17
		amp1 = 2*rms1*sqrt(2);
 8006134:	6020      	str	r0, [r4, #0]
		amp0 = 2*rms0*sqrt(2);
 8006136:	ee17 0a90 	vmov	r0, s15
 800613a:	f7fa fa05 	bl	8000548 <__aeabi_f2d>
 800613e:	a364      	add	r3, pc, #400	; (adr r3, 80062d0 <HAL_ADC_ConvCpltCallback+0x358>)
 8006140:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006144:	f7fa fa54 	bl	80005f0 <__aeabi_dmul>
 8006148:	f7fa fd4a 	bl	8000be0 <__aeabi_d2f>
		if(amp<1)
 800614c:	ed96 7a00 	vldr	s14, [r6]
		amp0 = 2*rms0*sqrt(2);
 8006150:	4b6e      	ldr	r3, [pc, #440]	; (800630c <HAL_ADC_ConvCpltCallback+0x394>)
		if(amp<1)
 8006152:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8006156:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800615a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
		amp0 = 2*rms0*sqrt(2);
 800615e:	6018      	str	r0, [r3, #0]
		if(amp<1)
 8006160:	d51e      	bpl.n	80061a0 <HAL_ADC_ConvCpltCallback+0x228>
			potOneValue[1]=254;
 8006162:	4a6b      	ldr	r2, [pc, #428]	; (8006310 <HAL_ADC_ConvCpltCallback+0x398>)
			potTwoValue[1]=25;
 8006164:	4d6b      	ldr	r5, [pc, #428]	; (8006314 <HAL_ADC_ConvCpltCallback+0x39c>)
			HAL_I2C_Master_Transmit(&hi2c1, 0x50, potOneValue, 2,10 );
 8006166:	486c      	ldr	r0, [pc, #432]	; (8006318 <HAL_ADC_ConvCpltCallback+0x3a0>)
			potOneValue[1]=254;
 8006168:	23fe      	movs	r3, #254	; 0xfe
 800616a:	7053      	strb	r3, [r2, #1]
			HAL_I2C_Master_Transmit(&hi2c1, 0x50, potOneValue, 2,10 );
 800616c:	270a      	movs	r7, #10
			potTwoValue[1]=25;
 800616e:	2319      	movs	r3, #25
 8006170:	706b      	strb	r3, [r5, #1]
			HAL_I2C_Master_Transmit(&hi2c1, 0x50, potOneValue, 2,10 );
 8006172:	2150      	movs	r1, #80	; 0x50
 8006174:	2302      	movs	r3, #2
 8006176:	9700      	str	r7, [sp, #0]
 8006178:	f7fb ff14 	bl	8001fa4 <HAL_I2C_Master_Transmit>
			HAL_I2C_Master_Transmit(&hi2c1, 0x50, potTwoValue, 2,10 );
 800617c:	462a      	mov	r2, r5
 800617e:	2302      	movs	r3, #2
 8006180:	2150      	movs	r1, #80	; 0x50
			clear_ui(&ui);
 8006182:	4d66      	ldr	r5, [pc, #408]	; (800631c <HAL_ADC_ConvCpltCallback+0x3a4>)
			HAL_I2C_Master_Transmit(&hi2c1, 0x50, potTwoValue, 2,10 );
 8006184:	9700      	str	r7, [sp, #0]
 8006186:	4864      	ldr	r0, [pc, #400]	; (8006318 <HAL_ADC_ConvCpltCallback+0x3a0>)
 8006188:	f7fb ff0c 	bl	8001fa4 <HAL_I2C_Master_Transmit>
			ctrl = 0;
 800618c:	9a04      	ldr	r2, [sp, #16]
 800618e:	2300      	movs	r3, #0
			clear_ui(&ui);
 8006190:	4628      	mov	r0, r5
			ctrl = 0;
 8006192:	7013      	strb	r3, [r2, #0]
			clear_ui(&ui);
 8006194:	f7ff fc42 	bl	8005a1c <clear_ui>
			ui.frequency = 1;
 8006198:	2301      	movs	r3, #1
 800619a:	706b      	strb	r3, [r5, #1]
			call_ui();
 800619c:	f7ff fed0 	bl	8005f40 <call_ui>
		if(amp1 > amp*1.01)
 80061a0:	6820      	ldr	r0, [r4, #0]
 80061a2:	f7fa f9d1 	bl	8000548 <__aeabi_f2d>
 80061a6:	4604      	mov	r4, r0
 80061a8:	6830      	ldr	r0, [r6, #0]
 80061aa:	460d      	mov	r5, r1
 80061ac:	f7fa f9cc 	bl	8000548 <__aeabi_f2d>
 80061b0:	a349      	add	r3, pc, #292	; (adr r3, 80062d8 <HAL_ADC_ConvCpltCallback+0x360>)
 80061b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061b6:	4606      	mov	r6, r0
 80061b8:	460f      	mov	r7, r1
 80061ba:	f7fa fa19 	bl	80005f0 <__aeabi_dmul>
 80061be:	4602      	mov	r2, r0
 80061c0:	460b      	mov	r3, r1
 80061c2:	4620      	mov	r0, r4
 80061c4:	4629      	mov	r1, r5
 80061c6:	f7fa fca3 	bl	8000b10 <__aeabi_dcmpgt>
 80061ca:	2800      	cmp	r0, #0
 80061cc:	f000 8472 	beq.w	8006ab4 <HAL_ADC_ConvCpltCallback+0xb3c>
			potOneValue[1]++;
 80061d0:	4c4f      	ldr	r4, [pc, #316]	; (8006310 <HAL_ADC_ConvCpltCallback+0x398>)
			HAL_I2C_Master_Transmit(&hi2c1, 0x50, potOneValue, 2,10 );
 80061d2:	4851      	ldr	r0, [pc, #324]	; (8006318 <HAL_ADC_ConvCpltCallback+0x3a0>)
			potOneValue[1]++;
 80061d4:	7863      	ldrb	r3, [r4, #1]
 80061d6:	3301      	adds	r3, #1
 80061d8:	7063      	strb	r3, [r4, #1]
			HAL_I2C_Master_Transmit(&hi2c1, 0x50, potOneValue, 2,10 );
 80061da:	230a      	movs	r3, #10
 80061dc:	9300      	str	r3, [sp, #0]
 80061de:	4622      	mov	r2, r4
 80061e0:	2302      	movs	r3, #2
 80061e2:	2150      	movs	r1, #80	; 0x50
 80061e4:	f7fb fede 	bl	8001fa4 <HAL_I2C_Master_Transmit>
			if(potOneValue[1] > 254)
 80061e8:	7863      	ldrb	r3, [r4, #1]
 80061ea:	2bff      	cmp	r3, #255	; 0xff
 80061ec:	d101      	bne.n	80061f2 <HAL_ADC_ConvCpltCallback+0x27a>
				potOneValue[1] = 1;
 80061ee:	2301      	movs	r3, #1
				potOneValue[1] = 254;
 80061f0:	7063      	strb	r3, [r4, #1]
	if(ui.measure)
 80061f2:	4b4a      	ldr	r3, [pc, #296]	; (800631c <HAL_ADC_ConvCpltCallback+0x3a4>)
 80061f4:	9304      	str	r3, [sp, #16]
 80061f6:	791a      	ldrb	r2, [r3, #4]
 80061f8:	2a00      	cmp	r2, #0
 80061fa:	f000 81b4 	beq.w	8006566 <HAL_ADC_ConvCpltCallback+0x5ee>
		for(int i = 0; i< 2*samples; i+=2) // mean value (DC) as float
 80061fe:	4b3c      	ldr	r3, [pc, #240]	; (80062f0 <HAL_ADC_ConvCpltCallback+0x378>)
 8006200:	4c47      	ldr	r4, [pc, #284]	; (8006320 <HAL_ADC_ConvCpltCallback+0x3a8>)
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	eddf 7a38 	vldr	s15, [pc, #224]	; 80062e8 <HAL_ADC_ConvCpltCallback+0x370>
			ADC_Result[i] = (float)ADC_Measurement[i];  // copy ADC data into a float array.
 8006208:	483b      	ldr	r0, [pc, #236]	; (80062f8 <HAL_ADC_ConvCpltCallback+0x380>)
		for(int i = 0; i< 2*samples; i+=2) // mean value (DC) as float
 800620a:	ea4f 0a43 	mov.w	sl, r3, lsl #1
 800620e:	4621      	mov	r1, r4
 8006210:	2200      	movs	r2, #0
 8006212:	eeb0 6a67 	vmov.f32	s12, s15
 8006216:	4592      	cmp	sl, r2
 8006218:	f101 0108 	add.w	r1, r1, #8
 800621c:	f200 847c 	bhi.w	8006b18 <HAL_ADC_ConvCpltCallback+0xba0>
		offSet1/=samples;
 8006220:	ee07 3a10 	vmov	s14, r3
 8006224:	eef8 8a47 	vcvt.f32.u32	s17, s14
		for(int i = 0; i< 2*samples; i+=2)
 8006228:	4623      	mov	r3, r4
		offSet1/=samples;
 800622a:	eec7 9aa8 	vdiv.f32	s19, s15, s17
		for(int i = 0; i< 2*samples; i+=2)
 800622e:	2200      	movs	r2, #0
		offSet0/=samples;
 8006230:	ee86 aa28 	vdiv.f32	s20, s12, s17
		for(int i = 0; i< 2*samples; i+=2)
 8006234:	4592      	cmp	sl, r2
 8006236:	f103 0308 	add.w	r3, r3, #8
 800623a:	f200 8485 	bhi.w	8006b48 <HAL_ADC_ConvCpltCallback+0xbd0>
			ADC_Result[i]/=BITDIVIDER;
 800623e:	a71c      	add	r7, pc, #112	; (adr r7, 80062b0 <HAL_ADC_ConvCpltCallback+0x338>)
 8006240:	e9d7 6700 	ldrd	r6, r7, [r7]
 8006244:	4625      	mov	r5, r4
 8006246:	f04f 0800 	mov.w	r8, #0
		for(int i = 0; i< 2*samples; i+=2)
 800624a:	45d0      	cmp	r8, sl
 800624c:	f105 0508 	add.w	r5, r5, #8
 8006250:	f0c0 8489 	bcc.w	8006b66 <HAL_ADC_ConvCpltCallback+0xbee>
 8006254:	9b03      	ldr	r3, [sp, #12]
 8006256:	f8db 6000 	ldr.w	r6, [fp]
 800625a:	681d      	ldr	r5, [r3, #0]
 800625c:	2300      	movs	r3, #0
 800625e:	461f      	mov	r7, r3
		for(int i = 0; i< 2*samples; i+=2)
 8006260:	45ba      	cmp	sl, r7
 8006262:	f104 0408 	add.w	r4, r4, #8
 8006266:	f200 849a 	bhi.w	8006b9e <HAL_ADC_ConvCpltCallback+0xc26>
 800626a:	b11b      	cbz	r3, 8006274 <HAL_ADC_ConvCpltCallback+0x2fc>
 800626c:	9b03      	ldr	r3, [sp, #12]
 800626e:	f8cb 6000 	str.w	r6, [fp]
 8006272:	601d      	str	r5, [r3, #0]
		rms1=sqrt(rms1/samples)*ADC_PRESCALER;
 8006274:	eddb 7a00 	vldr	s15, [fp]
		amp1 = rms1*2*sqrt(2);
 8006278:	f8df 908c 	ldr.w	r9, [pc, #140]	; 8006308 <HAL_ADC_ConvCpltCallback+0x390>
		amp0 = rms0*2*sqrt(2);
 800627c:	f8df 808c 	ldr.w	r8, [pc, #140]	; 800630c <HAL_ADC_ConvCpltCallback+0x394>
		rms1=sqrt(rms1/samples)*ADC_PRESCALER;
 8006280:	ee87 7aa8 	vdiv.f32	s14, s15, s17
 8006284:	ee17 0a10 	vmov	r0, s14
 8006288:	f7fa f95e 	bl	8000548 <__aeabi_f2d>
 800628c:	ec41 0b10 	vmov	d0, r0, r1
 8006290:	f004 fdc2 	bl	800ae18 <sqrt>
 8006294:	ec51 0b10 	vmov	r0, r1, d0
 8006298:	f7fa fca2 	bl	8000be0 <__aeabi_d2f>
		rms0=sqrt(rms0/samples)*ADC_PRESCALER;
 800629c:	4b14      	ldr	r3, [pc, #80]	; (80062f0 <HAL_ADC_ConvCpltCallback+0x378>)
		rms1=sqrt(rms1/samples)*ADC_PRESCALER;
 800629e:	f8cb 0000 	str.w	r0, [fp]
		rms0=sqrt(rms0/samples)*ADC_PRESCALER;
 80062a2:	edd3 7a00 	vldr	s15, [r3]
 80062a6:	9b03      	ldr	r3, [sp, #12]
 80062a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80062ac:	e03a      	b.n	8006324 <HAL_ADC_ConvCpltCallback+0x3ac>
 80062ae:	bf00      	nop
 80062b0:	b6db6db7 	.word	0xb6db6db7
 80062b4:	4096db6d 	.word	0x4096db6d
 80062b8:	e2be2be4 	.word	0xe2be2be4
 80062bc:	401ebe2b 	.word	0x401ebe2b
 80062c0:	df90fadf 	.word	0xdf90fadf
 80062c4:	3dd75d57 	.word	0x3dd75d57
 80062c8:	b28f33e5 	.word	0xb28f33e5
 80062cc:	3ec6a634 	.word	0x3ec6a634
 80062d0:	667f3bcd 	.word	0x667f3bcd
 80062d4:	3ff6a09e 	.word	0x3ff6a09e
 80062d8:	c28f5c29 	.word	0xc28f5c29
 80062dc:	3ff028f5 	.word	0x3ff028f5
 80062e0:	20006700 	.word	0x20006700
 80062e4:	2000ef34 	.word	0x2000ef34
 80062e8:	00000000 	.word	0x00000000
 80062ec:	20006734 	.word	0x20006734
 80062f0:	20006740 	.word	0x20006740
 80062f4:	2000286c 	.word	0x2000286c
 80062f8:	200006dc 	.word	0x200006dc
 80062fc:	2000672c 	.word	0x2000672c
 8006300:	3ff00000 	.word	0x3ff00000
 8006304:	200066f0 	.word	0x200066f0
 8006308:	200066f8 	.word	0x200066f8
 800630c:	200066f4 	.word	0x200066f4
 8006310:	2000ef25 	.word	0x2000ef25
 8006314:	2000ef27 	.word	0x2000ef27
 8006318:	20006d5c 	.word	0x20006d5c
 800631c:	20000009 	.word	0x20000009
 8006320:	200026e0 	.word	0x200026e0
 8006324:	ed93 7a00 	vldr	s14, [r3]
 8006328:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800632c:	ee16 0a90 	vmov	r0, s13
 8006330:	f7fa f90a 	bl	8000548 <__aeabi_f2d>
 8006334:	ec41 0b10 	vmov	d0, r0, r1
 8006338:	f004 fd6e 	bl	800ae18 <sqrt>
		rms0 *= 1/(8.5e-11*pow(frequency,2)-2.7e-6*frequency+1);
 800633c:	4bde      	ldr	r3, [pc, #888]	; (80066b8 <HAL_ADC_ConvCpltCallback+0x740>)
 800633e:	6818      	ldr	r0, [r3, #0]
		rms0=sqrt(rms0/samples)*ADC_PRESCALER;
 8006340:	ed8d 0b06 	vstr	d0, [sp, #24]
		rms0 *= 1/(8.5e-11*pow(frequency,2)-2.7e-6*frequency+1);
 8006344:	f7fa f8ee 	bl	8000524 <__aeabi_i2d>
 8006348:	4602      	mov	r2, r0
 800634a:	460b      	mov	r3, r1
 800634c:	4604      	mov	r4, r0
 800634e:	460d      	mov	r5, r1
 8006350:	f7fa f94e 	bl	80005f0 <__aeabi_dmul>
 8006354:	a3cc      	add	r3, pc, #816	; (adr r3, 8006688 <HAL_ADC_ConvCpltCallback+0x710>)
 8006356:	e9d3 2300 	ldrd	r2, r3, [r3]
 800635a:	f7fa f949 	bl	80005f0 <__aeabi_dmul>
 800635e:	a3cc      	add	r3, pc, #816	; (adr r3, 8006690 <HAL_ADC_ConvCpltCallback+0x718>)
 8006360:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006364:	460f      	mov	r7, r1
 8006366:	4606      	mov	r6, r0
 8006368:	4629      	mov	r1, r5
 800636a:	4620      	mov	r0, r4
 800636c:	f7fa f940 	bl	80005f0 <__aeabi_dmul>
 8006370:	4602      	mov	r2, r0
 8006372:	460b      	mov	r3, r1
 8006374:	4630      	mov	r0, r6
 8006376:	4639      	mov	r1, r7
 8006378:	f7f9 ff86 	bl	8000288 <__aeabi_dsub>
 800637c:	2200      	movs	r2, #0
 800637e:	4bcf      	ldr	r3, [pc, #828]	; (80066bc <HAL_ADC_ConvCpltCallback+0x744>)
		rmsMean0 += rms0;
 8006380:	4fcf      	ldr	r7, [pc, #828]	; (80066c0 <HAL_ADC_ConvCpltCallback+0x748>)
		rms0 *= 1/(8.5e-11*pow(frequency,2)-2.7e-6*frequency+1);
 8006382:	f7f9 ff83 	bl	800028c <__adddf3>
 8006386:	4602      	mov	r2, r0
 8006388:	460b      	mov	r3, r1
 800638a:	2000      	movs	r0, #0
 800638c:	49cb      	ldr	r1, [pc, #812]	; (80066bc <HAL_ADC_ConvCpltCallback+0x744>)
 800638e:	f7fa fa59 	bl	8000844 <__aeabi_ddiv>
		rms0=sqrt(rms0/samples)*ADC_PRESCALER;
 8006392:	ed9d 0b06 	vldr	d0, [sp, #24]
		rms0 *= 1/(8.5e-11*pow(frequency,2)-2.7e-6*frequency+1);
 8006396:	4604      	mov	r4, r0
 8006398:	460d      	mov	r5, r1
		rms0=sqrt(rms0/samples)*ADC_PRESCALER;
 800639a:	ec51 0b10 	vmov	r0, r1, d0
 800639e:	f7fa fc1f 	bl	8000be0 <__aeabi_d2f>
		rms0 *= 1/(8.5e-11*pow(frequency,2)-2.7e-6*frequency+1);
 80063a2:	f7fa f8d1 	bl	8000548 <__aeabi_f2d>
 80063a6:	4602      	mov	r2, r0
 80063a8:	460b      	mov	r3, r1
 80063aa:	4620      	mov	r0, r4
 80063ac:	4629      	mov	r1, r5
 80063ae:	f7fa f91f 	bl	80005f0 <__aeabi_dmul>
 80063b2:	f7fa fc15 	bl	8000be0 <__aeabi_d2f>
		amp1 = rms1*2*sqrt(2);
 80063b6:	ed9b 9a00 	vldr	s18, [fp]
		rms0 *= 1/(8.5e-11*pow(frequency,2)-2.7e-6*frequency+1);
 80063ba:	9b03      	ldr	r3, [sp, #12]
		if(ctr == AVG-1)
 80063bc:	4cc1      	ldr	r4, [pc, #772]	; (80066c4 <HAL_ADC_ConvCpltCallback+0x74c>)
		rms0 *= 1/(8.5e-11*pow(frequency,2)-2.7e-6*frequency+1);
 80063be:	6018      	str	r0, [r3, #0]
		amp1 = rms1*2*sqrt(2);
 80063c0:	ee79 7a09 	vadd.f32	s15, s18, s18
		rms0 *= 1/(8.5e-11*pow(frequency,2)-2.7e-6*frequency+1);
 80063c4:	ee08 0a90 	vmov	s17, r0
		amp1 = rms1*2*sqrt(2);
 80063c8:	ee17 0a90 	vmov	r0, s15
 80063cc:	f7fa f8bc 	bl	8000548 <__aeabi_f2d>
 80063d0:	a3b1      	add	r3, pc, #708	; (adr r3, 8006698 <HAL_ADC_ConvCpltCallback+0x720>)
 80063d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063d6:	f7fa f90b 	bl	80005f0 <__aeabi_dmul>
 80063da:	f7fa fc01 	bl	8000be0 <__aeabi_d2f>
		amp0 = rms0*2*sqrt(2);
 80063de:	ee78 7aa8 	vadd.f32	s15, s17, s17
		amp1 = rms1*2*sqrt(2);
 80063e2:	f8c9 0000 	str.w	r0, [r9]
		amp0 = rms0*2*sqrt(2);
 80063e6:	ee17 0a90 	vmov	r0, s15
 80063ea:	f7fa f8ad 	bl	8000548 <__aeabi_f2d>
 80063ee:	a3aa      	add	r3, pc, #680	; (adr r3, 8006698 <HAL_ADC_ConvCpltCallback+0x720>)
 80063f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063f4:	f7fa f8fc 	bl	80005f0 <__aeabi_dmul>
 80063f8:	f7fa fbf2 	bl	8000be0 <__aeabi_d2f>
		rmsMean1 += rms1;
 80063fc:	4bb2      	ldr	r3, [pc, #712]	; (80066c8 <HAL_ADC_ConvCpltCallback+0x750>)
		if(ctr == AVG-1)
 80063fe:	7822      	ldrb	r2, [r4, #0]
		rmsMean1 += rms1;
 8006400:	edd3 7a00 	vldr	s15, [r3]
		amp0 = rms0*2*sqrt(2);
 8006404:	f8c8 0000 	str.w	r0, [r8]
		rmsMean1 += rms1;
 8006408:	ee39 9a27 	vadd.f32	s18, s18, s15
		rmsMean0 += rms0;
 800640c:	edd7 7a00 	vldr	s15, [r7]
		rmsMean1 += rms1;
 8006410:	ed83 9a00 	vstr	s18, [r3]
		rmsMean0 += rms0;
 8006414:	ee78 8aa7 	vadd.f32	s17, s17, s15
		if(ctr == AVG-1)
 8006418:	2ac7      	cmp	r2, #199	; 0xc7
		rmsMean0 += rms0;
 800641a:	edc7 8a00 	vstr	s17, [r7]
 800641e:	469a      	mov	sl, r3
		if(ctr == AVG-1)
 8006420:	f040 809d 	bne.w	800655e <HAL_ADC_ConvCpltCallback+0x5e6>
			rmsMean1 /= AVG;
 8006424:	eddf aaa9 	vldr	s21, [pc, #676]	; 80066cc <HAL_ADC_ConvCpltCallback+0x754>
			dc0 += 0.07;
 8006428:	4ea9      	ldr	r6, [pc, #676]	; (80066d0 <HAL_ADC_ConvCpltCallback+0x758>)
			rmsMean1 *= MULTIPLIER;
 800642a:	eec9 7a2a 	vdiv.f32	s15, s18, s21
			ctr = 0;
 800642e:	2500      	movs	r5, #0
			rmsMean1 *= MULTIPLIER;
 8006430:	ee17 0a90 	vmov	r0, s15
 8006434:	f7fa f888 	bl	8000548 <__aeabi_f2d>
 8006438:	a399      	add	r3, pc, #612	; (adr r3, 80066a0 <HAL_ADC_ConvCpltCallback+0x728>)
 800643a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800643e:	f7fa f8d7 	bl	80005f0 <__aeabi_dmul>
 8006442:	f7fa fbcd 	bl	8000be0 <__aeabi_d2f>
			rmsMean0 *= MULTIPLIER;
 8006446:	eec8 7aaa 	vdiv.f32	s15, s17, s21
			rmsMean1 *= MULTIPLIER;
 800644a:	f8ca 0000 	str.w	r0, [sl]
 800644e:	ee09 0a10 	vmov	s18, r0
			rmsMean0 *= MULTIPLIER;
 8006452:	ee17 0a90 	vmov	r0, s15
 8006456:	f7fa f877 	bl	8000548 <__aeabi_f2d>
 800645a:	a391      	add	r3, pc, #580	; (adr r3, 80066a0 <HAL_ADC_ConvCpltCallback+0x728>)
 800645c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006460:	f7fa f8c6 	bl	80005f0 <__aeabi_dmul>
 8006464:	f7fa fbbc 	bl	8000be0 <__aeabi_d2f>
			amp1 = 2*rmsMean1*sqrt(2);
 8006468:	ee79 7a09 	vadd.f32	s15, s18, s18
			rmsMean0 *= MULTIPLIER;
 800646c:	ee08 0a90 	vmov	s17, r0
 8006470:	6038      	str	r0, [r7, #0]
			amp1 = 2*rmsMean1*sqrt(2);
 8006472:	ee17 0a90 	vmov	r0, s15
 8006476:	f7fa f867 	bl	8000548 <__aeabi_f2d>
 800647a:	a387      	add	r3, pc, #540	; (adr r3, 8006698 <HAL_ADC_ConvCpltCallback+0x720>)
 800647c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006480:	f7fa f8b6 	bl	80005f0 <__aeabi_dmul>
 8006484:	f7fa fbac 	bl	8000be0 <__aeabi_d2f>
			amp0 = 2*rmsMean0*sqrt(2);
 8006488:	ee78 7aa8 	vadd.f32	s15, s17, s17
			amp1 = 2*rmsMean1*sqrt(2);
 800648c:	f8c9 0000 	str.w	r0, [r9]
			amp0 = 2*rmsMean0*sqrt(2);
 8006490:	ee17 0a90 	vmov	r0, s15
 8006494:	f7fa f858 	bl	8000548 <__aeabi_f2d>
 8006498:	a37f      	add	r3, pc, #508	; (adr r3, 8006698 <HAL_ADC_ConvCpltCallback+0x720>)
 800649a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800649e:	f7fa f8a7 	bl	80005f0 <__aeabi_dmul>
 80064a2:	f7fa fb9d 	bl	8000be0 <__aeabi_d2f>
			ctr = 0;
 80064a6:	7025      	strb	r5, [r4, #0]
			amp0 = 2*rmsMean0*sqrt(2);
 80064a8:	f8c8 0000 	str.w	r0, [r8]
			dc0 /= BITDIVIDER;
 80064ac:	ee1a 0a10 	vmov	r0, s20
 80064b0:	f7fa f84a 	bl	8000548 <__aeabi_f2d>
 80064b4:	a37c      	add	r3, pc, #496	; (adr r3, 80066a8 <HAL_ADC_ConvCpltCallback+0x730>)
 80064b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064ba:	f7fa f9c3 	bl	8000844 <__aeabi_ddiv>
 80064be:	f7fa fb8f 	bl	8000be0 <__aeabi_d2f>
			dc0 += 0.07;
 80064c2:	f7fa f841 	bl	8000548 <__aeabi_f2d>
 80064c6:	a37a      	add	r3, pc, #488	; (adr r3, 80066b0 <HAL_ADC_ConvCpltCallback+0x738>)
 80064c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064cc:	f7f9 fede 	bl	800028c <__adddf3>
 80064d0:	f7fa fb86 	bl	8000be0 <__aeabi_d2f>
 80064d4:	6030      	str	r0, [r6, #0]
			dc1 /= BITDIVIDER;
 80064d6:	ee19 0a90 	vmov	r0, s19
 80064da:	f7fa f835 	bl	8000548 <__aeabi_f2d>
 80064de:	a372      	add	r3, pc, #456	; (adr r3, 80066a8 <HAL_ADC_ConvCpltCallback+0x730>)
 80064e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064e4:	f7fa f9ae 	bl	8000844 <__aeabi_ddiv>
 80064e8:	f7fa fb7a 	bl	8000be0 <__aeabi_d2f>
			dc1 += 0.07;
 80064ec:	f7fa f82c 	bl	8000548 <__aeabi_f2d>
 80064f0:	a36f      	add	r3, pc, #444	; (adr r3, 80066b0 <HAL_ADC_ConvCpltCallback+0x738>)
 80064f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064f6:	f7f9 fec9 	bl	800028c <__adddf3>
 80064fa:	f7fa fb71 	bl	8000be0 <__aeabi_d2f>
 80064fe:	4b75      	ldr	r3, [pc, #468]	; (80066d4 <HAL_ADC_ConvCpltCallback+0x75c>)
 8006500:	6018      	str	r0, [r3, #0]
			if(dc)
 8006502:	4b75      	ldr	r3, [pc, #468]	; (80066d8 <HAL_ADC_ConvCpltCallback+0x760>)
 8006504:	781c      	ldrb	r4, [r3, #0]
 8006506:	2c00      	cmp	r4, #0
 8006508:	f000 8379 	beq.w	8006bfe <HAL_ADC_ConvCpltCallback+0xc86>
				sprintf(c, "%.2f", dc1);
 800650c:	f7fa f81c 	bl	8000548 <__aeabi_f2d>
 8006510:	4602      	mov	r2, r0
 8006512:	460b      	mov	r3, r1
 8006514:	4871      	ldr	r0, [pc, #452]	; (80066dc <HAL_ADC_ConvCpltCallback+0x764>)
 8006516:	4972      	ldr	r1, [pc, #456]	; (80066e0 <HAL_ADC_ConvCpltCallback+0x768>)
 8006518:	f001 fd72 	bl	8008000 <sprintf>
				ILI9341_printText(c, 100,100, FCOLOR, BGCOLOR, 2);
 800651c:	f64f 74ff 	movw	r4, #65535	; 0xffff
 8006520:	2264      	movs	r2, #100	; 0x64
 8006522:	2702      	movs	r7, #2
 8006524:	462b      	mov	r3, r5
 8006526:	4611      	mov	r1, r2
 8006528:	486c      	ldr	r0, [pc, #432]	; (80066dc <HAL_ADC_ConvCpltCallback+0x764>)
 800652a:	e88d 0090 	stmia.w	sp, {r4, r7}
 800652e:	f7fe fe81 	bl	8005234 <ILI9341_printText>
				sprintf(c, "%.2f", dc0);
 8006532:	6830      	ldr	r0, [r6, #0]
 8006534:	f7fa f808 	bl	8000548 <__aeabi_f2d>
 8006538:	4602      	mov	r2, r0
 800653a:	460b      	mov	r3, r1
 800653c:	4867      	ldr	r0, [pc, #412]	; (80066dc <HAL_ADC_ConvCpltCallback+0x764>)
 800653e:	4968      	ldr	r1, [pc, #416]	; (80066e0 <HAL_ADC_ConvCpltCallback+0x768>)
 8006540:	f001 fd5e 	bl	8008000 <sprintf>
				ILI9341_printText(c, 100,160, FCOLOR, BGCOLOR, 2);
 8006544:	e88d 0090 	stmia.w	sp, {r4, r7}
 8006548:	462b      	mov	r3, r5
 800654a:	22a0      	movs	r2, #160	; 0xa0
				ILI9341_printText(c, 100,180, FCOLOR, BGCOLOR, 2);
 800654c:	2164      	movs	r1, #100	; 0x64
 800654e:	4863      	ldr	r0, [pc, #396]	; (80066dc <HAL_ADC_ConvCpltCallback+0x764>)
 8006550:	f7fe fe70 	bl	8005234 <ILI9341_printText>
			rmsMean0 = 0;
 8006554:	4b5a      	ldr	r3, [pc, #360]	; (80066c0 <HAL_ADC_ConvCpltCallback+0x748>)
			rmsMean1 = 0;
 8006556:	ed8a 8a00 	vstr	s16, [sl]
			rmsMean0 = 0;
 800655a:	ed83 8a00 	vstr	s16, [r3]
		ctr++;
 800655e:	4a59      	ldr	r2, [pc, #356]	; (80066c4 <HAL_ADC_ConvCpltCallback+0x74c>)
 8006560:	7813      	ldrb	r3, [r2, #0]
 8006562:	3301      	adds	r3, #1
 8006564:	7013      	strb	r3, [r2, #0]
	if(ui.sweep && swp)
 8006566:	9b04      	ldr	r3, [sp, #16]
 8006568:	789b      	ldrb	r3, [r3, #2]
 800656a:	2b00      	cmp	r3, #0
 800656c:	f000 81fa 	beq.w	8006964 <HAL_ADC_ConvCpltCallback+0x9ec>
 8006570:	4b5c      	ldr	r3, [pc, #368]	; (80066e4 <HAL_ADC_ConvCpltCallback+0x76c>)
 8006572:	781b      	ldrb	r3, [r3, #0]
 8006574:	2b00      	cmp	r3, #0
 8006576:	f000 81f5 	beq.w	8006964 <HAL_ADC_ConvCpltCallback+0x9ec>
		for(int i = 100; i< 100+2*samples; i+=2) // mean value (DC) as float
 800657a:	4b5b      	ldr	r3, [pc, #364]	; (80066e8 <HAL_ADC_ConvCpltCallback+0x770>)
 800657c:	4c5b      	ldr	r4, [pc, #364]	; (80066ec <HAL_ADC_ConvCpltCallback+0x774>)
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	eddf 7a5b 	vldr	s15, [pc, #364]	; 80066f0 <HAL_ADC_ConvCpltCallback+0x778>
			ADC_Result[i] = (float)ADC_Measurement[i];  // copy ADC data into a float array.
 8006584:	485b      	ldr	r0, [pc, #364]	; (80066f4 <HAL_ADC_ConvCpltCallback+0x77c>)
		for(int i = 100; i< 100+2*samples; i+=2) // mean value (DC) as float
 8006586:	f103 0532 	add.w	r5, r3, #50	; 0x32
 800658a:	006d      	lsls	r5, r5, #1
 800658c:	4621      	mov	r1, r4
 800658e:	2264      	movs	r2, #100	; 0x64
 8006590:	eeb0 6a67 	vmov.f32	s12, s15
 8006594:	42aa      	cmp	r2, r5
 8006596:	f101 0108 	add.w	r1, r1, #8
 800659a:	f0c0 8377 	bcc.w	8006c8c <HAL_ADC_ConvCpltCallback+0xd14>
		offSet1/=samples;
 800659e:	ee07 3a10 	vmov	s14, r3
 80065a2:	eeb8 8a47 	vcvt.f32.u32	s16, s14
		for(int i = 100; i< 100+2*samples; i+=2)
 80065a6:	4623      	mov	r3, r4
		offSet1/=samples;
 80065a8:	ee87 7a88 	vdiv.f32	s14, s15, s16
		for(int i = 100; i< 100+2*samples; i+=2)
 80065ac:	2264      	movs	r2, #100	; 0x64
		offSet0/=samples;
 80065ae:	eec6 6a08 	vdiv.f32	s13, s12, s16
		for(int i = 100; i< 100+2*samples; i+=2)
 80065b2:	4295      	cmp	r5, r2
 80065b4:	f103 0308 	add.w	r3, r3, #8
 80065b8:	f200 837f 	bhi.w	8006cba <HAL_ADC_ConvCpltCallback+0xd42>
			ADC_Result[i]/=BITDIVIDER;
 80065bc:	a73a      	add	r7, pc, #232	; (adr r7, 80066a8 <HAL_ADC_ConvCpltCallback+0x730>)
 80065be:	e9d7 6700 	ldrd	r6, r7, [r7]
 80065c2:	46a0      	mov	r8, r4
 80065c4:	f04f 0964 	mov.w	r9, #100	; 0x64
		for(int i = 100; i< 100+2*samples; i+=2)
 80065c8:	45a9      	cmp	r9, r5
 80065ca:	f108 0808 	add.w	r8, r8, #8
 80065ce:	f0c0 8382 	bcc.w	8006cd6 <HAL_ADC_ConvCpltCallback+0xd5e>
 80065d2:	9b03      	ldr	r3, [sp, #12]
 80065d4:	f8db 7000 	ldr.w	r7, [fp]
 80065d8:	681e      	ldr	r6, [r3, #0]
 80065da:	f04f 0a64 	mov.w	sl, #100	; 0x64
 80065de:	2300      	movs	r3, #0
		for(int i = 100; i< 100+2*samples; i+=2)
 80065e0:	45aa      	cmp	sl, r5
 80065e2:	f104 0408 	add.w	r4, r4, #8
 80065e6:	f0c0 8391 	bcc.w	8006d0c <HAL_ADC_ConvCpltCallback+0xd94>
 80065ea:	b11b      	cbz	r3, 80065f4 <HAL_ADC_ConvCpltCallback+0x67c>
 80065ec:	9b03      	ldr	r3, [sp, #12]
 80065ee:	f8cb 7000 	str.w	r7, [fp]
 80065f2:	601e      	str	r6, [r3, #0]
		rms1=sqrt(rms1/samples)*ADC_PRESCALER;
 80065f4:	eddb 7a00 	vldr	s15, [fp]
		rms0=sqrt(rms0/samples)*ADC_PRESCALER;
 80065f8:	4d3b      	ldr	r5, [pc, #236]	; (80066e8 <HAL_ADC_ConvCpltCallback+0x770>)
		rms0 *= 1/(8.5e-11*pow(frequency,2)-2.7e-6*frequency+1);
 80065fa:	4c2f      	ldr	r4, [pc, #188]	; (80066b8 <HAL_ADC_ConvCpltCallback+0x740>)
		amp1 = rms1*2*sqrt(2);
 80065fc:	f8df a0f8 	ldr.w	sl, [pc, #248]	; 80066f8 <HAL_ADC_ConvCpltCallback+0x780>
		rms1=sqrt(rms1/samples)*ADC_PRESCALER;
 8006600:	ee87 7a88 	vdiv.f32	s14, s15, s16
 8006604:	ee17 0a10 	vmov	r0, s14
 8006608:	f7f9 ff9e 	bl	8000548 <__aeabi_f2d>
 800660c:	ec41 0b10 	vmov	d0, r0, r1
 8006610:	f004 fc02 	bl	800ae18 <sqrt>
 8006614:	ec51 0b10 	vmov	r0, r1, d0
 8006618:	f7fa fae2 	bl	8000be0 <__aeabi_d2f>
		rms0=sqrt(rms0/samples)*ADC_PRESCALER;
 800661c:	9b03      	ldr	r3, [sp, #12]
 800661e:	edd5 7a00 	vldr	s15, [r5]
 8006622:	ed93 7a00 	vldr	s14, [r3]
		rms1=sqrt(rms1/samples)*ADC_PRESCALER;
 8006626:	f8cb 0000 	str.w	r0, [fp]
		rms0=sqrt(rms0/samples)*ADC_PRESCALER;
 800662a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800662e:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8006632:	ee16 0a90 	vmov	r0, s13
 8006636:	f7f9 ff87 	bl	8000548 <__aeabi_f2d>
 800663a:	ec41 0b10 	vmov	d0, r0, r1
 800663e:	f004 fbeb 	bl	800ae18 <sqrt>
		rms0 *= 1/(8.5e-11*pow(frequency,2)-2.7e-6*frequency+1);
 8006642:	ed94 9a00 	vldr	s18, [r4]
 8006646:	ee19 0a10 	vmov	r0, s18
		rms0=sqrt(rms0/samples)*ADC_PRESCALER;
 800664a:	ed8d 0b04 	vstr	d0, [sp, #16]
		rms0 *= 1/(8.5e-11*pow(frequency,2)-2.7e-6*frequency+1);
 800664e:	f7f9 ff69 	bl	8000524 <__aeabi_i2d>
 8006652:	4602      	mov	r2, r0
 8006654:	460b      	mov	r3, r1
 8006656:	4680      	mov	r8, r0
 8006658:	4689      	mov	r9, r1
 800665a:	f7f9 ffc9 	bl	80005f0 <__aeabi_dmul>
 800665e:	a30a      	add	r3, pc, #40	; (adr r3, 8006688 <HAL_ADC_ConvCpltCallback+0x710>)
 8006660:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006664:	f7f9 ffc4 	bl	80005f0 <__aeabi_dmul>
 8006668:	a309      	add	r3, pc, #36	; (adr r3, 8006690 <HAL_ADC_ConvCpltCallback+0x718>)
 800666a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800666e:	4606      	mov	r6, r0
 8006670:	460f      	mov	r7, r1
 8006672:	4640      	mov	r0, r8
 8006674:	4649      	mov	r1, r9
 8006676:	f7f9 ffbb 	bl	80005f0 <__aeabi_dmul>
 800667a:	4602      	mov	r2, r0
 800667c:	460b      	mov	r3, r1
 800667e:	4630      	mov	r0, r6
 8006680:	4639      	mov	r1, r7
 8006682:	e03b      	b.n	80066fc <HAL_ADC_ConvCpltCallback+0x784>
 8006684:	f3af 8000 	nop.w
 8006688:	df90fadf 	.word	0xdf90fadf
 800668c:	3dd75d57 	.word	0x3dd75d57
 8006690:	b28f33e5 	.word	0xb28f33e5
 8006694:	3ec6a634 	.word	0x3ec6a634
 8006698:	667f3bcd 	.word	0x667f3bcd
 800669c:	3ff6a09e 	.word	0x3ff6a09e
 80066a0:	e2be2be4 	.word	0xe2be2be4
 80066a4:	401ebe2b 	.word	0x401ebe2b
 80066a8:	b6db6db7 	.word	0xb6db6db7
 80066ac:	4096db6d 	.word	0x4096db6d
 80066b0:	1eb851ec 	.word	0x1eb851ec
 80066b4:	3fb1eb85 	.word	0x3fb1eb85
 80066b8:	2000672c 	.word	0x2000672c
 80066bc:	3ff00000 	.word	0x3ff00000
 80066c0:	20006738 	.word	0x20006738
 80066c4:	200066fe 	.word	0x200066fe
 80066c8:	2000673c 	.word	0x2000673c
 80066cc:	43480000 	.word	0x43480000
 80066d0:	20006708 	.word	0x20006708
 80066d4:	2000670c 	.word	0x2000670c
 80066d8:	20006704 	.word	0x20006704
 80066dc:	20007218 	.word	0x20007218
 80066e0:	0800d702 	.word	0x0800d702
 80066e4:	20006748 	.word	0x20006748
 80066e8:	20006740 	.word	0x20006740
 80066ec:	2000286c 	.word	0x2000286c
 80066f0:	00000000 	.word	0x00000000
 80066f4:	200006dc 	.word	0x200006dc
 80066f8:	200066f8 	.word	0x200066f8
 80066fc:	f7f9 fdc4 	bl	8000288 <__aeabi_dsub>
 8006700:	2200      	movs	r2, #0
 8006702:	4bd9      	ldr	r3, [pc, #868]	; (8006a68 <HAL_ADC_ConvCpltCallback+0xaf0>)
		rmsMean1 += rms1;
 8006704:	f8df 939c 	ldr.w	r9, [pc, #924]	; 8006aa4 <HAL_ADC_ConvCpltCallback+0xb2c>
		rmsMean0 += rms0;
 8006708:	f8df 839c 	ldr.w	r8, [pc, #924]	; 8006aa8 <HAL_ADC_ConvCpltCallback+0xb30>
		rms0 *= 1/(8.5e-11*pow(frequency,2)-2.7e-6*frequency+1);
 800670c:	f7f9 fdbe 	bl	800028c <__adddf3>
 8006710:	4602      	mov	r2, r0
 8006712:	460b      	mov	r3, r1
 8006714:	2000      	movs	r0, #0
 8006716:	49d4      	ldr	r1, [pc, #848]	; (8006a68 <HAL_ADC_ConvCpltCallback+0xaf0>)
 8006718:	f7fa f894 	bl	8000844 <__aeabi_ddiv>
		rms0=sqrt(rms0/samples)*ADC_PRESCALER;
 800671c:	ed9d 0b04 	vldr	d0, [sp, #16]
		rms0 *= 1/(8.5e-11*pow(frequency,2)-2.7e-6*frequency+1);
 8006720:	4606      	mov	r6, r0
 8006722:	460f      	mov	r7, r1
		rms0=sqrt(rms0/samples)*ADC_PRESCALER;
 8006724:	ec51 0b10 	vmov	r0, r1, d0
 8006728:	f7fa fa5a 	bl	8000be0 <__aeabi_d2f>
		rms0 *= 1/(8.5e-11*pow(frequency,2)-2.7e-6*frequency+1);
 800672c:	f7f9 ff0c 	bl	8000548 <__aeabi_f2d>
 8006730:	4602      	mov	r2, r0
 8006732:	460b      	mov	r3, r1
 8006734:	4630      	mov	r0, r6
 8006736:	4639      	mov	r1, r7
 8006738:	f7f9 ff5a 	bl	80005f0 <__aeabi_dmul>
 800673c:	f7fa fa50 	bl	8000be0 <__aeabi_d2f>
		amp1 = rms1*2*sqrt(2);
 8006740:	eddb 8a00 	vldr	s17, [fp]
		rms0 *= 1/(8.5e-11*pow(frequency,2)-2.7e-6*frequency+1);
 8006744:	9b03      	ldr	r3, [sp, #12]
		if(ctr >= AVG - 1)
 8006746:	4ec9      	ldr	r6, [pc, #804]	; (8006a6c <HAL_ADC_ConvCpltCallback+0xaf4>)
		rms0 *= 1/(8.5e-11*pow(frequency,2)-2.7e-6*frequency+1);
 8006748:	6018      	str	r0, [r3, #0]
		amp1 = rms1*2*sqrt(2);
 800674a:	ee78 7aa8 	vadd.f32	s15, s17, s17
		rms0 *= 1/(8.5e-11*pow(frequency,2)-2.7e-6*frequency+1);
 800674e:	ee08 0a10 	vmov	s16, r0
		amp1 = rms1*2*sqrt(2);
 8006752:	ee17 0a90 	vmov	r0, s15
 8006756:	f7f9 fef7 	bl	8000548 <__aeabi_f2d>
 800675a:	a3bf      	add	r3, pc, #764	; (adr r3, 8006a58 <HAL_ADC_ConvCpltCallback+0xae0>)
 800675c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006760:	f7f9 ff46 	bl	80005f0 <__aeabi_dmul>
 8006764:	f7fa fa3c 	bl	8000be0 <__aeabi_d2f>
		amp0 = rms0*2*sqrt(2);
 8006768:	ee78 7a08 	vadd.f32	s15, s16, s16
		amp1 = rms1*2*sqrt(2);
 800676c:	f8ca 0000 	str.w	r0, [sl]
		amp0 = rms0*2*sqrt(2);
 8006770:	ee17 0a90 	vmov	r0, s15
 8006774:	f7f9 fee8 	bl	8000548 <__aeabi_f2d>
 8006778:	a3b7      	add	r3, pc, #732	; (adr r3, 8006a58 <HAL_ADC_ConvCpltCallback+0xae0>)
 800677a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800677e:	f7f9 ff37 	bl	80005f0 <__aeabi_dmul>
 8006782:	f7fa fa2d 	bl	8000be0 <__aeabi_d2f>
		rmsMean1 += rms1;
 8006786:	edd9 7a00 	vldr	s15, [r9]
		if(ctr >= AVG - 1)
 800678a:	7833      	ldrb	r3, [r6, #0]
		amp0 = rms0*2*sqrt(2);
 800678c:	4fb8      	ldr	r7, [pc, #736]	; (8006a70 <HAL_ADC_ConvCpltCallback+0xaf8>)
		rmsMean1 += rms1;
 800678e:	ee78 8aa7 	vadd.f32	s17, s17, s15
		rmsMean0 += rms0;
 8006792:	edd8 7a00 	vldr	s15, [r8]
		amp0 = rms0*2*sqrt(2);
 8006796:	6038      	str	r0, [r7, #0]
		rmsMean0 += rms0;
 8006798:	ee38 8a27 	vadd.f32	s16, s16, s15
		if(ctr >= AVG - 1)
 800679c:	2bc6      	cmp	r3, #198	; 0xc6
		rmsMean1 += rms1;
 800679e:	edc9 8a00 	vstr	s17, [r9]
		rmsMean0 += rms0;
 80067a2:	ed88 8a00 	vstr	s16, [r8]
		if(ctr >= AVG - 1)
 80067a6:	f240 80bf 	bls.w	8006928 <HAL_ADC_ConvCpltCallback+0x9b0>
			rmsMean1 /= AVG;
 80067aa:	ed9f aab2 	vldr	s20, [pc, #712]	; 8006a74 <HAL_ADC_ConvCpltCallback+0xafc>
				writeOut[sweepCtr][0] = amp1;
 80067ae:	f8df b2fc 	ldr.w	fp, [pc, #764]	; 8006aac <HAL_ADC_ConvCpltCallback+0xb34>
			rmsMean1 *= MULTIPLIER;
 80067b2:	eec8 7a8a 	vdiv.f32	s15, s17, s20
				writeOut[sweepCtr][2] = (float)frequency;
 80067b6:	eeb8 9ac9 	vcvt.f32.s32	s18, s18
			rmsMean1 *= MULTIPLIER;
 80067ba:	ee17 0a90 	vmov	r0, s15
 80067be:	f7f9 fec3 	bl	8000548 <__aeabi_f2d>
 80067c2:	a3a7      	add	r3, pc, #668	; (adr r3, 8006a60 <HAL_ADC_ConvCpltCallback+0xae8>)
 80067c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067c8:	f7f9 ff12 	bl	80005f0 <__aeabi_dmul>
 80067cc:	f7fa fa08 	bl	8000be0 <__aeabi_d2f>
			rmsMean0 *= MULTIPLIER;
 80067d0:	eec8 7a0a 	vdiv.f32	s15, s16, s20
			rmsMean1 *= MULTIPLIER;
 80067d4:	f8c9 0000 	str.w	r0, [r9]
 80067d8:	ee09 0a90 	vmov	s19, r0
			rmsMean0 *= MULTIPLIER;
 80067dc:	ee17 0a90 	vmov	r0, s15
 80067e0:	f7f9 feb2 	bl	8000548 <__aeabi_f2d>
 80067e4:	a39e      	add	r3, pc, #632	; (adr r3, 8006a60 <HAL_ADC_ConvCpltCallback+0xae8>)
 80067e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067ea:	f7f9 ff01 	bl	80005f0 <__aeabi_dmul>
 80067ee:	f7fa f9f7 	bl	8000be0 <__aeabi_d2f>
			amp1 = 2*rmsMean1*sqrt(2);
 80067f2:	ee79 7aa9 	vadd.f32	s15, s19, s19
			rmsMean0 *= MULTIPLIER;
 80067f6:	f8c8 0000 	str.w	r0, [r8]
 80067fa:	ee08 0a90 	vmov	s17, r0
			amp1 = 2*rmsMean1*sqrt(2);
 80067fe:	ee17 0a90 	vmov	r0, s15
 8006802:	f7f9 fea1 	bl	8000548 <__aeabi_f2d>
 8006806:	a394      	add	r3, pc, #592	; (adr r3, 8006a58 <HAL_ADC_ConvCpltCallback+0xae0>)
 8006808:	e9d3 2300 	ldrd	r2, r3, [r3]
 800680c:	f7f9 fef0 	bl	80005f0 <__aeabi_dmul>
 8006810:	f7fa f9e6 	bl	8000be0 <__aeabi_d2f>
			amp0 = 2*rmsMean0*sqrt(2);
 8006814:	ee78 7aa8 	vadd.f32	s15, s17, s17
			amp1 = 2*rmsMean1*sqrt(2);
 8006818:	ee08 0a10 	vmov	s16, r0
 800681c:	f8ca 0000 	str.w	r0, [sl]
			amp0 = 2*rmsMean0*sqrt(2);
 8006820:	ee17 0a90 	vmov	r0, s15
 8006824:	f7f9 fe90 	bl	8000548 <__aeabi_f2d>
 8006828:	a38b      	add	r3, pc, #556	; (adr r3, 8006a58 <HAL_ADC_ConvCpltCallback+0xae0>)
 800682a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800682e:	f7f9 fedf 	bl	80005f0 <__aeabi_dmul>
 8006832:	f7fa f9d5 	bl	8000be0 <__aeabi_d2f>
 8006836:	ee07 0a90 	vmov	s15, r0
				writeOut[sweepCtr][3] = 20*log10(amp0/amp1);
 800683a:	ee87 7a88 	vdiv.f32	s14, s15, s16
			amp0 = 2*rmsMean0*sqrt(2);
 800683e:	6038      	str	r0, [r7, #0]
				writeOut[sweepCtr][0] = amp1;
 8006840:	f8bb a000 	ldrh.w	sl, [fp]
 8006844:	4f8c      	ldr	r7, [pc, #560]	; (8006a78 <HAL_ADC_ConvCpltCallback+0xb00>)
 8006846:	eb07 170a 	add.w	r7, r7, sl, lsl #4
				sweepCtr++;
 800684a:	f10a 0a01 	add.w	sl, sl, #1
				writeOut[sweepCtr][1] = amp0;
 800684e:	6078      	str	r0, [r7, #4]
				writeOut[sweepCtr][0] = amp1;
 8006850:	ed87 8a00 	vstr	s16, [r7]
				writeOut[sweepCtr][3] = 20*log10(amp0/amp1);
 8006854:	ee17 0a10 	vmov	r0, s14
				writeOut[sweepCtr][2] = (float)frequency;
 8006858:	ed87 9a02 	vstr	s18, [r7, #8]
				writeOut[sweepCtr][3] = 20*log10(amp0/amp1);
 800685c:	f7f9 fe74 	bl	8000548 <__aeabi_f2d>
 8006860:	ec41 0b10 	vmov	d0, r0, r1
 8006864:	f004 f8e0 	bl	800aa28 <log10>
 8006868:	2200      	movs	r2, #0
 800686a:	ec51 0b10 	vmov	r0, r1, d0
 800686e:	4b83      	ldr	r3, [pc, #524]	; (8006a7c <HAL_ADC_ConvCpltCallback+0xb04>)
 8006870:	f7f9 febe 	bl	80005f0 <__aeabi_dmul>
 8006874:	f7fa f9b4 	bl	8000be0 <__aeabi_d2f>
				rmsMean1 = 0;
 8006878:	2300      	movs	r3, #0
 800687a:	f8c9 3000 	str.w	r3, [r9]
				rmsMean0 = 0;
 800687e:	f8c8 3000 	str.w	r3, [r8]
				frequency += STEP;
 8006882:	6823      	ldr	r3, [r4, #0]
				writeOut[sweepCtr][3] = 20*log10(amp0/amp1);
 8006884:	60f8      	str	r0, [r7, #12]
				frequency += STEP;
 8006886:	3364      	adds	r3, #100	; 0x64
				ctr = 0;
 8006888:	2700      	movs	r7, #0
				samples = SPS / frequency;
 800688a:	4a7d      	ldr	r2, [pc, #500]	; (8006a80 <HAL_ADC_ConvCpltCallback+0xb08>)
				frequency += STEP;
 800688c:	6023      	str	r3, [r4, #0]
				sweepCtr++;
 800688e:	f8ab a000 	strh.w	sl, [fp]
				samples = SPS / frequency;
 8006892:	fb92 f3f3 	sdiv	r3, r2, r3
				ctr = 0;
 8006896:	7037      	strb	r7, [r6, #0]
				samples = SPS / frequency;
 8006898:	602b      	str	r3, [r5, #0]
				TIM8->ARR = (HAL_RCC_GetHCLKFreq()/((TIM8->PSC+1)*samples*frequency));
 800689a:	f7fb fea3 	bl	80025e4 <HAL_RCC_GetHCLKFreq>
 800689e:	4979      	ldr	r1, [pc, #484]	; (8006a84 <HAL_ADC_ConvCpltCallback+0xb0c>)
 80068a0:	6823      	ldr	r3, [r4, #0]
 80068a2:	6a8a      	ldr	r2, [r1, #40]	; 0x28
				free(SineDynamic);
 80068a4:	f8df 8208 	ldr.w	r8, [pc, #520]	; 8006ab0 <HAL_ADC_ConvCpltCallback+0xb38>
				TIM8->ARR = (HAL_RCC_GetHCLKFreq()/((TIM8->PSC+1)*samples*frequency));
 80068a8:	fb02 3203 	mla	r2, r2, r3, r3
 80068ac:	682b      	ldr	r3, [r5, #0]
 80068ae:	4353      	muls	r3, r2
 80068b0:	fbb0 f3f3 	udiv	r3, r0, r3
				free(SineDynamic);
 80068b4:	f8d8 0000 	ldr.w	r0, [r8]
				TIM8->ARR = (HAL_RCC_GetHCLKFreq()/((TIM8->PSC+1)*samples*frequency));
 80068b8:	62cb      	str	r3, [r1, #44]	; 0x2c
				free(SineDynamic);
 80068ba:	f001 f96f 	bl	8007b9c <free>
				SineDynamic = (uint16_t*) malloc(samples * sizeof(uint16_t));
 80068be:	f8d5 9000 	ldr.w	r9, [r5]
 80068c2:	ea4f 0049 	mov.w	r0, r9, lsl #1
 80068c6:	f001 f961 	bl	8007b8c <malloc>
				create_sine(&SineDynamic[0], samples, frequency);
 80068ca:	6822      	ldr	r2, [r4, #0]
				SineDynamic = (uint16_t*) malloc(samples * sizeof(uint16_t));
 80068cc:	f8c8 0000 	str.w	r0, [r8]
				create_sine(&SineDynamic[0], samples, frequency);
 80068d0:	4649      	mov	r1, r9
 80068d2:	f7ff f839 	bl	8005948 <create_sine>
				HAL_DAC_Stop_DMA(&hdac, DAC_CHANNEL_1);
 80068d6:	4639      	mov	r1, r7
 80068d8:	486b      	ldr	r0, [pc, #428]	; (8006a88 <HAL_ADC_ConvCpltCallback+0xb10>)
 80068da:	f7fa fea9 	bl	8001630 <HAL_DAC_Stop_DMA>
				HAL_DAC_Start_DMA(&hdac, DAC_CHANNEL_1, (uint32_t * ) SineDynamic, samples, DAC_ALIGN_12B_R);
 80068de:	9700      	str	r7, [sp, #0]
 80068e0:	682b      	ldr	r3, [r5, #0]
 80068e2:	f8d8 2000 	ldr.w	r2, [r8]
 80068e6:	4868      	ldr	r0, [pc, #416]	; (8006a88 <HAL_ADC_ConvCpltCallback+0xb10>)
 80068e8:	4639      	mov	r1, r7
 80068ea:	f7fa fe3d 	bl	8001568 <HAL_DAC_Start_DMA>
				sprintf(c, "%.2f",(float)frequency);
 80068ee:	edd4 7a00 	vldr	s15, [r4]
 80068f2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80068f6:	ee17 0a90 	vmov	r0, s15
 80068fa:	f7f9 fe25 	bl	8000548 <__aeabi_f2d>
 80068fe:	4602      	mov	r2, r0
 8006900:	460b      	mov	r3, r1
 8006902:	4862      	ldr	r0, [pc, #392]	; (8006a8c <HAL_ADC_ConvCpltCallback+0xb14>)
 8006904:	4962      	ldr	r1, [pc, #392]	; (8006a90 <HAL_ADC_ConvCpltCallback+0xb18>)
 8006906:	f001 fb7b 	bl	8008000 <sprintf>
				strcat(c, " Hz");
 800690a:	4962      	ldr	r1, [pc, #392]	; (8006a94 <HAL_ADC_ConvCpltCallback+0xb1c>)
 800690c:	485f      	ldr	r0, [pc, #380]	; (8006a8c <HAL_ADC_ConvCpltCallback+0xb14>)
 800690e:	f001 fb9b 	bl	8008048 <strcat>
				ILI9341_printText(c, 10,110, FCOLOR, BGCOLOR, 3);
 8006912:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006916:	2303      	movs	r3, #3
 8006918:	e88d 000c 	stmia.w	sp, {r2, r3}
 800691c:	210a      	movs	r1, #10
 800691e:	463b      	mov	r3, r7
 8006920:	226e      	movs	r2, #110	; 0x6e
 8006922:	485a      	ldr	r0, [pc, #360]	; (8006a8c <HAL_ADC_ConvCpltCallback+0xb14>)
 8006924:	f7fe fc86 	bl	8005234 <ILI9341_printText>
		ctr++;
 8006928:	7833      	ldrb	r3, [r6, #0]
		if(frequency > 20000)
 800692a:	6822      	ldr	r2, [r4, #0]
		ctr++;
 800692c:	3301      	adds	r3, #1
 800692e:	7033      	strb	r3, [r6, #0]
		if(frequency > 20000)
 8006930:	f644 6320 	movw	r3, #20000	; 0x4e20
 8006934:	429a      	cmp	r2, r3
 8006936:	dd15      	ble.n	8006964 <HAL_ADC_ConvCpltCallback+0x9ec>
			swp = 0;
 8006938:	4b57      	ldr	r3, [pc, #348]	; (8006a98 <HAL_ADC_ConvCpltCallback+0xb20>)
			ILI9341_printText("Analysis completed!", 10, 100, FCOLOR, BGCOLOR, 2);
 800693a:	4858      	ldr	r0, [pc, #352]	; (8006a9c <HAL_ADC_ConvCpltCallback+0xb24>)
			swp = 0;
 800693c:	2400      	movs	r4, #0
			ILI9341_printText("Analysis completed!", 10, 100, FCOLOR, BGCOLOR, 2);
 800693e:	f64f 75ff 	movw	r5, #65535	; 0xffff
 8006942:	2602      	movs	r6, #2
			swp = 0;
 8006944:	701c      	strb	r4, [r3, #0]
			ILI9341_printText("Analysis completed!", 10, 100, FCOLOR, BGCOLOR, 2);
 8006946:	2264      	movs	r2, #100	; 0x64
 8006948:	4623      	mov	r3, r4
 800694a:	210a      	movs	r1, #10
 800694c:	e88d 0060 	stmia.w	sp, {r5, r6}
 8006950:	f7fe fc70 	bl	8005234 <ILI9341_printText>
			ILI9341_printText("\"Down\"-Button to store." , 10, 120, FCOLOR, BGCOLOR,2);
 8006954:	e88d 0060 	stmia.w	sp, {r5, r6}
 8006958:	4623      	mov	r3, r4
 800695a:	2278      	movs	r2, #120	; 0x78
 800695c:	210a      	movs	r1, #10
 800695e:	4850      	ldr	r0, [pc, #320]	; (8006aa0 <HAL_ADC_ConvCpltCallback+0xb28>)
 8006960:	f7fe fc68 	bl	8005234 <ILI9341_printText>
}
 8006964:	b009      	add	sp, #36	; 0x24
 8006966:	ecbd 8b06 	vpop	{d8-d10}
 800696a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			ADC_Result[i] = (float)ADC_Measurement[i];  // copy ADC data into a float array.
 800696e:	f830 5012 	ldrh.w	r5, [r0, r2, lsl #1]
 8006972:	ee07 5a10 	vmov	s14, r5
			ADC_Result[i+1] = (float)ADC_Measurement[i+1];
 8006976:	eb00 0542 	add.w	r5, r0, r2, lsl #1
			ADC_Result[i] = (float)ADC_Measurement[i];  // copy ADC data into a float array.
 800697a:	eeb8 7a47 	vcvt.f32.u32	s14, s14
			ADC_Result[i+1] = (float)ADC_Measurement[i+1];
 800697e:	886d      	ldrh	r5, [r5, #2]
			ADC_Result[i] = (float)ADC_Measurement[i];  // copy ADC data into a float array.
 8006980:	ed01 7a02 	vstr	s14, [r1, #-8]
			ADC_Result[i+1] = (float)ADC_Measurement[i+1];
 8006984:	ee07 5a90 	vmov	s15, r5
 8006988:	eef8 7a67 	vcvt.f32.u32	s15, s15
			offSet1 += ADC_Result[i];
 800698c:	ee36 6a07 	vadd.f32	s12, s12, s14
			ADC_Result[i+1] = (float)ADC_Measurement[i+1];
 8006990:	ed41 7a01 	vstr	s15, [r1, #-4]
			offSet0 += ADC_Result[i+1];
 8006994:	ee76 6aa7 	vadd.f32	s13, s13, s15
		for(int i = 100; i< 100+2*samples; i+=2) // mean value (DC) as float
 8006998:	3202      	adds	r2, #2
 800699a:	f7ff bb11 	b.w	8005fc0 <HAL_ADC_ConvCpltCallback+0x48>
			ADC_Result[i]-=offSet1;
 800699e:	ed53 7a02 	vldr	s15, [r3, #-8]
 80069a2:	ee77 7ac7 	vsub.f32	s15, s15, s14
		for(int i = 100; i< 100+2*samples; i+=2)
 80069a6:	3202      	adds	r2, #2
			ADC_Result[i]-=offSet1;
 80069a8:	ed43 7a02 	vstr	s15, [r3, #-8]
			ADC_Result[i+1]-=offSet0;
 80069ac:	ed53 7a01 	vldr	s15, [r3, #-4]
 80069b0:	ee77 7ac6 	vsub.f32	s15, s15, s12
 80069b4:	ed43 7a01 	vstr	s15, [r3, #-4]
 80069b8:	f7ff bb11 	b.w	8005fde <HAL_ADC_ConvCpltCallback+0x66>
			ADC_Result[i]/=BITDIVIDER;
 80069bc:	f855 0c08 	ldr.w	r0, [r5, #-8]
 80069c0:	f7f9 fdc2 	bl	8000548 <__aeabi_f2d>
 80069c4:	4642      	mov	r2, r8
 80069c6:	464b      	mov	r3, r9
 80069c8:	f7f9 ff3c 	bl	8000844 <__aeabi_ddiv>
 80069cc:	f7fa f908 	bl	8000be0 <__aeabi_d2f>
 80069d0:	f845 0c08 	str.w	r0, [r5, #-8]
			ADC_Result[i+1]/=BITDIVIDER;
 80069d4:	f855 0c04 	ldr.w	r0, [r5, #-4]
 80069d8:	f7f9 fdb6 	bl	8000548 <__aeabi_f2d>
 80069dc:	4642      	mov	r2, r8
 80069de:	464b      	mov	r3, r9
 80069e0:	f7f9 ff30 	bl	8000844 <__aeabi_ddiv>
 80069e4:	f7fa f8fc 	bl	8000be0 <__aeabi_d2f>
		for(int i = 100; i< 100+2*samples; i+=2)
 80069e8:	3602      	adds	r6, #2
			ADC_Result[i+1]/=BITDIVIDER;
 80069ea:	f845 0c04 	str.w	r0, [r5, #-4]
 80069ee:	f7ff bb01 	b.w	8005ff4 <HAL_ADC_ConvCpltCallback+0x7c>
			rms1 += pow(ADC_Result[i],2);
 80069f2:	f854 0c08 	ldr.w	r0, [r4, #-8]
 80069f6:	f7f9 fda7 	bl	8000548 <__aeabi_f2d>
 80069fa:	4602      	mov	r2, r0
 80069fc:	460b      	mov	r3, r1
 80069fe:	f7f9 fdf7 	bl	80005f0 <__aeabi_dmul>
 8006a02:	4680      	mov	r8, r0
 8006a04:	4630      	mov	r0, r6
 8006a06:	4689      	mov	r9, r1
 8006a08:	f7f9 fd9e 	bl	8000548 <__aeabi_f2d>
 8006a0c:	4602      	mov	r2, r0
 8006a0e:	460b      	mov	r3, r1
 8006a10:	4640      	mov	r0, r8
 8006a12:	4649      	mov	r1, r9
 8006a14:	f7f9 fc3a 	bl	800028c <__adddf3>
 8006a18:	f7fa f8e2 	bl	8000be0 <__aeabi_d2f>
 8006a1c:	4606      	mov	r6, r0
			rms0 += pow(ADC_Result[i+1],2);
 8006a1e:	f854 0c04 	ldr.w	r0, [r4, #-4]
 8006a22:	f7f9 fd91 	bl	8000548 <__aeabi_f2d>
 8006a26:	4602      	mov	r2, r0
 8006a28:	460b      	mov	r3, r1
 8006a2a:	f7f9 fde1 	bl	80005f0 <__aeabi_dmul>
 8006a2e:	4680      	mov	r8, r0
 8006a30:	4628      	mov	r0, r5
 8006a32:	4689      	mov	r9, r1
 8006a34:	f7f9 fd88 	bl	8000548 <__aeabi_f2d>
 8006a38:	460b      	mov	r3, r1
 8006a3a:	4602      	mov	r2, r0
 8006a3c:	4649      	mov	r1, r9
 8006a3e:	4640      	mov	r0, r8
 8006a40:	f7f9 fc24 	bl	800028c <__adddf3>
 8006a44:	f7fa f8cc 	bl	8000be0 <__aeabi_d2f>
		for(int i = 100; i< 100+2*samples; i+=2)
 8006a48:	3702      	adds	r7, #2
			rms0 += pow(ADC_Result[i+1],2);
 8006a4a:	4605      	mov	r5, r0
 8006a4c:	2301      	movs	r3, #1
 8006a4e:	f7ff bada 	b.w	8006006 <HAL_ADC_ConvCpltCallback+0x8e>
 8006a52:	bf00      	nop
 8006a54:	f3af 8000 	nop.w
 8006a58:	667f3bcd 	.word	0x667f3bcd
 8006a5c:	3ff6a09e 	.word	0x3ff6a09e
 8006a60:	e2be2be4 	.word	0xe2be2be4
 8006a64:	401ebe2b 	.word	0x401ebe2b
 8006a68:	3ff00000 	.word	0x3ff00000
 8006a6c:	200066ff 	.word	0x200066ff
 8006a70:	200066f4 	.word	0x200066f4
 8006a74:	43480000 	.word	0x43480000
 8006a78:	20007224 	.word	0x20007224
 8006a7c:	40340000 	.word	0x40340000
 8006a80:	0002fda0 	.word	0x0002fda0
 8006a84:	40010400 	.word	0x40010400
 8006a88:	20006890 	.word	0x20006890
 8006a8c:	20007218 	.word	0x20007218
 8006a90:	0800d702 	.word	0x0800d702
 8006a94:	0800d77b 	.word	0x0800d77b
 8006a98:	20006748 	.word	0x20006748
 8006a9c:	0800d6b4 	.word	0x0800d6b4
 8006aa0:	0800d6c8 	.word	0x0800d6c8
 8006aa4:	2000673c 	.word	0x2000673c
 8006aa8:	20006738 	.word	0x20006738
 8006aac:	20006746 	.word	0x20006746
 8006ab0:	20007214 	.word	0x20007214
		else if(amp1 < amp*0.99)
 8006ab4:	a3b4      	add	r3, pc, #720	; (adr r3, 8006d88 <HAL_ADC_ConvCpltCallback+0xe10>)
 8006ab6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006aba:	4630      	mov	r0, r6
 8006abc:	4639      	mov	r1, r7
 8006abe:	f7f9 fd97 	bl	80005f0 <__aeabi_dmul>
 8006ac2:	4602      	mov	r2, r0
 8006ac4:	460b      	mov	r3, r1
 8006ac6:	4620      	mov	r0, r4
 8006ac8:	4629      	mov	r1, r5
 8006aca:	f7fa f803 	bl	8000ad4 <__aeabi_dcmplt>
 8006ace:	b190      	cbz	r0, 8006af6 <HAL_ADC_ConvCpltCallback+0xb7e>
			potOneValue[1]--;
 8006ad0:	4ca7      	ldr	r4, [pc, #668]	; (8006d70 <HAL_ADC_ConvCpltCallback+0xdf8>)
			HAL_I2C_Master_Transmit(&hi2c1, 0x50, potOneValue, 2,10 );
 8006ad2:	48a8      	ldr	r0, [pc, #672]	; (8006d74 <HAL_ADC_ConvCpltCallback+0xdfc>)
			potOneValue[1]--;
 8006ad4:	7863      	ldrb	r3, [r4, #1]
 8006ad6:	3b01      	subs	r3, #1
 8006ad8:	7063      	strb	r3, [r4, #1]
			HAL_I2C_Master_Transmit(&hi2c1, 0x50, potOneValue, 2,10 );
 8006ada:	230a      	movs	r3, #10
 8006adc:	9300      	str	r3, [sp, #0]
 8006ade:	4622      	mov	r2, r4
 8006ae0:	2302      	movs	r3, #2
 8006ae2:	2150      	movs	r1, #80	; 0x50
 8006ae4:	f7fb fa5e 	bl	8001fa4 <HAL_I2C_Master_Transmit>
			if(potOneValue[1] < 1)
 8006ae8:	7863      	ldrb	r3, [r4, #1]
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	f47f ab81 	bne.w	80061f2 <HAL_ADC_ConvCpltCallback+0x27a>
				potOneValue[1] = 254;
 8006af0:	23fe      	movs	r3, #254	; 0xfe
 8006af2:	f7ff bb7d 	b.w	80061f0 <HAL_ADC_ConvCpltCallback+0x278>
			ctrl = 0;
 8006af6:	9b04      	ldr	r3, [sp, #16]
			clear_ui(&ui);
 8006af8:	4c9f      	ldr	r4, [pc, #636]	; (8006d78 <HAL_ADC_ConvCpltCallback+0xe00>)
			ctrl = 0;
 8006afa:	7018      	strb	r0, [r3, #0]
			clear_ui(&ui);
 8006afc:	4620      	mov	r0, r4
 8006afe:	f7fe ff8d 	bl	8005a1c <clear_ui>
			if(swp)
 8006b02:	4b9e      	ldr	r3, [pc, #632]	; (8006d7c <HAL_ADC_ConvCpltCallback+0xe04>)
 8006b04:	7819      	ldrb	r1, [r3, #0]
 8006b06:	2301      	movs	r3, #1
 8006b08:	b121      	cbz	r1, 8006b14 <HAL_ADC_ConvCpltCallback+0xb9c>
				ui.sweep = 1;
 8006b0a:	70a3      	strb	r3, [r4, #2]
			call_ui();
 8006b0c:	f7ff fa18 	bl	8005f40 <call_ui>
 8006b10:	f7ff bb6f 	b.w	80061f2 <HAL_ADC_ConvCpltCallback+0x27a>
				ui.frequency = 1;
 8006b14:	7063      	strb	r3, [r4, #1]
 8006b16:	e7f9      	b.n	8006b0c <HAL_ADC_ConvCpltCallback+0xb94>
			ADC_Result[i] = (float)ADC_Measurement[i];  // copy ADC data into a float array.
 8006b18:	f830 5012 	ldrh.w	r5, [r0, r2, lsl #1]
 8006b1c:	ee06 5a90 	vmov	s13, r5
			ADC_Result[i+1] = (float)ADC_Measurement[i+1];
 8006b20:	eb00 0542 	add.w	r5, r0, r2, lsl #1
			ADC_Result[i] = (float)ADC_Measurement[i];  // copy ADC data into a float array.
 8006b24:	eef8 6a66 	vcvt.f32.u32	s13, s13
			ADC_Result[i+1] = (float)ADC_Measurement[i+1];
 8006b28:	886d      	ldrh	r5, [r5, #2]
			ADC_Result[i] = (float)ADC_Measurement[i];  // copy ADC data into a float array.
 8006b2a:	ed41 6a03 	vstr	s13, [r1, #-12]
			ADC_Result[i+1] = (float)ADC_Measurement[i+1];
 8006b2e:	ee07 5a10 	vmov	s14, r5
 8006b32:	eeb8 7a47 	vcvt.f32.u32	s14, s14
			offSet1 += ADC_Result[i];
 8006b36:	ee77 7aa6 	vadd.f32	s15, s15, s13
			ADC_Result[i+1] = (float)ADC_Measurement[i+1];
 8006b3a:	ed01 7a02 	vstr	s14, [r1, #-8]
			offSet0 += ADC_Result[i+1];
 8006b3e:	ee36 6a07 	vadd.f32	s12, s12, s14
		for(int i = 0; i< 2*samples; i+=2) // mean value (DC) as float
 8006b42:	3202      	adds	r2, #2
 8006b44:	f7ff bb67 	b.w	8006216 <HAL_ADC_ConvCpltCallback+0x29e>
			ADC_Result[i]-=offSet1;
 8006b48:	ed53 7a03 	vldr	s15, [r3, #-12]
 8006b4c:	ee77 7ae9 	vsub.f32	s15, s15, s19
		for(int i = 0; i< 2*samples; i+=2)
 8006b50:	3202      	adds	r2, #2
			ADC_Result[i]-=offSet1;
 8006b52:	ed43 7a03 	vstr	s15, [r3, #-12]
			ADC_Result[i+1]-=offSet0;
 8006b56:	ed53 7a02 	vldr	s15, [r3, #-8]
 8006b5a:	ee77 7aca 	vsub.f32	s15, s15, s20
 8006b5e:	ed43 7a02 	vstr	s15, [r3, #-8]
 8006b62:	f7ff bb67 	b.w	8006234 <HAL_ADC_ConvCpltCallback+0x2bc>
			ADC_Result[i]/=BITDIVIDER;
 8006b66:	f855 0c0c 	ldr.w	r0, [r5, #-12]
 8006b6a:	f7f9 fced 	bl	8000548 <__aeabi_f2d>
 8006b6e:	4632      	mov	r2, r6
 8006b70:	463b      	mov	r3, r7
 8006b72:	f7f9 fe67 	bl	8000844 <__aeabi_ddiv>
 8006b76:	f7fa f833 	bl	8000be0 <__aeabi_d2f>
 8006b7a:	f845 0c0c 	str.w	r0, [r5, #-12]
			ADC_Result[i+1]/=BITDIVIDER;
 8006b7e:	f855 0c08 	ldr.w	r0, [r5, #-8]
 8006b82:	f7f9 fce1 	bl	8000548 <__aeabi_f2d>
 8006b86:	4632      	mov	r2, r6
 8006b88:	463b      	mov	r3, r7
 8006b8a:	f7f9 fe5b 	bl	8000844 <__aeabi_ddiv>
 8006b8e:	f7fa f827 	bl	8000be0 <__aeabi_d2f>
		for(int i = 0; i< 2*samples; i+=2)
 8006b92:	f108 0802 	add.w	r8, r8, #2
			ADC_Result[i+1]/=BITDIVIDER;
 8006b96:	f845 0c08 	str.w	r0, [r5, #-8]
 8006b9a:	f7ff bb56 	b.w	800624a <HAL_ADC_ConvCpltCallback+0x2d2>
			rms1 += pow(ADC_Result[i],2);
 8006b9e:	f854 0c0c 	ldr.w	r0, [r4, #-12]
 8006ba2:	f7f9 fcd1 	bl	8000548 <__aeabi_f2d>
 8006ba6:	4602      	mov	r2, r0
 8006ba8:	460b      	mov	r3, r1
 8006baa:	f7f9 fd21 	bl	80005f0 <__aeabi_dmul>
 8006bae:	4680      	mov	r8, r0
 8006bb0:	4630      	mov	r0, r6
 8006bb2:	4689      	mov	r9, r1
 8006bb4:	f7f9 fcc8 	bl	8000548 <__aeabi_f2d>
 8006bb8:	4602      	mov	r2, r0
 8006bba:	460b      	mov	r3, r1
 8006bbc:	4640      	mov	r0, r8
 8006bbe:	4649      	mov	r1, r9
 8006bc0:	f7f9 fb64 	bl	800028c <__adddf3>
 8006bc4:	f7fa f80c 	bl	8000be0 <__aeabi_d2f>
 8006bc8:	4606      	mov	r6, r0
			rms0 += pow(ADC_Result[i+1],2);
 8006bca:	f854 0c08 	ldr.w	r0, [r4, #-8]
 8006bce:	f7f9 fcbb 	bl	8000548 <__aeabi_f2d>
 8006bd2:	4602      	mov	r2, r0
 8006bd4:	460b      	mov	r3, r1
 8006bd6:	f7f9 fd0b 	bl	80005f0 <__aeabi_dmul>
 8006bda:	4680      	mov	r8, r0
 8006bdc:	4628      	mov	r0, r5
 8006bde:	4689      	mov	r9, r1
 8006be0:	f7f9 fcb2 	bl	8000548 <__aeabi_f2d>
 8006be4:	460b      	mov	r3, r1
 8006be6:	4602      	mov	r2, r0
 8006be8:	4649      	mov	r1, r9
 8006bea:	4640      	mov	r0, r8
 8006bec:	f7f9 fb4e 	bl	800028c <__adddf3>
 8006bf0:	f7f9 fff6 	bl	8000be0 <__aeabi_d2f>
		for(int i = 0; i< 2*samples; i+=2)
 8006bf4:	3702      	adds	r7, #2
			rms0 += pow(ADC_Result[i+1],2);
 8006bf6:	4605      	mov	r5, r0
 8006bf8:	2301      	movs	r3, #1
 8006bfa:	f7ff bb31 	b.w	8006260 <HAL_ADC_ConvCpltCallback+0x2e8>
				sprintf(c, "%.2f",rmsMean1);
 8006bfe:	ee19 0a10 	vmov	r0, s18
 8006c02:	f7f9 fca1 	bl	8000548 <__aeabi_f2d>
 8006c06:	4602      	mov	r2, r0
 8006c08:	460b      	mov	r3, r1
 8006c0a:	485d      	ldr	r0, [pc, #372]	; (8006d80 <HAL_ADC_ConvCpltCallback+0xe08>)
 8006c0c:	495d      	ldr	r1, [pc, #372]	; (8006d84 <HAL_ADC_ConvCpltCallback+0xe0c>)
 8006c0e:	f001 f9f7 	bl	8008000 <sprintf>
				ILI9341_printText(c, 100,100, FCOLOR, BGCOLOR, 2);
 8006c12:	f64f 75ff 	movw	r5, #65535	; 0xffff
 8006c16:	2602      	movs	r6, #2
 8006c18:	2264      	movs	r2, #100	; 0x64
 8006c1a:	4623      	mov	r3, r4
 8006c1c:	4611      	mov	r1, r2
 8006c1e:	4858      	ldr	r0, [pc, #352]	; (8006d80 <HAL_ADC_ConvCpltCallback+0xe08>)
 8006c20:	e88d 0060 	stmia.w	sp, {r5, r6}
 8006c24:	f7fe fb06 	bl	8005234 <ILI9341_printText>
				sprintf(c, "%.2f", amp1);
 8006c28:	f8d9 0000 	ldr.w	r0, [r9]
 8006c2c:	f7f9 fc8c 	bl	8000548 <__aeabi_f2d>
 8006c30:	4602      	mov	r2, r0
 8006c32:	460b      	mov	r3, r1
 8006c34:	4852      	ldr	r0, [pc, #328]	; (8006d80 <HAL_ADC_ConvCpltCallback+0xe08>)
 8006c36:	4953      	ldr	r1, [pc, #332]	; (8006d84 <HAL_ADC_ConvCpltCallback+0xe0c>)
 8006c38:	f001 f9e2 	bl	8008000 <sprintf>
				ILI9341_printText(c, 100,120, FCOLOR, BGCOLOR, 2);
 8006c3c:	4623      	mov	r3, r4
 8006c3e:	2278      	movs	r2, #120	; 0x78
 8006c40:	2164      	movs	r1, #100	; 0x64
 8006c42:	484f      	ldr	r0, [pc, #316]	; (8006d80 <HAL_ADC_ConvCpltCallback+0xe08>)
 8006c44:	e88d 0060 	stmia.w	sp, {r5, r6}
 8006c48:	f7fe faf4 	bl	8005234 <ILI9341_printText>
				sprintf(c, "%.2f", rmsMean0);
 8006c4c:	6838      	ldr	r0, [r7, #0]
 8006c4e:	f7f9 fc7b 	bl	8000548 <__aeabi_f2d>
 8006c52:	4602      	mov	r2, r0
 8006c54:	460b      	mov	r3, r1
 8006c56:	484a      	ldr	r0, [pc, #296]	; (8006d80 <HAL_ADC_ConvCpltCallback+0xe08>)
 8006c58:	494a      	ldr	r1, [pc, #296]	; (8006d84 <HAL_ADC_ConvCpltCallback+0xe0c>)
 8006c5a:	f001 f9d1 	bl	8008000 <sprintf>
				ILI9341_printText(c, 100,160, FCOLOR, BGCOLOR, 2);
 8006c5e:	4623      	mov	r3, r4
 8006c60:	22a0      	movs	r2, #160	; 0xa0
 8006c62:	2164      	movs	r1, #100	; 0x64
 8006c64:	4846      	ldr	r0, [pc, #280]	; (8006d80 <HAL_ADC_ConvCpltCallback+0xe08>)
 8006c66:	e88d 0060 	stmia.w	sp, {r5, r6}
 8006c6a:	f7fe fae3 	bl	8005234 <ILI9341_printText>
				sprintf(c, "%.2f", amp0);
 8006c6e:	f8d8 0000 	ldr.w	r0, [r8]
 8006c72:	f7f9 fc69 	bl	8000548 <__aeabi_f2d>
 8006c76:	4602      	mov	r2, r0
 8006c78:	460b      	mov	r3, r1
 8006c7a:	4841      	ldr	r0, [pc, #260]	; (8006d80 <HAL_ADC_ConvCpltCallback+0xe08>)
 8006c7c:	4941      	ldr	r1, [pc, #260]	; (8006d84 <HAL_ADC_ConvCpltCallback+0xe0c>)
 8006c7e:	f001 f9bf 	bl	8008000 <sprintf>
				ILI9341_printText(c, 100,180, FCOLOR, BGCOLOR, 2);
 8006c82:	e88d 0060 	stmia.w	sp, {r5, r6}
 8006c86:	4623      	mov	r3, r4
 8006c88:	22b4      	movs	r2, #180	; 0xb4
 8006c8a:	e45f      	b.n	800654c <HAL_ADC_ConvCpltCallback+0x5d4>
			ADC_Result[i] = (float)ADC_Measurement[i];  // copy ADC data into a float array.
 8006c8c:	f830 6012 	ldrh.w	r6, [r0, r2, lsl #1]
 8006c90:	ee06 6a90 	vmov	s13, r6
			ADC_Result[i+1] = (float)ADC_Measurement[i+1];
 8006c94:	eb00 0642 	add.w	r6, r0, r2, lsl #1
			ADC_Result[i] = (float)ADC_Measurement[i];  // copy ADC data into a float array.
 8006c98:	eef8 6a66 	vcvt.f32.u32	s13, s13
			ADC_Result[i+1] = (float)ADC_Measurement[i+1];
 8006c9c:	8876      	ldrh	r6, [r6, #2]
			ADC_Result[i] = (float)ADC_Measurement[i];  // copy ADC data into a float array.
 8006c9e:	ed41 6a02 	vstr	s13, [r1, #-8]
			ADC_Result[i+1] = (float)ADC_Measurement[i+1];
 8006ca2:	ee07 6a10 	vmov	s14, r6
 8006ca6:	eeb8 7a47 	vcvt.f32.u32	s14, s14
			offSet1 += ADC_Result[i];
 8006caa:	ee77 7aa6 	vadd.f32	s15, s15, s13
			ADC_Result[i+1] = (float)ADC_Measurement[i+1];
 8006cae:	ed01 7a01 	vstr	s14, [r1, #-4]
			offSet0 += ADC_Result[i+1];
 8006cb2:	ee36 6a07 	vadd.f32	s12, s12, s14
		for(int i = 100; i< 100+2*samples; i+=2) // mean value (DC) as float
 8006cb6:	3202      	adds	r2, #2
 8006cb8:	e46c      	b.n	8006594 <HAL_ADC_ConvCpltCallback+0x61c>
			ADC_Result[i]-=offSet1;
 8006cba:	ed53 7a02 	vldr	s15, [r3, #-8]
 8006cbe:	ee77 7ac7 	vsub.f32	s15, s15, s14
		for(int i = 100; i< 100+2*samples; i+=2)
 8006cc2:	3202      	adds	r2, #2
			ADC_Result[i]-=offSet1;
 8006cc4:	ed43 7a02 	vstr	s15, [r3, #-8]
			ADC_Result[i+1]-=offSet0;
 8006cc8:	ed53 7a01 	vldr	s15, [r3, #-4]
 8006ccc:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8006cd0:	ed43 7a01 	vstr	s15, [r3, #-4]
 8006cd4:	e46d      	b.n	80065b2 <HAL_ADC_ConvCpltCallback+0x63a>
			ADC_Result[i]/=BITDIVIDER;
 8006cd6:	f858 0c08 	ldr.w	r0, [r8, #-8]
 8006cda:	f7f9 fc35 	bl	8000548 <__aeabi_f2d>
 8006cde:	4632      	mov	r2, r6
 8006ce0:	463b      	mov	r3, r7
 8006ce2:	f7f9 fdaf 	bl	8000844 <__aeabi_ddiv>
 8006ce6:	f7f9 ff7b 	bl	8000be0 <__aeabi_d2f>
 8006cea:	f848 0c08 	str.w	r0, [r8, #-8]
			ADC_Result[i+1]/=BITDIVIDER;
 8006cee:	f858 0c04 	ldr.w	r0, [r8, #-4]
 8006cf2:	f7f9 fc29 	bl	8000548 <__aeabi_f2d>
 8006cf6:	4632      	mov	r2, r6
 8006cf8:	463b      	mov	r3, r7
 8006cfa:	f7f9 fda3 	bl	8000844 <__aeabi_ddiv>
 8006cfe:	f7f9 ff6f 	bl	8000be0 <__aeabi_d2f>
		for(int i = 100; i< 100+2*samples; i+=2)
 8006d02:	f109 0902 	add.w	r9, r9, #2
			ADC_Result[i+1]/=BITDIVIDER;
 8006d06:	f848 0c04 	str.w	r0, [r8, #-4]
 8006d0a:	e45d      	b.n	80065c8 <HAL_ADC_ConvCpltCallback+0x650>
			rms1 += pow(ADC_Result[i],2);
 8006d0c:	f854 0c08 	ldr.w	r0, [r4, #-8]
 8006d10:	f7f9 fc1a 	bl	8000548 <__aeabi_f2d>
 8006d14:	4602      	mov	r2, r0
 8006d16:	460b      	mov	r3, r1
 8006d18:	f7f9 fc6a 	bl	80005f0 <__aeabi_dmul>
 8006d1c:	4680      	mov	r8, r0
 8006d1e:	4638      	mov	r0, r7
 8006d20:	4689      	mov	r9, r1
 8006d22:	f7f9 fc11 	bl	8000548 <__aeabi_f2d>
 8006d26:	4602      	mov	r2, r0
 8006d28:	460b      	mov	r3, r1
 8006d2a:	4640      	mov	r0, r8
 8006d2c:	4649      	mov	r1, r9
 8006d2e:	f7f9 faad 	bl	800028c <__adddf3>
 8006d32:	f7f9 ff55 	bl	8000be0 <__aeabi_d2f>
 8006d36:	4607      	mov	r7, r0
			rms0 += pow(ADC_Result[i+1],2);
 8006d38:	f854 0c04 	ldr.w	r0, [r4, #-4]
 8006d3c:	f7f9 fc04 	bl	8000548 <__aeabi_f2d>
 8006d40:	4602      	mov	r2, r0
 8006d42:	460b      	mov	r3, r1
 8006d44:	f7f9 fc54 	bl	80005f0 <__aeabi_dmul>
 8006d48:	4680      	mov	r8, r0
 8006d4a:	4630      	mov	r0, r6
 8006d4c:	4689      	mov	r9, r1
 8006d4e:	f7f9 fbfb 	bl	8000548 <__aeabi_f2d>
 8006d52:	460b      	mov	r3, r1
 8006d54:	4602      	mov	r2, r0
 8006d56:	4649      	mov	r1, r9
 8006d58:	4640      	mov	r0, r8
 8006d5a:	f7f9 fa97 	bl	800028c <__adddf3>
 8006d5e:	f7f9 ff3f 	bl	8000be0 <__aeabi_d2f>
		for(int i = 100; i< 100+2*samples; i+=2)
 8006d62:	f10a 0a02 	add.w	sl, sl, #2
			rms0 += pow(ADC_Result[i+1],2);
 8006d66:	4606      	mov	r6, r0
 8006d68:	2301      	movs	r3, #1
 8006d6a:	e439      	b.n	80065e0 <HAL_ADC_ConvCpltCallback+0x668>
 8006d6c:	f3af 8000 	nop.w
 8006d70:	2000ef25 	.word	0x2000ef25
 8006d74:	20006d5c 	.word	0x20006d5c
 8006d78:	20000009 	.word	0x20000009
 8006d7c:	20006748 	.word	0x20006748
 8006d80:	20007218 	.word	0x20007218
 8006d84:	0800d702 	.word	0x0800d702
 8006d88:	7ae147ae 	.word	0x7ae147ae
 8006d8c:	3fefae14 	.word	0x3fefae14

08006d90 <main>:
{
 8006d90:	b500      	push	{lr}
 8006d92:	b097      	sub	sp, #92	; 0x5c
	HAL_Init();
 8006d94:	f7fa f920 	bl	8000fd8 <HAL_Init>
	SystemClock_Config();
 8006d98:	f7fe fd72 	bl	8005880 <SystemClock_Config>
	MX_GPIO_Init();
 8006d9c:	f7fe fc9e 	bl	80056dc <MX_GPIO_Init>
	MX_DMA_Init();
 8006da0:	f7fe fbe6 	bl	8005570 <MX_DMA_Init>
	MX_ADC1_Init();
 8006da4:	f7fe fa92 	bl	80052cc <MX_ADC1_Init>
	MX_DAC_Init();
 8006da8:	f7fe fb6e 	bl	8005488 <MX_DAC_Init>
	MX_FSMC_Init();
 8006dac:	f7fe fc2c 	bl	8005608 <MX_FSMC_Init>
	MX_I2C1_Init();
 8006db0:	f7fe fd18 	bl	80057e4 <MX_I2C1_Init>
	MX_SDIO_SD_Init();
 8006db4:	f000 fc56 	bl	8007664 <MX_SDIO_SD_Init>
	MX_FATFS_Init();
 8006db8:	f7fe fc16 	bl	80055e8 <MX_FATFS_Init>
	MX_TIM1_Init();
 8006dbc:	f000 fdba 	bl	8007934 <MX_TIM1_Init>
	MX_TIM2_Init();
 8006dc0:	f000 fdee 	bl	80079a0 <MX_TIM2_Init>
	MX_TIM8_Init();
 8006dc4:	f000 fe1e 	bl	8007a04 <MX_TIM8_Init>
	HAL_GPIO_WritePin(LCD_RST_GPIO_Port, LCD_RST_Pin, GPIO_PIN_RESET);
 8006dc8:	2200      	movs	r2, #0
 8006dca:	2108      	movs	r1, #8
 8006dcc:	483b      	ldr	r0, [pc, #236]	; (8006ebc <main+0x12c>)
	potTwoValue[0] = 0xAA;
 8006dce:	4c3c      	ldr	r4, [pc, #240]	; (8006ec0 <main+0x130>)
	HAL_GPIO_WritePin(LCD_RST_GPIO_Port, LCD_RST_Pin, GPIO_PIN_RESET);
 8006dd0:	f7fa ff98 	bl	8001d04 <HAL_GPIO_WritePin>
	HAL_Delay(1000);
 8006dd4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8006dd8:	f7fa f92a 	bl	8001030 <HAL_Delay>
	HAL_GPIO_WritePin(LCD_RST_GPIO_Port, LCD_RST_Pin, GPIO_PIN_SET);
 8006ddc:	2201      	movs	r2, #1
 8006dde:	2108      	movs	r1, #8
 8006de0:	4836      	ldr	r0, [pc, #216]	; (8006ebc <main+0x12c>)
 8006de2:	f7fa ff8f 	bl	8001d04 <HAL_GPIO_WritePin>
	ILI9341_Init();
 8006de6:	f7fe f915 	bl	8005014 <ILI9341_Init>
	ILI9341_setRotation(2);
 8006dea:	2002      	movs	r0, #2
 8006dec:	f7fe fa44 	bl	8005278 <ILI9341_setRotation>
	ILI9341_Fill(BGCOLOR);
 8006df0:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8006df4:	f7fe f976 	bl	80050e4 <ILI9341_Fill>
	potOneValue[0] = 0xA9;
 8006df8:	4a32      	ldr	r2, [pc, #200]	; (8006ec4 <main+0x134>)
	HAL_I2C_Master_Transmit(&hi2c1, 0x50, potOneValue, 2,10 );
 8006dfa:	4833      	ldr	r0, [pc, #204]	; (8006ec8 <main+0x138>)
	potOneValue[0] = 0xA9;
 8006dfc:	23a9      	movs	r3, #169	; 0xa9
 8006dfe:	7013      	strb	r3, [r2, #0]
	HAL_I2C_Master_Transmit(&hi2c1, 0x50, potOneValue, 2,10 );
 8006e00:	250a      	movs	r5, #10
	potOneValue[1] = 254;
 8006e02:	23fe      	movs	r3, #254	; 0xfe
	potTwoValue[0] = 0xAA;
 8006e04:	21aa      	movs	r1, #170	; 0xaa
	potOneValue[1] = 254;
 8006e06:	7053      	strb	r3, [r2, #1]
	potTwoValue[0] = 0xAA;
 8006e08:	7021      	strb	r1, [r4, #0]
	potTwoValue[1] = 254;
 8006e0a:	7063      	strb	r3, [r4, #1]
	HAL_I2C_Master_Transmit(&hi2c1, 0x50, potOneValue, 2,10 );
 8006e0c:	2150      	movs	r1, #80	; 0x50
 8006e0e:	9500      	str	r5, [sp, #0]
 8006e10:	2302      	movs	r3, #2
 8006e12:	f7fb f8c7 	bl	8001fa4 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Transmit(&hi2c1, 0x50, potTwoValue, 2,10 );
 8006e16:	2150      	movs	r1, #80	; 0x50
 8006e18:	4622      	mov	r2, r4
 8006e1a:	9500      	str	r5, [sp, #0]
 8006e1c:	2302      	movs	r3, #2
 8006e1e:	482a      	ldr	r0, [pc, #168]	; (8006ec8 <main+0x138>)
	__HAL_TIM_CLEAR_IT(&htim2,TIM_IT_UPDATE);
 8006e20:	4d2a      	ldr	r5, [pc, #168]	; (8006ecc <main+0x13c>)
	__HAL_TIM_CLEAR_IT(&htim8,TIM_IT_UPDATE);
 8006e22:	4c2b      	ldr	r4, [pc, #172]	; (8006ed0 <main+0x140>)
	HAL_I2C_Master_Transmit(&hi2c1, 0x50, potTwoValue, 2,10 );
 8006e24:	f7fb f8be 	bl	8001fa4 <HAL_I2C_Master_Transmit>
	__HAL_TIM_CLEAR_IT(&htim1,TIM_IT_UPDATE);
 8006e28:	482a      	ldr	r0, [pc, #168]	; (8006ed4 <main+0x144>)
 8006e2a:	6802      	ldr	r2, [r0, #0]
 8006e2c:	f06f 0301 	mvn.w	r3, #1
 8006e30:	6113      	str	r3, [r2, #16]
	__HAL_TIM_CLEAR_IT(&htim2,TIM_IT_UPDATE);
 8006e32:	682a      	ldr	r2, [r5, #0]
 8006e34:	6113      	str	r3, [r2, #16]
	__HAL_TIM_CLEAR_IT(&htim8,TIM_IT_UPDATE);
 8006e36:	6822      	ldr	r2, [r4, #0]
 8006e38:	6113      	str	r3, [r2, #16]
	HAL_TIM_Base_Start_IT(&htim1);
 8006e3a:	f7fc f9c9 	bl	80031d0 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim2);
 8006e3e:	4628      	mov	r0, r5
 8006e40:	f7fc f9c6 	bl	80031d0 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim8);
 8006e44:	4620      	mov	r0, r4
 8006e46:	f7fc f9c3 	bl	80031d0 <HAL_TIM_Base_Start_IT>
	call_ui();
 8006e4a:	f7ff f879 	bl	8005f40 <call_ui>
	if(f_mount(&myFS,SDPath, 1) == FR_OK)
 8006e4e:	2201      	movs	r2, #1
 8006e50:	4921      	ldr	r1, [pc, #132]	; (8006ed8 <main+0x148>)
 8006e52:	4822      	ldr	r0, [pc, #136]	; (8006edc <main+0x14c>)
 8006e54:	f7fd fdea 	bl	8004a2c <f_mount>
 8006e58:	bb70      	cbnz	r0, 8006eb8 <main+0x128>
		char myPath[] = "FREQRESP.TXT\0";
 8006e5a:	4b21      	ldr	r3, [pc, #132]	; (8006ee0 <main+0x150>)
 8006e5c:	aa03      	add	r2, sp, #12
 8006e5e:	f103 0608 	add.w	r6, r3, #8
 8006e62:	4615      	mov	r5, r2
 8006e64:	6818      	ldr	r0, [r3, #0]
 8006e66:	6859      	ldr	r1, [r3, #4]
 8006e68:	4614      	mov	r4, r2
 8006e6a:	c403      	stmia	r4!, {r0, r1}
 8006e6c:	3308      	adds	r3, #8
 8006e6e:	42b3      	cmp	r3, r6
 8006e70:	4622      	mov	r2, r4
 8006e72:	d1f7      	bne.n	8006e64 <main+0xd4>
 8006e74:	6818      	ldr	r0, [r3, #0]
 8006e76:	889b      	ldrh	r3, [r3, #4]
 8006e78:	6020      	str	r0, [r4, #0]
 8006e7a:	80a3      	strh	r3, [r4, #4]
		if(f_open(&myFILE, myPath, FA_WRITE | FA_CREATE_ALWAYS) == FR_OK)
 8006e7c:	220a      	movs	r2, #10
 8006e7e:	4629      	mov	r1, r5
 8006e80:	4818      	ldr	r0, [pc, #96]	; (8006ee4 <main+0x154>)
 8006e82:	f7fd fe07 	bl	8004a94 <f_open>
 8006e86:	b9a0      	cbnz	r0, 8006eb2 <main+0x122>
			char myData[] = "Amplitude in, Amplitude out, Frequency\0, 20*log10(Out/In)";
 8006e88:	4b17      	ldr	r3, [pc, #92]	; (8006ee8 <main+0x158>)
 8006e8a:	aa07      	add	r2, sp, #28
 8006e8c:	f103 0638 	add.w	r6, r3, #56	; 0x38
 8006e90:	4615      	mov	r5, r2
 8006e92:	6818      	ldr	r0, [r3, #0]
 8006e94:	6859      	ldr	r1, [r3, #4]
 8006e96:	4614      	mov	r4, r2
 8006e98:	c403      	stmia	r4!, {r0, r1}
 8006e9a:	3308      	adds	r3, #8
 8006e9c:	42b3      	cmp	r3, r6
 8006e9e:	4622      	mov	r2, r4
 8006ea0:	d1f7      	bne.n	8006e92 <main+0x102>
 8006ea2:	881b      	ldrh	r3, [r3, #0]
 8006ea4:	8023      	strh	r3, [r4, #0]
			f_write(&myFILE, myData, sizeof(myData), &testByte);
 8006ea6:	223a      	movs	r2, #58	; 0x3a
 8006ea8:	4b10      	ldr	r3, [pc, #64]	; (8006eec <main+0x15c>)
 8006eaa:	480e      	ldr	r0, [pc, #56]	; (8006ee4 <main+0x154>)
 8006eac:	4629      	mov	r1, r5
 8006eae:	f7fd ff03 	bl	8004cb8 <f_write>
		f_close(&myFILE);
 8006eb2:	480c      	ldr	r0, [pc, #48]	; (8006ee4 <main+0x154>)
 8006eb4:	f7fe f846 	bl	8004f44 <f_close>
 8006eb8:	e7fe      	b.n	8006eb8 <main+0x128>
 8006eba:	bf00      	nop
 8006ebc:	40020c00 	.word	0x40020c00
 8006ec0:	2000ef27 	.word	0x2000ef27
 8006ec4:	2000ef25 	.word	0x2000ef25
 8006ec8:	20006d5c 	.word	0x20006d5c
 8006ecc:	2000f0f4 	.word	0x2000f0f4
 8006ed0:	2000f07c 	.word	0x2000f07c
 8006ed4:	2000f0b8 	.word	0x2000f0b8
 8006ed8:	200068a5 	.word	0x200068a5
 8006edc:	20006fe4 	.word	0x20006fe4
 8006ee0:	0800d0a0 	.word	0x0800d0a0
 8006ee4:	20006db0 	.word	0x20006db0
 8006ee8:	0800d0ae 	.word	0x0800d0ae
 8006eec:	2000ef30 	.word	0x2000ef30

08006ef0 <debounce>:

int debounce(void)
{
	static uint16_t dTime1, dTime2 = 0;
	dTime2 = dTime1;
	dTime1 = debounceTime;
 8006ef0:	4b05      	ldr	r3, [pc, #20]	; (8006f08 <debounce+0x18>)
	dTime2 = dTime1;
 8006ef2:	4a06      	ldr	r2, [pc, #24]	; (8006f0c <debounce+0x1c>)
	dTime1 = debounceTime;
 8006ef4:	681b      	ldr	r3, [r3, #0]
	dTime2 = dTime1;
 8006ef6:	8810      	ldrh	r0, [r2, #0]
	dTime1 = debounceTime;
 8006ef8:	8013      	strh	r3, [r2, #0]
	if(dTime1 - dTime2 >= DEBOUNCE_TIME)
 8006efa:	b29b      	uxth	r3, r3
 8006efc:	1a18      	subs	r0, r3, r0
	}
	else
	{
		return 0;
	}
}
 8006efe:	2809      	cmp	r0, #9
 8006f00:	bfd4      	ite	le
 8006f02:	2000      	movle	r0, #0
 8006f04:	2001      	movgt	r0, #1
 8006f06:	4770      	bx	lr
 8006f08:	20006710 	.word	0x20006710
 8006f0c:	20006702 	.word	0x20006702

08006f10 <HAL_GPIO_EXTI_Callback>:
{
 8006f10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f14:	ed2d 8b02 	vpush	{d8}
	if(GPIO_Pin == GPIO_PIN_0 && debounce())
 8006f18:	2801      	cmp	r0, #1
{
 8006f1a:	b091      	sub	sp, #68	; 0x44
	if(GPIO_Pin == GPIO_PIN_0 && debounce())
 8006f1c:	d117      	bne.n	8006f4e <HAL_GPIO_EXTI_Callback+0x3e>
 8006f1e:	f7ff ffe7 	bl	8006ef0 <debounce>
 8006f22:	2800      	cmp	r0, #0
 8006f24:	d02f      	beq.n	8006f86 <HAL_GPIO_EXTI_Callback+0x76>
		call_ui();
 8006f26:	f7ff f80b 	bl	8005f40 <call_ui>
		if(ui.frequency)
 8006f2a:	4b77      	ldr	r3, [pc, #476]	; (8007108 <HAL_GPIO_EXTI_Callback+0x1f8>)
 8006f2c:	785a      	ldrb	r2, [r3, #1]
 8006f2e:	b12a      	cbz	r2, 8006f3c <HAL_GPIO_EXTI_Callback+0x2c>
			fcDigit-=1;
 8006f30:	4976      	ldr	r1, [pc, #472]	; (800710c <HAL_GPIO_EXTI_Callback+0x1fc>)
 8006f32:	680a      	ldr	r2, [r1, #0]
			if(fcDigit<0)
 8006f34:	3a01      	subs	r2, #1
				fcDigit = 4;
 8006f36:	bf48      	it	mi
 8006f38:	2204      	movmi	r2, #4
 8006f3a:	600a      	str	r2, [r1, #0]
		if(ui.amplify)
 8006f3c:	78db      	ldrb	r3, [r3, #3]
 8006f3e:	b303      	cbz	r3, 8006f82 <HAL_GPIO_EXTI_Callback+0x72>
			acDigit-=1;
 8006f40:	4a73      	ldr	r2, [pc, #460]	; (8007110 <HAL_GPIO_EXTI_Callback+0x200>)
 8006f42:	6813      	ldr	r3, [r2, #0]
			if(acDigit<0)
 8006f44:	3b01      	subs	r3, #1
				acDigit = 3;
 8006f46:	bf48      	it	mi
 8006f48:	2303      	movmi	r3, #3
				acDigit = 0;
 8006f4a:	6013      	str	r3, [r2, #0]
 8006f4c:	e019      	b.n	8006f82 <HAL_GPIO_EXTI_Callback+0x72>
	if(GPIO_Pin == GPIO_PIN_1 && debounce())
 8006f4e:	2802      	cmp	r0, #2
 8006f50:	f040 81b1 	bne.w	80072b6 <HAL_GPIO_EXTI_Callback+0x3a6>
 8006f54:	f7ff ffcc 	bl	8006ef0 <debounce>
 8006f58:	b1a8      	cbz	r0, 8006f86 <HAL_GPIO_EXTI_Callback+0x76>
		call_ui();
 8006f5a:	f7fe fff1 	bl	8005f40 <call_ui>
		shortPress = 0;
 8006f5e:	4c6d      	ldr	r4, [pc, #436]	; (8007114 <HAL_GPIO_EXTI_Callback+0x204>)
		pushedCtr = 0;
 8006f60:	496d      	ldr	r1, [pc, #436]	; (8007118 <HAL_GPIO_EXTI_Callback+0x208>)
		longPress = 0;
 8006f62:	4a6e      	ldr	r2, [pc, #440]	; (800711c <HAL_GPIO_EXTI_Callback+0x20c>)
 8006f64:	9106      	str	r1, [sp, #24]
						amplitude=(amplitude+ (((uint16_t)aDigit[i])*pow(10,(3-i))));
 8006f66:	ed9f 8b66 	vldr	d8, [pc, #408]	; 8007100 <HAL_GPIO_EXTI_Callback+0x1f0>
		pushedCtr = 0;
 8006f6a:	2300      	movs	r3, #0
 8006f6c:	600b      	str	r3, [r1, #0]
		longPress = 0;
 8006f6e:	7013      	strb	r3, [r2, #0]
		shortPress = 0;
 8006f70:	7023      	strb	r3, [r4, #0]
 8006f72:	9207      	str	r2, [sp, #28]
					TIM8->ARR = (HAL_RCC_GetHCLKFreq()/((TIM8->PSC+1)*samples*frequency));
 8006f74:	4f6a      	ldr	r7, [pc, #424]	; (8007120 <HAL_GPIO_EXTI_Callback+0x210>)
		while(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_1) == 1)
 8006f76:	486b      	ldr	r0, [pc, #428]	; (8007124 <HAL_GPIO_EXTI_Callback+0x214>)
 8006f78:	2102      	movs	r1, #2
 8006f7a:	f7fa febd 	bl	8001cf8 <HAL_GPIO_ReadPin>
 8006f7e:	2801      	cmp	r0, #1
 8006f80:	d006      	beq.n	8006f90 <HAL_GPIO_EXTI_Callback+0x80>
		call_ui();
 8006f82:	f7fe ffdd 	bl	8005f40 <call_ui>
}
 8006f86:	b011      	add	sp, #68	; 0x44
 8006f88:	ecbd 8b02 	vpop	{d8}
 8006f8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			pushedCtr += 1;
 8006f90:	9b06      	ldr	r3, [sp, #24]
 8006f92:	9906      	ldr	r1, [sp, #24]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	4d5c      	ldr	r5, [pc, #368]	; (8007108 <HAL_GPIO_EXTI_Callback+0x1f8>)
 8006f98:	1c5a      	adds	r2, r3, #1
 8006f9a:	600a      	str	r2, [r1, #0]
			if(pushedCtr > 1000000) //button was pressed for a long time
 8006f9c:	4962      	ldr	r1, [pc, #392]	; (8007128 <HAL_GPIO_EXTI_Callback+0x218>)
 8006f9e:	428a      	cmp	r2, r1
 8006fa0:	f240 80d8 	bls.w	8007154 <HAL_GPIO_EXTI_Callback+0x244>
				longPress = 1;
 8006fa4:	9b07      	ldr	r3, [sp, #28]
 8006fa6:	7018      	strb	r0, [r3, #0]
			if((ui.measure && shortPress))
 8006fa8:	792b      	ldrb	r3, [r5, #4]
 8006faa:	b13b      	cbz	r3, 8006fbc <HAL_GPIO_EXTI_Callback+0xac>
 8006fac:	7823      	ldrb	r3, [r4, #0]
 8006fae:	b12b      	cbz	r3, 8006fbc <HAL_GPIO_EXTI_Callback+0xac>
				HAL_ADC_Start_DMA(&hadc1, (uint32_t *) ADC_Measurement, ADC_SAMPLES);
 8006fb0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8006fb4:	495d      	ldr	r1, [pc, #372]	; (800712c <HAL_GPIO_EXTI_Callback+0x21c>)
 8006fb6:	485e      	ldr	r0, [pc, #376]	; (8007130 <HAL_GPIO_EXTI_Callback+0x220>)
 8006fb8:	f7fa f8f2 	bl	80011a0 <HAL_ADC_Start_DMA>
			if((ui.frequency) && shortPress)
 8006fbc:	786b      	ldrb	r3, [r5, #1]
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	f000 808c 	beq.w	80070dc <HAL_GPIO_EXTI_Callback+0x1cc>
 8006fc4:	7823      	ldrb	r3, [r4, #0]
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	f000 8088 	beq.w	80070dc <HAL_GPIO_EXTI_Callback+0x1cc>
				ILI9341_Fill(BGCOLOR);
 8006fcc:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8006fd0:	f7fe f888 	bl	80050e4 <ILI9341_Fill>
				frequency = 0;
 8006fd4:	4e57      	ldr	r6, [pc, #348]	; (8007134 <HAL_GPIO_EXTI_Callback+0x224>)
				HAL_DAC_Stop_DMA(&hdac, DAC_CHANNEL_1);
 8006fd6:	4858      	ldr	r0, [pc, #352]	; (8007138 <HAL_GPIO_EXTI_Callback+0x228>)
					frequency=frequency+(fDigit[i]*pow(10,(4-i)));
 8006fd8:	f8df b16c 	ldr.w	fp, [pc, #364]	; 8007148 <HAL_GPIO_EXTI_Callback+0x238>
					dc = 0;
 8006fdc:	f8df 9164 	ldr.w	r9, [pc, #356]	; 8007144 <HAL_GPIO_EXTI_Callback+0x234>
				HAL_DAC_Stop_DMA(&hdac, DAC_CHANNEL_1);
 8006fe0:	2100      	movs	r1, #0
 8006fe2:	f7fa fb25 	bl	8001630 <HAL_DAC_Stop_DMA>
				frequency = 0;
 8006fe6:	2300      	movs	r3, #0
 8006fe8:	6033      	str	r3, [r6, #0]
				for(int i=4; i>=0;i-=1) //now let's bring all our fDigits together.
 8006fea:	f04f 0804 	mov.w	r8, #4
 8006fee:	46b2      	mov	sl, r6
					frequency=frequency+(fDigit[i]*pow(10,(4-i)));
 8006ff0:	f8da 0000 	ldr.w	r0, [sl]
 8006ff4:	f7f9 fa96 	bl	8000524 <__aeabi_i2d>
 8006ff8:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8006ffc:	f85b 0028 	ldr.w	r0, [fp, r8, lsl #2]
 8007000:	f7f9 fa90 	bl	8000524 <__aeabi_i2d>
 8007004:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8007008:	f1c8 0004 	rsb	r0, r8, #4
 800700c:	f7f9 fa8a 	bl	8000524 <__aeabi_i2d>
 8007010:	eeb0 0a48 	vmov.f32	s0, s16
 8007014:	eef0 0a68 	vmov.f32	s1, s17
 8007018:	ec41 0b11 	vmov	d1, r0, r1
 800701c:	f003 fd84 	bl	800ab28 <pow>
 8007020:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8007024:	ec53 2b10 	vmov	r2, r3, d0
 8007028:	f7f9 fae2 	bl	80005f0 <__aeabi_dmul>
 800702c:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8007030:	f7f9 f92c 	bl	800028c <__adddf3>
 8007034:	f7f9 fd8c 	bl	8000b50 <__aeabi_d2iz>
					dc = 0;
 8007038:	2300      	movs	r3, #0
				for(int i=4; i>=0;i-=1) //now let's bring all our fDigits together.
 800703a:	f118 38ff 	adds.w	r8, r8, #4294967295
					frequency=frequency+(fDigit[i]*pow(10,(4-i)));
 800703e:	f8ca 0000 	str.w	r0, [sl]
					dc = 0;
 8007042:	f889 3000 	strb.w	r3, [r9]
				for(int i=4; i>=0;i-=1) //now let's bring all our fDigits together.
 8007046:	d2d3      	bcs.n	8006ff0 <HAL_GPIO_EXTI_Callback+0xe0>
				if(frequency == 0)
 8007048:	b928      	cbnz	r0, 8007056 <HAL_GPIO_EXTI_Callback+0x146>
					frequency = 20000;
 800704a:	f644 6320 	movw	r3, #20000	; 0x4e20
 800704e:	6033      	str	r3, [r6, #0]
					dc = 1;
 8007050:	2301      	movs	r3, #1
 8007052:	f889 3000 	strb.w	r3, [r9]
				samples = SPS / frequency;
 8007056:	f8df 90f4 	ldr.w	r9, [pc, #244]	; 800714c <HAL_GPIO_EXTI_Callback+0x23c>
 800705a:	6832      	ldr	r2, [r6, #0]
 800705c:	4b37      	ldr	r3, [pc, #220]	; (800713c <HAL_GPIO_EXTI_Callback+0x22c>)
 800705e:	fb93 f3f2 	sdiv	r3, r3, r2
 8007062:	f8c9 3000 	str.w	r3, [r9]
				TIM8->ARR = (HAL_RCC_GetHCLKFreq()/((TIM8->PSC+1)*samples*frequency));
 8007066:	f7fb fabd 	bl	80025e4 <HAL_RCC_GetHCLKFreq>
 800706a:	6833      	ldr	r3, [r6, #0]
 800706c:	6aba      	ldr	r2, [r7, #40]	; 0x28
				free(SineDynamic);
 800706e:	f8df 80e0 	ldr.w	r8, [pc, #224]	; 8007150 <HAL_GPIO_EXTI_Callback+0x240>
				TIM8->ARR = (HAL_RCC_GetHCLKFreq()/((TIM8->PSC+1)*samples*frequency));
 8007072:	fb02 3203 	mla	r2, r2, r3, r3
 8007076:	f8d9 3000 	ldr.w	r3, [r9]
 800707a:	4353      	muls	r3, r2
 800707c:	fbb0 f3f3 	udiv	r3, r0, r3
				free(SineDynamic);
 8007080:	f8d8 0000 	ldr.w	r0, [r8]
				TIM8->ARR = (HAL_RCC_GetHCLKFreq()/((TIM8->PSC+1)*samples*frequency));
 8007084:	62fb      	str	r3, [r7, #44]	; 0x2c
				free(SineDynamic);
 8007086:	f000 fd89 	bl	8007b9c <free>
				SineDynamic = (uint16_t*) malloc(samples * sizeof(uint16_t));
 800708a:	f8d9 a000 	ldr.w	sl, [r9]
 800708e:	ea4f 004a 	mov.w	r0, sl, lsl #1
 8007092:	f000 fd7b 	bl	8007b8c <malloc>
				create_sine(&SineDynamic[0], samples, frequency);
 8007096:	6832      	ldr	r2, [r6, #0]
				SineDynamic = (uint16_t*) malloc(samples * sizeof(uint16_t));
 8007098:	f8c8 0000 	str.w	r0, [r8]
				create_sine(&SineDynamic[0], samples, frequency);
 800709c:	4651      	mov	r1, sl
 800709e:	f7fe fc53 	bl	8005948 <create_sine>
				HAL_DAC_Start_DMA(&hdac, DAC_CHANNEL_1, (uint32_t * ) SineDynamic, samples, DAC_ALIGN_12B_R);
 80070a2:	2100      	movs	r1, #0
 80070a4:	9100      	str	r1, [sp, #0]
 80070a6:	f8d9 3000 	ldr.w	r3, [r9]
 80070aa:	f8d8 2000 	ldr.w	r2, [r8]
 80070ae:	4822      	ldr	r0, [pc, #136]	; (8007138 <HAL_GPIO_EXTI_Callback+0x228>)
 80070b0:	f7fa fa5a 	bl	8001568 <HAL_DAC_Start_DMA>
				clear_ui(&ui);
 80070b4:	4814      	ldr	r0, [pc, #80]	; (8007108 <HAL_GPIO_EXTI_Callback+0x1f8>)
 80070b6:	f7fe fcb1 	bl	8005a1c <clear_ui>
				if(swp)
 80070ba:	4b21      	ldr	r3, [pc, #132]	; (8007140 <HAL_GPIO_EXTI_Callback+0x230>)
 80070bc:	781b      	ldrb	r3, [r3, #0]
				ui.measure = 1;
 80070be:	2201      	movs	r2, #1
 80070c0:	712a      	strb	r2, [r5, #4]
				if(swp)
 80070c2:	b11b      	cbz	r3, 80070cc <HAL_GPIO_EXTI_Callback+0x1bc>
					clear_ui(&ui);
 80070c4:	4810      	ldr	r0, [pc, #64]	; (8007108 <HAL_GPIO_EXTI_Callback+0x1f8>)
 80070c6:	f7fe fca9 	bl	8005a1c <clear_ui>
					ui.sweep = 1;
 80070ca:	70aa      	strb	r2, [r5, #2]
				HAL_ADC_Start_DMA(&hadc1, (uint32_t *) ADC_Measurement, ADC_SAMPLES);
 80070cc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80070d0:	4916      	ldr	r1, [pc, #88]	; (800712c <HAL_GPIO_EXTI_Callback+0x21c>)
 80070d2:	4817      	ldr	r0, [pc, #92]	; (8007130 <HAL_GPIO_EXTI_Callback+0x220>)
 80070d4:	f7fa f864 	bl	80011a0 <HAL_ADC_Start_DMA>
				call_ui();
 80070d8:	f7fe ff32 	bl	8005f40 <call_ui>
			if(longPress)
 80070dc:	9b07      	ldr	r3, [sp, #28]
 80070de:	781b      	ldrb	r3, [r3, #0]
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	f43f af48 	beq.w	8006f76 <HAL_GPIO_EXTI_Callback+0x66>
				ILI9341_Fill(BGCOLOR);
 80070e6:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80070ea:	f7fd fffb 	bl	80050e4 <ILI9341_Fill>
				clear_ui(&ui);
 80070ee:	4806      	ldr	r0, [pc, #24]	; (8007108 <HAL_GPIO_EXTI_Callback+0x1f8>)
 80070f0:	f7fe fc94 	bl	8005a1c <clear_ui>
				ui.start = 1;
 80070f4:	2301      	movs	r3, #1
 80070f6:	702b      	strb	r3, [r5, #0]
 80070f8:	e73c      	b.n	8006f74 <HAL_GPIO_EXTI_Callback+0x64>
 80070fa:	bf00      	nop
 80070fc:	f3af 8000 	nop.w
 8007100:	00000000 	.word	0x00000000
 8007104:	40240000 	.word	0x40240000
 8007108:	20000009 	.word	0x20000009
 800710c:	20006728 	.word	0x20006728
 8007110:	200066ec 	.word	0x200066ec
 8007114:	20006744 	.word	0x20006744
 8007118:	2000ef2c 	.word	0x2000ef2c
 800711c:	20006730 	.word	0x20006730
 8007120:	40010400 	.word	0x40010400
 8007124:	40020800 	.word	0x40020800
 8007128:	000f4240 	.word	0x000f4240
 800712c:	200006dc 	.word	0x200006dc
 8007130:	20006788 	.word	0x20006788
 8007134:	2000672c 	.word	0x2000672c
 8007138:	20006890 	.word	0x20006890
 800713c:	0002fda0 	.word	0x0002fda0
 8007140:	20006748 	.word	0x20006748
 8007144:	20006704 	.word	0x20006704
 8007148:	20006714 	.word	0x20006714
 800714c:	20006740 	.word	0x20006740
 8007150:	20007214 	.word	0x20007214
			else if(pushedCtr > 500000 && pushedCtr < 1000000)
 8007154:	f5a3 22f4 	sub.w	r2, r3, #499712	; 0x7a000
 8007158:	4981      	ldr	r1, [pc, #516]	; (8007360 <HAL_GPIO_EXTI_Callback+0x450>)
 800715a:	f5a2 7290 	sub.w	r2, r2, #288	; 0x120
 800715e:	428a      	cmp	r2, r1
 8007160:	f200 80a2 	bhi.w	80072a8 <HAL_GPIO_EXTI_Callback+0x398>
				if(ui.amplify)
 8007164:	78eb      	ldrb	r3, [r5, #3]
 8007166:	2b00      	cmp	r3, #0
 8007168:	f43f af1e 	beq.w	8006fa8 <HAL_GPIO_EXTI_Callback+0x98>
					HAL_DAC_Stop_DMA(&hdac, DAC_CHANNEL_1);
 800716c:	2100      	movs	r1, #0
 800716e:	487d      	ldr	r0, [pc, #500]	; (8007364 <HAL_GPIO_EXTI_Callback+0x454>)
					amplitude = 0;
 8007170:	f8df 8230 	ldr.w	r8, [pc, #560]	; 80073a4 <HAL_GPIO_EXTI_Callback+0x494>
					HAL_DAC_Stop_DMA(&hdac, DAC_CHANNEL_1);
 8007174:	f7fa fa5c 	bl	8001630 <HAL_DAC_Stop_DMA>
					ILI9341_Fill(BGCOLOR);
 8007178:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800717c:	f7fd ffb2 	bl	80050e4 <ILI9341_Fill>
					dc = 0;
 8007180:	4a79      	ldr	r2, [pc, #484]	; (8007368 <HAL_GPIO_EXTI_Callback+0x458>)
					amplitude = 0;
 8007182:	2300      	movs	r3, #0
 8007184:	f8a8 3000 	strh.w	r3, [r8]
					dc = 0;
 8007188:	7013      	strb	r3, [r2, #0]
					for(int i=3; i>=0;i-=1) //now let's bring all our fDigits together to form one frequency
 800718a:	2603      	movs	r6, #3
 800718c:	46c1      	mov	r9, r8
						amplitude=(amplitude+ (((uint16_t)aDigit[i])*pow(10,(3-i))));
 800718e:	f8b9 0000 	ldrh.w	r0, [r9]
 8007192:	f7f9 f9c7 	bl	8000524 <__aeabi_i2d>
 8007196:	4b75      	ldr	r3, [pc, #468]	; (800736c <HAL_GPIO_EXTI_Callback+0x45c>)
 8007198:	4682      	mov	sl, r0
 800719a:	f833 0026 	ldrh.w	r0, [r3, r6, lsl #2]
 800719e:	468b      	mov	fp, r1
 80071a0:	f7f9 f9c0 	bl	8000524 <__aeabi_i2d>
 80071a4:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80071a8:	f1c6 0003 	rsb	r0, r6, #3
 80071ac:	f7f9 f9ba 	bl	8000524 <__aeabi_i2d>
 80071b0:	eeb0 0a48 	vmov.f32	s0, s16
 80071b4:	eef0 0a68 	vmov.f32	s1, s17
 80071b8:	ec41 0b11 	vmov	d1, r0, r1
 80071bc:	f003 fcb4 	bl	800ab28 <pow>
 80071c0:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80071c4:	ec53 2b10 	vmov	r2, r3, d0
 80071c8:	f7f9 fa12 	bl	80005f0 <__aeabi_dmul>
 80071cc:	4652      	mov	r2, sl
 80071ce:	465b      	mov	r3, fp
 80071d0:	f7f9 f85c 	bl	800028c <__adddf3>
 80071d4:	f7f9 fce4 	bl	8000ba0 <__aeabi_d2uiz>
					for(int i=3; i>=0;i-=1) //now let's bring all our fDigits together to form one frequency
 80071d8:	f116 36ff 	adds.w	r6, r6, #4294967295
						amplitude=(amplitude+ (((uint16_t)aDigit[i])*pow(10,(3-i))));
 80071dc:	f8a9 0000 	strh.w	r0, [r9]
					for(int i=3; i>=0;i-=1) //now let's bring all our fDigits together to form one frequency
 80071e0:	d2d5      	bcs.n	800718e <HAL_GPIO_EXTI_Callback+0x27e>
					clear_ui(&ui);
 80071e2:	4863      	ldr	r0, [pc, #396]	; (8007370 <HAL_GPIO_EXTI_Callback+0x460>)
					samples = SPS / frequency;
 80071e4:	f8df b1c0 	ldr.w	fp, [pc, #448]	; 80073a8 <HAL_GPIO_EXTI_Callback+0x498>
					frequency = 100;
 80071e8:	4e62      	ldr	r6, [pc, #392]	; (8007374 <HAL_GPIO_EXTI_Callback+0x464>)
					free(SineDynamic);
 80071ea:	f8df 91c0 	ldr.w	r9, [pc, #448]	; 80073ac <HAL_GPIO_EXTI_Callback+0x49c>
					clear_ui(&ui);
 80071ee:	f7fe fc15 	bl	8005a1c <clear_ui>
					ctrl = 1; //Control mode
 80071f2:	4b61      	ldr	r3, [pc, #388]	; (8007378 <HAL_GPIO_EXTI_Callback+0x468>)
 80071f4:	2201      	movs	r2, #1
 80071f6:	701a      	strb	r2, [r3, #0]
					frequency = 100;
 80071f8:	f04f 0a64 	mov.w	sl, #100	; 0x64
					samples = SPS / frequency;
 80071fc:	f44f 62f5 	mov.w	r2, #1960	; 0x7a8
					frequency = 100;
 8007200:	f8c6 a000 	str.w	sl, [r6]
					samples = SPS / frequency;
 8007204:	f8cb 2000 	str.w	r2, [fp]
					TIM8->ARR = (HAL_RCC_GetHCLKFreq()/((TIM8->PSC+1)*samples*frequency));
 8007208:	f7fb f9ec 	bl	80025e4 <HAL_RCC_GetHCLKFreq>
 800720c:	6832      	ldr	r2, [r6, #0]
 800720e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007210:	fb01 2102 	mla	r1, r1, r2, r2
 8007214:	f8db 2000 	ldr.w	r2, [fp]
 8007218:	434a      	muls	r2, r1
 800721a:	fbb0 f2f2 	udiv	r2, r0, r2
					free(SineDynamic);
 800721e:	f8d9 0000 	ldr.w	r0, [r9]
					TIM8->ARR = (HAL_RCC_GetHCLKFreq()/((TIM8->PSC+1)*samples*frequency));
 8007222:	62fa      	str	r2, [r7, #44]	; 0x2c
					free(SineDynamic);
 8007224:	f000 fcba 	bl	8007b9c <free>
					SineDynamic = (uint16_t*) malloc(samples * sizeof(uint16_t));
 8007228:	f8db 1000 	ldr.w	r1, [fp]
 800722c:	9108      	str	r1, [sp, #32]
 800722e:	0048      	lsls	r0, r1, #1
 8007230:	f000 fcac 	bl	8007b8c <malloc>
					create_sine(&SineDynamic[0], samples, frequency);
 8007234:	6832      	ldr	r2, [r6, #0]
 8007236:	9908      	ldr	r1, [sp, #32]
					SineDynamic = (uint16_t*) malloc(samples * sizeof(uint16_t));
 8007238:	f8c9 0000 	str.w	r0, [r9]
					HAL_DAC_Start_DMA(&hdac, DAC_CHANNEL_1, (uint32_t * ) SineDynamic, samples, DAC_ALIGN_12B_R);
 800723c:	2600      	movs	r6, #0
					create_sine(&SineDynamic[0], samples, frequency);
 800723e:	f7fe fb83 	bl	8005948 <create_sine>
					HAL_DAC_Start_DMA(&hdac, DAC_CHANNEL_1, (uint32_t * ) SineDynamic, samples, DAC_ALIGN_12B_R);
 8007242:	9600      	str	r6, [sp, #0]
 8007244:	f8db 3000 	ldr.w	r3, [fp]
 8007248:	f8d9 2000 	ldr.w	r2, [r9]
 800724c:	4845      	ldr	r0, [pc, #276]	; (8007364 <HAL_GPIO_EXTI_Callback+0x454>)
 800724e:	4631      	mov	r1, r6
 8007250:	f7fa f98a 	bl	8001568 <HAL_DAC_Start_DMA>
					potOneValue[1] = 127;
 8007254:	4a49      	ldr	r2, [pc, #292]	; (800737c <HAL_GPIO_EXTI_Callback+0x46c>)
					amp = (float)amplitude/100;
 8007256:	eddf 6a4a 	vldr	s13, [pc, #296]	; 8007380 <HAL_GPIO_EXTI_Callback+0x470>
					HAL_I2C_Master_Transmit(&hi2c1, 0x50, potOneValue, 2,10 );
 800725a:	484a      	ldr	r0, [pc, #296]	; (8007384 <HAL_GPIO_EXTI_Callback+0x474>)
					potOneValue[1] = 127;
 800725c:	237f      	movs	r3, #127	; 0x7f
 800725e:	7053      	strb	r3, [r2, #1]
					amp = (float)amplitude/100;
 8007260:	f8b8 3000 	ldrh.w	r3, [r8]
 8007264:	ee07 3a90 	vmov	s15, r3
 8007268:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800726c:	4b46      	ldr	r3, [pc, #280]	; (8007388 <HAL_GPIO_EXTI_Callback+0x478>)
 800726e:	ee87 7aa6 	vdiv.f32	s14, s15, s13
					HAL_I2C_Master_Transmit(&hi2c1, 0x50, potOneValue, 2,10 );
 8007272:	2150      	movs	r1, #80	; 0x50
					amp = (float)amplitude/100;
 8007274:	ed83 7a00 	vstr	s14, [r3]
					HAL_I2C_Master_Transmit(&hi2c1, 0x50, potOneValue, 2,10 );
 8007278:	230a      	movs	r3, #10
 800727a:	9300      	str	r3, [sp, #0]
 800727c:	2302      	movs	r3, #2
 800727e:	f7fa fe91 	bl	8001fa4 <HAL_I2C_Master_Transmit>
					HAL_ADC_Start_DMA(&hadc1, (uint32_t *) ADC_Measurement, ADC_SAMPLES);
 8007282:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8007286:	4941      	ldr	r1, [pc, #260]	; (800738c <HAL_GPIO_EXTI_Callback+0x47c>)
 8007288:	4841      	ldr	r0, [pc, #260]	; (8007390 <HAL_GPIO_EXTI_Callback+0x480>)
 800728a:	f7f9 ff89 	bl	80011a0 <HAL_ADC_Start_DMA>
					ILI9341_printText("adjusting gain", 30, 100, FCOLOR, BGCOLOR, 2);
 800728e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8007292:	f04f 0e02 	mov.w	lr, #2
 8007296:	e88d 4008 	stmia.w	sp, {r3, lr}
 800729a:	4652      	mov	r2, sl
 800729c:	4633      	mov	r3, r6
 800729e:	211e      	movs	r1, #30
 80072a0:	483c      	ldr	r0, [pc, #240]	; (8007394 <HAL_GPIO_EXTI_Callback+0x484>)
 80072a2:	f7fd ffc7 	bl	8005234 <ILI9341_printText>
 80072a6:	e67f      	b.n	8006fa8 <HAL_GPIO_EXTI_Callback+0x98>
			else if(pushedCtr > 100 && pushedCtr < 20000)
 80072a8:	3b64      	subs	r3, #100	; 0x64
 80072aa:	f644 52ba 	movw	r2, #19898	; 0x4dba
 80072ae:	4293      	cmp	r3, r2
				shortPress = 1;
 80072b0:	bf98      	it	ls
 80072b2:	7020      	strbls	r0, [r4, #0]
 80072b4:	e678      	b.n	8006fa8 <HAL_GPIO_EXTI_Callback+0x98>
	if(GPIO_Pin == GPIO_PIN_2 && debounce())
 80072b6:	2804      	cmp	r0, #4
 80072b8:	f040 812d 	bne.w	8007516 <HAL_GPIO_EXTI_Callback+0x606>
 80072bc:	f7ff fe18 	bl	8006ef0 <debounce>
 80072c0:	2800      	cmp	r0, #0
 80072c2:	f43f ae60 	beq.w	8006f86 <HAL_GPIO_EXTI_Callback+0x76>
		if(ui.start == 1)
 80072c6:	4c2a      	ldr	r4, [pc, #168]	; (8007370 <HAL_GPIO_EXTI_Callback+0x460>)
		call_ui();
 80072c8:	f7fe fe3a 	bl	8005f40 <call_ui>
		if(ui.start == 1)
 80072cc:	7825      	ldrb	r5, [r4, #0]
 80072ce:	2d01      	cmp	r5, #1
 80072d0:	d107      	bne.n	80072e2 <HAL_GPIO_EXTI_Callback+0x3d2>
			ILI9341_Fill(BGCOLOR);
 80072d2:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80072d6:	f7fd ff05 	bl	80050e4 <ILI9341_Fill>
			clear_ui(&ui);
 80072da:	4620      	mov	r0, r4
 80072dc:	f7fe fb9e 	bl	8005a1c <clear_ui>
			ui.amplify = 1;
 80072e0:	70e5      	strb	r5, [r4, #3]
		if(ui.frequency)
 80072e2:	7863      	ldrb	r3, [r4, #1]
 80072e4:	b19b      	cbz	r3, 800730e <HAL_GPIO_EXTI_Callback+0x3fe>
			fDigit[fcDigit]+=1;
 80072e6:	4b2c      	ldr	r3, [pc, #176]	; (8007398 <HAL_GPIO_EXTI_Callback+0x488>)
 80072e8:	681a      	ldr	r2, [r3, #0]
 80072ea:	4b2c      	ldr	r3, [pc, #176]	; (800739c <HAL_GPIO_EXTI_Callback+0x48c>)
 80072ec:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80072f0:	3101      	adds	r1, #1
 80072f2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			if(fcDigit == 0 && fDigit[fcDigit] > 2)
 80072f6:	b912      	cbnz	r2, 80072fe <HAL_GPIO_EXTI_Callback+0x3ee>
 80072f8:	2902      	cmp	r1, #2
				fDigit[fcDigit] = 0;
 80072fa:	bfc8      	it	gt
 80072fc:	601a      	strgt	r2, [r3, #0]
			if(fDigit[0] ==2)
 80072fe:	6819      	ldr	r1, [r3, #0]
 8007300:	2902      	cmp	r1, #2
 8007302:	d11b      	bne.n	800733c <HAL_GPIO_EXTI_Callback+0x42c>
				fDigit[1] = 0;
 8007304:	2200      	movs	r2, #0
 8007306:	605a      	str	r2, [r3, #4]
				fDigit[2] = 0;
 8007308:	609a      	str	r2, [r3, #8]
				fDigit[3] = 0;
 800730a:	60da      	str	r2, [r3, #12]
				fDigit[4] = 0;
 800730c:	611a      	str	r2, [r3, #16]
		if(ui.amplify)
 800730e:	78e3      	ldrb	r3, [r4, #3]
 8007310:	2b00      	cmp	r3, #0
 8007312:	f43f ae36 	beq.w	8006f82 <HAL_GPIO_EXTI_Callback+0x72>
			aDigit[acDigit]+=1;
 8007316:	4b22      	ldr	r3, [pc, #136]	; (80073a0 <HAL_GPIO_EXTI_Callback+0x490>)
 8007318:	681a      	ldr	r2, [r3, #0]
 800731a:	4b14      	ldr	r3, [pc, #80]	; (800736c <HAL_GPIO_EXTI_Callback+0x45c>)
 800731c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007320:	3101      	adds	r1, #1
 8007322:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			if(acDigit == 0 && aDigit[acDigit] > 2)
 8007326:	b912      	cbnz	r2, 800732e <HAL_GPIO_EXTI_Callback+0x41e>
 8007328:	2902      	cmp	r1, #2
				aDigit[acDigit] = 0;
 800732a:	bfc8      	it	gt
 800732c:	601a      	strgt	r2, [r3, #0]
			if(aDigit[0] ==2)
 800732e:	6819      	ldr	r1, [r3, #0]
 8007330:	2902      	cmp	r1, #2
 8007332:	d10b      	bne.n	800734c <HAL_GPIO_EXTI_Callback+0x43c>
				aDigit[1] = 0;
 8007334:	2200      	movs	r2, #0
 8007336:	605a      	str	r2, [r3, #4]
				aDigit[2] = 0;
 8007338:	609a      	str	r2, [r3, #8]
 800733a:	e622      	b.n	8006f82 <HAL_GPIO_EXTI_Callback+0x72>
			else if(fDigit[fcDigit]>9)
 800733c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007340:	2909      	cmp	r1, #9
				fDigit[fcDigit] = 0;
 8007342:	bfc4      	itt	gt
 8007344:	2100      	movgt	r1, #0
 8007346:	f843 1022 	strgt.w	r1, [r3, r2, lsl #2]
 800734a:	e7e0      	b.n	800730e <HAL_GPIO_EXTI_Callback+0x3fe>
			else if(aDigit[acDigit]>9)
 800734c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007350:	2909      	cmp	r1, #9
 8007352:	f77f ae16 	ble.w	8006f82 <HAL_GPIO_EXTI_Callback+0x72>
				aDigit[acDigit] = 0;
 8007356:	2100      	movs	r1, #0
 8007358:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800735c:	e611      	b.n	8006f82 <HAL_GPIO_EXTI_Callback+0x72>
 800735e:	bf00      	nop
 8007360:	0007a11e 	.word	0x0007a11e
 8007364:	20006890 	.word	0x20006890
 8007368:	20006704 	.word	0x20006704
 800736c:	200066dc 	.word	0x200066dc
 8007370:	20000009 	.word	0x20000009
 8007374:	2000672c 	.word	0x2000672c
 8007378:	20006700 	.word	0x20006700
 800737c:	2000ef25 	.word	0x2000ef25
 8007380:	42c80000 	.word	0x42c80000
 8007384:	20006d5c 	.word	0x20006d5c
 8007388:	200066f0 	.word	0x200066f0
 800738c:	200006dc 	.word	0x200006dc
 8007390:	20006788 	.word	0x20006788
 8007394:	0800d6e0 	.word	0x0800d6e0
 8007398:	20006728 	.word	0x20006728
 800739c:	20006714 	.word	0x20006714
 80073a0:	200066ec 	.word	0x200066ec
 80073a4:	200066fc 	.word	0x200066fc
 80073a8:	20006740 	.word	0x20006740
 80073ac:	20007214 	.word	0x20007214
	if(GPIO_Pin == GPIO_PIN_3 && debounce())
 80073b0:	f7ff fd9e 	bl	8006ef0 <debounce>
 80073b4:	2800      	cmp	r0, #0
 80073b6:	f43f ade6 	beq.w	8006f86 <HAL_GPIO_EXTI_Callback+0x76>
		if(ui.start == 1)
 80073ba:	4c68      	ldr	r4, [pc, #416]	; (800755c <HAL_GPIO_EXTI_Callback+0x64c>)
		call_ui();
 80073bc:	f7fe fdc0 	bl	8005f40 <call_ui>
		if(ui.start == 1)
 80073c0:	7825      	ldrb	r5, [r4, #0]
 80073c2:	2d01      	cmp	r5, #1
 80073c4:	d109      	bne.n	80073da <HAL_GPIO_EXTI_Callback+0x4ca>
			ILI9341_Fill(BGCOLOR);
 80073c6:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80073ca:	f7fd fe8b 	bl	80050e4 <ILI9341_Fill>
			clear_ui(&ui);
 80073ce:	4620      	mov	r0, r4
 80073d0:	f7fe fb24 	bl	8005a1c <clear_ui>
			swp = 1;
 80073d4:	4b62      	ldr	r3, [pc, #392]	; (8007560 <HAL_GPIO_EXTI_Callback+0x650>)
			ui.amplify = 1;
 80073d6:	70e5      	strb	r5, [r4, #3]
			swp = 1;
 80073d8:	701d      	strb	r5, [r3, #0]
		if(ui.frequency)
 80073da:	7863      	ldrb	r3, [r4, #1]
 80073dc:	b1f3      	cbz	r3, 800741c <HAL_GPIO_EXTI_Callback+0x50c>
			fDigit[fcDigit]-=1;
 80073de:	4b61      	ldr	r3, [pc, #388]	; (8007564 <HAL_GPIO_EXTI_Callback+0x654>)
 80073e0:	681a      	ldr	r2, [r3, #0]
 80073e2:	4b61      	ldr	r3, [pc, #388]	; (8007568 <HAL_GPIO_EXTI_Callback+0x658>)
 80073e4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80073e8:	3901      	subs	r1, #1
 80073ea:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			if(fDigit[0]<0)
 80073ee:	6819      	ldr	r1, [r3, #0]
 80073f0:	2900      	cmp	r1, #0
				fDigit[fcDigit] = 2;
 80073f2:	bfbc      	itt	lt
 80073f4:	2102      	movlt	r1, #2
 80073f6:	f843 1022 	strlt.w	r1, [r3, r2, lsl #2]
			if(fDigit[0] >= 2)
 80073fa:	6819      	ldr	r1, [r3, #0]
 80073fc:	2901      	cmp	r1, #1
 80073fe:	dd06      	ble.n	800740e <HAL_GPIO_EXTI_Callback+0x4fe>
				fDigit[0] = 2;
 8007400:	2102      	movs	r1, #2
 8007402:	6019      	str	r1, [r3, #0]
				fDigit[1] = 0;
 8007404:	2100      	movs	r1, #0
 8007406:	6059      	str	r1, [r3, #4]
				fDigit[2] = 0;
 8007408:	6099      	str	r1, [r3, #8]
				fDigit[3] = 0;
 800740a:	60d9      	str	r1, [r3, #12]
				fDigit[4] = 0;
 800740c:	6119      	str	r1, [r3, #16]
			if(fDigit[fcDigit]<0)
 800740e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007412:	2900      	cmp	r1, #0
				fDigit[fcDigit] = 9;
 8007414:	bfbc      	itt	lt
 8007416:	2109      	movlt	r1, #9
 8007418:	f843 1022 	strlt.w	r1, [r3, r2, lsl #2]
		if(ui.amplify)
 800741c:	78e3      	ldrb	r3, [r4, #3]
 800741e:	b1eb      	cbz	r3, 800745c <HAL_GPIO_EXTI_Callback+0x54c>
			aDigit[acDigit]-=1;
 8007420:	4b52      	ldr	r3, [pc, #328]	; (800756c <HAL_GPIO_EXTI_Callback+0x65c>)
 8007422:	681a      	ldr	r2, [r3, #0]
 8007424:	4b52      	ldr	r3, [pc, #328]	; (8007570 <HAL_GPIO_EXTI_Callback+0x660>)
 8007426:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800742a:	3901      	subs	r1, #1
 800742c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			if(aDigit[0]<0)
 8007430:	6819      	ldr	r1, [r3, #0]
 8007432:	2900      	cmp	r1, #0
				aDigit[acDigit] = 2;
 8007434:	bfbc      	itt	lt
 8007436:	2102      	movlt	r1, #2
 8007438:	f843 1022 	strlt.w	r1, [r3, r2, lsl #2]
			if(aDigit[0] >= 2)
 800743c:	6819      	ldr	r1, [r3, #0]
 800743e:	2901      	cmp	r1, #1
 8007440:	dd05      	ble.n	800744e <HAL_GPIO_EXTI_Callback+0x53e>
				aDigit[0] = 2;
 8007442:	2102      	movs	r1, #2
 8007444:	6019      	str	r1, [r3, #0]
				aDigit[1] = 0;
 8007446:	2100      	movs	r1, #0
 8007448:	6059      	str	r1, [r3, #4]
				aDigit[2] = 0;
 800744a:	6099      	str	r1, [r3, #8]
				aDigit[3] = 0;
 800744c:	60d9      	str	r1, [r3, #12]
			if(aDigit[acDigit]<0)
 800744e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007452:	2900      	cmp	r1, #0
				aDigit[acDigit] = 9;
 8007454:	bfbc      	itt	lt
 8007456:	2109      	movlt	r1, #9
 8007458:	f843 1022 	strlt.w	r1, [r3, r2, lsl #2]
		if(ui.sweep)
 800745c:	78a3      	ldrb	r3, [r4, #2]
 800745e:	2b00      	cmp	r3, #0
 8007460:	f43f ad8f 	beq.w	8006f82 <HAL_GPIO_EXTI_Callback+0x72>
			if(!swp)
 8007464:	4b3e      	ldr	r3, [pc, #248]	; (8007560 <HAL_GPIO_EXTI_Callback+0x650>)
 8007466:	781b      	ldrb	r3, [r3, #0]
 8007468:	2b00      	cmp	r3, #0
 800746a:	f47f ad8a 	bne.w	8006f82 <HAL_GPIO_EXTI_Callback+0x72>
				if(f_mount(&myFS,SDPath, 1) == FR_OK)
 800746e:	2201      	movs	r2, #1
 8007470:	4940      	ldr	r1, [pc, #256]	; (8007574 <HAL_GPIO_EXTI_Callback+0x664>)
 8007472:	4841      	ldr	r0, [pc, #260]	; (8007578 <HAL_GPIO_EXTI_Callback+0x668>)
 8007474:	f7fd fada 	bl	8004a2c <f_mount>
 8007478:	2800      	cmp	r0, #0
 800747a:	f47f ad82 	bne.w	8006f82 <HAL_GPIO_EXTI_Callback+0x72>
					char myPath[] = "FREQRESP.TXT\0";
 800747e:	4b3f      	ldr	r3, [pc, #252]	; (800757c <HAL_GPIO_EXTI_Callback+0x66c>)
 8007480:	aa0c      	add	r2, sp, #48	; 0x30
 8007482:	f103 0608 	add.w	r6, r3, #8
 8007486:	4615      	mov	r5, r2
 8007488:	6818      	ldr	r0, [r3, #0]
 800748a:	6859      	ldr	r1, [r3, #4]
 800748c:	4614      	mov	r4, r2
 800748e:	c403      	stmia	r4!, {r0, r1}
 8007490:	3308      	adds	r3, #8
 8007492:	42b3      	cmp	r3, r6
 8007494:	4622      	mov	r2, r4
 8007496:	d1f7      	bne.n	8007488 <HAL_GPIO_EXTI_Callback+0x578>
 8007498:	6818      	ldr	r0, [r3, #0]
 800749a:	889b      	ldrh	r3, [r3, #4]
 800749c:	6020      	str	r0, [r4, #0]
 800749e:	80a3      	strh	r3, [r4, #4]
					if(f_open(&myFILE, myPath, FA_WRITE | FA_OPEN_APPEND) == FR_OK)
 80074a0:	2232      	movs	r2, #50	; 0x32
 80074a2:	4629      	mov	r1, r5
 80074a4:	4836      	ldr	r0, [pc, #216]	; (8007580 <HAL_GPIO_EXTI_Callback+0x670>)
 80074a6:	f7fd faf5 	bl	8004a94 <f_open>
 80074aa:	b118      	cbz	r0, 80074b4 <HAL_GPIO_EXTI_Callback+0x5a4>
					f_close(&myFILE);
 80074ac:	4834      	ldr	r0, [pc, #208]	; (8007580 <HAL_GPIO_EXTI_Callback+0x670>)
 80074ae:	f7fd fd49 	bl	8004f44 <f_close>
 80074b2:	e566      	b.n	8006f82 <HAL_GPIO_EXTI_Callback+0x72>
 80074b4:	4c33      	ldr	r4, [pc, #204]	; (8007584 <HAL_GPIO_EXTI_Callback+0x674>)
								sprintf(c, "\n%.2f, %.2f, %.1f, %.2f",writeOut[ctr][0],writeOut[ctr][1], writeOut[ctr][2], writeOut[ctr][3]);
 80074b6:	4f34      	ldr	r7, [pc, #208]	; (8007588 <HAL_GPIO_EXTI_Callback+0x678>)
 80074b8:	4d34      	ldr	r5, [pc, #208]	; (800758c <HAL_GPIO_EXTI_Callback+0x67c>)
								f_puts(c, &myFILE);
 80074ba:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8007580 <HAL_GPIO_EXTI_Callback+0x670>
 80074be:	f504 46fa 	add.w	r6, r4, #32000	; 0x7d00
							if(writeOut[ctr][2] !=0)
 80074c2:	ed94 8a02 	vldr	s16, [r4, #8]
 80074c6:	eeb5 8a40 	vcmp.f32	s16, #0.0
 80074ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80074ce:	d01e      	beq.n	800750e <HAL_GPIO_EXTI_Callback+0x5fe>
								sprintf(c, "\n%.2f, %.2f, %.1f, %.2f",writeOut[ctr][0],writeOut[ctr][1], writeOut[ctr][2], writeOut[ctr][3]);
 80074d0:	6820      	ldr	r0, [r4, #0]
 80074d2:	f7f9 f839 	bl	8000548 <__aeabi_f2d>
 80074d6:	4680      	mov	r8, r0
 80074d8:	68e0      	ldr	r0, [r4, #12]
 80074da:	4689      	mov	r9, r1
 80074dc:	f7f9 f834 	bl	8000548 <__aeabi_f2d>
 80074e0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80074e4:	ee18 0a10 	vmov	r0, s16
 80074e8:	f7f9 f82e 	bl	8000548 <__aeabi_f2d>
 80074ec:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80074f0:	6860      	ldr	r0, [r4, #4]
 80074f2:	f7f9 f829 	bl	8000548 <__aeabi_f2d>
 80074f6:	4642      	mov	r2, r8
 80074f8:	e9cd 0100 	strd	r0, r1, [sp]
 80074fc:	464b      	mov	r3, r9
 80074fe:	4639      	mov	r1, r7
 8007500:	4628      	mov	r0, r5
 8007502:	f000 fd7d 	bl	8008000 <sprintf>
								f_puts(c, &myFILE);
 8007506:	4651      	mov	r1, sl
 8007508:	4628      	mov	r0, r5
 800750a:	f7fd fd2c 	bl	8004f66 <f_puts>
 800750e:	3410      	adds	r4, #16
						for(int ctr = 0; ctr < 2000 ;ctr++)
 8007510:	42b4      	cmp	r4, r6
 8007512:	d1d6      	bne.n	80074c2 <HAL_GPIO_EXTI_Callback+0x5b2>
 8007514:	e7ca      	b.n	80074ac <HAL_GPIO_EXTI_Callback+0x59c>
	if(GPIO_Pin == GPIO_PIN_3 && debounce())
 8007516:	2808      	cmp	r0, #8
 8007518:	f43f af4a 	beq.w	80073b0 <HAL_GPIO_EXTI_Callback+0x4a0>
	if(GPIO_Pin == GPIO_PIN_5 && debounce())
 800751c:	2820      	cmp	r0, #32
 800751e:	f47f ad32 	bne.w	8006f86 <HAL_GPIO_EXTI_Callback+0x76>
 8007522:	f7ff fce5 	bl	8006ef0 <debounce>
 8007526:	2800      	cmp	r0, #0
 8007528:	f43f ad2d 	beq.w	8006f86 <HAL_GPIO_EXTI_Callback+0x76>
		call_ui();
 800752c:	f7fe fd08 	bl	8005f40 <call_ui>
		if(ui.frequency)
 8007530:	4b0a      	ldr	r3, [pc, #40]	; (800755c <HAL_GPIO_EXTI_Callback+0x64c>)
 8007532:	785a      	ldrb	r2, [r3, #1]
 8007534:	b132      	cbz	r2, 8007544 <HAL_GPIO_EXTI_Callback+0x634>
			fcDigit+=1;
 8007536:	490b      	ldr	r1, [pc, #44]	; (8007564 <HAL_GPIO_EXTI_Callback+0x654>)
 8007538:	680a      	ldr	r2, [r1, #0]
 800753a:	3201      	adds	r2, #1
			if(fcDigit > 4)
 800753c:	2a04      	cmp	r2, #4
				fcDigit = 0;
 800753e:	bfc8      	it	gt
 8007540:	2200      	movgt	r2, #0
 8007542:	600a      	str	r2, [r1, #0]
		if(ui.amplify)
 8007544:	78db      	ldrb	r3, [r3, #3]
 8007546:	2b00      	cmp	r3, #0
 8007548:	f43f ad1b 	beq.w	8006f82 <HAL_GPIO_EXTI_Callback+0x72>
			acDigit+=1;
 800754c:	4a07      	ldr	r2, [pc, #28]	; (800756c <HAL_GPIO_EXTI_Callback+0x65c>)
 800754e:	6813      	ldr	r3, [r2, #0]
 8007550:	3301      	adds	r3, #1
			if(acDigit > 3)
 8007552:	2b03      	cmp	r3, #3
				acDigit = 0;
 8007554:	bfc8      	it	gt
 8007556:	2300      	movgt	r3, #0
 8007558:	e4f7      	b.n	8006f4a <HAL_GPIO_EXTI_Callback+0x3a>
 800755a:	bf00      	nop
 800755c:	20000009 	.word	0x20000009
 8007560:	20006748 	.word	0x20006748
 8007564:	20006728 	.word	0x20006728
 8007568:	20006714 	.word	0x20006714
 800756c:	200066ec 	.word	0x200066ec
 8007570:	200066dc 	.word	0x200066dc
 8007574:	200068a5 	.word	0x200068a5
 8007578:	20006fe4 	.word	0x20006fe4
 800757c:	0800d0a0 	.word	0x0800d0a0
 8007580:	20006db0 	.word	0x20006db0
 8007584:	20007224 	.word	0x20007224
 8007588:	0800d6ef 	.word	0x0800d6ef
 800758c:	20007218 	.word	0x20007218

08007590 <_Error_Handler>:
 * @param  file: The file name as string.
 * @param  line: The line in file as a number.
 * @retval None
 */
void _Error_Handler(char *file, int line)
{
 8007590:	e7fe      	b.n	8007590 <_Error_Handler>
	...

08007594 <SD_CheckStatus.isra.0>:
/* USER CODE BEGIN beforeFunctionSection */
/* can be used to modify / undefine following code or add new code */
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/
static DSTATUS SD_CheckStatus(BYTE lun)
 8007594:	b510      	push	{r4, lr}
{
  Stat = STA_NOINIT;
 8007596:	4c06      	ldr	r4, [pc, #24]	; (80075b0 <SD_CheckStatus.isra.0+0x1c>)
 8007598:	2301      	movs	r3, #1
 800759a:	7023      	strb	r3, [r4, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 800759c:	f7fd ff54 	bl	8005448 <BSP_SD_GetCardState>
 80075a0:	4623      	mov	r3, r4
 80075a2:	b918      	cbnz	r0, 80075ac <SD_CheckStatus.isra.0+0x18>
  {
    Stat &= ~STA_NOINIT;
 80075a4:	7822      	ldrb	r2, [r4, #0]
 80075a6:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80075aa:	7022      	strb	r2, [r4, #0]
  }

  return Stat;
 80075ac:	7818      	ldrb	r0, [r3, #0]
}
 80075ae:	bd10      	pop	{r4, pc}
 80075b0:	2000000e 	.word	0x2000000e

080075b4 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 80075b4:	b510      	push	{r4, lr}
  Stat = STA_NOINIT;
 80075b6:	4c05      	ldr	r4, [pc, #20]	; (80075cc <SD_initialize+0x18>)
 80075b8:	2301      	movs	r3, #1
 80075ba:	7023      	strb	r3, [r4, #0]
#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 80075bc:	f7fd ff0a 	bl	80053d4 <BSP_SD_Init>
 80075c0:	b910      	cbnz	r0, 80075c8 <SD_initialize+0x14>
  {
    Stat = SD_CheckStatus(lun);
 80075c2:	f7ff ffe7 	bl	8007594 <SD_CheckStatus.isra.0>
 80075c6:	7020      	strb	r0, [r4, #0]
  }

#else
  Stat = SD_CheckStatus(lun);
#endif
  return Stat;
 80075c8:	7820      	ldrb	r0, [r4, #0]
}
 80075ca:	bd10      	pop	{r4, pc}
 80075cc:	2000000e 	.word	0x2000000e

080075d0 <SD_status>:
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
  return SD_CheckStatus(lun);
 80075d0:	f7ff bfe0 	b.w	8007594 <SD_CheckStatus.isra.0>

080075d4 <SD_read>:
  * @param  sector: Sector address (LBA)
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 80075d4:	b508      	push	{r3, lr}
 80075d6:	4608      	mov	r0, r1
 80075d8:	4611      	mov	r1, r2
 80075da:	461a      	mov	r2, r3
  DRESULT res = RES_ERROR;

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 80075dc:	f04f 33ff 	mov.w	r3, #4294967295
 80075e0:	f7fd ff12 	bl	8005408 <BSP_SD_ReadBlocks>
 80075e4:	b920      	cbnz	r0, 80075f0 <SD_read+0x1c>
  if(BSP_SD_WriteBlocks((uint32_t*)buff,
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 80075e6:	f7fd ff2f 	bl	8005448 <BSP_SD_GetCardState>
 80075ea:	2800      	cmp	r0, #0
 80075ec:	d1fb      	bne.n	80075e6 <SD_read+0x12>
 80075ee:	bd08      	pop	{r3, pc}
  DRESULT res = RES_ERROR;
 80075f0:	2001      	movs	r0, #1
}
 80075f2:	bd08      	pop	{r3, pc}

080075f4 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 80075f4:	b510      	push	{r4, lr}
  DRESULT res = RES_ERROR;
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 80075f6:	4b12      	ldr	r3, [pc, #72]	; (8007640 <SD_ioctl+0x4c>)
 80075f8:	781b      	ldrb	r3, [r3, #0]
 80075fa:	07db      	lsls	r3, r3, #31
{
 80075fc:	b088      	sub	sp, #32
 80075fe:	4614      	mov	r4, r2
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8007600:	d41b      	bmi.n	800763a <SD_ioctl+0x46>

  switch (cmd)
 8007602:	2903      	cmp	r1, #3
 8007604:	d803      	bhi.n	800760e <SD_ioctl+0x1a>
 8007606:	e8df f001 	tbb	[pc, r1]
 800760a:	0510      	.short	0x0510
 800760c:	120b      	.short	0x120b
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
    res = RES_OK;
    break;

  default:
    res = RES_PARERR;
 800760e:	2004      	movs	r0, #4
  }

  return res;
}
 8007610:	b008      	add	sp, #32
 8007612:	bd10      	pop	{r4, pc}
    BSP_SD_GetCardInfo(&CardInfo);
 8007614:	4668      	mov	r0, sp
 8007616:	f7fd ff21 	bl	800545c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800761a:	9b06      	ldr	r3, [sp, #24]
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800761c:	6023      	str	r3, [r4, #0]
 800761e:	e004      	b.n	800762a <SD_ioctl+0x36>
    BSP_SD_GetCardInfo(&CardInfo);
 8007620:	4668      	mov	r0, sp
 8007622:	f7fd ff1b 	bl	800545c <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8007626:	9b07      	ldr	r3, [sp, #28]
 8007628:	8023      	strh	r3, [r4, #0]
    res = RES_OK;
 800762a:	2000      	movs	r0, #0
 800762c:	e7f0      	b.n	8007610 <SD_ioctl+0x1c>
    BSP_SD_GetCardInfo(&CardInfo);
 800762e:	4668      	mov	r0, sp
 8007630:	f7fd ff14 	bl	800545c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8007634:	9b07      	ldr	r3, [sp, #28]
 8007636:	0a5b      	lsrs	r3, r3, #9
 8007638:	e7f0      	b.n	800761c <SD_ioctl+0x28>
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800763a:	2003      	movs	r0, #3
 800763c:	e7e8      	b.n	8007610 <SD_ioctl+0x1c>
 800763e:	bf00      	nop
 8007640:	2000000e 	.word	0x2000000e

08007644 <SD_write>:
{
 8007644:	b508      	push	{r3, lr}
 8007646:	4608      	mov	r0, r1
 8007648:	4611      	mov	r1, r2
 800764a:	461a      	mov	r2, r3
  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 800764c:	f04f 33ff 	mov.w	r3, #4294967295
 8007650:	f7fd feea 	bl	8005428 <BSP_SD_WriteBlocks>
 8007654:	b920      	cbnz	r0, 8007660 <SD_write+0x1c>
    while(BSP_SD_GetCardState() != MSD_OK)
 8007656:	f7fd fef7 	bl	8005448 <BSP_SD_GetCardState>
 800765a:	2800      	cmp	r0, #0
 800765c:	d1fb      	bne.n	8007656 <SD_write+0x12>
 800765e:	bd08      	pop	{r3, pc}
  DRESULT res = RES_ERROR;
 8007660:	2001      	movs	r0, #1
}
 8007662:	bd08      	pop	{r3, pc}

08007664 <MX_SDIO_SD_Init>:
/* SDIO init function */

void MX_SDIO_SD_Init(void)
{

  hsd.Instance = SDIO;
 8007664:	4b05      	ldr	r3, [pc, #20]	; (800767c <MX_SDIO_SD_Init+0x18>)
 8007666:	4a06      	ldr	r2, [pc, #24]	; (8007680 <MX_SDIO_SD_Init+0x1c>)
 8007668:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 800766a:	2200      	movs	r2, #0
 800766c:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 800766e:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8007670:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 8007672:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8007674:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 0;
 8007676:	619a      	str	r2, [r3, #24]
 8007678:	4770      	bx	lr
 800767a:	bf00      	nop
 800767c:	2000eff8 	.word	0x2000eff8
 8007680:	40012c00 	.word	0x40012c00

08007684 <HAL_SD_MspInit>:

}

void HAL_SD_MspInit(SD_HandleTypeDef* sdHandle)
{
 8007684:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(sdHandle->Instance==SDIO)
 8007688:	6802      	ldr	r2, [r0, #0]
 800768a:	4b46      	ldr	r3, [pc, #280]	; (80077a4 <HAL_SD_MspInit+0x120>)
 800768c:	429a      	cmp	r2, r3
{
 800768e:	b087      	sub	sp, #28
 8007690:	4605      	mov	r5, r0
  if(sdHandle->Instance==SDIO)
 8007692:	f040 8084 	bne.w	800779e <HAL_SD_MspInit+0x11a>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* SDIO clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 8007696:	2600      	movs	r6, #0
 8007698:	f503 3386 	add.w	r3, r3, #68608	; 0x10c00
 800769c:	9600      	str	r6, [sp, #0]
 800769e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80076a0:	4841      	ldr	r0, [pc, #260]	; (80077a8 <HAL_SD_MspInit+0x124>)
    __HAL_RCC_SDIO_CLK_ENABLE();
 80076a2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80076a6:	645a      	str	r2, [r3, #68]	; 0x44
 80076a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80076aa:	9603      	str	r6, [sp, #12]
    __HAL_RCC_SDIO_CLK_ENABLE();
 80076ac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80076b0:	9300      	str	r3, [sp, #0]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80076b2:	2703      	movs	r7, #3
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 80076b4:	240c      	movs	r4, #12

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80076b6:	f04f 0804 	mov.w	r8, #4
    __HAL_RCC_SDIO_CLK_ENABLE();
 80076ba:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 80076bc:	9405      	str	r4, [sp, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11 
 80076be:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80076c2:	f04f 0902 	mov.w	r9, #2
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80076c6:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11 
 80076c8:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80076ca:	f8cd 9008 	str.w	r9, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80076ce:	9704      	str	r7, [sp, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80076d0:	f7fa fa32 	bl	8001b38 <HAL_GPIO_Init>
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80076d4:	4835      	ldr	r0, [pc, #212]	; (80077ac <HAL_SD_MspInit+0x128>)
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 80076d6:	9405      	str	r4, [sp, #20]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80076d8:	eb0d 0108 	add.w	r1, sp, r8

    /* SDIO DMA Init */
    /* SDIO_TX Init */
    hdma_sdio_tx.Instance = DMA2_Stream3;
 80076dc:	4c34      	ldr	r4, [pc, #208]	; (80077b0 <HAL_SD_MspInit+0x12c>)
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80076de:	f8cd 8004 	str.w	r8, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80076e2:	f8cd 9008 	str.w	r9, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80076e6:	9603      	str	r6, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80076e8:	9704      	str	r7, [sp, #16]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80076ea:	f7fa fa25 	bl	8001b38 <HAL_GPIO_Init>
    hdma_sdio_tx.Init.Channel = DMA_CHANNEL_4;
    hdma_sdio_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80076ee:	4b31      	ldr	r3, [pc, #196]	; (80077b4 <HAL_SD_MspInit+0x130>)
    hdma_sdio_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80076f0:	60e6      	str	r6, [r4, #12]
    hdma_sdio_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80076f2:	f04f 6c00 	mov.w	ip, #134217728	; 0x8000000
 80076f6:	f04f 0e40 	mov.w	lr, #64	; 0x40
 80076fa:	e884 5008 	stmia.w	r4, {r3, ip, lr}
    hdma_sdio_tx.Init.MemInc = DMA_MINC_ENABLE;
 80076fe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007702:	6123      	str	r3, [r4, #16]
    hdma_sdio_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8007704:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007708:	6163      	str	r3, [r4, #20]
    hdma_sdio_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800770a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800770e:	61a3      	str	r3, [r4, #24]
    hdma_sdio_tx.Init.Mode = DMA_PFCTRL;
 8007710:	2320      	movs	r3, #32
 8007712:	61e3      	str	r3, [r4, #28]
    hdma_sdio_tx.Init.Priority = DMA_PRIORITY_LOW;
    hdma_sdio_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
    hdma_sdio_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
    hdma_sdio_tx.Init.MemBurst = DMA_MBURST_INC4;
 8007714:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8007718:	62e3      	str	r3, [r4, #44]	; 0x2c
    hdma_sdio_tx.Init.PeriphBurst = DMA_PBURST_INC4;
    if (HAL_DMA_Init(&hdma_sdio_tx) != HAL_OK)
 800771a:	4620      	mov	r0, r4
    hdma_sdio_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 800771c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
    hdma_sdio_tx.Init.Priority = DMA_PRIORITY_LOW;
 8007720:	6226      	str	r6, [r4, #32]
    hdma_sdio_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8007722:	f8c4 8024 	str.w	r8, [r4, #36]	; 0x24
    hdma_sdio_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8007726:	62a7      	str	r7, [r4, #40]	; 0x28
    hdma_sdio_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 8007728:	6323      	str	r3, [r4, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_tx) != HAL_OK)
 800772a:	f7fa f839 	bl	80017a0 <HAL_DMA_Init>
 800772e:	b118      	cbz	r0, 8007738 <HAL_SD_MspInit+0xb4>
    {
      _Error_Handler(__FILE__, __LINE__);
 8007730:	2183      	movs	r1, #131	; 0x83
 8007732:	4821      	ldr	r0, [pc, #132]	; (80077b8 <HAL_SD_MspInit+0x134>)
 8007734:	f7ff ff2c 	bl	8007590 <_Error_Handler>

    __HAL_LINKDMA(sdHandle,hdmatx,hdma_sdio_tx);

    /* SDIO_RX Init */
    hdma_sdio_rx.Instance = DMA2_Stream6;
    hdma_sdio_rx.Init.Channel = DMA_CHANNEL_4;
 8007738:	4820      	ldr	r0, [pc, #128]	; (80077bc <HAL_SD_MspInit+0x138>)
    __HAL_LINKDMA(sdHandle,hdmatx,hdma_sdio_tx);
 800773a:	642c      	str	r4, [r5, #64]	; 0x40
 800773c:	63a5      	str	r5, [r4, #56]	; 0x38
    hdma_sdio_rx.Instance = DMA2_Stream6;
 800773e:	4c20      	ldr	r4, [pc, #128]	; (80077c0 <HAL_SD_MspInit+0x13c>)
    hdma_sdio_rx.Init.Channel = DMA_CHANNEL_4;
 8007740:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007744:	e884 0009 	stmia.w	r4, {r0, r3}
    hdma_sdio_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8007748:	2300      	movs	r3, #0
    hdma_sdio_rx.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_sdio_rx.Init.MemInc = DMA_MINC_ENABLE;
 800774a:	f44f 6280 	mov.w	r2, #1024	; 0x400
    hdma_sdio_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800774e:	60a3      	str	r3, [r4, #8]
    hdma_sdio_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8007750:	60e3      	str	r3, [r4, #12]
    hdma_sdio_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
    hdma_sdio_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
    hdma_sdio_rx.Init.Mode = DMA_PFCTRL;
    hdma_sdio_rx.Init.Priority = DMA_PRIORITY_LOW;
 8007752:	6223      	str	r3, [r4, #32]
    hdma_sdio_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8007754:	2304      	movs	r3, #4
    hdma_sdio_rx.Init.MemInc = DMA_MINC_ENABLE;
 8007756:	6122      	str	r2, [r4, #16]
    hdma_sdio_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8007758:	6263      	str	r3, [r4, #36]	; 0x24
    hdma_sdio_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800775a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    hdma_sdio_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 800775e:	2303      	movs	r3, #3
    hdma_sdio_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8007760:	6162      	str	r2, [r4, #20]
    hdma_sdio_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8007762:	62a3      	str	r3, [r4, #40]	; 0x28
    hdma_sdio_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8007764:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    hdma_sdio_rx.Init.MemBurst = DMA_MBURST_INC4;
 8007768:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
    hdma_sdio_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800776c:	61a2      	str	r2, [r4, #24]
    hdma_sdio_rx.Init.MemBurst = DMA_MBURST_INC4;
 800776e:	62e3      	str	r3, [r4, #44]	; 0x2c
    hdma_sdio_rx.Init.Mode = DMA_PFCTRL;
 8007770:	2220      	movs	r2, #32
    hdma_sdio_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 8007772:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
    if (HAL_DMA_Init(&hdma_sdio_rx) != HAL_OK)
 8007776:	4620      	mov	r0, r4
    hdma_sdio_rx.Init.Mode = DMA_PFCTRL;
 8007778:	61e2      	str	r2, [r4, #28]
    hdma_sdio_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 800777a:	6323      	str	r3, [r4, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_rx) != HAL_OK)
 800777c:	f7fa f810 	bl	80017a0 <HAL_DMA_Init>
 8007780:	b118      	cbz	r0, 800778a <HAL_SD_MspInit+0x106>
    {
      _Error_Handler(__FILE__, __LINE__);
 8007782:	2198      	movs	r1, #152	; 0x98
 8007784:	480c      	ldr	r0, [pc, #48]	; (80077b8 <HAL_SD_MspInit+0x134>)
 8007786:	f7ff ff03 	bl	8007590 <_Error_Handler>
    }

    __HAL_LINKDMA(sdHandle,hdmarx,hdma_sdio_rx);

    /* SDIO interrupt Init */
    HAL_NVIC_SetPriority(SDIO_IRQn, 0, 0);
 800778a:	2200      	movs	r2, #0
 800778c:	2031      	movs	r0, #49	; 0x31
    __HAL_LINKDMA(sdHandle,hdmarx,hdma_sdio_rx);
 800778e:	63ec      	str	r4, [r5, #60]	; 0x3c
    HAL_NVIC_SetPriority(SDIO_IRQn, 0, 0);
 8007790:	4611      	mov	r1, r2
    __HAL_LINKDMA(sdHandle,hdmarx,hdma_sdio_rx);
 8007792:	63a5      	str	r5, [r4, #56]	; 0x38
    HAL_NVIC_SetPriority(SDIO_IRQn, 0, 0);
 8007794:	f7f9 fe6e 	bl	8001474 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDIO_IRQn);
 8007798:	2031      	movs	r0, #49	; 0x31
 800779a:	f7f9 fe9f 	bl	80014dc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }
}
 800779e:	b007      	add	sp, #28
 80077a0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80077a4:	40012c00 	.word	0x40012c00
 80077a8:	40020800 	.word	0x40020800
 80077ac:	40020c00 	.word	0x40020c00
 80077b0:	2000ef98 	.word	0x2000ef98
 80077b4:	40026458 	.word	0x40026458
 80077b8:	0800d7fc 	.word	0x0800d7fc
 80077bc:	400264a0 	.word	0x400264a0
 80077c0:	2000ef38 	.word	0x2000ef38

080077c4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80077c4:	b513      	push	{r0, r1, r4, lr}
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80077c6:	4b22      	ldr	r3, [pc, #136]	; (8007850 <HAL_MspInit+0x8c>)
 80077c8:	2400      	movs	r4, #0
 80077ca:	9400      	str	r4, [sp, #0]
 80077cc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80077ce:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80077d2:	645a      	str	r2, [r3, #68]	; 0x44
 80077d4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80077d6:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 80077da:	9200      	str	r2, [sp, #0]
 80077dc:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80077de:	9401      	str	r4, [sp, #4]
 80077e0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80077e2:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80077e6:	641a      	str	r2, [r3, #64]	; 0x40
 80077e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80077ee:	9301      	str	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80077f0:	2003      	movs	r0, #3
  __HAL_RCC_PWR_CLK_ENABLE();
 80077f2:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80077f4:	f7f9 fe2c 	bl	8001450 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 80077f8:	4622      	mov	r2, r4
 80077fa:	4621      	mov	r1, r4
 80077fc:	f06f 000b 	mvn.w	r0, #11
 8007800:	f7f9 fe38 	bl	8001474 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 8007804:	4622      	mov	r2, r4
 8007806:	4621      	mov	r1, r4
 8007808:	f06f 000a 	mvn.w	r0, #10
 800780c:	f7f9 fe32 	bl	8001474 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 8007810:	4622      	mov	r2, r4
 8007812:	4621      	mov	r1, r4
 8007814:	f06f 0009 	mvn.w	r0, #9
 8007818:	f7f9 fe2c 	bl	8001474 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 800781c:	4622      	mov	r2, r4
 800781e:	4621      	mov	r1, r4
 8007820:	f06f 0004 	mvn.w	r0, #4
 8007824:	f7f9 fe26 	bl	8001474 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 8007828:	4622      	mov	r2, r4
 800782a:	4621      	mov	r1, r4
 800782c:	f06f 0003 	mvn.w	r0, #3
 8007830:	f7f9 fe20 	bl	8001474 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 8007834:	4622      	mov	r2, r4
 8007836:	4621      	mov	r1, r4
 8007838:	f06f 0001 	mvn.w	r0, #1
 800783c:	f7f9 fe1a 	bl	8001474 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8007840:	4622      	mov	r2, r4
 8007842:	4621      	mov	r1, r4
 8007844:	f04f 30ff 	mov.w	r0, #4294967295
 8007848:	f7f9 fe14 	bl	8001474 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800784c:	b002      	add	sp, #8
 800784e:	bd10      	pop	{r4, pc}
 8007850:	40023800 	.word	0x40023800

08007854 <NMI_Handler>:
 8007854:	4770      	bx	lr

08007856 <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 8007856:	e7fe      	b.n	8007856 <HardFault_Handler>

08007858 <MemManage_Handler>:

/**
* @brief This function handles Memory management fault.
*/
void MemManage_Handler(void)
{
 8007858:	e7fe      	b.n	8007858 <MemManage_Handler>

0800785a <BusFault_Handler>:

/**
* @brief This function handles Pre-fetch fault, memory access fault.
*/
void BusFault_Handler(void)
{
 800785a:	e7fe      	b.n	800785a <BusFault_Handler>

0800785c <UsageFault_Handler>:

/**
* @brief This function handles Undefined instruction or illegal state.
*/
void UsageFault_Handler(void)
{
 800785c:	e7fe      	b.n	800785c <UsageFault_Handler>

0800785e <SVC_Handler>:
 800785e:	4770      	bx	lr

08007860 <DebugMon_Handler>:
 8007860:	4770      	bx	lr

08007862 <PendSV_Handler>:

/**
* @brief This function handles Pendable request for system service.
*/
void PendSV_Handler(void)
{
 8007862:	4770      	bx	lr

08007864 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 8007864:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8007866:	f7f9 fbd1 	bl	800100c <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800786a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_SYSTICK_IRQHandler();
 800786e:	f7f9 be64 	b.w	800153a <HAL_SYSTICK_IRQHandler>

08007872 <EXTI0_IRQHandler>:
void EXTI0_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8007872:	2001      	movs	r0, #1
 8007874:	f7fa ba4c 	b.w	8001d10 <HAL_GPIO_EXTI_IRQHandler>

08007878 <EXTI1_IRQHandler>:
void EXTI1_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8007878:	2002      	movs	r0, #2
 800787a:	f7fa ba49 	b.w	8001d10 <HAL_GPIO_EXTI_IRQHandler>

0800787e <EXTI2_IRQHandler>:
void EXTI2_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 800787e:	2004      	movs	r0, #4
 8007880:	f7fa ba46 	b.w	8001d10 <HAL_GPIO_EXTI_IRQHandler>

08007884 <EXTI3_IRQHandler>:
void EXTI3_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8007884:	2008      	movs	r0, #8
 8007886:	f7fa ba43 	b.w	8001d10 <HAL_GPIO_EXTI_IRQHandler>
	...

0800788c <DMA1_Stream5_IRQHandler>:
void DMA1_Stream5_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1);
 800788c:	4801      	ldr	r0, [pc, #4]	; (8007894 <DMA1_Stream5_IRQHandler+0x8>)
 800788e:	f7fa b899 	b.w	80019c4 <HAL_DMA_IRQHandler>
 8007892:	bf00      	nop
 8007894:	20006830 	.word	0x20006830

08007898 <EXTI9_5_IRQHandler>:
void EXTI9_5_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8007898:	2020      	movs	r0, #32
 800789a:	f7fa ba39 	b.w	8001d10 <HAL_GPIO_EXTI_IRQHandler>
	...

080078a0 <TIM1_UP_TIM10_IRQHandler>:
void TIM1_UP_TIM10_IRQHandler(void)
{
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80078a0:	4801      	ldr	r0, [pc, #4]	; (80078a8 <TIM1_UP_TIM10_IRQHandler+0x8>)
 80078a2:	f7fb bd5d 	b.w	8003360 <HAL_TIM_IRQHandler>
 80078a6:	bf00      	nop
 80078a8:	2000f0b8 	.word	0x2000f0b8

080078ac <SDIO_IRQHandler>:
void SDIO_IRQHandler(void)
{
  /* USER CODE BEGIN SDIO_IRQn 0 */

  /* USER CODE END SDIO_IRQn 0 */
  HAL_SD_IRQHandler(&hsd);
 80078ac:	4801      	ldr	r0, [pc, #4]	; (80078b4 <SDIO_IRQHandler+0x8>)
 80078ae:	f7fb bb85 	b.w	8002fbc <HAL_SD_IRQHandler>
 80078b2:	bf00      	nop
 80078b4:	2000eff8 	.word	0x2000eff8

080078b8 <TIM6_DAC_IRQHandler>:
void TIM6_DAC_IRQHandler(void)
{
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_DAC_IRQHandler(&hdac);
 80078b8:	4801      	ldr	r0, [pc, #4]	; (80078c0 <TIM6_DAC_IRQHandler+0x8>)
 80078ba:	f7f9 bef2 	b.w	80016a2 <HAL_DAC_IRQHandler>
 80078be:	bf00      	nop
 80078c0:	20006890 	.word	0x20006890

080078c4 <DMA2_Stream0_IRQHandler>:
void DMA2_Stream0_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80078c4:	4801      	ldr	r0, [pc, #4]	; (80078cc <DMA2_Stream0_IRQHandler+0x8>)
 80078c6:	f7fa b87d 	b.w	80019c4 <HAL_DMA_IRQHandler>
 80078ca:	bf00      	nop
 80078cc:	200067d0 	.word	0x200067d0

080078d0 <DMA2_Stream3_IRQHandler>:
void DMA2_Stream3_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_tx);
 80078d0:	4801      	ldr	r0, [pc, #4]	; (80078d8 <DMA2_Stream3_IRQHandler+0x8>)
 80078d2:	f7fa b877 	b.w	80019c4 <HAL_DMA_IRQHandler>
 80078d6:	bf00      	nop
 80078d8:	2000ef98 	.word	0x2000ef98

080078dc <DMA2_Stream6_IRQHandler>:
void DMA2_Stream6_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_rx);
 80078dc:	4801      	ldr	r0, [pc, #4]	; (80078e4 <DMA2_Stream6_IRQHandler+0x8>)
 80078de:	f7fa b871 	b.w	80019c4 <HAL_DMA_IRQHandler>
 80078e2:	bf00      	nop
 80078e4:	2000ef38 	.word	0x2000ef38

080078e8 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80078e8:	490f      	ldr	r1, [pc, #60]	; (8007928 <SystemInit+0x40>)
 80078ea:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 80078ee:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80078f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80078f6:	4b0d      	ldr	r3, [pc, #52]	; (800792c <SystemInit+0x44>)
 80078f8:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80078fa:	2000      	movs	r0, #0
  RCC->CR |= (uint32_t)0x00000001;
 80078fc:	f042 0201 	orr.w	r2, r2, #1
 8007900:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 8007902:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8007904:	681a      	ldr	r2, [r3, #0]
 8007906:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 800790a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800790e:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8007910:	4a07      	ldr	r2, [pc, #28]	; (8007930 <SystemInit+0x48>)
 8007912:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8007914:	681a      	ldr	r2, [r3, #0]
 8007916:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800791a:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 800791c:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800791e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007922:	608b      	str	r3, [r1, #8]
 8007924:	4770      	bx	lr
 8007926:	bf00      	nop
 8007928:	e000ed00 	.word	0xe000ed00
 800792c:	40023800 	.word	0x40023800
 8007930:	24003010 	.word	0x24003010

08007934 <MX_TIM1_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim8;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8007934:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  TIM_ClockConfigTypeDef sClockSourceConfig;
  TIM_MasterConfigTypeDef sMasterConfig;

  htim1.Instance = TIM1;
 8007936:	4817      	ldr	r0, [pc, #92]	; (8007994 <MX_TIM1_Init+0x60>)
  htim1.Init.Prescaler = 99;
 8007938:	4917      	ldr	r1, [pc, #92]	; (8007998 <MX_TIM1_Init+0x64>)
 800793a:	2363      	movs	r3, #99	; 0x63
 800793c:	e880 000a 	stmia.w	r0, {r1, r3}
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim1.Init.Period = 999;
 8007940:	f240 32e7 	movw	r2, #999	; 0x3e7
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8007944:	2300      	movs	r3, #0
 8007946:	6083      	str	r3, [r0, #8]
  htim1.Init.Period = 999;
 8007948:	60c2      	str	r2, [r0, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800794a:	6103      	str	r3, [r0, #16]
  htim1.Init.RepetitionCounter = 0;
 800794c:	6143      	str	r3, [r0, #20]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800794e:	f7fb fe0d 	bl	800356c <HAL_TIM_Base_Init>
 8007952:	b118      	cbz	r0, 800795c <MX_TIM1_Init+0x28>
  {
    _Error_Handler(__FILE__, __LINE__);
 8007954:	214b      	movs	r1, #75	; 0x4b
 8007956:	4811      	ldr	r0, [pc, #68]	; (800799c <MX_TIM1_Init+0x68>)
 8007958:	f7ff fe1a 	bl	8007590 <_Error_Handler>
  }

  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800795c:	a906      	add	r1, sp, #24
 800795e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007962:	f841 3d10 	str.w	r3, [r1, #-16]!
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8007966:	480b      	ldr	r0, [pc, #44]	; (8007994 <MX_TIM1_Init+0x60>)
 8007968:	f7fb fc3d 	bl	80031e6 <HAL_TIM_ConfigClockSource>
 800796c:	b118      	cbz	r0, 8007976 <MX_TIM1_Init+0x42>
  {
    _Error_Handler(__FILE__, __LINE__);
 800796e:	2151      	movs	r1, #81	; 0x51
 8007970:	480a      	ldr	r0, [pc, #40]	; (800799c <MX_TIM1_Init+0x68>)
 8007972:	f7ff fe0d 	bl	8007590 <_Error_Handler>
  }

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8007976:	2300      	movs	r3, #0
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8007978:	4669      	mov	r1, sp
 800797a:	4806      	ldr	r0, [pc, #24]	; (8007994 <MX_TIM1_Init+0x60>)
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800797c:	9300      	str	r3, [sp, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800797e:	9301      	str	r3, [sp, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8007980:	f7fb fe0e 	bl	80035a0 <HAL_TIMEx_MasterConfigSynchronization>
 8007984:	b118      	cbz	r0, 800798e <MX_TIM1_Init+0x5a>
  {
    _Error_Handler(__FILE__, __LINE__);
 8007986:	2158      	movs	r1, #88	; 0x58
 8007988:	4804      	ldr	r0, [pc, #16]	; (800799c <MX_TIM1_Init+0x68>)
 800798a:	f7ff fe01 	bl	8007590 <_Error_Handler>
  }

}
 800798e:	b007      	add	sp, #28
 8007990:	f85d fb04 	ldr.w	pc, [sp], #4
 8007994:	2000f0b8 	.word	0x2000f0b8
 8007998:	40010000 	.word	0x40010000
 800799c:	0800d822 	.word	0x0800d822

080079a0 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80079a0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  TIM_ClockConfigTypeDef sClockSourceConfig;
  TIM_MasterConfigTypeDef sMasterConfig;

  htim2.Instance = TIM2;
 80079a2:	4816      	ldr	r0, [pc, #88]	; (80079fc <MX_TIM2_Init+0x5c>)
 80079a4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80079a8:	6003      	str	r3, [r0, #0]
  htim2.Init.Prescaler = 0;
 80079aa:	2300      	movs	r3, #0
 80079ac:	6043      	str	r3, [r0, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80079ae:	6083      	str	r3, [r0, #8]
  htim2.Init.Period = 0;
 80079b0:	60c3      	str	r3, [r0, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80079b2:	6103      	str	r3, [r0, #16]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80079b4:	f7fb fdda 	bl	800356c <HAL_TIM_Base_Init>
 80079b8:	b118      	cbz	r0, 80079c2 <MX_TIM2_Init+0x22>
  {
    _Error_Handler(__FILE__, __LINE__);
 80079ba:	2169      	movs	r1, #105	; 0x69
 80079bc:	4810      	ldr	r0, [pc, #64]	; (8007a00 <MX_TIM2_Init+0x60>)
 80079be:	f7ff fde7 	bl	8007590 <_Error_Handler>
  }

  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80079c2:	a906      	add	r1, sp, #24
 80079c4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80079c8:	f841 3d10 	str.w	r3, [r1, #-16]!
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80079cc:	480b      	ldr	r0, [pc, #44]	; (80079fc <MX_TIM2_Init+0x5c>)
 80079ce:	f7fb fc0a 	bl	80031e6 <HAL_TIM_ConfigClockSource>
 80079d2:	b118      	cbz	r0, 80079dc <MX_TIM2_Init+0x3c>
  {
    _Error_Handler(__FILE__, __LINE__);
 80079d4:	216f      	movs	r1, #111	; 0x6f
 80079d6:	480a      	ldr	r0, [pc, #40]	; (8007a00 <MX_TIM2_Init+0x60>)
 80079d8:	f7ff fdda 	bl	8007590 <_Error_Handler>
  }

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80079dc:	2220      	movs	r2, #32
 80079de:	2300      	movs	r3, #0
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80079e0:	4669      	mov	r1, sp
 80079e2:	4806      	ldr	r0, [pc, #24]	; (80079fc <MX_TIM2_Init+0x5c>)
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80079e4:	e88d 000c 	stmia.w	sp, {r2, r3}
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80079e8:	f7fb fdda 	bl	80035a0 <HAL_TIMEx_MasterConfigSynchronization>
 80079ec:	b118      	cbz	r0, 80079f6 <MX_TIM2_Init+0x56>
  {
    _Error_Handler(__FILE__, __LINE__);
 80079ee:	2176      	movs	r1, #118	; 0x76
 80079f0:	4803      	ldr	r0, [pc, #12]	; (8007a00 <MX_TIM2_Init+0x60>)
 80079f2:	f7ff fdcd 	bl	8007590 <_Error_Handler>
  }

}
 80079f6:	b007      	add	sp, #28
 80079f8:	f85d fb04 	ldr.w	pc, [sp], #4
 80079fc:	2000f0f4 	.word	0x2000f0f4
 8007a00:	0800d822 	.word	0x0800d822

08007a04 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8007a04:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  TIM_ClockConfigTypeDef sClockSourceConfig;
  TIM_MasterConfigTypeDef sMasterConfig;

  htim8.Instance = TIM8;
 8007a06:	4816      	ldr	r0, [pc, #88]	; (8007a60 <MX_TIM8_Init+0x5c>)
 8007a08:	4b16      	ldr	r3, [pc, #88]	; (8007a64 <MX_TIM8_Init+0x60>)
 8007a0a:	6003      	str	r3, [r0, #0]
  htim8.Init.Prescaler = 0;
 8007a0c:	2300      	movs	r3, #0
 8007a0e:	6043      	str	r3, [r0, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8007a10:	6083      	str	r3, [r0, #8]
  htim8.Init.Period = 0;
 8007a12:	60c3      	str	r3, [r0, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8007a14:	6103      	str	r3, [r0, #16]
  htim8.Init.RepetitionCounter = 0;
 8007a16:	6143      	str	r3, [r0, #20]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8007a18:	f7fb fda8 	bl	800356c <HAL_TIM_Base_Init>
 8007a1c:	b118      	cbz	r0, 8007a26 <MX_TIM8_Init+0x22>
  {
    _Error_Handler(__FILE__, __LINE__);
 8007a1e:	2188      	movs	r1, #136	; 0x88
 8007a20:	4811      	ldr	r0, [pc, #68]	; (8007a68 <MX_TIM8_Init+0x64>)
 8007a22:	f7ff fdb5 	bl	8007590 <_Error_Handler>
  }

  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8007a26:	a906      	add	r1, sp, #24
 8007a28:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007a2c:	f841 3d10 	str.w	r3, [r1, #-16]!
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8007a30:	480b      	ldr	r0, [pc, #44]	; (8007a60 <MX_TIM8_Init+0x5c>)
 8007a32:	f7fb fbd8 	bl	80031e6 <HAL_TIM_ConfigClockSource>
 8007a36:	b118      	cbz	r0, 8007a40 <MX_TIM8_Init+0x3c>
  {
    _Error_Handler(__FILE__, __LINE__);
 8007a38:	218e      	movs	r1, #142	; 0x8e
 8007a3a:	480b      	ldr	r0, [pc, #44]	; (8007a68 <MX_TIM8_Init+0x64>)
 8007a3c:	f7ff fda8 	bl	8007590 <_Error_Handler>
  }

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8007a40:	2220      	movs	r2, #32
 8007a42:	2300      	movs	r3, #0
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8007a44:	4669      	mov	r1, sp
 8007a46:	4806      	ldr	r0, [pc, #24]	; (8007a60 <MX_TIM8_Init+0x5c>)
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8007a48:	e88d 000c 	stmia.w	sp, {r2, r3}
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8007a4c:	f7fb fda8 	bl	80035a0 <HAL_TIMEx_MasterConfigSynchronization>
 8007a50:	b118      	cbz	r0, 8007a5a <MX_TIM8_Init+0x56>
  {
    _Error_Handler(__FILE__, __LINE__);
 8007a52:	2195      	movs	r1, #149	; 0x95
 8007a54:	4804      	ldr	r0, [pc, #16]	; (8007a68 <MX_TIM8_Init+0x64>)
 8007a56:	f7ff fd9b 	bl	8007590 <_Error_Handler>
  }

}
 8007a5a:	b007      	add	sp, #28
 8007a5c:	f85d fb04 	ldr.w	pc, [sp], #4
 8007a60:	2000f07c 	.word	0x2000f07c
 8007a64:	40010400 	.word	0x40010400
 8007a68:	0800d822 	.word	0x0800d822

08007a6c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8007a6c:	b51f      	push	{r0, r1, r2, r3, r4, lr}

  if(tim_baseHandle->Instance==TIM1)
 8007a6e:	6803      	ldr	r3, [r0, #0]
 8007a70:	4a1c      	ldr	r2, [pc, #112]	; (8007ae4 <HAL_TIM_Base_MspInit+0x78>)
 8007a72:	4293      	cmp	r3, r2
 8007a74:	d115      	bne.n	8007aa2 <HAL_TIM_Base_MspInit+0x36>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8007a76:	2200      	movs	r2, #0
 8007a78:	4b1b      	ldr	r3, [pc, #108]	; (8007ae8 <HAL_TIM_Base_MspInit+0x7c>)
 8007a7a:	9201      	str	r2, [sp, #4]
 8007a7c:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8007a7e:	f041 0101 	orr.w	r1, r1, #1
 8007a82:	6459      	str	r1, [r3, #68]	; 0x44
 8007a84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007a86:	f003 0301 	and.w	r3, r3, #1
 8007a8a:	9301      	str	r3, [sp, #4]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8007a8c:	2019      	movs	r0, #25
 8007a8e:	4611      	mov	r1, r2
    __HAL_RCC_TIM1_CLK_ENABLE();
 8007a90:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8007a92:	f7f9 fcef 	bl	8001474 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8007a96:	2019      	movs	r0, #25
 8007a98:	f7f9 fd20 	bl	80014dc <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM8_CLK_ENABLE();
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 8007a9c:	b005      	add	sp, #20
 8007a9e:	f85d fb04 	ldr.w	pc, [sp], #4
  else if(tim_baseHandle->Instance==TIM2)
 8007aa2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007aa6:	d10c      	bne.n	8007ac2 <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8007aa8:	2300      	movs	r3, #0
 8007aaa:	9302      	str	r3, [sp, #8]
 8007aac:	4b0e      	ldr	r3, [pc, #56]	; (8007ae8 <HAL_TIM_Base_MspInit+0x7c>)
 8007aae:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007ab0:	f042 0201 	orr.w	r2, r2, #1
 8007ab4:	641a      	str	r2, [r3, #64]	; 0x40
 8007ab6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ab8:	f003 0301 	and.w	r3, r3, #1
 8007abc:	9302      	str	r3, [sp, #8]
 8007abe:	9b02      	ldr	r3, [sp, #8]
 8007ac0:	e7ec      	b.n	8007a9c <HAL_TIM_Base_MspInit+0x30>
  else if(tim_baseHandle->Instance==TIM8)
 8007ac2:	4a0a      	ldr	r2, [pc, #40]	; (8007aec <HAL_TIM_Base_MspInit+0x80>)
 8007ac4:	4293      	cmp	r3, r2
 8007ac6:	d1e9      	bne.n	8007a9c <HAL_TIM_Base_MspInit+0x30>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8007ac8:	2300      	movs	r3, #0
 8007aca:	9303      	str	r3, [sp, #12]
 8007acc:	4b06      	ldr	r3, [pc, #24]	; (8007ae8 <HAL_TIM_Base_MspInit+0x7c>)
 8007ace:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007ad0:	f042 0202 	orr.w	r2, r2, #2
 8007ad4:	645a      	str	r2, [r3, #68]	; 0x44
 8007ad6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007ad8:	f003 0302 	and.w	r3, r3, #2
 8007adc:	9303      	str	r3, [sp, #12]
 8007ade:	9b03      	ldr	r3, [sp, #12]
}
 8007ae0:	e7dc      	b.n	8007a9c <HAL_TIM_Base_MspInit+0x30>
 8007ae2:	bf00      	nop
 8007ae4:	40010000 	.word	0x40010000
 8007ae8:	40023800 	.word	0x40023800
 8007aec:	40010400 	.word	0x40010400

08007af0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8007af0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8007b28 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8007af4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8007af6:	e003      	b.n	8007b00 <LoopCopyDataInit>

08007af8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8007af8:	4b0c      	ldr	r3, [pc, #48]	; (8007b2c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8007afa:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8007afc:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8007afe:	3104      	adds	r1, #4

08007b00 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8007b00:	480b      	ldr	r0, [pc, #44]	; (8007b30 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8007b02:	4b0c      	ldr	r3, [pc, #48]	; (8007b34 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8007b04:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8007b06:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8007b08:	d3f6      	bcc.n	8007af8 <CopyDataInit>
  ldr  r2, =_sbss
 8007b0a:	4a0b      	ldr	r2, [pc, #44]	; (8007b38 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8007b0c:	e002      	b.n	8007b14 <LoopFillZerobss>

08007b0e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8007b0e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8007b10:	f842 3b04 	str.w	r3, [r2], #4

08007b14 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8007b14:	4b09      	ldr	r3, [pc, #36]	; (8007b3c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8007b16:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8007b18:	d3f9      	bcc.n	8007b0e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8007b1a:	f7ff fee5 	bl	80078e8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8007b1e:	f000 f811 	bl	8007b44 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8007b22:	f7ff f935 	bl	8006d90 <main>
  bx  lr    
 8007b26:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8007b28:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8007b2c:	0800dcd0 	.word	0x0800dcd0
  ldr  r0, =_sdata
 8007b30:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8007b34:	20000688 	.word	0x20000688
  ldr  r2, =_sbss
 8007b38:	20000688 	.word	0x20000688
  ldr  r3, = _ebss
 8007b3c:	2000f140 	.word	0x2000f140

08007b40 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8007b40:	e7fe      	b.n	8007b40 <ADC_IRQHandler>
	...

08007b44 <__libc_init_array>:
 8007b44:	b570      	push	{r4, r5, r6, lr}
 8007b46:	4e0d      	ldr	r6, [pc, #52]	; (8007b7c <__libc_init_array+0x38>)
 8007b48:	4c0d      	ldr	r4, [pc, #52]	; (8007b80 <__libc_init_array+0x3c>)
 8007b4a:	1ba4      	subs	r4, r4, r6
 8007b4c:	10a4      	asrs	r4, r4, #2
 8007b4e:	2500      	movs	r5, #0
 8007b50:	42a5      	cmp	r5, r4
 8007b52:	d109      	bne.n	8007b68 <__libc_init_array+0x24>
 8007b54:	4e0b      	ldr	r6, [pc, #44]	; (8007b84 <__libc_init_array+0x40>)
 8007b56:	4c0c      	ldr	r4, [pc, #48]	; (8007b88 <__libc_init_array+0x44>)
 8007b58:	f005 fa94 	bl	800d084 <_init>
 8007b5c:	1ba4      	subs	r4, r4, r6
 8007b5e:	10a4      	asrs	r4, r4, #2
 8007b60:	2500      	movs	r5, #0
 8007b62:	42a5      	cmp	r5, r4
 8007b64:	d105      	bne.n	8007b72 <__libc_init_array+0x2e>
 8007b66:	bd70      	pop	{r4, r5, r6, pc}
 8007b68:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007b6c:	4798      	blx	r3
 8007b6e:	3501      	adds	r5, #1
 8007b70:	e7ee      	b.n	8007b50 <__libc_init_array+0xc>
 8007b72:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007b76:	4798      	blx	r3
 8007b78:	3501      	adds	r5, #1
 8007b7a:	e7f2      	b.n	8007b62 <__libc_init_array+0x1e>
 8007b7c:	0800dcc8 	.word	0x0800dcc8
 8007b80:	0800dcc8 	.word	0x0800dcc8
 8007b84:	0800dcc8 	.word	0x0800dcc8
 8007b88:	0800dccc 	.word	0x0800dccc

08007b8c <malloc>:
 8007b8c:	4b02      	ldr	r3, [pc, #8]	; (8007b98 <malloc+0xc>)
 8007b8e:	4601      	mov	r1, r0
 8007b90:	6818      	ldr	r0, [r3, #0]
 8007b92:	f000 b80b 	b.w	8007bac <_malloc_r>
 8007b96:	bf00      	nop
 8007b98:	20000424 	.word	0x20000424

08007b9c <free>:
 8007b9c:	4b02      	ldr	r3, [pc, #8]	; (8007ba8 <free+0xc>)
 8007b9e:	4601      	mov	r1, r0
 8007ba0:	6818      	ldr	r0, [r3, #0]
 8007ba2:	f002 b8e5 	b.w	8009d70 <_free_r>
 8007ba6:	bf00      	nop
 8007ba8:	20000424 	.word	0x20000424

08007bac <_malloc_r>:
 8007bac:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007bb0:	f101 040b 	add.w	r4, r1, #11
 8007bb4:	2c16      	cmp	r4, #22
 8007bb6:	4681      	mov	r9, r0
 8007bb8:	d907      	bls.n	8007bca <_malloc_r+0x1e>
 8007bba:	f034 0407 	bics.w	r4, r4, #7
 8007bbe:	d505      	bpl.n	8007bcc <_malloc_r+0x20>
 8007bc0:	230c      	movs	r3, #12
 8007bc2:	f8c9 3000 	str.w	r3, [r9]
 8007bc6:	2600      	movs	r6, #0
 8007bc8:	e131      	b.n	8007e2e <_malloc_r+0x282>
 8007bca:	2410      	movs	r4, #16
 8007bcc:	428c      	cmp	r4, r1
 8007bce:	d3f7      	bcc.n	8007bc0 <_malloc_r+0x14>
 8007bd0:	4648      	mov	r0, r9
 8007bd2:	f000 f9f9 	bl	8007fc8 <__malloc_lock>
 8007bd6:	f5b4 7ffc 	cmp.w	r4, #504	; 0x1f8
 8007bda:	4d9c      	ldr	r5, [pc, #624]	; (8007e4c <_malloc_r+0x2a0>)
 8007bdc:	d236      	bcs.n	8007c4c <_malloc_r+0xa0>
 8007bde:	f104 0208 	add.w	r2, r4, #8
 8007be2:	442a      	add	r2, r5
 8007be4:	f1a2 0108 	sub.w	r1, r2, #8
 8007be8:	6856      	ldr	r6, [r2, #4]
 8007bea:	428e      	cmp	r6, r1
 8007bec:	ea4f 03d4 	mov.w	r3, r4, lsr #3
 8007bf0:	d102      	bne.n	8007bf8 <_malloc_r+0x4c>
 8007bf2:	68d6      	ldr	r6, [r2, #12]
 8007bf4:	42b2      	cmp	r2, r6
 8007bf6:	d010      	beq.n	8007c1a <_malloc_r+0x6e>
 8007bf8:	6873      	ldr	r3, [r6, #4]
 8007bfa:	68f2      	ldr	r2, [r6, #12]
 8007bfc:	68b1      	ldr	r1, [r6, #8]
 8007bfe:	f023 0303 	bic.w	r3, r3, #3
 8007c02:	60ca      	str	r2, [r1, #12]
 8007c04:	4433      	add	r3, r6
 8007c06:	6091      	str	r1, [r2, #8]
 8007c08:	685a      	ldr	r2, [r3, #4]
 8007c0a:	f042 0201 	orr.w	r2, r2, #1
 8007c0e:	605a      	str	r2, [r3, #4]
 8007c10:	4648      	mov	r0, r9
 8007c12:	f000 f9df 	bl	8007fd4 <__malloc_unlock>
 8007c16:	3608      	adds	r6, #8
 8007c18:	e109      	b.n	8007e2e <_malloc_r+0x282>
 8007c1a:	3302      	adds	r3, #2
 8007c1c:	4a8c      	ldr	r2, [pc, #560]	; (8007e50 <_malloc_r+0x2a4>)
 8007c1e:	692e      	ldr	r6, [r5, #16]
 8007c20:	4296      	cmp	r6, r2
 8007c22:	4611      	mov	r1, r2
 8007c24:	d06d      	beq.n	8007d02 <_malloc_r+0x156>
 8007c26:	6870      	ldr	r0, [r6, #4]
 8007c28:	f020 0003 	bic.w	r0, r0, #3
 8007c2c:	1b07      	subs	r7, r0, r4
 8007c2e:	2f0f      	cmp	r7, #15
 8007c30:	dd47      	ble.n	8007cc2 <_malloc_r+0x116>
 8007c32:	1933      	adds	r3, r6, r4
 8007c34:	f044 0401 	orr.w	r4, r4, #1
 8007c38:	6074      	str	r4, [r6, #4]
 8007c3a:	616b      	str	r3, [r5, #20]
 8007c3c:	612b      	str	r3, [r5, #16]
 8007c3e:	60da      	str	r2, [r3, #12]
 8007c40:	609a      	str	r2, [r3, #8]
 8007c42:	f047 0201 	orr.w	r2, r7, #1
 8007c46:	605a      	str	r2, [r3, #4]
 8007c48:	5037      	str	r7, [r6, r0]
 8007c4a:	e7e1      	b.n	8007c10 <_malloc_r+0x64>
 8007c4c:	0a63      	lsrs	r3, r4, #9
 8007c4e:	d02a      	beq.n	8007ca6 <_malloc_r+0xfa>
 8007c50:	2b04      	cmp	r3, #4
 8007c52:	d812      	bhi.n	8007c7a <_malloc_r+0xce>
 8007c54:	09a3      	lsrs	r3, r4, #6
 8007c56:	3338      	adds	r3, #56	; 0x38
 8007c58:	1c5a      	adds	r2, r3, #1
 8007c5a:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 8007c5e:	f1a2 0008 	sub.w	r0, r2, #8
 8007c62:	6856      	ldr	r6, [r2, #4]
 8007c64:	4286      	cmp	r6, r0
 8007c66:	d006      	beq.n	8007c76 <_malloc_r+0xca>
 8007c68:	6872      	ldr	r2, [r6, #4]
 8007c6a:	f022 0203 	bic.w	r2, r2, #3
 8007c6e:	1b11      	subs	r1, r2, r4
 8007c70:	290f      	cmp	r1, #15
 8007c72:	dd1c      	ble.n	8007cae <_malloc_r+0x102>
 8007c74:	3b01      	subs	r3, #1
 8007c76:	3301      	adds	r3, #1
 8007c78:	e7d0      	b.n	8007c1c <_malloc_r+0x70>
 8007c7a:	2b14      	cmp	r3, #20
 8007c7c:	d801      	bhi.n	8007c82 <_malloc_r+0xd6>
 8007c7e:	335b      	adds	r3, #91	; 0x5b
 8007c80:	e7ea      	b.n	8007c58 <_malloc_r+0xac>
 8007c82:	2b54      	cmp	r3, #84	; 0x54
 8007c84:	d802      	bhi.n	8007c8c <_malloc_r+0xe0>
 8007c86:	0b23      	lsrs	r3, r4, #12
 8007c88:	336e      	adds	r3, #110	; 0x6e
 8007c8a:	e7e5      	b.n	8007c58 <_malloc_r+0xac>
 8007c8c:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 8007c90:	d802      	bhi.n	8007c98 <_malloc_r+0xec>
 8007c92:	0be3      	lsrs	r3, r4, #15
 8007c94:	3377      	adds	r3, #119	; 0x77
 8007c96:	e7df      	b.n	8007c58 <_malloc_r+0xac>
 8007c98:	f240 5254 	movw	r2, #1364	; 0x554
 8007c9c:	4293      	cmp	r3, r2
 8007c9e:	d804      	bhi.n	8007caa <_malloc_r+0xfe>
 8007ca0:	0ca3      	lsrs	r3, r4, #18
 8007ca2:	337c      	adds	r3, #124	; 0x7c
 8007ca4:	e7d8      	b.n	8007c58 <_malloc_r+0xac>
 8007ca6:	233f      	movs	r3, #63	; 0x3f
 8007ca8:	e7d6      	b.n	8007c58 <_malloc_r+0xac>
 8007caa:	237e      	movs	r3, #126	; 0x7e
 8007cac:	e7d4      	b.n	8007c58 <_malloc_r+0xac>
 8007cae:	2900      	cmp	r1, #0
 8007cb0:	68f1      	ldr	r1, [r6, #12]
 8007cb2:	db04      	blt.n	8007cbe <_malloc_r+0x112>
 8007cb4:	68b3      	ldr	r3, [r6, #8]
 8007cb6:	60d9      	str	r1, [r3, #12]
 8007cb8:	608b      	str	r3, [r1, #8]
 8007cba:	18b3      	adds	r3, r6, r2
 8007cbc:	e7a4      	b.n	8007c08 <_malloc_r+0x5c>
 8007cbe:	460e      	mov	r6, r1
 8007cc0:	e7d0      	b.n	8007c64 <_malloc_r+0xb8>
 8007cc2:	2f00      	cmp	r7, #0
 8007cc4:	616a      	str	r2, [r5, #20]
 8007cc6:	612a      	str	r2, [r5, #16]
 8007cc8:	db05      	blt.n	8007cd6 <_malloc_r+0x12a>
 8007cca:	4430      	add	r0, r6
 8007ccc:	6843      	ldr	r3, [r0, #4]
 8007cce:	f043 0301 	orr.w	r3, r3, #1
 8007cd2:	6043      	str	r3, [r0, #4]
 8007cd4:	e79c      	b.n	8007c10 <_malloc_r+0x64>
 8007cd6:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8007cda:	d244      	bcs.n	8007d66 <_malloc_r+0x1ba>
 8007cdc:	08c0      	lsrs	r0, r0, #3
 8007cde:	1087      	asrs	r7, r0, #2
 8007ce0:	2201      	movs	r2, #1
 8007ce2:	fa02 f707 	lsl.w	r7, r2, r7
 8007ce6:	686a      	ldr	r2, [r5, #4]
 8007ce8:	3001      	adds	r0, #1
 8007cea:	433a      	orrs	r2, r7
 8007cec:	606a      	str	r2, [r5, #4]
 8007cee:	eb05 02c0 	add.w	r2, r5, r0, lsl #3
 8007cf2:	f855 7030 	ldr.w	r7, [r5, r0, lsl #3]
 8007cf6:	60b7      	str	r7, [r6, #8]
 8007cf8:	3a08      	subs	r2, #8
 8007cfa:	60f2      	str	r2, [r6, #12]
 8007cfc:	f845 6030 	str.w	r6, [r5, r0, lsl #3]
 8007d00:	60fe      	str	r6, [r7, #12]
 8007d02:	2001      	movs	r0, #1
 8007d04:	109a      	asrs	r2, r3, #2
 8007d06:	fa00 f202 	lsl.w	r2, r0, r2
 8007d0a:	6868      	ldr	r0, [r5, #4]
 8007d0c:	4282      	cmp	r2, r0
 8007d0e:	f200 80a1 	bhi.w	8007e54 <_malloc_r+0x2a8>
 8007d12:	4202      	tst	r2, r0
 8007d14:	d106      	bne.n	8007d24 <_malloc_r+0x178>
 8007d16:	f023 0303 	bic.w	r3, r3, #3
 8007d1a:	0052      	lsls	r2, r2, #1
 8007d1c:	4202      	tst	r2, r0
 8007d1e:	f103 0304 	add.w	r3, r3, #4
 8007d22:	d0fa      	beq.n	8007d1a <_malloc_r+0x16e>
 8007d24:	eb05 0cc3 	add.w	ip, r5, r3, lsl #3
 8007d28:	46e0      	mov	r8, ip
 8007d2a:	469e      	mov	lr, r3
 8007d2c:	f8d8 600c 	ldr.w	r6, [r8, #12]
 8007d30:	4546      	cmp	r6, r8
 8007d32:	d153      	bne.n	8007ddc <_malloc_r+0x230>
 8007d34:	f10e 0e01 	add.w	lr, lr, #1
 8007d38:	f01e 0f03 	tst.w	lr, #3
 8007d3c:	f108 0808 	add.w	r8, r8, #8
 8007d40:	d1f4      	bne.n	8007d2c <_malloc_r+0x180>
 8007d42:	0798      	lsls	r0, r3, #30
 8007d44:	d179      	bne.n	8007e3a <_malloc_r+0x28e>
 8007d46:	686b      	ldr	r3, [r5, #4]
 8007d48:	ea23 0302 	bic.w	r3, r3, r2
 8007d4c:	606b      	str	r3, [r5, #4]
 8007d4e:	6868      	ldr	r0, [r5, #4]
 8007d50:	0052      	lsls	r2, r2, #1
 8007d52:	4282      	cmp	r2, r0
 8007d54:	d87e      	bhi.n	8007e54 <_malloc_r+0x2a8>
 8007d56:	2a00      	cmp	r2, #0
 8007d58:	d07c      	beq.n	8007e54 <_malloc_r+0x2a8>
 8007d5a:	4673      	mov	r3, lr
 8007d5c:	4202      	tst	r2, r0
 8007d5e:	d1e1      	bne.n	8007d24 <_malloc_r+0x178>
 8007d60:	3304      	adds	r3, #4
 8007d62:	0052      	lsls	r2, r2, #1
 8007d64:	e7fa      	b.n	8007d5c <_malloc_r+0x1b0>
 8007d66:	0a42      	lsrs	r2, r0, #9
 8007d68:	2a04      	cmp	r2, #4
 8007d6a:	d815      	bhi.n	8007d98 <_malloc_r+0x1ec>
 8007d6c:	0982      	lsrs	r2, r0, #6
 8007d6e:	3238      	adds	r2, #56	; 0x38
 8007d70:	1c57      	adds	r7, r2, #1
 8007d72:	eb05 0ec2 	add.w	lr, r5, r2, lsl #3
 8007d76:	f855 7037 	ldr.w	r7, [r5, r7, lsl #3]
 8007d7a:	45be      	cmp	lr, r7
 8007d7c:	d126      	bne.n	8007dcc <_malloc_r+0x220>
 8007d7e:	2001      	movs	r0, #1
 8007d80:	1092      	asrs	r2, r2, #2
 8007d82:	fa00 f202 	lsl.w	r2, r0, r2
 8007d86:	6868      	ldr	r0, [r5, #4]
 8007d88:	4310      	orrs	r0, r2
 8007d8a:	6068      	str	r0, [r5, #4]
 8007d8c:	f8c6 e00c 	str.w	lr, [r6, #12]
 8007d90:	60b7      	str	r7, [r6, #8]
 8007d92:	f8ce 6008 	str.w	r6, [lr, #8]
 8007d96:	e7b3      	b.n	8007d00 <_malloc_r+0x154>
 8007d98:	2a14      	cmp	r2, #20
 8007d9a:	d801      	bhi.n	8007da0 <_malloc_r+0x1f4>
 8007d9c:	325b      	adds	r2, #91	; 0x5b
 8007d9e:	e7e7      	b.n	8007d70 <_malloc_r+0x1c4>
 8007da0:	2a54      	cmp	r2, #84	; 0x54
 8007da2:	d802      	bhi.n	8007daa <_malloc_r+0x1fe>
 8007da4:	0b02      	lsrs	r2, r0, #12
 8007da6:	326e      	adds	r2, #110	; 0x6e
 8007da8:	e7e2      	b.n	8007d70 <_malloc_r+0x1c4>
 8007daa:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 8007dae:	d802      	bhi.n	8007db6 <_malloc_r+0x20a>
 8007db0:	0bc2      	lsrs	r2, r0, #15
 8007db2:	3277      	adds	r2, #119	; 0x77
 8007db4:	e7dc      	b.n	8007d70 <_malloc_r+0x1c4>
 8007db6:	f240 5754 	movw	r7, #1364	; 0x554
 8007dba:	42ba      	cmp	r2, r7
 8007dbc:	bf9a      	itte	ls
 8007dbe:	0c82      	lsrls	r2, r0, #18
 8007dc0:	327c      	addls	r2, #124	; 0x7c
 8007dc2:	227e      	movhi	r2, #126	; 0x7e
 8007dc4:	e7d4      	b.n	8007d70 <_malloc_r+0x1c4>
 8007dc6:	68bf      	ldr	r7, [r7, #8]
 8007dc8:	45be      	cmp	lr, r7
 8007dca:	d004      	beq.n	8007dd6 <_malloc_r+0x22a>
 8007dcc:	687a      	ldr	r2, [r7, #4]
 8007dce:	f022 0203 	bic.w	r2, r2, #3
 8007dd2:	4290      	cmp	r0, r2
 8007dd4:	d3f7      	bcc.n	8007dc6 <_malloc_r+0x21a>
 8007dd6:	f8d7 e00c 	ldr.w	lr, [r7, #12]
 8007dda:	e7d7      	b.n	8007d8c <_malloc_r+0x1e0>
 8007ddc:	6870      	ldr	r0, [r6, #4]
 8007dde:	68f7      	ldr	r7, [r6, #12]
 8007de0:	f020 0003 	bic.w	r0, r0, #3
 8007de4:	eba0 0a04 	sub.w	sl, r0, r4
 8007de8:	f1ba 0f0f 	cmp.w	sl, #15
 8007dec:	dd10      	ble.n	8007e10 <_malloc_r+0x264>
 8007dee:	68b2      	ldr	r2, [r6, #8]
 8007df0:	1933      	adds	r3, r6, r4
 8007df2:	f044 0401 	orr.w	r4, r4, #1
 8007df6:	6074      	str	r4, [r6, #4]
 8007df8:	60d7      	str	r7, [r2, #12]
 8007dfa:	60ba      	str	r2, [r7, #8]
 8007dfc:	f04a 0201 	orr.w	r2, sl, #1
 8007e00:	616b      	str	r3, [r5, #20]
 8007e02:	612b      	str	r3, [r5, #16]
 8007e04:	60d9      	str	r1, [r3, #12]
 8007e06:	6099      	str	r1, [r3, #8]
 8007e08:	605a      	str	r2, [r3, #4]
 8007e0a:	f846 a000 	str.w	sl, [r6, r0]
 8007e0e:	e6ff      	b.n	8007c10 <_malloc_r+0x64>
 8007e10:	f1ba 0f00 	cmp.w	sl, #0
 8007e14:	db0f      	blt.n	8007e36 <_malloc_r+0x28a>
 8007e16:	4430      	add	r0, r6
 8007e18:	6843      	ldr	r3, [r0, #4]
 8007e1a:	f043 0301 	orr.w	r3, r3, #1
 8007e1e:	6043      	str	r3, [r0, #4]
 8007e20:	f856 3f08 	ldr.w	r3, [r6, #8]!
 8007e24:	4648      	mov	r0, r9
 8007e26:	60df      	str	r7, [r3, #12]
 8007e28:	60bb      	str	r3, [r7, #8]
 8007e2a:	f000 f8d3 	bl	8007fd4 <__malloc_unlock>
 8007e2e:	4630      	mov	r0, r6
 8007e30:	b003      	add	sp, #12
 8007e32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e36:	463e      	mov	r6, r7
 8007e38:	e77a      	b.n	8007d30 <_malloc_r+0x184>
 8007e3a:	f85c 0908 	ldr.w	r0, [ip], #-8
 8007e3e:	4584      	cmp	ip, r0
 8007e40:	f103 33ff 	add.w	r3, r3, #4294967295
 8007e44:	f43f af7d 	beq.w	8007d42 <_malloc_r+0x196>
 8007e48:	e781      	b.n	8007d4e <_malloc_r+0x1a2>
 8007e4a:	bf00      	nop
 8007e4c:	20000014 	.word	0x20000014
 8007e50:	2000001c 	.word	0x2000001c
 8007e54:	f8d5 b008 	ldr.w	fp, [r5, #8]
 8007e58:	f8db 6004 	ldr.w	r6, [fp, #4]
 8007e5c:	f026 0603 	bic.w	r6, r6, #3
 8007e60:	42b4      	cmp	r4, r6
 8007e62:	d803      	bhi.n	8007e6c <_malloc_r+0x2c0>
 8007e64:	1b33      	subs	r3, r6, r4
 8007e66:	2b0f      	cmp	r3, #15
 8007e68:	f300 8096 	bgt.w	8007f98 <_malloc_r+0x3ec>
 8007e6c:	4a4f      	ldr	r2, [pc, #316]	; (8007fac <_malloc_r+0x400>)
 8007e6e:	6817      	ldr	r7, [r2, #0]
 8007e70:	4a4f      	ldr	r2, [pc, #316]	; (8007fb0 <_malloc_r+0x404>)
 8007e72:	6811      	ldr	r1, [r2, #0]
 8007e74:	3710      	adds	r7, #16
 8007e76:	3101      	adds	r1, #1
 8007e78:	eb0b 0306 	add.w	r3, fp, r6
 8007e7c:	4427      	add	r7, r4
 8007e7e:	d005      	beq.n	8007e8c <_malloc_r+0x2e0>
 8007e80:	494c      	ldr	r1, [pc, #304]	; (8007fb4 <_malloc_r+0x408>)
 8007e82:	3901      	subs	r1, #1
 8007e84:	440f      	add	r7, r1
 8007e86:	3101      	adds	r1, #1
 8007e88:	4249      	negs	r1, r1
 8007e8a:	400f      	ands	r7, r1
 8007e8c:	4639      	mov	r1, r7
 8007e8e:	4648      	mov	r0, r9
 8007e90:	9201      	str	r2, [sp, #4]
 8007e92:	9300      	str	r3, [sp, #0]
 8007e94:	f000 f8a4 	bl	8007fe0 <_sbrk_r>
 8007e98:	f1b0 3fff 	cmp.w	r0, #4294967295
 8007e9c:	4680      	mov	r8, r0
 8007e9e:	d056      	beq.n	8007f4e <_malloc_r+0x3a2>
 8007ea0:	9b00      	ldr	r3, [sp, #0]
 8007ea2:	9a01      	ldr	r2, [sp, #4]
 8007ea4:	4283      	cmp	r3, r0
 8007ea6:	d901      	bls.n	8007eac <_malloc_r+0x300>
 8007ea8:	45ab      	cmp	fp, r5
 8007eaa:	d150      	bne.n	8007f4e <_malloc_r+0x3a2>
 8007eac:	4842      	ldr	r0, [pc, #264]	; (8007fb8 <_malloc_r+0x40c>)
 8007eae:	6801      	ldr	r1, [r0, #0]
 8007eb0:	4543      	cmp	r3, r8
 8007eb2:	eb07 0e01 	add.w	lr, r7, r1
 8007eb6:	f8c0 e000 	str.w	lr, [r0]
 8007eba:	4940      	ldr	r1, [pc, #256]	; (8007fbc <_malloc_r+0x410>)
 8007ebc:	4682      	mov	sl, r0
 8007ebe:	d113      	bne.n	8007ee8 <_malloc_r+0x33c>
 8007ec0:	420b      	tst	r3, r1
 8007ec2:	d111      	bne.n	8007ee8 <_malloc_r+0x33c>
 8007ec4:	68ab      	ldr	r3, [r5, #8]
 8007ec6:	443e      	add	r6, r7
 8007ec8:	f046 0601 	orr.w	r6, r6, #1
 8007ecc:	605e      	str	r6, [r3, #4]
 8007ece:	4a3c      	ldr	r2, [pc, #240]	; (8007fc0 <_malloc_r+0x414>)
 8007ed0:	f8da 3000 	ldr.w	r3, [sl]
 8007ed4:	6811      	ldr	r1, [r2, #0]
 8007ed6:	428b      	cmp	r3, r1
 8007ed8:	bf88      	it	hi
 8007eda:	6013      	strhi	r3, [r2, #0]
 8007edc:	4a39      	ldr	r2, [pc, #228]	; (8007fc4 <_malloc_r+0x418>)
 8007ede:	6811      	ldr	r1, [r2, #0]
 8007ee0:	428b      	cmp	r3, r1
 8007ee2:	bf88      	it	hi
 8007ee4:	6013      	strhi	r3, [r2, #0]
 8007ee6:	e032      	b.n	8007f4e <_malloc_r+0x3a2>
 8007ee8:	6810      	ldr	r0, [r2, #0]
 8007eea:	3001      	adds	r0, #1
 8007eec:	bf1b      	ittet	ne
 8007eee:	eba8 0303 	subne.w	r3, r8, r3
 8007ef2:	4473      	addne	r3, lr
 8007ef4:	f8c2 8000 	streq.w	r8, [r2]
 8007ef8:	f8ca 3000 	strne.w	r3, [sl]
 8007efc:	f018 0007 	ands.w	r0, r8, #7
 8007f00:	bf1c      	itt	ne
 8007f02:	f1c0 0008 	rsbne	r0, r0, #8
 8007f06:	4480      	addne	r8, r0
 8007f08:	4b2a      	ldr	r3, [pc, #168]	; (8007fb4 <_malloc_r+0x408>)
 8007f0a:	4447      	add	r7, r8
 8007f0c:	4418      	add	r0, r3
 8007f0e:	400f      	ands	r7, r1
 8007f10:	1bc7      	subs	r7, r0, r7
 8007f12:	4639      	mov	r1, r7
 8007f14:	4648      	mov	r0, r9
 8007f16:	f000 f863 	bl	8007fe0 <_sbrk_r>
 8007f1a:	1c43      	adds	r3, r0, #1
 8007f1c:	bf08      	it	eq
 8007f1e:	4640      	moveq	r0, r8
 8007f20:	f8da 3000 	ldr.w	r3, [sl]
 8007f24:	f8c5 8008 	str.w	r8, [r5, #8]
 8007f28:	bf08      	it	eq
 8007f2a:	2700      	moveq	r7, #0
 8007f2c:	eba0 0008 	sub.w	r0, r0, r8
 8007f30:	443b      	add	r3, r7
 8007f32:	4407      	add	r7, r0
 8007f34:	f047 0701 	orr.w	r7, r7, #1
 8007f38:	45ab      	cmp	fp, r5
 8007f3a:	f8ca 3000 	str.w	r3, [sl]
 8007f3e:	f8c8 7004 	str.w	r7, [r8, #4]
 8007f42:	d0c4      	beq.n	8007ece <_malloc_r+0x322>
 8007f44:	2e0f      	cmp	r6, #15
 8007f46:	d810      	bhi.n	8007f6a <_malloc_r+0x3be>
 8007f48:	2301      	movs	r3, #1
 8007f4a:	f8c8 3004 	str.w	r3, [r8, #4]
 8007f4e:	68ab      	ldr	r3, [r5, #8]
 8007f50:	685a      	ldr	r2, [r3, #4]
 8007f52:	f022 0203 	bic.w	r2, r2, #3
 8007f56:	4294      	cmp	r4, r2
 8007f58:	eba2 0304 	sub.w	r3, r2, r4
 8007f5c:	d801      	bhi.n	8007f62 <_malloc_r+0x3b6>
 8007f5e:	2b0f      	cmp	r3, #15
 8007f60:	dc1a      	bgt.n	8007f98 <_malloc_r+0x3ec>
 8007f62:	4648      	mov	r0, r9
 8007f64:	f000 f836 	bl	8007fd4 <__malloc_unlock>
 8007f68:	e62d      	b.n	8007bc6 <_malloc_r+0x1a>
 8007f6a:	f8db 3004 	ldr.w	r3, [fp, #4]
 8007f6e:	3e0c      	subs	r6, #12
 8007f70:	f026 0607 	bic.w	r6, r6, #7
 8007f74:	f003 0301 	and.w	r3, r3, #1
 8007f78:	4333      	orrs	r3, r6
 8007f7a:	f8cb 3004 	str.w	r3, [fp, #4]
 8007f7e:	eb0b 0306 	add.w	r3, fp, r6
 8007f82:	2205      	movs	r2, #5
 8007f84:	2e0f      	cmp	r6, #15
 8007f86:	605a      	str	r2, [r3, #4]
 8007f88:	609a      	str	r2, [r3, #8]
 8007f8a:	d9a0      	bls.n	8007ece <_malloc_r+0x322>
 8007f8c:	f10b 0108 	add.w	r1, fp, #8
 8007f90:	4648      	mov	r0, r9
 8007f92:	f001 feed 	bl	8009d70 <_free_r>
 8007f96:	e79a      	b.n	8007ece <_malloc_r+0x322>
 8007f98:	68ae      	ldr	r6, [r5, #8]
 8007f9a:	f044 0201 	orr.w	r2, r4, #1
 8007f9e:	4434      	add	r4, r6
 8007fa0:	f043 0301 	orr.w	r3, r3, #1
 8007fa4:	6072      	str	r2, [r6, #4]
 8007fa6:	60ac      	str	r4, [r5, #8]
 8007fa8:	6063      	str	r3, [r4, #4]
 8007faa:	e631      	b.n	8007c10 <_malloc_r+0x64>
 8007fac:	2000677c 	.word	0x2000677c
 8007fb0:	2000041c 	.word	0x2000041c
 8007fb4:	00000080 	.word	0x00000080
 8007fb8:	2000674c 	.word	0x2000674c
 8007fbc:	0000007f 	.word	0x0000007f
 8007fc0:	20006774 	.word	0x20006774
 8007fc4:	20006778 	.word	0x20006778

08007fc8 <__malloc_lock>:
 8007fc8:	4801      	ldr	r0, [pc, #4]	; (8007fd0 <__malloc_lock+0x8>)
 8007fca:	f001 bf9b 	b.w	8009f04 <__retarget_lock_acquire_recursive>
 8007fce:	bf00      	nop
 8007fd0:	2000f134 	.word	0x2000f134

08007fd4 <__malloc_unlock>:
 8007fd4:	4801      	ldr	r0, [pc, #4]	; (8007fdc <__malloc_unlock+0x8>)
 8007fd6:	f001 bf96 	b.w	8009f06 <__retarget_lock_release_recursive>
 8007fda:	bf00      	nop
 8007fdc:	2000f134 	.word	0x2000f134

08007fe0 <_sbrk_r>:
 8007fe0:	b538      	push	{r3, r4, r5, lr}
 8007fe2:	4c06      	ldr	r4, [pc, #24]	; (8007ffc <_sbrk_r+0x1c>)
 8007fe4:	2300      	movs	r3, #0
 8007fe6:	4605      	mov	r5, r0
 8007fe8:	4608      	mov	r0, r1
 8007fea:	6023      	str	r3, [r4, #0]
 8007fec:	f005 f83c 	bl	800d068 <_sbrk>
 8007ff0:	1c43      	adds	r3, r0, #1
 8007ff2:	d102      	bne.n	8007ffa <_sbrk_r+0x1a>
 8007ff4:	6823      	ldr	r3, [r4, #0]
 8007ff6:	b103      	cbz	r3, 8007ffa <_sbrk_r+0x1a>
 8007ff8:	602b      	str	r3, [r5, #0]
 8007ffa:	bd38      	pop	{r3, r4, r5, pc}
 8007ffc:	2000f13c 	.word	0x2000f13c

08008000 <sprintf>:
 8008000:	b40e      	push	{r1, r2, r3}
 8008002:	b500      	push	{lr}
 8008004:	b09c      	sub	sp, #112	; 0x70
 8008006:	f44f 7102 	mov.w	r1, #520	; 0x208
 800800a:	ab1d      	add	r3, sp, #116	; 0x74
 800800c:	f8ad 1014 	strh.w	r1, [sp, #20]
 8008010:	9002      	str	r0, [sp, #8]
 8008012:	9006      	str	r0, [sp, #24]
 8008014:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008018:	480a      	ldr	r0, [pc, #40]	; (8008044 <sprintf+0x44>)
 800801a:	9104      	str	r1, [sp, #16]
 800801c:	9107      	str	r1, [sp, #28]
 800801e:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8008022:	f853 2b04 	ldr.w	r2, [r3], #4
 8008026:	f8ad 1016 	strh.w	r1, [sp, #22]
 800802a:	6800      	ldr	r0, [r0, #0]
 800802c:	9301      	str	r3, [sp, #4]
 800802e:	a902      	add	r1, sp, #8
 8008030:	f000 f81a 	bl	8008068 <_svfprintf_r>
 8008034:	9b02      	ldr	r3, [sp, #8]
 8008036:	2200      	movs	r2, #0
 8008038:	701a      	strb	r2, [r3, #0]
 800803a:	b01c      	add	sp, #112	; 0x70
 800803c:	f85d eb04 	ldr.w	lr, [sp], #4
 8008040:	b003      	add	sp, #12
 8008042:	4770      	bx	lr
 8008044:	20000424 	.word	0x20000424

08008048 <strcat>:
 8008048:	b510      	push	{r4, lr}
 800804a:	4602      	mov	r2, r0
 800804c:	4613      	mov	r3, r2
 800804e:	3201      	adds	r2, #1
 8008050:	781c      	ldrb	r4, [r3, #0]
 8008052:	2c00      	cmp	r4, #0
 8008054:	d1fa      	bne.n	800804c <strcat+0x4>
 8008056:	3b01      	subs	r3, #1
 8008058:	f811 2b01 	ldrb.w	r2, [r1], #1
 800805c:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008060:	2a00      	cmp	r2, #0
 8008062:	d1f9      	bne.n	8008058 <strcat+0x10>
 8008064:	bd10      	pop	{r4, pc}
	...

08008068 <_svfprintf_r>:
 8008068:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800806c:	b0bd      	sub	sp, #244	; 0xf4
 800806e:	468a      	mov	sl, r1
 8008070:	4615      	mov	r5, r2
 8008072:	461f      	mov	r7, r3
 8008074:	4683      	mov	fp, r0
 8008076:	f001 ff37 	bl	8009ee8 <_localeconv_r>
 800807a:	6803      	ldr	r3, [r0, #0]
 800807c:	930d      	str	r3, [sp, #52]	; 0x34
 800807e:	4618      	mov	r0, r3
 8008080:	f7f8 f8f6 	bl	8000270 <strlen>
 8008084:	f8ba 300c 	ldrh.w	r3, [sl, #12]
 8008088:	9008      	str	r0, [sp, #32]
 800808a:	061b      	lsls	r3, r3, #24
 800808c:	d518      	bpl.n	80080c0 <_svfprintf_r+0x58>
 800808e:	f8da 3010 	ldr.w	r3, [sl, #16]
 8008092:	b9ab      	cbnz	r3, 80080c0 <_svfprintf_r+0x58>
 8008094:	2140      	movs	r1, #64	; 0x40
 8008096:	4658      	mov	r0, fp
 8008098:	f7ff fd88 	bl	8007bac <_malloc_r>
 800809c:	f8ca 0000 	str.w	r0, [sl]
 80080a0:	f8ca 0010 	str.w	r0, [sl, #16]
 80080a4:	b948      	cbnz	r0, 80080ba <_svfprintf_r+0x52>
 80080a6:	230c      	movs	r3, #12
 80080a8:	f8cb 3000 	str.w	r3, [fp]
 80080ac:	f04f 33ff 	mov.w	r3, #4294967295
 80080b0:	9309      	str	r3, [sp, #36]	; 0x24
 80080b2:	9809      	ldr	r0, [sp, #36]	; 0x24
 80080b4:	b03d      	add	sp, #244	; 0xf4
 80080b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80080ba:	2340      	movs	r3, #64	; 0x40
 80080bc:	f8ca 3014 	str.w	r3, [sl, #20]
 80080c0:	ed9f 7b99 	vldr	d7, [pc, #612]	; 8008328 <_svfprintf_r+0x2c0>
 80080c4:	ed8d 7b06 	vstr	d7, [sp, #24]
 80080c8:	2300      	movs	r3, #0
 80080ca:	ac2c      	add	r4, sp, #176	; 0xb0
 80080cc:	941f      	str	r4, [sp, #124]	; 0x7c
 80080ce:	9321      	str	r3, [sp, #132]	; 0x84
 80080d0:	9320      	str	r3, [sp, #128]	; 0x80
 80080d2:	9505      	str	r5, [sp, #20]
 80080d4:	9303      	str	r3, [sp, #12]
 80080d6:	9311      	str	r3, [sp, #68]	; 0x44
 80080d8:	9310      	str	r3, [sp, #64]	; 0x40
 80080da:	9309      	str	r3, [sp, #36]	; 0x24
 80080dc:	9d05      	ldr	r5, [sp, #20]
 80080de:	462b      	mov	r3, r5
 80080e0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80080e4:	b112      	cbz	r2, 80080ec <_svfprintf_r+0x84>
 80080e6:	2a25      	cmp	r2, #37	; 0x25
 80080e8:	f040 8083 	bne.w	80081f2 <_svfprintf_r+0x18a>
 80080ec:	9b05      	ldr	r3, [sp, #20]
 80080ee:	1aee      	subs	r6, r5, r3
 80080f0:	d00d      	beq.n	800810e <_svfprintf_r+0xa6>
 80080f2:	e884 0048 	stmia.w	r4, {r3, r6}
 80080f6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80080f8:	4433      	add	r3, r6
 80080fa:	9321      	str	r3, [sp, #132]	; 0x84
 80080fc:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80080fe:	3301      	adds	r3, #1
 8008100:	2b07      	cmp	r3, #7
 8008102:	9320      	str	r3, [sp, #128]	; 0x80
 8008104:	dc77      	bgt.n	80081f6 <_svfprintf_r+0x18e>
 8008106:	3408      	adds	r4, #8
 8008108:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800810a:	4433      	add	r3, r6
 800810c:	9309      	str	r3, [sp, #36]	; 0x24
 800810e:	782b      	ldrb	r3, [r5, #0]
 8008110:	2b00      	cmp	r3, #0
 8008112:	f000 8729 	beq.w	8008f68 <_svfprintf_r+0xf00>
 8008116:	2300      	movs	r3, #0
 8008118:	1c69      	adds	r1, r5, #1
 800811a:	f88d 305f 	strb.w	r3, [sp, #95]	; 0x5f
 800811e:	461a      	mov	r2, r3
 8008120:	f04f 39ff 	mov.w	r9, #4294967295
 8008124:	930a      	str	r3, [sp, #40]	; 0x28
 8008126:	461d      	mov	r5, r3
 8008128:	200a      	movs	r0, #10
 800812a:	1c4e      	adds	r6, r1, #1
 800812c:	7809      	ldrb	r1, [r1, #0]
 800812e:	9605      	str	r6, [sp, #20]
 8008130:	9102      	str	r1, [sp, #8]
 8008132:	9902      	ldr	r1, [sp, #8]
 8008134:	3920      	subs	r1, #32
 8008136:	2958      	cmp	r1, #88	; 0x58
 8008138:	f200 8418 	bhi.w	800896c <_svfprintf_r+0x904>
 800813c:	e8df f011 	tbh	[pc, r1, lsl #1]
 8008140:	041600a6 	.word	0x041600a6
 8008144:	00ab0416 	.word	0x00ab0416
 8008148:	04160416 	.word	0x04160416
 800814c:	04160416 	.word	0x04160416
 8008150:	04160416 	.word	0x04160416
 8008154:	006500ae 	.word	0x006500ae
 8008158:	00b70416 	.word	0x00b70416
 800815c:	041600ba 	.word	0x041600ba
 8008160:	00da00d7 	.word	0x00da00d7
 8008164:	00da00da 	.word	0x00da00da
 8008168:	00da00da 	.word	0x00da00da
 800816c:	00da00da 	.word	0x00da00da
 8008170:	00da00da 	.word	0x00da00da
 8008174:	04160416 	.word	0x04160416
 8008178:	04160416 	.word	0x04160416
 800817c:	04160416 	.word	0x04160416
 8008180:	04160416 	.word	0x04160416
 8008184:	04160416 	.word	0x04160416
 8008188:	012b0115 	.word	0x012b0115
 800818c:	012b0416 	.word	0x012b0416
 8008190:	04160416 	.word	0x04160416
 8008194:	04160416 	.word	0x04160416
 8008198:	041600ed 	.word	0x041600ed
 800819c:	03400416 	.word	0x03400416
 80081a0:	04160416 	.word	0x04160416
 80081a4:	04160416 	.word	0x04160416
 80081a8:	03a80416 	.word	0x03a80416
 80081ac:	04160416 	.word	0x04160416
 80081b0:	04160086 	.word	0x04160086
 80081b4:	04160416 	.word	0x04160416
 80081b8:	04160416 	.word	0x04160416
 80081bc:	04160416 	.word	0x04160416
 80081c0:	04160416 	.word	0x04160416
 80081c4:	01070416 	.word	0x01070416
 80081c8:	012b006b 	.word	0x012b006b
 80081cc:	012b012b 	.word	0x012b012b
 80081d0:	006b00f0 	.word	0x006b00f0
 80081d4:	04160416 	.word	0x04160416
 80081d8:	041600fa 	.word	0x041600fa
 80081dc:	03420322 	.word	0x03420322
 80081e0:	01010376 	.word	0x01010376
 80081e4:	03870416 	.word	0x03870416
 80081e8:	03aa0416 	.word	0x03aa0416
 80081ec:	04160416 	.word	0x04160416
 80081f0:	03c2      	.short	0x03c2
 80081f2:	461d      	mov	r5, r3
 80081f4:	e773      	b.n	80080de <_svfprintf_r+0x76>
 80081f6:	aa1f      	add	r2, sp, #124	; 0x7c
 80081f8:	4651      	mov	r1, sl
 80081fa:	4658      	mov	r0, fp
 80081fc:	f002 f960 	bl	800a4c0 <__ssprint_r>
 8008200:	2800      	cmp	r0, #0
 8008202:	f040 8692 	bne.w	8008f2a <_svfprintf_r+0xec2>
 8008206:	ac2c      	add	r4, sp, #176	; 0xb0
 8008208:	e77e      	b.n	8008108 <_svfprintf_r+0xa0>
 800820a:	2301      	movs	r3, #1
 800820c:	222b      	movs	r2, #43	; 0x2b
 800820e:	9905      	ldr	r1, [sp, #20]
 8008210:	e78b      	b.n	800812a <_svfprintf_r+0xc2>
 8008212:	460f      	mov	r7, r1
 8008214:	e7fb      	b.n	800820e <_svfprintf_r+0x1a6>
 8008216:	b10b      	cbz	r3, 800821c <_svfprintf_r+0x1b4>
 8008218:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 800821c:	06ae      	lsls	r6, r5, #26
 800821e:	f140 80aa 	bpl.w	8008376 <_svfprintf_r+0x30e>
 8008222:	3707      	adds	r7, #7
 8008224:	f027 0707 	bic.w	r7, r7, #7
 8008228:	f107 0308 	add.w	r3, r7, #8
 800822c:	e9d7 6700 	ldrd	r6, r7, [r7]
 8008230:	9304      	str	r3, [sp, #16]
 8008232:	2e00      	cmp	r6, #0
 8008234:	f177 0300 	sbcs.w	r3, r7, #0
 8008238:	da06      	bge.n	8008248 <_svfprintf_r+0x1e0>
 800823a:	4276      	negs	r6, r6
 800823c:	f04f 032d 	mov.w	r3, #45	; 0x2d
 8008240:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
 8008244:	f88d 305f 	strb.w	r3, [sp, #95]	; 0x5f
 8008248:	2301      	movs	r3, #1
 800824a:	e2ca      	b.n	80087e2 <_svfprintf_r+0x77a>
 800824c:	b10b      	cbz	r3, 8008252 <_svfprintf_r+0x1ea>
 800824e:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 8008252:	4b37      	ldr	r3, [pc, #220]	; (8008330 <_svfprintf_r+0x2c8>)
 8008254:	9311      	str	r3, [sp, #68]	; 0x44
 8008256:	06ab      	lsls	r3, r5, #26
 8008258:	f140 8339 	bpl.w	80088ce <_svfprintf_r+0x866>
 800825c:	3707      	adds	r7, #7
 800825e:	f027 0707 	bic.w	r7, r7, #7
 8008262:	f107 0308 	add.w	r3, r7, #8
 8008266:	e9d7 6700 	ldrd	r6, r7, [r7]
 800826a:	9304      	str	r3, [sp, #16]
 800826c:	07e8      	lsls	r0, r5, #31
 800826e:	d50b      	bpl.n	8008288 <_svfprintf_r+0x220>
 8008270:	ea56 0307 	orrs.w	r3, r6, r7
 8008274:	d008      	beq.n	8008288 <_svfprintf_r+0x220>
 8008276:	2330      	movs	r3, #48	; 0x30
 8008278:	f88d 3060 	strb.w	r3, [sp, #96]	; 0x60
 800827c:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8008280:	f88d 3061 	strb.w	r3, [sp, #97]	; 0x61
 8008284:	f045 0502 	orr.w	r5, r5, #2
 8008288:	2302      	movs	r3, #2
 800828a:	e2a7      	b.n	80087dc <_svfprintf_r+0x774>
 800828c:	2a00      	cmp	r2, #0
 800828e:	d1be      	bne.n	800820e <_svfprintf_r+0x1a6>
 8008290:	2301      	movs	r3, #1
 8008292:	2220      	movs	r2, #32
 8008294:	e7bb      	b.n	800820e <_svfprintf_r+0x1a6>
 8008296:	f045 0501 	orr.w	r5, r5, #1
 800829a:	e7b8      	b.n	800820e <_svfprintf_r+0x1a6>
 800829c:	683e      	ldr	r6, [r7, #0]
 800829e:	960a      	str	r6, [sp, #40]	; 0x28
 80082a0:	2e00      	cmp	r6, #0
 80082a2:	f107 0104 	add.w	r1, r7, #4
 80082a6:	dab4      	bge.n	8008212 <_svfprintf_r+0x1aa>
 80082a8:	4276      	negs	r6, r6
 80082aa:	960a      	str	r6, [sp, #40]	; 0x28
 80082ac:	460f      	mov	r7, r1
 80082ae:	f045 0504 	orr.w	r5, r5, #4
 80082b2:	e7ac      	b.n	800820e <_svfprintf_r+0x1a6>
 80082b4:	9905      	ldr	r1, [sp, #20]
 80082b6:	1c4e      	adds	r6, r1, #1
 80082b8:	7809      	ldrb	r1, [r1, #0]
 80082ba:	9102      	str	r1, [sp, #8]
 80082bc:	292a      	cmp	r1, #42	; 0x2a
 80082be:	d010      	beq.n	80082e2 <_svfprintf_r+0x27a>
 80082c0:	f04f 0900 	mov.w	r9, #0
 80082c4:	9605      	str	r6, [sp, #20]
 80082c6:	9902      	ldr	r1, [sp, #8]
 80082c8:	3930      	subs	r1, #48	; 0x30
 80082ca:	2909      	cmp	r1, #9
 80082cc:	f63f af31 	bhi.w	8008132 <_svfprintf_r+0xca>
 80082d0:	fb00 1909 	mla	r9, r0, r9, r1
 80082d4:	9905      	ldr	r1, [sp, #20]
 80082d6:	460e      	mov	r6, r1
 80082d8:	f816 1b01 	ldrb.w	r1, [r6], #1
 80082dc:	9102      	str	r1, [sp, #8]
 80082de:	9605      	str	r6, [sp, #20]
 80082e0:	e7f1      	b.n	80082c6 <_svfprintf_r+0x25e>
 80082e2:	6839      	ldr	r1, [r7, #0]
 80082e4:	9605      	str	r6, [sp, #20]
 80082e6:	ea41 79e1 	orr.w	r9, r1, r1, asr #31
 80082ea:	3704      	adds	r7, #4
 80082ec:	e78f      	b.n	800820e <_svfprintf_r+0x1a6>
 80082ee:	f045 0580 	orr.w	r5, r5, #128	; 0x80
 80082f2:	e78c      	b.n	800820e <_svfprintf_r+0x1a6>
 80082f4:	2100      	movs	r1, #0
 80082f6:	910a      	str	r1, [sp, #40]	; 0x28
 80082f8:	9902      	ldr	r1, [sp, #8]
 80082fa:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 80082fc:	3930      	subs	r1, #48	; 0x30
 80082fe:	fb00 1106 	mla	r1, r0, r6, r1
 8008302:	910a      	str	r1, [sp, #40]	; 0x28
 8008304:	9905      	ldr	r1, [sp, #20]
 8008306:	460e      	mov	r6, r1
 8008308:	f816 1b01 	ldrb.w	r1, [r6], #1
 800830c:	9102      	str	r1, [sp, #8]
 800830e:	9902      	ldr	r1, [sp, #8]
 8008310:	9605      	str	r6, [sp, #20]
 8008312:	3930      	subs	r1, #48	; 0x30
 8008314:	2909      	cmp	r1, #9
 8008316:	d9ef      	bls.n	80082f8 <_svfprintf_r+0x290>
 8008318:	e70b      	b.n	8008132 <_svfprintf_r+0xca>
 800831a:	f045 0508 	orr.w	r5, r5, #8
 800831e:	e776      	b.n	800820e <_svfprintf_r+0x1a6>
 8008320:	f045 0540 	orr.w	r5, r5, #64	; 0x40
 8008324:	e773      	b.n	800820e <_svfprintf_r+0x1a6>
 8008326:	bf00      	nop
	...
 8008330:	0800d83f 	.word	0x0800d83f
 8008334:	9905      	ldr	r1, [sp, #20]
 8008336:	7809      	ldrb	r1, [r1, #0]
 8008338:	296c      	cmp	r1, #108	; 0x6c
 800833a:	d105      	bne.n	8008348 <_svfprintf_r+0x2e0>
 800833c:	9905      	ldr	r1, [sp, #20]
 800833e:	3101      	adds	r1, #1
 8008340:	9105      	str	r1, [sp, #20]
 8008342:	f045 0520 	orr.w	r5, r5, #32
 8008346:	e762      	b.n	800820e <_svfprintf_r+0x1a6>
 8008348:	f045 0510 	orr.w	r5, r5, #16
 800834c:	e75f      	b.n	800820e <_svfprintf_r+0x1a6>
 800834e:	1d3b      	adds	r3, r7, #4
 8008350:	9304      	str	r3, [sp, #16]
 8008352:	2600      	movs	r6, #0
 8008354:	683b      	ldr	r3, [r7, #0]
 8008356:	f88d 3088 	strb.w	r3, [sp, #136]	; 0x88
 800835a:	f88d 605f 	strb.w	r6, [sp, #95]	; 0x5f
 800835e:	f04f 0901 	mov.w	r9, #1
 8008362:	4637      	mov	r7, r6
 8008364:	f10d 0888 	add.w	r8, sp, #136	; 0x88
 8008368:	e11b      	b.n	80085a2 <_svfprintf_r+0x53a>
 800836a:	b10b      	cbz	r3, 8008370 <_svfprintf_r+0x308>
 800836c:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 8008370:	f045 0510 	orr.w	r5, r5, #16
 8008374:	e752      	b.n	800821c <_svfprintf_r+0x1b4>
 8008376:	f015 0f10 	tst.w	r5, #16
 800837a:	f107 0304 	add.w	r3, r7, #4
 800837e:	d003      	beq.n	8008388 <_svfprintf_r+0x320>
 8008380:	683e      	ldr	r6, [r7, #0]
 8008382:	9304      	str	r3, [sp, #16]
 8008384:	17f7      	asrs	r7, r6, #31
 8008386:	e754      	b.n	8008232 <_svfprintf_r+0x1ca>
 8008388:	683e      	ldr	r6, [r7, #0]
 800838a:	9304      	str	r3, [sp, #16]
 800838c:	f015 0f40 	tst.w	r5, #64	; 0x40
 8008390:	bf18      	it	ne
 8008392:	b236      	sxthne	r6, r6
 8008394:	e7f6      	b.n	8008384 <_svfprintf_r+0x31c>
 8008396:	b10b      	cbz	r3, 800839c <_svfprintf_r+0x334>
 8008398:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 800839c:	3707      	adds	r7, #7
 800839e:	f027 0707 	bic.w	r7, r7, #7
 80083a2:	f107 0308 	add.w	r3, r7, #8
 80083a6:	9304      	str	r3, [sp, #16]
 80083a8:	ed97 7b00 	vldr	d7, [r7]
 80083ac:	ed8d 7b06 	vstr	d7, [sp, #24]
 80083b0:	9b06      	ldr	r3, [sp, #24]
 80083b2:	9312      	str	r3, [sp, #72]	; 0x48
 80083b4:	9b07      	ldr	r3, [sp, #28]
 80083b6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80083ba:	9313      	str	r3, [sp, #76]	; 0x4c
 80083bc:	f04f 32ff 	mov.w	r2, #4294967295
 80083c0:	4b4a      	ldr	r3, [pc, #296]	; (80084ec <_svfprintf_r+0x484>)
 80083c2:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
 80083c6:	f7f8 fbad 	bl	8000b24 <__aeabi_dcmpun>
 80083ca:	2800      	cmp	r0, #0
 80083cc:	f040 85d5 	bne.w	8008f7a <_svfprintf_r+0xf12>
 80083d0:	f04f 32ff 	mov.w	r2, #4294967295
 80083d4:	4b45      	ldr	r3, [pc, #276]	; (80084ec <_svfprintf_r+0x484>)
 80083d6:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
 80083da:	f7f8 fb85 	bl	8000ae8 <__aeabi_dcmple>
 80083de:	2800      	cmp	r0, #0
 80083e0:	f040 85cb 	bne.w	8008f7a <_svfprintf_r+0xf12>
 80083e4:	2200      	movs	r2, #0
 80083e6:	2300      	movs	r3, #0
 80083e8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80083ec:	f7f8 fb72 	bl	8000ad4 <__aeabi_dcmplt>
 80083f0:	b110      	cbz	r0, 80083f8 <_svfprintf_r+0x390>
 80083f2:	232d      	movs	r3, #45	; 0x2d
 80083f4:	f88d 305f 	strb.w	r3, [sp, #95]	; 0x5f
 80083f8:	4b3d      	ldr	r3, [pc, #244]	; (80084f0 <_svfprintf_r+0x488>)
 80083fa:	4a3e      	ldr	r2, [pc, #248]	; (80084f4 <_svfprintf_r+0x48c>)
 80083fc:	9902      	ldr	r1, [sp, #8]
 80083fe:	f025 0580 	bic.w	r5, r5, #128	; 0x80
 8008402:	2947      	cmp	r1, #71	; 0x47
 8008404:	bfcc      	ite	gt
 8008406:	4690      	movgt	r8, r2
 8008408:	4698      	movle	r8, r3
 800840a:	f04f 0903 	mov.w	r9, #3
 800840e:	2600      	movs	r6, #0
 8008410:	4637      	mov	r7, r6
 8008412:	e0c6      	b.n	80085a2 <_svfprintf_r+0x53a>
 8008414:	f1b9 3fff 	cmp.w	r9, #4294967295
 8008418:	d022      	beq.n	8008460 <_svfprintf_r+0x3f8>
 800841a:	9b02      	ldr	r3, [sp, #8]
 800841c:	f023 0320 	bic.w	r3, r3, #32
 8008420:	2b47      	cmp	r3, #71	; 0x47
 8008422:	d104      	bne.n	800842e <_svfprintf_r+0x3c6>
 8008424:	f1b9 0f00 	cmp.w	r9, #0
 8008428:	bf08      	it	eq
 800842a:	f04f 0901 	moveq.w	r9, #1
 800842e:	f445 7380 	orr.w	r3, r5, #256	; 0x100
 8008432:	930c      	str	r3, [sp, #48]	; 0x30
 8008434:	9b07      	ldr	r3, [sp, #28]
 8008436:	2b00      	cmp	r3, #0
 8008438:	da15      	bge.n	8008466 <_svfprintf_r+0x3fe>
 800843a:	9b06      	ldr	r3, [sp, #24]
 800843c:	930e      	str	r3, [sp, #56]	; 0x38
 800843e:	9b07      	ldr	r3, [sp, #28]
 8008440:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8008444:	930f      	str	r3, [sp, #60]	; 0x3c
 8008446:	232d      	movs	r3, #45	; 0x2d
 8008448:	930b      	str	r3, [sp, #44]	; 0x2c
 800844a:	9b02      	ldr	r3, [sp, #8]
 800844c:	f023 0720 	bic.w	r7, r3, #32
 8008450:	2f46      	cmp	r7, #70	; 0x46
 8008452:	d00e      	beq.n	8008472 <_svfprintf_r+0x40a>
 8008454:	2f45      	cmp	r7, #69	; 0x45
 8008456:	d146      	bne.n	80084e6 <_svfprintf_r+0x47e>
 8008458:	f109 0601 	add.w	r6, r9, #1
 800845c:	2102      	movs	r1, #2
 800845e:	e00a      	b.n	8008476 <_svfprintf_r+0x40e>
 8008460:	f04f 0906 	mov.w	r9, #6
 8008464:	e7e3      	b.n	800842e <_svfprintf_r+0x3c6>
 8008466:	ed9d 7b06 	vldr	d7, [sp, #24]
 800846a:	2300      	movs	r3, #0
 800846c:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
 8008470:	e7ea      	b.n	8008448 <_svfprintf_r+0x3e0>
 8008472:	464e      	mov	r6, r9
 8008474:	2103      	movs	r1, #3
 8008476:	ab1d      	add	r3, sp, #116	; 0x74
 8008478:	9301      	str	r3, [sp, #4]
 800847a:	ab1a      	add	r3, sp, #104	; 0x68
 800847c:	9300      	str	r3, [sp, #0]
 800847e:	4632      	mov	r2, r6
 8008480:	ab19      	add	r3, sp, #100	; 0x64
 8008482:	ed9d 0b0e 	vldr	d0, [sp, #56]	; 0x38
 8008486:	4658      	mov	r0, fp
 8008488:	f000 fe4e 	bl	8009128 <_dtoa_r>
 800848c:	2f47      	cmp	r7, #71	; 0x47
 800848e:	4680      	mov	r8, r0
 8008490:	d102      	bne.n	8008498 <_svfprintf_r+0x430>
 8008492:	07e8      	lsls	r0, r5, #31
 8008494:	f140 857e 	bpl.w	8008f94 <_svfprintf_r+0xf2c>
 8008498:	eb08 0306 	add.w	r3, r8, r6
 800849c:	2f46      	cmp	r7, #70	; 0x46
 800849e:	9303      	str	r3, [sp, #12]
 80084a0:	d111      	bne.n	80084c6 <_svfprintf_r+0x45e>
 80084a2:	f898 3000 	ldrb.w	r3, [r8]
 80084a6:	2b30      	cmp	r3, #48	; 0x30
 80084a8:	d109      	bne.n	80084be <_svfprintf_r+0x456>
 80084aa:	2200      	movs	r2, #0
 80084ac:	2300      	movs	r3, #0
 80084ae:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 80084b2:	f7f8 fb05 	bl	8000ac0 <__aeabi_dcmpeq>
 80084b6:	b910      	cbnz	r0, 80084be <_svfprintf_r+0x456>
 80084b8:	f1c6 0601 	rsb	r6, r6, #1
 80084bc:	9619      	str	r6, [sp, #100]	; 0x64
 80084be:	9a03      	ldr	r2, [sp, #12]
 80084c0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80084c2:	441a      	add	r2, r3
 80084c4:	9203      	str	r2, [sp, #12]
 80084c6:	2200      	movs	r2, #0
 80084c8:	2300      	movs	r3, #0
 80084ca:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 80084ce:	f7f8 faf7 	bl	8000ac0 <__aeabi_dcmpeq>
 80084d2:	b988      	cbnz	r0, 80084f8 <_svfprintf_r+0x490>
 80084d4:	2230      	movs	r2, #48	; 0x30
 80084d6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80084d8:	9903      	ldr	r1, [sp, #12]
 80084da:	4299      	cmp	r1, r3
 80084dc:	d90e      	bls.n	80084fc <_svfprintf_r+0x494>
 80084de:	1c59      	adds	r1, r3, #1
 80084e0:	911d      	str	r1, [sp, #116]	; 0x74
 80084e2:	701a      	strb	r2, [r3, #0]
 80084e4:	e7f7      	b.n	80084d6 <_svfprintf_r+0x46e>
 80084e6:	464e      	mov	r6, r9
 80084e8:	e7b8      	b.n	800845c <_svfprintf_r+0x3f4>
 80084ea:	bf00      	nop
 80084ec:	7fefffff 	.word	0x7fefffff
 80084f0:	0800d82f 	.word	0x0800d82f
 80084f4:	0800d833 	.word	0x0800d833
 80084f8:	9b03      	ldr	r3, [sp, #12]
 80084fa:	931d      	str	r3, [sp, #116]	; 0x74
 80084fc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80084fe:	2f47      	cmp	r7, #71	; 0x47
 8008500:	eba3 0308 	sub.w	r3, r3, r8
 8008504:	9303      	str	r3, [sp, #12]
 8008506:	f040 80fa 	bne.w	80086fe <_svfprintf_r+0x696>
 800850a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800850c:	1cd9      	adds	r1, r3, #3
 800850e:	db02      	blt.n	8008516 <_svfprintf_r+0x4ae>
 8008510:	4599      	cmp	r9, r3
 8008512:	f280 8120 	bge.w	8008756 <_svfprintf_r+0x6ee>
 8008516:	9b02      	ldr	r3, [sp, #8]
 8008518:	3b02      	subs	r3, #2
 800851a:	9302      	str	r3, [sp, #8]
 800851c:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800851e:	f89d 1008 	ldrb.w	r1, [sp, #8]
 8008522:	f88d 106c 	strb.w	r1, [sp, #108]	; 0x6c
 8008526:	1e53      	subs	r3, r2, #1
 8008528:	2b00      	cmp	r3, #0
 800852a:	9319      	str	r3, [sp, #100]	; 0x64
 800852c:	bfb6      	itet	lt
 800852e:	f1c2 0301 	rsblt	r3, r2, #1
 8008532:	222b      	movge	r2, #43	; 0x2b
 8008534:	222d      	movlt	r2, #45	; 0x2d
 8008536:	2b09      	cmp	r3, #9
 8008538:	f88d 206d 	strb.w	r2, [sp, #109]	; 0x6d
 800853c:	f340 80fb 	ble.w	8008736 <_svfprintf_r+0x6ce>
 8008540:	f10d 027b 	add.w	r2, sp, #123	; 0x7b
 8008544:	260a      	movs	r6, #10
 8008546:	fb93 f0f6 	sdiv	r0, r3, r6
 800854a:	fb06 3310 	mls	r3, r6, r0, r3
 800854e:	3330      	adds	r3, #48	; 0x30
 8008550:	2809      	cmp	r0, #9
 8008552:	f802 3c01 	strb.w	r3, [r2, #-1]
 8008556:	f102 31ff 	add.w	r1, r2, #4294967295
 800855a:	4603      	mov	r3, r0
 800855c:	f300 80e4 	bgt.w	8008728 <_svfprintf_r+0x6c0>
 8008560:	3330      	adds	r3, #48	; 0x30
 8008562:	f801 3c01 	strb.w	r3, [r1, #-1]
 8008566:	3a02      	subs	r2, #2
 8008568:	f10d 036e 	add.w	r3, sp, #110	; 0x6e
 800856c:	f10d 007b 	add.w	r0, sp, #123	; 0x7b
 8008570:	4282      	cmp	r2, r0
 8008572:	4619      	mov	r1, r3
 8008574:	f0c0 80da 	bcc.w	800872c <_svfprintf_r+0x6c4>
 8008578:	9a03      	ldr	r2, [sp, #12]
 800857a:	ab1b      	add	r3, sp, #108	; 0x6c
 800857c:	1acb      	subs	r3, r1, r3
 800857e:	2a01      	cmp	r2, #1
 8008580:	9310      	str	r3, [sp, #64]	; 0x40
 8008582:	eb03 0902 	add.w	r9, r3, r2
 8008586:	dc02      	bgt.n	800858e <_svfprintf_r+0x526>
 8008588:	f015 0701 	ands.w	r7, r5, #1
 800858c:	d002      	beq.n	8008594 <_svfprintf_r+0x52c>
 800858e:	9b08      	ldr	r3, [sp, #32]
 8008590:	2700      	movs	r7, #0
 8008592:	4499      	add	r9, r3
 8008594:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008596:	b113      	cbz	r3, 800859e <_svfprintf_r+0x536>
 8008598:	232d      	movs	r3, #45	; 0x2d
 800859a:	f88d 305f 	strb.w	r3, [sp, #95]	; 0x5f
 800859e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80085a0:	2600      	movs	r6, #0
 80085a2:	454e      	cmp	r6, r9
 80085a4:	4633      	mov	r3, r6
 80085a6:	bfb8      	it	lt
 80085a8:	464b      	movlt	r3, r9
 80085aa:	930b      	str	r3, [sp, #44]	; 0x2c
 80085ac:	f89d 305f 	ldrb.w	r3, [sp, #95]	; 0x5f
 80085b0:	b113      	cbz	r3, 80085b8 <_svfprintf_r+0x550>
 80085b2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80085b4:	3301      	adds	r3, #1
 80085b6:	930b      	str	r3, [sp, #44]	; 0x2c
 80085b8:	f015 0302 	ands.w	r3, r5, #2
 80085bc:	9314      	str	r3, [sp, #80]	; 0x50
 80085be:	bf1e      	ittt	ne
 80085c0:	9b0b      	ldrne	r3, [sp, #44]	; 0x2c
 80085c2:	3302      	addne	r3, #2
 80085c4:	930b      	strne	r3, [sp, #44]	; 0x2c
 80085c6:	f015 0384 	ands.w	r3, r5, #132	; 0x84
 80085ca:	9315      	str	r3, [sp, #84]	; 0x54
 80085cc:	d118      	bne.n	8008600 <_svfprintf_r+0x598>
 80085ce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80085d0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80085d2:	1a9b      	subs	r3, r3, r2
 80085d4:	2b00      	cmp	r3, #0
 80085d6:	930c      	str	r3, [sp, #48]	; 0x30
 80085d8:	dd12      	ble.n	8008600 <_svfprintf_r+0x598>
 80085da:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80085dc:	2b10      	cmp	r3, #16
 80085de:	4ba9      	ldr	r3, [pc, #676]	; (8008884 <_svfprintf_r+0x81c>)
 80085e0:	6023      	str	r3, [r4, #0]
 80085e2:	f300 81d5 	bgt.w	8008990 <_svfprintf_r+0x928>
 80085e6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80085e8:	6063      	str	r3, [r4, #4]
 80085ea:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80085ec:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80085ee:	4413      	add	r3, r2
 80085f0:	9321      	str	r3, [sp, #132]	; 0x84
 80085f2:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80085f4:	3301      	adds	r3, #1
 80085f6:	2b07      	cmp	r3, #7
 80085f8:	9320      	str	r3, [sp, #128]	; 0x80
 80085fa:	f300 81e2 	bgt.w	80089c2 <_svfprintf_r+0x95a>
 80085fe:	3408      	adds	r4, #8
 8008600:	f89d 305f 	ldrb.w	r3, [sp, #95]	; 0x5f
 8008604:	b173      	cbz	r3, 8008624 <_svfprintf_r+0x5bc>
 8008606:	f10d 035f 	add.w	r3, sp, #95	; 0x5f
 800860a:	6023      	str	r3, [r4, #0]
 800860c:	2301      	movs	r3, #1
 800860e:	6063      	str	r3, [r4, #4]
 8008610:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008612:	3301      	adds	r3, #1
 8008614:	9321      	str	r3, [sp, #132]	; 0x84
 8008616:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8008618:	3301      	adds	r3, #1
 800861a:	2b07      	cmp	r3, #7
 800861c:	9320      	str	r3, [sp, #128]	; 0x80
 800861e:	f300 81da 	bgt.w	80089d6 <_svfprintf_r+0x96e>
 8008622:	3408      	adds	r4, #8
 8008624:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008626:	b16b      	cbz	r3, 8008644 <_svfprintf_r+0x5dc>
 8008628:	ab18      	add	r3, sp, #96	; 0x60
 800862a:	6023      	str	r3, [r4, #0]
 800862c:	2302      	movs	r3, #2
 800862e:	6063      	str	r3, [r4, #4]
 8008630:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008632:	3302      	adds	r3, #2
 8008634:	9321      	str	r3, [sp, #132]	; 0x84
 8008636:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8008638:	3301      	adds	r3, #1
 800863a:	2b07      	cmp	r3, #7
 800863c:	9320      	str	r3, [sp, #128]	; 0x80
 800863e:	f300 81d4 	bgt.w	80089ea <_svfprintf_r+0x982>
 8008642:	3408      	adds	r4, #8
 8008644:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008646:	2b80      	cmp	r3, #128	; 0x80
 8008648:	d114      	bne.n	8008674 <_svfprintf_r+0x60c>
 800864a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800864c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800864e:	1a9b      	subs	r3, r3, r2
 8008650:	2b00      	cmp	r3, #0
 8008652:	dd0f      	ble.n	8008674 <_svfprintf_r+0x60c>
 8008654:	4a8c      	ldr	r2, [pc, #560]	; (8008888 <_svfprintf_r+0x820>)
 8008656:	6022      	str	r2, [r4, #0]
 8008658:	2b10      	cmp	r3, #16
 800865a:	f300 81d0 	bgt.w	80089fe <_svfprintf_r+0x996>
 800865e:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8008660:	6063      	str	r3, [r4, #4]
 8008662:	4413      	add	r3, r2
 8008664:	9321      	str	r3, [sp, #132]	; 0x84
 8008666:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8008668:	3301      	adds	r3, #1
 800866a:	2b07      	cmp	r3, #7
 800866c:	9320      	str	r3, [sp, #128]	; 0x80
 800866e:	f300 81df 	bgt.w	8008a30 <_svfprintf_r+0x9c8>
 8008672:	3408      	adds	r4, #8
 8008674:	eba6 0609 	sub.w	r6, r6, r9
 8008678:	2e00      	cmp	r6, #0
 800867a:	dd0f      	ble.n	800869c <_svfprintf_r+0x634>
 800867c:	4b82      	ldr	r3, [pc, #520]	; (8008888 <_svfprintf_r+0x820>)
 800867e:	6023      	str	r3, [r4, #0]
 8008680:	2e10      	cmp	r6, #16
 8008682:	f300 81df 	bgt.w	8008a44 <_svfprintf_r+0x9dc>
 8008686:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8008688:	9821      	ldr	r0, [sp, #132]	; 0x84
 800868a:	6066      	str	r6, [r4, #4]
 800868c:	3301      	adds	r3, #1
 800868e:	4406      	add	r6, r0
 8008690:	2b07      	cmp	r3, #7
 8008692:	9621      	str	r6, [sp, #132]	; 0x84
 8008694:	9320      	str	r3, [sp, #128]	; 0x80
 8008696:	f300 81ec 	bgt.w	8008a72 <_svfprintf_r+0xa0a>
 800869a:	3408      	adds	r4, #8
 800869c:	05eb      	lsls	r3, r5, #23
 800869e:	f100 81f2 	bmi.w	8008a86 <_svfprintf_r+0xa1e>
 80086a2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80086a4:	e884 0300 	stmia.w	r4, {r8, r9}
 80086a8:	444b      	add	r3, r9
 80086aa:	9321      	str	r3, [sp, #132]	; 0x84
 80086ac:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80086ae:	3301      	adds	r3, #1
 80086b0:	2b07      	cmp	r3, #7
 80086b2:	9320      	str	r3, [sp, #128]	; 0x80
 80086b4:	f340 8419 	ble.w	8008eea <_svfprintf_r+0xe82>
 80086b8:	aa1f      	add	r2, sp, #124	; 0x7c
 80086ba:	4651      	mov	r1, sl
 80086bc:	4658      	mov	r0, fp
 80086be:	f001 feff 	bl	800a4c0 <__ssprint_r>
 80086c2:	2800      	cmp	r0, #0
 80086c4:	f040 8431 	bne.w	8008f2a <_svfprintf_r+0xec2>
 80086c8:	ac2c      	add	r4, sp, #176	; 0xb0
 80086ca:	076b      	lsls	r3, r5, #29
 80086cc:	f100 8410 	bmi.w	8008ef0 <_svfprintf_r+0xe88>
 80086d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80086d2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80086d4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80086d6:	428a      	cmp	r2, r1
 80086d8:	bfac      	ite	ge
 80086da:	189b      	addge	r3, r3, r2
 80086dc:	185b      	addlt	r3, r3, r1
 80086de:	9309      	str	r3, [sp, #36]	; 0x24
 80086e0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80086e2:	b13b      	cbz	r3, 80086f4 <_svfprintf_r+0x68c>
 80086e4:	aa1f      	add	r2, sp, #124	; 0x7c
 80086e6:	4651      	mov	r1, sl
 80086e8:	4658      	mov	r0, fp
 80086ea:	f001 fee9 	bl	800a4c0 <__ssprint_r>
 80086ee:	2800      	cmp	r0, #0
 80086f0:	f040 841b 	bne.w	8008f2a <_svfprintf_r+0xec2>
 80086f4:	2300      	movs	r3, #0
 80086f6:	9320      	str	r3, [sp, #128]	; 0x80
 80086f8:	9f04      	ldr	r7, [sp, #16]
 80086fa:	ac2c      	add	r4, sp, #176	; 0xb0
 80086fc:	e4ee      	b.n	80080dc <_svfprintf_r+0x74>
 80086fe:	9b02      	ldr	r3, [sp, #8]
 8008700:	2b65      	cmp	r3, #101	; 0x65
 8008702:	f77f af0b 	ble.w	800851c <_svfprintf_r+0x4b4>
 8008706:	9b02      	ldr	r3, [sp, #8]
 8008708:	2b66      	cmp	r3, #102	; 0x66
 800870a:	d124      	bne.n	8008756 <_svfprintf_r+0x6ee>
 800870c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800870e:	2b00      	cmp	r3, #0
 8008710:	dd19      	ble.n	8008746 <_svfprintf_r+0x6de>
 8008712:	f1b9 0f00 	cmp.w	r9, #0
 8008716:	d101      	bne.n	800871c <_svfprintf_r+0x6b4>
 8008718:	07ea      	lsls	r2, r5, #31
 800871a:	d502      	bpl.n	8008722 <_svfprintf_r+0x6ba>
 800871c:	9a08      	ldr	r2, [sp, #32]
 800871e:	4413      	add	r3, r2
 8008720:	444b      	add	r3, r9
 8008722:	9f19      	ldr	r7, [sp, #100]	; 0x64
 8008724:	4699      	mov	r9, r3
 8008726:	e735      	b.n	8008594 <_svfprintf_r+0x52c>
 8008728:	460a      	mov	r2, r1
 800872a:	e70c      	b.n	8008546 <_svfprintf_r+0x4de>
 800872c:	f812 1b01 	ldrb.w	r1, [r2], #1
 8008730:	f803 1b01 	strb.w	r1, [r3], #1
 8008734:	e71c      	b.n	8008570 <_svfprintf_r+0x508>
 8008736:	2230      	movs	r2, #48	; 0x30
 8008738:	4413      	add	r3, r2
 800873a:	f88d 206e 	strb.w	r2, [sp, #110]	; 0x6e
 800873e:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
 8008742:	a91c      	add	r1, sp, #112	; 0x70
 8008744:	e718      	b.n	8008578 <_svfprintf_r+0x510>
 8008746:	f1b9 0f00 	cmp.w	r9, #0
 800874a:	d101      	bne.n	8008750 <_svfprintf_r+0x6e8>
 800874c:	07eb      	lsls	r3, r5, #31
 800874e:	d515      	bpl.n	800877c <_svfprintf_r+0x714>
 8008750:	9b08      	ldr	r3, [sp, #32]
 8008752:	3301      	adds	r3, #1
 8008754:	e7e4      	b.n	8008720 <_svfprintf_r+0x6b8>
 8008756:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8008758:	9b03      	ldr	r3, [sp, #12]
 800875a:	429a      	cmp	r2, r3
 800875c:	db06      	blt.n	800876c <_svfprintf_r+0x704>
 800875e:	07ef      	lsls	r7, r5, #31
 8008760:	d50e      	bpl.n	8008780 <_svfprintf_r+0x718>
 8008762:	9b08      	ldr	r3, [sp, #32]
 8008764:	4413      	add	r3, r2
 8008766:	2267      	movs	r2, #103	; 0x67
 8008768:	9202      	str	r2, [sp, #8]
 800876a:	e7da      	b.n	8008722 <_svfprintf_r+0x6ba>
 800876c:	9b03      	ldr	r3, [sp, #12]
 800876e:	9908      	ldr	r1, [sp, #32]
 8008770:	2a00      	cmp	r2, #0
 8008772:	440b      	add	r3, r1
 8008774:	dcf7      	bgt.n	8008766 <_svfprintf_r+0x6fe>
 8008776:	f1c2 0201 	rsb	r2, r2, #1
 800877a:	e7f3      	b.n	8008764 <_svfprintf_r+0x6fc>
 800877c:	2301      	movs	r3, #1
 800877e:	e7d0      	b.n	8008722 <_svfprintf_r+0x6ba>
 8008780:	4613      	mov	r3, r2
 8008782:	e7f0      	b.n	8008766 <_svfprintf_r+0x6fe>
 8008784:	b10b      	cbz	r3, 800878a <_svfprintf_r+0x722>
 8008786:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 800878a:	f015 0f20 	tst.w	r5, #32
 800878e:	f107 0304 	add.w	r3, r7, #4
 8008792:	d008      	beq.n	80087a6 <_svfprintf_r+0x73e>
 8008794:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008796:	683a      	ldr	r2, [r7, #0]
 8008798:	17ce      	asrs	r6, r1, #31
 800879a:	4608      	mov	r0, r1
 800879c:	4631      	mov	r1, r6
 800879e:	e9c2 0100 	strd	r0, r1, [r2]
 80087a2:	461f      	mov	r7, r3
 80087a4:	e49a      	b.n	80080dc <_svfprintf_r+0x74>
 80087a6:	06ee      	lsls	r6, r5, #27
 80087a8:	d503      	bpl.n	80087b2 <_svfprintf_r+0x74a>
 80087aa:	683a      	ldr	r2, [r7, #0]
 80087ac:	9909      	ldr	r1, [sp, #36]	; 0x24
 80087ae:	6011      	str	r1, [r2, #0]
 80087b0:	e7f7      	b.n	80087a2 <_svfprintf_r+0x73a>
 80087b2:	0668      	lsls	r0, r5, #25
 80087b4:	d5f9      	bpl.n	80087aa <_svfprintf_r+0x742>
 80087b6:	683a      	ldr	r2, [r7, #0]
 80087b8:	f8bd 1024 	ldrh.w	r1, [sp, #36]	; 0x24
 80087bc:	8011      	strh	r1, [r2, #0]
 80087be:	e7f0      	b.n	80087a2 <_svfprintf_r+0x73a>
 80087c0:	f045 0510 	orr.w	r5, r5, #16
 80087c4:	f015 0320 	ands.w	r3, r5, #32
 80087c8:	d022      	beq.n	8008810 <_svfprintf_r+0x7a8>
 80087ca:	3707      	adds	r7, #7
 80087cc:	f027 0707 	bic.w	r7, r7, #7
 80087d0:	f107 0308 	add.w	r3, r7, #8
 80087d4:	e9d7 6700 	ldrd	r6, r7, [r7]
 80087d8:	9304      	str	r3, [sp, #16]
 80087da:	2300      	movs	r3, #0
 80087dc:	2200      	movs	r2, #0
 80087de:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 80087e2:	f1b9 3fff 	cmp.w	r9, #4294967295
 80087e6:	f000 83db 	beq.w	8008fa0 <_svfprintf_r+0xf38>
 80087ea:	f025 0280 	bic.w	r2, r5, #128	; 0x80
 80087ee:	920b      	str	r2, [sp, #44]	; 0x2c
 80087f0:	ea56 0207 	orrs.w	r2, r6, r7
 80087f4:	f040 83d9 	bne.w	8008faa <_svfprintf_r+0xf42>
 80087f8:	f1b9 0f00 	cmp.w	r9, #0
 80087fc:	f000 80aa 	beq.w	8008954 <_svfprintf_r+0x8ec>
 8008800:	2b01      	cmp	r3, #1
 8008802:	d076      	beq.n	80088f2 <_svfprintf_r+0x88a>
 8008804:	2b02      	cmp	r3, #2
 8008806:	f000 8091 	beq.w	800892c <_svfprintf_r+0x8c4>
 800880a:	2600      	movs	r6, #0
 800880c:	2700      	movs	r7, #0
 800880e:	e3d2      	b.n	8008fb6 <_svfprintf_r+0xf4e>
 8008810:	1d3a      	adds	r2, r7, #4
 8008812:	f015 0110 	ands.w	r1, r5, #16
 8008816:	9204      	str	r2, [sp, #16]
 8008818:	d002      	beq.n	8008820 <_svfprintf_r+0x7b8>
 800881a:	683e      	ldr	r6, [r7, #0]
 800881c:	2700      	movs	r7, #0
 800881e:	e7dd      	b.n	80087dc <_svfprintf_r+0x774>
 8008820:	f015 0340 	ands.w	r3, r5, #64	; 0x40
 8008824:	d0f9      	beq.n	800881a <_svfprintf_r+0x7b2>
 8008826:	883e      	ldrh	r6, [r7, #0]
 8008828:	2700      	movs	r7, #0
 800882a:	e7d6      	b.n	80087da <_svfprintf_r+0x772>
 800882c:	1d3b      	adds	r3, r7, #4
 800882e:	9304      	str	r3, [sp, #16]
 8008830:	2330      	movs	r3, #48	; 0x30
 8008832:	2278      	movs	r2, #120	; 0x78
 8008834:	f88d 3060 	strb.w	r3, [sp, #96]	; 0x60
 8008838:	4b14      	ldr	r3, [pc, #80]	; (800888c <_svfprintf_r+0x824>)
 800883a:	683e      	ldr	r6, [r7, #0]
 800883c:	9311      	str	r3, [sp, #68]	; 0x44
 800883e:	2700      	movs	r7, #0
 8008840:	f045 0502 	orr.w	r5, r5, #2
 8008844:	f88d 2061 	strb.w	r2, [sp, #97]	; 0x61
 8008848:	2302      	movs	r3, #2
 800884a:	9202      	str	r2, [sp, #8]
 800884c:	e7c6      	b.n	80087dc <_svfprintf_r+0x774>
 800884e:	1d3b      	adds	r3, r7, #4
 8008850:	2600      	movs	r6, #0
 8008852:	f1b9 3fff 	cmp.w	r9, #4294967295
 8008856:	9304      	str	r3, [sp, #16]
 8008858:	f8d7 8000 	ldr.w	r8, [r7]
 800885c:	f88d 605f 	strb.w	r6, [sp, #95]	; 0x5f
 8008860:	d00a      	beq.n	8008878 <_svfprintf_r+0x810>
 8008862:	464a      	mov	r2, r9
 8008864:	4631      	mov	r1, r6
 8008866:	4640      	mov	r0, r8
 8008868:	f7f7 fcb2 	bl	80001d0 <memchr>
 800886c:	2800      	cmp	r0, #0
 800886e:	f000 808d 	beq.w	800898c <_svfprintf_r+0x924>
 8008872:	eba0 0908 	sub.w	r9, r0, r8
 8008876:	e5cb      	b.n	8008410 <_svfprintf_r+0x3a8>
 8008878:	4640      	mov	r0, r8
 800887a:	f7f7 fcf9 	bl	8000270 <strlen>
 800887e:	4681      	mov	r9, r0
 8008880:	e5c6      	b.n	8008410 <_svfprintf_r+0x3a8>
 8008882:	bf00      	nop
 8008884:	0800d861 	.word	0x0800d861
 8008888:	0800d871 	.word	0x0800d871
 800888c:	0800d850 	.word	0x0800d850
 8008890:	f045 0510 	orr.w	r5, r5, #16
 8008894:	06a9      	lsls	r1, r5, #26
 8008896:	d509      	bpl.n	80088ac <_svfprintf_r+0x844>
 8008898:	3707      	adds	r7, #7
 800889a:	f027 0707 	bic.w	r7, r7, #7
 800889e:	f107 0308 	add.w	r3, r7, #8
 80088a2:	e9d7 6700 	ldrd	r6, r7, [r7]
 80088a6:	9304      	str	r3, [sp, #16]
 80088a8:	2301      	movs	r3, #1
 80088aa:	e797      	b.n	80087dc <_svfprintf_r+0x774>
 80088ac:	1d3b      	adds	r3, r7, #4
 80088ae:	f015 0f10 	tst.w	r5, #16
 80088b2:	9304      	str	r3, [sp, #16]
 80088b4:	d001      	beq.n	80088ba <_svfprintf_r+0x852>
 80088b6:	683e      	ldr	r6, [r7, #0]
 80088b8:	e002      	b.n	80088c0 <_svfprintf_r+0x858>
 80088ba:	066a      	lsls	r2, r5, #25
 80088bc:	d5fb      	bpl.n	80088b6 <_svfprintf_r+0x84e>
 80088be:	883e      	ldrh	r6, [r7, #0]
 80088c0:	2700      	movs	r7, #0
 80088c2:	e7f1      	b.n	80088a8 <_svfprintf_r+0x840>
 80088c4:	b10b      	cbz	r3, 80088ca <_svfprintf_r+0x862>
 80088c6:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 80088ca:	4ba3      	ldr	r3, [pc, #652]	; (8008b58 <_svfprintf_r+0xaf0>)
 80088cc:	e4c2      	b.n	8008254 <_svfprintf_r+0x1ec>
 80088ce:	1d3b      	adds	r3, r7, #4
 80088d0:	f015 0f10 	tst.w	r5, #16
 80088d4:	9304      	str	r3, [sp, #16]
 80088d6:	d001      	beq.n	80088dc <_svfprintf_r+0x874>
 80088d8:	683e      	ldr	r6, [r7, #0]
 80088da:	e002      	b.n	80088e2 <_svfprintf_r+0x87a>
 80088dc:	066e      	lsls	r6, r5, #25
 80088de:	d5fb      	bpl.n	80088d8 <_svfprintf_r+0x870>
 80088e0:	883e      	ldrh	r6, [r7, #0]
 80088e2:	2700      	movs	r7, #0
 80088e4:	e4c2      	b.n	800826c <_svfprintf_r+0x204>
 80088e6:	4643      	mov	r3, r8
 80088e8:	e366      	b.n	8008fb8 <_svfprintf_r+0xf50>
 80088ea:	2f00      	cmp	r7, #0
 80088ec:	bf08      	it	eq
 80088ee:	2e0a      	cmpeq	r6, #10
 80088f0:	d205      	bcs.n	80088fe <_svfprintf_r+0x896>
 80088f2:	f10d 08f0 	add.w	r8, sp, #240	; 0xf0
 80088f6:	3630      	adds	r6, #48	; 0x30
 80088f8:	f808 6d41 	strb.w	r6, [r8, #-65]!
 80088fc:	e377      	b.n	8008fee <_svfprintf_r+0xf86>
 80088fe:	f10d 08b0 	add.w	r8, sp, #176	; 0xb0
 8008902:	4630      	mov	r0, r6
 8008904:	4639      	mov	r1, r7
 8008906:	220a      	movs	r2, #10
 8008908:	2300      	movs	r3, #0
 800890a:	f7f8 f9b9 	bl	8000c80 <__aeabi_uldivmod>
 800890e:	3230      	adds	r2, #48	; 0x30
 8008910:	f808 2d01 	strb.w	r2, [r8, #-1]!
 8008914:	2300      	movs	r3, #0
 8008916:	4630      	mov	r0, r6
 8008918:	4639      	mov	r1, r7
 800891a:	220a      	movs	r2, #10
 800891c:	f7f8 f9b0 	bl	8000c80 <__aeabi_uldivmod>
 8008920:	4606      	mov	r6, r0
 8008922:	460f      	mov	r7, r1
 8008924:	ea56 0307 	orrs.w	r3, r6, r7
 8008928:	d1eb      	bne.n	8008902 <_svfprintf_r+0x89a>
 800892a:	e360      	b.n	8008fee <_svfprintf_r+0xf86>
 800892c:	2600      	movs	r6, #0
 800892e:	2700      	movs	r7, #0
 8008930:	f10d 08b0 	add.w	r8, sp, #176	; 0xb0
 8008934:	f006 030f 	and.w	r3, r6, #15
 8008938:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800893a:	5cd3      	ldrb	r3, [r2, r3]
 800893c:	f808 3d01 	strb.w	r3, [r8, #-1]!
 8008940:	0933      	lsrs	r3, r6, #4
 8008942:	ea43 7307 	orr.w	r3, r3, r7, lsl #28
 8008946:	093a      	lsrs	r2, r7, #4
 8008948:	461e      	mov	r6, r3
 800894a:	4617      	mov	r7, r2
 800894c:	ea56 0307 	orrs.w	r3, r6, r7
 8008950:	d1f0      	bne.n	8008934 <_svfprintf_r+0x8cc>
 8008952:	e34c      	b.n	8008fee <_svfprintf_r+0xf86>
 8008954:	b93b      	cbnz	r3, 8008966 <_svfprintf_r+0x8fe>
 8008956:	07ea      	lsls	r2, r5, #31
 8008958:	d505      	bpl.n	8008966 <_svfprintf_r+0x8fe>
 800895a:	f10d 08f0 	add.w	r8, sp, #240	; 0xf0
 800895e:	2330      	movs	r3, #48	; 0x30
 8008960:	f808 3d41 	strb.w	r3, [r8, #-65]!
 8008964:	e343      	b.n	8008fee <_svfprintf_r+0xf86>
 8008966:	f10d 08b0 	add.w	r8, sp, #176	; 0xb0
 800896a:	e340      	b.n	8008fee <_svfprintf_r+0xf86>
 800896c:	b10b      	cbz	r3, 8008972 <_svfprintf_r+0x90a>
 800896e:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 8008972:	9b02      	ldr	r3, [sp, #8]
 8008974:	2b00      	cmp	r3, #0
 8008976:	f000 82f7 	beq.w	8008f68 <_svfprintf_r+0xf00>
 800897a:	f89d 3008 	ldrb.w	r3, [sp, #8]
 800897e:	f88d 3088 	strb.w	r3, [sp, #136]	; 0x88
 8008982:	2600      	movs	r6, #0
 8008984:	f88d 605f 	strb.w	r6, [sp, #95]	; 0x5f
 8008988:	9704      	str	r7, [sp, #16]
 800898a:	e4e8      	b.n	800835e <_svfprintf_r+0x2f6>
 800898c:	4606      	mov	r6, r0
 800898e:	e53f      	b.n	8008410 <_svfprintf_r+0x3a8>
 8008990:	2310      	movs	r3, #16
 8008992:	6063      	str	r3, [r4, #4]
 8008994:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008996:	3310      	adds	r3, #16
 8008998:	9321      	str	r3, [sp, #132]	; 0x84
 800899a:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800899c:	3301      	adds	r3, #1
 800899e:	2b07      	cmp	r3, #7
 80089a0:	9320      	str	r3, [sp, #128]	; 0x80
 80089a2:	dc04      	bgt.n	80089ae <_svfprintf_r+0x946>
 80089a4:	3408      	adds	r4, #8
 80089a6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80089a8:	3b10      	subs	r3, #16
 80089aa:	930c      	str	r3, [sp, #48]	; 0x30
 80089ac:	e615      	b.n	80085da <_svfprintf_r+0x572>
 80089ae:	aa1f      	add	r2, sp, #124	; 0x7c
 80089b0:	4651      	mov	r1, sl
 80089b2:	4658      	mov	r0, fp
 80089b4:	f001 fd84 	bl	800a4c0 <__ssprint_r>
 80089b8:	2800      	cmp	r0, #0
 80089ba:	f040 82b6 	bne.w	8008f2a <_svfprintf_r+0xec2>
 80089be:	ac2c      	add	r4, sp, #176	; 0xb0
 80089c0:	e7f1      	b.n	80089a6 <_svfprintf_r+0x93e>
 80089c2:	aa1f      	add	r2, sp, #124	; 0x7c
 80089c4:	4651      	mov	r1, sl
 80089c6:	4658      	mov	r0, fp
 80089c8:	f001 fd7a 	bl	800a4c0 <__ssprint_r>
 80089cc:	2800      	cmp	r0, #0
 80089ce:	f040 82ac 	bne.w	8008f2a <_svfprintf_r+0xec2>
 80089d2:	ac2c      	add	r4, sp, #176	; 0xb0
 80089d4:	e614      	b.n	8008600 <_svfprintf_r+0x598>
 80089d6:	aa1f      	add	r2, sp, #124	; 0x7c
 80089d8:	4651      	mov	r1, sl
 80089da:	4658      	mov	r0, fp
 80089dc:	f001 fd70 	bl	800a4c0 <__ssprint_r>
 80089e0:	2800      	cmp	r0, #0
 80089e2:	f040 82a2 	bne.w	8008f2a <_svfprintf_r+0xec2>
 80089e6:	ac2c      	add	r4, sp, #176	; 0xb0
 80089e8:	e61c      	b.n	8008624 <_svfprintf_r+0x5bc>
 80089ea:	aa1f      	add	r2, sp, #124	; 0x7c
 80089ec:	4651      	mov	r1, sl
 80089ee:	4658      	mov	r0, fp
 80089f0:	f001 fd66 	bl	800a4c0 <__ssprint_r>
 80089f4:	2800      	cmp	r0, #0
 80089f6:	f040 8298 	bne.w	8008f2a <_svfprintf_r+0xec2>
 80089fa:	ac2c      	add	r4, sp, #176	; 0xb0
 80089fc:	e622      	b.n	8008644 <_svfprintf_r+0x5dc>
 80089fe:	2210      	movs	r2, #16
 8008a00:	6062      	str	r2, [r4, #4]
 8008a02:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8008a04:	3210      	adds	r2, #16
 8008a06:	9221      	str	r2, [sp, #132]	; 0x84
 8008a08:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8008a0a:	3201      	adds	r2, #1
 8008a0c:	2a07      	cmp	r2, #7
 8008a0e:	9220      	str	r2, [sp, #128]	; 0x80
 8008a10:	dc02      	bgt.n	8008a18 <_svfprintf_r+0x9b0>
 8008a12:	3408      	adds	r4, #8
 8008a14:	3b10      	subs	r3, #16
 8008a16:	e61d      	b.n	8008654 <_svfprintf_r+0x5ec>
 8008a18:	aa1f      	add	r2, sp, #124	; 0x7c
 8008a1a:	4651      	mov	r1, sl
 8008a1c:	4658      	mov	r0, fp
 8008a1e:	930c      	str	r3, [sp, #48]	; 0x30
 8008a20:	f001 fd4e 	bl	800a4c0 <__ssprint_r>
 8008a24:	2800      	cmp	r0, #0
 8008a26:	f040 8280 	bne.w	8008f2a <_svfprintf_r+0xec2>
 8008a2a:	ac2c      	add	r4, sp, #176	; 0xb0
 8008a2c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008a2e:	e7f1      	b.n	8008a14 <_svfprintf_r+0x9ac>
 8008a30:	aa1f      	add	r2, sp, #124	; 0x7c
 8008a32:	4651      	mov	r1, sl
 8008a34:	4658      	mov	r0, fp
 8008a36:	f001 fd43 	bl	800a4c0 <__ssprint_r>
 8008a3a:	2800      	cmp	r0, #0
 8008a3c:	f040 8275 	bne.w	8008f2a <_svfprintf_r+0xec2>
 8008a40:	ac2c      	add	r4, sp, #176	; 0xb0
 8008a42:	e617      	b.n	8008674 <_svfprintf_r+0x60c>
 8008a44:	2310      	movs	r3, #16
 8008a46:	6063      	str	r3, [r4, #4]
 8008a48:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008a4a:	3310      	adds	r3, #16
 8008a4c:	9321      	str	r3, [sp, #132]	; 0x84
 8008a4e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8008a50:	3301      	adds	r3, #1
 8008a52:	2b07      	cmp	r3, #7
 8008a54:	9320      	str	r3, [sp, #128]	; 0x80
 8008a56:	dc02      	bgt.n	8008a5e <_svfprintf_r+0x9f6>
 8008a58:	3408      	adds	r4, #8
 8008a5a:	3e10      	subs	r6, #16
 8008a5c:	e60e      	b.n	800867c <_svfprintf_r+0x614>
 8008a5e:	aa1f      	add	r2, sp, #124	; 0x7c
 8008a60:	4651      	mov	r1, sl
 8008a62:	4658      	mov	r0, fp
 8008a64:	f001 fd2c 	bl	800a4c0 <__ssprint_r>
 8008a68:	2800      	cmp	r0, #0
 8008a6a:	f040 825e 	bne.w	8008f2a <_svfprintf_r+0xec2>
 8008a6e:	ac2c      	add	r4, sp, #176	; 0xb0
 8008a70:	e7f3      	b.n	8008a5a <_svfprintf_r+0x9f2>
 8008a72:	aa1f      	add	r2, sp, #124	; 0x7c
 8008a74:	4651      	mov	r1, sl
 8008a76:	4658      	mov	r0, fp
 8008a78:	f001 fd22 	bl	800a4c0 <__ssprint_r>
 8008a7c:	2800      	cmp	r0, #0
 8008a7e:	f040 8254 	bne.w	8008f2a <_svfprintf_r+0xec2>
 8008a82:	ac2c      	add	r4, sp, #176	; 0xb0
 8008a84:	e60a      	b.n	800869c <_svfprintf_r+0x634>
 8008a86:	9b02      	ldr	r3, [sp, #8]
 8008a88:	2b65      	cmp	r3, #101	; 0x65
 8008a8a:	f340 81a9 	ble.w	8008de0 <_svfprintf_r+0xd78>
 8008a8e:	2200      	movs	r2, #0
 8008a90:	2300      	movs	r3, #0
 8008a92:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008a96:	f7f8 f813 	bl	8000ac0 <__aeabi_dcmpeq>
 8008a9a:	2800      	cmp	r0, #0
 8008a9c:	d062      	beq.n	8008b64 <_svfprintf_r+0xafc>
 8008a9e:	4b2f      	ldr	r3, [pc, #188]	; (8008b5c <_svfprintf_r+0xaf4>)
 8008aa0:	6023      	str	r3, [r4, #0]
 8008aa2:	2301      	movs	r3, #1
 8008aa4:	6063      	str	r3, [r4, #4]
 8008aa6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008aa8:	3301      	adds	r3, #1
 8008aaa:	9321      	str	r3, [sp, #132]	; 0x84
 8008aac:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8008aae:	3301      	adds	r3, #1
 8008ab0:	2b07      	cmp	r3, #7
 8008ab2:	9320      	str	r3, [sp, #128]	; 0x80
 8008ab4:	dc25      	bgt.n	8008b02 <_svfprintf_r+0xa9a>
 8008ab6:	3408      	adds	r4, #8
 8008ab8:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008aba:	9a03      	ldr	r2, [sp, #12]
 8008abc:	4293      	cmp	r3, r2
 8008abe:	db02      	blt.n	8008ac6 <_svfprintf_r+0xa5e>
 8008ac0:	07ee      	lsls	r6, r5, #31
 8008ac2:	f57f ae02 	bpl.w	80086ca <_svfprintf_r+0x662>
 8008ac6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008ac8:	6023      	str	r3, [r4, #0]
 8008aca:	9b08      	ldr	r3, [sp, #32]
 8008acc:	6063      	str	r3, [r4, #4]
 8008ace:	9a08      	ldr	r2, [sp, #32]
 8008ad0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008ad2:	4413      	add	r3, r2
 8008ad4:	9321      	str	r3, [sp, #132]	; 0x84
 8008ad6:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8008ad8:	3301      	adds	r3, #1
 8008ada:	2b07      	cmp	r3, #7
 8008adc:	9320      	str	r3, [sp, #128]	; 0x80
 8008ade:	dc1a      	bgt.n	8008b16 <_svfprintf_r+0xaae>
 8008ae0:	3408      	adds	r4, #8
 8008ae2:	9b03      	ldr	r3, [sp, #12]
 8008ae4:	1e5e      	subs	r6, r3, #1
 8008ae6:	2e00      	cmp	r6, #0
 8008ae8:	f77f adef 	ble.w	80086ca <_svfprintf_r+0x662>
 8008aec:	4f1c      	ldr	r7, [pc, #112]	; (8008b60 <_svfprintf_r+0xaf8>)
 8008aee:	f04f 0810 	mov.w	r8, #16
 8008af2:	2e10      	cmp	r6, #16
 8008af4:	6027      	str	r7, [r4, #0]
 8008af6:	dc18      	bgt.n	8008b2a <_svfprintf_r+0xac2>
 8008af8:	6066      	str	r6, [r4, #4]
 8008afa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008afc:	441e      	add	r6, r3
 8008afe:	9621      	str	r6, [sp, #132]	; 0x84
 8008b00:	e5d4      	b.n	80086ac <_svfprintf_r+0x644>
 8008b02:	aa1f      	add	r2, sp, #124	; 0x7c
 8008b04:	4651      	mov	r1, sl
 8008b06:	4658      	mov	r0, fp
 8008b08:	f001 fcda 	bl	800a4c0 <__ssprint_r>
 8008b0c:	2800      	cmp	r0, #0
 8008b0e:	f040 820c 	bne.w	8008f2a <_svfprintf_r+0xec2>
 8008b12:	ac2c      	add	r4, sp, #176	; 0xb0
 8008b14:	e7d0      	b.n	8008ab8 <_svfprintf_r+0xa50>
 8008b16:	aa1f      	add	r2, sp, #124	; 0x7c
 8008b18:	4651      	mov	r1, sl
 8008b1a:	4658      	mov	r0, fp
 8008b1c:	f001 fcd0 	bl	800a4c0 <__ssprint_r>
 8008b20:	2800      	cmp	r0, #0
 8008b22:	f040 8202 	bne.w	8008f2a <_svfprintf_r+0xec2>
 8008b26:	ac2c      	add	r4, sp, #176	; 0xb0
 8008b28:	e7db      	b.n	8008ae2 <_svfprintf_r+0xa7a>
 8008b2a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008b2c:	f8c4 8004 	str.w	r8, [r4, #4]
 8008b30:	3310      	adds	r3, #16
 8008b32:	9321      	str	r3, [sp, #132]	; 0x84
 8008b34:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8008b36:	3301      	adds	r3, #1
 8008b38:	2b07      	cmp	r3, #7
 8008b3a:	9320      	str	r3, [sp, #128]	; 0x80
 8008b3c:	dc02      	bgt.n	8008b44 <_svfprintf_r+0xadc>
 8008b3e:	3408      	adds	r4, #8
 8008b40:	3e10      	subs	r6, #16
 8008b42:	e7d6      	b.n	8008af2 <_svfprintf_r+0xa8a>
 8008b44:	aa1f      	add	r2, sp, #124	; 0x7c
 8008b46:	4651      	mov	r1, sl
 8008b48:	4658      	mov	r0, fp
 8008b4a:	f001 fcb9 	bl	800a4c0 <__ssprint_r>
 8008b4e:	2800      	cmp	r0, #0
 8008b50:	f040 81eb 	bne.w	8008f2a <_svfprintf_r+0xec2>
 8008b54:	ac2c      	add	r4, sp, #176	; 0xb0
 8008b56:	e7f3      	b.n	8008b40 <_svfprintf_r+0xad8>
 8008b58:	0800d850 	.word	0x0800d850
 8008b5c:	0800da99 	.word	0x0800da99
 8008b60:	0800d871 	.word	0x0800d871
 8008b64:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008b66:	2b00      	cmp	r3, #0
 8008b68:	dc7a      	bgt.n	8008c60 <_svfprintf_r+0xbf8>
 8008b6a:	4b9b      	ldr	r3, [pc, #620]	; (8008dd8 <_svfprintf_r+0xd70>)
 8008b6c:	6023      	str	r3, [r4, #0]
 8008b6e:	2301      	movs	r3, #1
 8008b70:	6063      	str	r3, [r4, #4]
 8008b72:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008b74:	3301      	adds	r3, #1
 8008b76:	9321      	str	r3, [sp, #132]	; 0x84
 8008b78:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8008b7a:	3301      	adds	r3, #1
 8008b7c:	2b07      	cmp	r3, #7
 8008b7e:	9320      	str	r3, [sp, #128]	; 0x80
 8008b80:	dc44      	bgt.n	8008c0c <_svfprintf_r+0xba4>
 8008b82:	3408      	adds	r4, #8
 8008b84:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008b86:	b923      	cbnz	r3, 8008b92 <_svfprintf_r+0xb2a>
 8008b88:	9b03      	ldr	r3, [sp, #12]
 8008b8a:	b913      	cbnz	r3, 8008b92 <_svfprintf_r+0xb2a>
 8008b8c:	07e8      	lsls	r0, r5, #31
 8008b8e:	f57f ad9c 	bpl.w	80086ca <_svfprintf_r+0x662>
 8008b92:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008b94:	6023      	str	r3, [r4, #0]
 8008b96:	9b08      	ldr	r3, [sp, #32]
 8008b98:	6063      	str	r3, [r4, #4]
 8008b9a:	9a08      	ldr	r2, [sp, #32]
 8008b9c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008b9e:	4413      	add	r3, r2
 8008ba0:	9321      	str	r3, [sp, #132]	; 0x84
 8008ba2:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8008ba4:	3301      	adds	r3, #1
 8008ba6:	2b07      	cmp	r3, #7
 8008ba8:	9320      	str	r3, [sp, #128]	; 0x80
 8008baa:	dc39      	bgt.n	8008c20 <_svfprintf_r+0xbb8>
 8008bac:	f104 0308 	add.w	r3, r4, #8
 8008bb0:	9e19      	ldr	r6, [sp, #100]	; 0x64
 8008bb2:	2e00      	cmp	r6, #0
 8008bb4:	da19      	bge.n	8008bea <_svfprintf_r+0xb82>
 8008bb6:	4f89      	ldr	r7, [pc, #548]	; (8008ddc <_svfprintf_r+0xd74>)
 8008bb8:	4276      	negs	r6, r6
 8008bba:	2410      	movs	r4, #16
 8008bbc:	2e10      	cmp	r6, #16
 8008bbe:	601f      	str	r7, [r3, #0]
 8008bc0:	dc38      	bgt.n	8008c34 <_svfprintf_r+0xbcc>
 8008bc2:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8008bc4:	605e      	str	r6, [r3, #4]
 8008bc6:	4416      	add	r6, r2
 8008bc8:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8008bca:	9621      	str	r6, [sp, #132]	; 0x84
 8008bcc:	3201      	adds	r2, #1
 8008bce:	2a07      	cmp	r2, #7
 8008bd0:	f103 0308 	add.w	r3, r3, #8
 8008bd4:	9220      	str	r2, [sp, #128]	; 0x80
 8008bd6:	dd08      	ble.n	8008bea <_svfprintf_r+0xb82>
 8008bd8:	aa1f      	add	r2, sp, #124	; 0x7c
 8008bda:	4651      	mov	r1, sl
 8008bdc:	4658      	mov	r0, fp
 8008bde:	f001 fc6f 	bl	800a4c0 <__ssprint_r>
 8008be2:	2800      	cmp	r0, #0
 8008be4:	f040 81a1 	bne.w	8008f2a <_svfprintf_r+0xec2>
 8008be8:	ab2c      	add	r3, sp, #176	; 0xb0
 8008bea:	9a03      	ldr	r2, [sp, #12]
 8008bec:	605a      	str	r2, [r3, #4]
 8008bee:	9903      	ldr	r1, [sp, #12]
 8008bf0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8008bf2:	f8c3 8000 	str.w	r8, [r3]
 8008bf6:	440a      	add	r2, r1
 8008bf8:	9221      	str	r2, [sp, #132]	; 0x84
 8008bfa:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8008bfc:	3201      	adds	r2, #1
 8008bfe:	2a07      	cmp	r2, #7
 8008c00:	9220      	str	r2, [sp, #128]	; 0x80
 8008c02:	f73f ad59 	bgt.w	80086b8 <_svfprintf_r+0x650>
 8008c06:	f103 0408 	add.w	r4, r3, #8
 8008c0a:	e55e      	b.n	80086ca <_svfprintf_r+0x662>
 8008c0c:	aa1f      	add	r2, sp, #124	; 0x7c
 8008c0e:	4651      	mov	r1, sl
 8008c10:	4658      	mov	r0, fp
 8008c12:	f001 fc55 	bl	800a4c0 <__ssprint_r>
 8008c16:	2800      	cmp	r0, #0
 8008c18:	f040 8187 	bne.w	8008f2a <_svfprintf_r+0xec2>
 8008c1c:	ac2c      	add	r4, sp, #176	; 0xb0
 8008c1e:	e7b1      	b.n	8008b84 <_svfprintf_r+0xb1c>
 8008c20:	aa1f      	add	r2, sp, #124	; 0x7c
 8008c22:	4651      	mov	r1, sl
 8008c24:	4658      	mov	r0, fp
 8008c26:	f001 fc4b 	bl	800a4c0 <__ssprint_r>
 8008c2a:	2800      	cmp	r0, #0
 8008c2c:	f040 817d 	bne.w	8008f2a <_svfprintf_r+0xec2>
 8008c30:	ab2c      	add	r3, sp, #176	; 0xb0
 8008c32:	e7bd      	b.n	8008bb0 <_svfprintf_r+0xb48>
 8008c34:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8008c36:	605c      	str	r4, [r3, #4]
 8008c38:	3210      	adds	r2, #16
 8008c3a:	9221      	str	r2, [sp, #132]	; 0x84
 8008c3c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8008c3e:	3201      	adds	r2, #1
 8008c40:	2a07      	cmp	r2, #7
 8008c42:	9220      	str	r2, [sp, #128]	; 0x80
 8008c44:	dc02      	bgt.n	8008c4c <_svfprintf_r+0xbe4>
 8008c46:	3308      	adds	r3, #8
 8008c48:	3e10      	subs	r6, #16
 8008c4a:	e7b7      	b.n	8008bbc <_svfprintf_r+0xb54>
 8008c4c:	aa1f      	add	r2, sp, #124	; 0x7c
 8008c4e:	4651      	mov	r1, sl
 8008c50:	4658      	mov	r0, fp
 8008c52:	f001 fc35 	bl	800a4c0 <__ssprint_r>
 8008c56:	2800      	cmp	r0, #0
 8008c58:	f040 8167 	bne.w	8008f2a <_svfprintf_r+0xec2>
 8008c5c:	ab2c      	add	r3, sp, #176	; 0xb0
 8008c5e:	e7f3      	b.n	8008c48 <_svfprintf_r+0xbe0>
 8008c60:	9b03      	ldr	r3, [sp, #12]
 8008c62:	42bb      	cmp	r3, r7
 8008c64:	bfa8      	it	ge
 8008c66:	463b      	movge	r3, r7
 8008c68:	2b00      	cmp	r3, #0
 8008c6a:	461e      	mov	r6, r3
 8008c6c:	dd0b      	ble.n	8008c86 <_svfprintf_r+0xc1e>
 8008c6e:	6063      	str	r3, [r4, #4]
 8008c70:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008c72:	f8c4 8000 	str.w	r8, [r4]
 8008c76:	4433      	add	r3, r6
 8008c78:	9321      	str	r3, [sp, #132]	; 0x84
 8008c7a:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8008c7c:	3301      	adds	r3, #1
 8008c7e:	2b07      	cmp	r3, #7
 8008c80:	9320      	str	r3, [sp, #128]	; 0x80
 8008c82:	dc5f      	bgt.n	8008d44 <_svfprintf_r+0xcdc>
 8008c84:	3408      	adds	r4, #8
 8008c86:	2e00      	cmp	r6, #0
 8008c88:	bfac      	ite	ge
 8008c8a:	1bbe      	subge	r6, r7, r6
 8008c8c:	463e      	movlt	r6, r7
 8008c8e:	2e00      	cmp	r6, #0
 8008c90:	dd0f      	ble.n	8008cb2 <_svfprintf_r+0xc4a>
 8008c92:	f8df 9148 	ldr.w	r9, [pc, #328]	; 8008ddc <_svfprintf_r+0xd74>
 8008c96:	f8c4 9000 	str.w	r9, [r4]
 8008c9a:	2e10      	cmp	r6, #16
 8008c9c:	dc5c      	bgt.n	8008d58 <_svfprintf_r+0xcf0>
 8008c9e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008ca0:	6066      	str	r6, [r4, #4]
 8008ca2:	441e      	add	r6, r3
 8008ca4:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8008ca6:	9621      	str	r6, [sp, #132]	; 0x84
 8008ca8:	3301      	adds	r3, #1
 8008caa:	2b07      	cmp	r3, #7
 8008cac:	9320      	str	r3, [sp, #128]	; 0x80
 8008cae:	dc6a      	bgt.n	8008d86 <_svfprintf_r+0xd1e>
 8008cb0:	3408      	adds	r4, #8
 8008cb2:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008cb4:	9a03      	ldr	r2, [sp, #12]
 8008cb6:	4293      	cmp	r3, r2
 8008cb8:	db01      	blt.n	8008cbe <_svfprintf_r+0xc56>
 8008cba:	07e9      	lsls	r1, r5, #31
 8008cbc:	d50d      	bpl.n	8008cda <_svfprintf_r+0xc72>
 8008cbe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008cc0:	6023      	str	r3, [r4, #0]
 8008cc2:	9b08      	ldr	r3, [sp, #32]
 8008cc4:	6063      	str	r3, [r4, #4]
 8008cc6:	9a08      	ldr	r2, [sp, #32]
 8008cc8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008cca:	4413      	add	r3, r2
 8008ccc:	9321      	str	r3, [sp, #132]	; 0x84
 8008cce:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8008cd0:	3301      	adds	r3, #1
 8008cd2:	2b07      	cmp	r3, #7
 8008cd4:	9320      	str	r3, [sp, #128]	; 0x80
 8008cd6:	dc60      	bgt.n	8008d9a <_svfprintf_r+0xd32>
 8008cd8:	3408      	adds	r4, #8
 8008cda:	9b03      	ldr	r3, [sp, #12]
 8008cdc:	9a03      	ldr	r2, [sp, #12]
 8008cde:	1bde      	subs	r6, r3, r7
 8008ce0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008ce2:	1ad3      	subs	r3, r2, r3
 8008ce4:	429e      	cmp	r6, r3
 8008ce6:	bfa8      	it	ge
 8008ce8:	461e      	movge	r6, r3
 8008cea:	2e00      	cmp	r6, #0
 8008cec:	dd0b      	ble.n	8008d06 <_svfprintf_r+0xc9e>
 8008cee:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008cf0:	6066      	str	r6, [r4, #4]
 8008cf2:	4433      	add	r3, r6
 8008cf4:	9321      	str	r3, [sp, #132]	; 0x84
 8008cf6:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8008cf8:	3301      	adds	r3, #1
 8008cfa:	4447      	add	r7, r8
 8008cfc:	2b07      	cmp	r3, #7
 8008cfe:	6027      	str	r7, [r4, #0]
 8008d00:	9320      	str	r3, [sp, #128]	; 0x80
 8008d02:	dc54      	bgt.n	8008dae <_svfprintf_r+0xd46>
 8008d04:	3408      	adds	r4, #8
 8008d06:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008d08:	9a03      	ldr	r2, [sp, #12]
 8008d0a:	2e00      	cmp	r6, #0
 8008d0c:	eba2 0303 	sub.w	r3, r2, r3
 8008d10:	bfac      	ite	ge
 8008d12:	1b9e      	subge	r6, r3, r6
 8008d14:	461e      	movlt	r6, r3
 8008d16:	2e00      	cmp	r6, #0
 8008d18:	f77f acd7 	ble.w	80086ca <_svfprintf_r+0x662>
 8008d1c:	4f2f      	ldr	r7, [pc, #188]	; (8008ddc <_svfprintf_r+0xd74>)
 8008d1e:	f04f 0810 	mov.w	r8, #16
 8008d22:	2e10      	cmp	r6, #16
 8008d24:	6027      	str	r7, [r4, #0]
 8008d26:	f77f aee7 	ble.w	8008af8 <_svfprintf_r+0xa90>
 8008d2a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008d2c:	f8c4 8004 	str.w	r8, [r4, #4]
 8008d30:	3310      	adds	r3, #16
 8008d32:	9321      	str	r3, [sp, #132]	; 0x84
 8008d34:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8008d36:	3301      	adds	r3, #1
 8008d38:	2b07      	cmp	r3, #7
 8008d3a:	9320      	str	r3, [sp, #128]	; 0x80
 8008d3c:	dc41      	bgt.n	8008dc2 <_svfprintf_r+0xd5a>
 8008d3e:	3408      	adds	r4, #8
 8008d40:	3e10      	subs	r6, #16
 8008d42:	e7ee      	b.n	8008d22 <_svfprintf_r+0xcba>
 8008d44:	aa1f      	add	r2, sp, #124	; 0x7c
 8008d46:	4651      	mov	r1, sl
 8008d48:	4658      	mov	r0, fp
 8008d4a:	f001 fbb9 	bl	800a4c0 <__ssprint_r>
 8008d4e:	2800      	cmp	r0, #0
 8008d50:	f040 80eb 	bne.w	8008f2a <_svfprintf_r+0xec2>
 8008d54:	ac2c      	add	r4, sp, #176	; 0xb0
 8008d56:	e796      	b.n	8008c86 <_svfprintf_r+0xc1e>
 8008d58:	2310      	movs	r3, #16
 8008d5a:	6063      	str	r3, [r4, #4]
 8008d5c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008d5e:	3310      	adds	r3, #16
 8008d60:	9321      	str	r3, [sp, #132]	; 0x84
 8008d62:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8008d64:	3301      	adds	r3, #1
 8008d66:	2b07      	cmp	r3, #7
 8008d68:	9320      	str	r3, [sp, #128]	; 0x80
 8008d6a:	dc02      	bgt.n	8008d72 <_svfprintf_r+0xd0a>
 8008d6c:	3408      	adds	r4, #8
 8008d6e:	3e10      	subs	r6, #16
 8008d70:	e791      	b.n	8008c96 <_svfprintf_r+0xc2e>
 8008d72:	aa1f      	add	r2, sp, #124	; 0x7c
 8008d74:	4651      	mov	r1, sl
 8008d76:	4658      	mov	r0, fp
 8008d78:	f001 fba2 	bl	800a4c0 <__ssprint_r>
 8008d7c:	2800      	cmp	r0, #0
 8008d7e:	f040 80d4 	bne.w	8008f2a <_svfprintf_r+0xec2>
 8008d82:	ac2c      	add	r4, sp, #176	; 0xb0
 8008d84:	e7f3      	b.n	8008d6e <_svfprintf_r+0xd06>
 8008d86:	aa1f      	add	r2, sp, #124	; 0x7c
 8008d88:	4651      	mov	r1, sl
 8008d8a:	4658      	mov	r0, fp
 8008d8c:	f001 fb98 	bl	800a4c0 <__ssprint_r>
 8008d90:	2800      	cmp	r0, #0
 8008d92:	f040 80ca 	bne.w	8008f2a <_svfprintf_r+0xec2>
 8008d96:	ac2c      	add	r4, sp, #176	; 0xb0
 8008d98:	e78b      	b.n	8008cb2 <_svfprintf_r+0xc4a>
 8008d9a:	aa1f      	add	r2, sp, #124	; 0x7c
 8008d9c:	4651      	mov	r1, sl
 8008d9e:	4658      	mov	r0, fp
 8008da0:	f001 fb8e 	bl	800a4c0 <__ssprint_r>
 8008da4:	2800      	cmp	r0, #0
 8008da6:	f040 80c0 	bne.w	8008f2a <_svfprintf_r+0xec2>
 8008daa:	ac2c      	add	r4, sp, #176	; 0xb0
 8008dac:	e795      	b.n	8008cda <_svfprintf_r+0xc72>
 8008dae:	aa1f      	add	r2, sp, #124	; 0x7c
 8008db0:	4651      	mov	r1, sl
 8008db2:	4658      	mov	r0, fp
 8008db4:	f001 fb84 	bl	800a4c0 <__ssprint_r>
 8008db8:	2800      	cmp	r0, #0
 8008dba:	f040 80b6 	bne.w	8008f2a <_svfprintf_r+0xec2>
 8008dbe:	ac2c      	add	r4, sp, #176	; 0xb0
 8008dc0:	e7a1      	b.n	8008d06 <_svfprintf_r+0xc9e>
 8008dc2:	aa1f      	add	r2, sp, #124	; 0x7c
 8008dc4:	4651      	mov	r1, sl
 8008dc6:	4658      	mov	r0, fp
 8008dc8:	f001 fb7a 	bl	800a4c0 <__ssprint_r>
 8008dcc:	2800      	cmp	r0, #0
 8008dce:	f040 80ac 	bne.w	8008f2a <_svfprintf_r+0xec2>
 8008dd2:	ac2c      	add	r4, sp, #176	; 0xb0
 8008dd4:	e7b4      	b.n	8008d40 <_svfprintf_r+0xcd8>
 8008dd6:	bf00      	nop
 8008dd8:	0800da99 	.word	0x0800da99
 8008ddc:	0800d871 	.word	0x0800d871
 8008de0:	9b03      	ldr	r3, [sp, #12]
 8008de2:	2b01      	cmp	r3, #1
 8008de4:	dc01      	bgt.n	8008dea <_svfprintf_r+0xd82>
 8008de6:	07ea      	lsls	r2, r5, #31
 8008de8:	d576      	bpl.n	8008ed8 <_svfprintf_r+0xe70>
 8008dea:	2301      	movs	r3, #1
 8008dec:	6063      	str	r3, [r4, #4]
 8008dee:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008df0:	f8c4 8000 	str.w	r8, [r4]
 8008df4:	3301      	adds	r3, #1
 8008df6:	9321      	str	r3, [sp, #132]	; 0x84
 8008df8:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8008dfa:	3301      	adds	r3, #1
 8008dfc:	2b07      	cmp	r3, #7
 8008dfe:	9320      	str	r3, [sp, #128]	; 0x80
 8008e00:	dc36      	bgt.n	8008e70 <_svfprintf_r+0xe08>
 8008e02:	3408      	adds	r4, #8
 8008e04:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008e06:	6023      	str	r3, [r4, #0]
 8008e08:	9b08      	ldr	r3, [sp, #32]
 8008e0a:	6063      	str	r3, [r4, #4]
 8008e0c:	9a08      	ldr	r2, [sp, #32]
 8008e0e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008e10:	4413      	add	r3, r2
 8008e12:	9321      	str	r3, [sp, #132]	; 0x84
 8008e14:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8008e16:	3301      	adds	r3, #1
 8008e18:	2b07      	cmp	r3, #7
 8008e1a:	9320      	str	r3, [sp, #128]	; 0x80
 8008e1c:	dc31      	bgt.n	8008e82 <_svfprintf_r+0xe1a>
 8008e1e:	3408      	adds	r4, #8
 8008e20:	2300      	movs	r3, #0
 8008e22:	2200      	movs	r2, #0
 8008e24:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008e28:	f7f7 fe4a 	bl	8000ac0 <__aeabi_dcmpeq>
 8008e2c:	9b03      	ldr	r3, [sp, #12]
 8008e2e:	1e5e      	subs	r6, r3, #1
 8008e30:	2800      	cmp	r0, #0
 8008e32:	d12f      	bne.n	8008e94 <_svfprintf_r+0xe2c>
 8008e34:	f108 0301 	add.w	r3, r8, #1
 8008e38:	e884 0048 	stmia.w	r4, {r3, r6}
 8008e3c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008e3e:	9a03      	ldr	r2, [sp, #12]
 8008e40:	3b01      	subs	r3, #1
 8008e42:	4413      	add	r3, r2
 8008e44:	9321      	str	r3, [sp, #132]	; 0x84
 8008e46:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8008e48:	3301      	adds	r3, #1
 8008e4a:	2b07      	cmp	r3, #7
 8008e4c:	9320      	str	r3, [sp, #128]	; 0x80
 8008e4e:	dd4a      	ble.n	8008ee6 <_svfprintf_r+0xe7e>
 8008e50:	aa1f      	add	r2, sp, #124	; 0x7c
 8008e52:	4651      	mov	r1, sl
 8008e54:	4658      	mov	r0, fp
 8008e56:	f001 fb33 	bl	800a4c0 <__ssprint_r>
 8008e5a:	2800      	cmp	r0, #0
 8008e5c:	d165      	bne.n	8008f2a <_svfprintf_r+0xec2>
 8008e5e:	ac2c      	add	r4, sp, #176	; 0xb0
 8008e60:	ab1b      	add	r3, sp, #108	; 0x6c
 8008e62:	6023      	str	r3, [r4, #0]
 8008e64:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008e66:	6063      	str	r3, [r4, #4]
 8008e68:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8008e6a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008e6c:	4413      	add	r3, r2
 8008e6e:	e41c      	b.n	80086aa <_svfprintf_r+0x642>
 8008e70:	aa1f      	add	r2, sp, #124	; 0x7c
 8008e72:	4651      	mov	r1, sl
 8008e74:	4658      	mov	r0, fp
 8008e76:	f001 fb23 	bl	800a4c0 <__ssprint_r>
 8008e7a:	2800      	cmp	r0, #0
 8008e7c:	d155      	bne.n	8008f2a <_svfprintf_r+0xec2>
 8008e7e:	ac2c      	add	r4, sp, #176	; 0xb0
 8008e80:	e7c0      	b.n	8008e04 <_svfprintf_r+0xd9c>
 8008e82:	aa1f      	add	r2, sp, #124	; 0x7c
 8008e84:	4651      	mov	r1, sl
 8008e86:	4658      	mov	r0, fp
 8008e88:	f001 fb1a 	bl	800a4c0 <__ssprint_r>
 8008e8c:	2800      	cmp	r0, #0
 8008e8e:	d14c      	bne.n	8008f2a <_svfprintf_r+0xec2>
 8008e90:	ac2c      	add	r4, sp, #176	; 0xb0
 8008e92:	e7c5      	b.n	8008e20 <_svfprintf_r+0xdb8>
 8008e94:	2e00      	cmp	r6, #0
 8008e96:	dde3      	ble.n	8008e60 <_svfprintf_r+0xdf8>
 8008e98:	4f59      	ldr	r7, [pc, #356]	; (8009000 <_svfprintf_r+0xf98>)
 8008e9a:	f04f 0810 	mov.w	r8, #16
 8008e9e:	2e10      	cmp	r6, #16
 8008ea0:	6027      	str	r7, [r4, #0]
 8008ea2:	dc04      	bgt.n	8008eae <_svfprintf_r+0xe46>
 8008ea4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008ea6:	6066      	str	r6, [r4, #4]
 8008ea8:	441e      	add	r6, r3
 8008eaa:	9621      	str	r6, [sp, #132]	; 0x84
 8008eac:	e7cb      	b.n	8008e46 <_svfprintf_r+0xdde>
 8008eae:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008eb0:	f8c4 8004 	str.w	r8, [r4, #4]
 8008eb4:	3310      	adds	r3, #16
 8008eb6:	9321      	str	r3, [sp, #132]	; 0x84
 8008eb8:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8008eba:	3301      	adds	r3, #1
 8008ebc:	2b07      	cmp	r3, #7
 8008ebe:	9320      	str	r3, [sp, #128]	; 0x80
 8008ec0:	dc02      	bgt.n	8008ec8 <_svfprintf_r+0xe60>
 8008ec2:	3408      	adds	r4, #8
 8008ec4:	3e10      	subs	r6, #16
 8008ec6:	e7ea      	b.n	8008e9e <_svfprintf_r+0xe36>
 8008ec8:	aa1f      	add	r2, sp, #124	; 0x7c
 8008eca:	4651      	mov	r1, sl
 8008ecc:	4658      	mov	r0, fp
 8008ece:	f001 faf7 	bl	800a4c0 <__ssprint_r>
 8008ed2:	bb50      	cbnz	r0, 8008f2a <_svfprintf_r+0xec2>
 8008ed4:	ac2c      	add	r4, sp, #176	; 0xb0
 8008ed6:	e7f5      	b.n	8008ec4 <_svfprintf_r+0xe5c>
 8008ed8:	2301      	movs	r3, #1
 8008eda:	6063      	str	r3, [r4, #4]
 8008edc:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008ede:	f8c4 8000 	str.w	r8, [r4]
 8008ee2:	3301      	adds	r3, #1
 8008ee4:	e7ae      	b.n	8008e44 <_svfprintf_r+0xddc>
 8008ee6:	3408      	adds	r4, #8
 8008ee8:	e7ba      	b.n	8008e60 <_svfprintf_r+0xdf8>
 8008eea:	3408      	adds	r4, #8
 8008eec:	f7ff bbed 	b.w	80086ca <_svfprintf_r+0x662>
 8008ef0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008ef2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008ef4:	1a9d      	subs	r5, r3, r2
 8008ef6:	2d00      	cmp	r5, #0
 8008ef8:	f77f abea 	ble.w	80086d0 <_svfprintf_r+0x668>
 8008efc:	2610      	movs	r6, #16
 8008efe:	4b41      	ldr	r3, [pc, #260]	; (8009004 <_svfprintf_r+0xf9c>)
 8008f00:	6023      	str	r3, [r4, #0]
 8008f02:	2d10      	cmp	r5, #16
 8008f04:	dc1b      	bgt.n	8008f3e <_svfprintf_r+0xed6>
 8008f06:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008f08:	6065      	str	r5, [r4, #4]
 8008f0a:	441d      	add	r5, r3
 8008f0c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8008f0e:	9521      	str	r5, [sp, #132]	; 0x84
 8008f10:	3301      	adds	r3, #1
 8008f12:	2b07      	cmp	r3, #7
 8008f14:	9320      	str	r3, [sp, #128]	; 0x80
 8008f16:	f77f abdb 	ble.w	80086d0 <_svfprintf_r+0x668>
 8008f1a:	aa1f      	add	r2, sp, #124	; 0x7c
 8008f1c:	4651      	mov	r1, sl
 8008f1e:	4658      	mov	r0, fp
 8008f20:	f001 face 	bl	800a4c0 <__ssprint_r>
 8008f24:	2800      	cmp	r0, #0
 8008f26:	f43f abd3 	beq.w	80086d0 <_svfprintf_r+0x668>
 8008f2a:	f8ba 300c 	ldrh.w	r3, [sl, #12]
 8008f2e:	f013 0f40 	tst.w	r3, #64	; 0x40
 8008f32:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008f34:	bf18      	it	ne
 8008f36:	f04f 33ff 	movne.w	r3, #4294967295
 8008f3a:	f7ff b8b9 	b.w	80080b0 <_svfprintf_r+0x48>
 8008f3e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008f40:	6066      	str	r6, [r4, #4]
 8008f42:	3310      	adds	r3, #16
 8008f44:	9321      	str	r3, [sp, #132]	; 0x84
 8008f46:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8008f48:	3301      	adds	r3, #1
 8008f4a:	2b07      	cmp	r3, #7
 8008f4c:	9320      	str	r3, [sp, #128]	; 0x80
 8008f4e:	dc02      	bgt.n	8008f56 <_svfprintf_r+0xeee>
 8008f50:	3408      	adds	r4, #8
 8008f52:	3d10      	subs	r5, #16
 8008f54:	e7d3      	b.n	8008efe <_svfprintf_r+0xe96>
 8008f56:	aa1f      	add	r2, sp, #124	; 0x7c
 8008f58:	4651      	mov	r1, sl
 8008f5a:	4658      	mov	r0, fp
 8008f5c:	f001 fab0 	bl	800a4c0 <__ssprint_r>
 8008f60:	2800      	cmp	r0, #0
 8008f62:	d1e2      	bne.n	8008f2a <_svfprintf_r+0xec2>
 8008f64:	ac2c      	add	r4, sp, #176	; 0xb0
 8008f66:	e7f4      	b.n	8008f52 <_svfprintf_r+0xeea>
 8008f68:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008f6a:	2b00      	cmp	r3, #0
 8008f6c:	d0dd      	beq.n	8008f2a <_svfprintf_r+0xec2>
 8008f6e:	aa1f      	add	r2, sp, #124	; 0x7c
 8008f70:	4651      	mov	r1, sl
 8008f72:	4658      	mov	r0, fp
 8008f74:	f001 faa4 	bl	800a4c0 <__ssprint_r>
 8008f78:	e7d7      	b.n	8008f2a <_svfprintf_r+0xec2>
 8008f7a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008f7e:	4610      	mov	r0, r2
 8008f80:	4619      	mov	r1, r3
 8008f82:	f7f7 fdcf 	bl	8000b24 <__aeabi_dcmpun>
 8008f86:	2800      	cmp	r0, #0
 8008f88:	f43f aa44 	beq.w	8008414 <_svfprintf_r+0x3ac>
 8008f8c:	4b1e      	ldr	r3, [pc, #120]	; (8009008 <_svfprintf_r+0xfa0>)
 8008f8e:	4a1f      	ldr	r2, [pc, #124]	; (800900c <_svfprintf_r+0xfa4>)
 8008f90:	f7ff ba34 	b.w	80083fc <_svfprintf_r+0x394>
 8008f94:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8008f96:	eba3 0308 	sub.w	r3, r3, r8
 8008f9a:	9303      	str	r3, [sp, #12]
 8008f9c:	f7ff bab5 	b.w	800850a <_svfprintf_r+0x4a2>
 8008fa0:	ea56 0207 	orrs.w	r2, r6, r7
 8008fa4:	950b      	str	r5, [sp, #44]	; 0x2c
 8008fa6:	f43f ac2b 	beq.w	8008800 <_svfprintf_r+0x798>
 8008faa:	2b01      	cmp	r3, #1
 8008fac:	f43f ac9d 	beq.w	80088ea <_svfprintf_r+0x882>
 8008fb0:	2b02      	cmp	r3, #2
 8008fb2:	f43f acbd 	beq.w	8008930 <_svfprintf_r+0x8c8>
 8008fb6:	ab2c      	add	r3, sp, #176	; 0xb0
 8008fb8:	08f1      	lsrs	r1, r6, #3
 8008fba:	ea41 7147 	orr.w	r1, r1, r7, lsl #29
 8008fbe:	08f8      	lsrs	r0, r7, #3
 8008fc0:	f006 0207 	and.w	r2, r6, #7
 8008fc4:	4607      	mov	r7, r0
 8008fc6:	460e      	mov	r6, r1
 8008fc8:	3230      	adds	r2, #48	; 0x30
 8008fca:	ea56 0107 	orrs.w	r1, r6, r7
 8008fce:	f103 38ff 	add.w	r8, r3, #4294967295
 8008fd2:	f803 2c01 	strb.w	r2, [r3, #-1]
 8008fd6:	f47f ac86 	bne.w	80088e6 <_svfprintf_r+0x87e>
 8008fda:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008fdc:	07c9      	lsls	r1, r1, #31
 8008fde:	d506      	bpl.n	8008fee <_svfprintf_r+0xf86>
 8008fe0:	2a30      	cmp	r2, #48	; 0x30
 8008fe2:	d004      	beq.n	8008fee <_svfprintf_r+0xf86>
 8008fe4:	2230      	movs	r2, #48	; 0x30
 8008fe6:	f808 2c01 	strb.w	r2, [r8, #-1]
 8008fea:	f1a3 0802 	sub.w	r8, r3, #2
 8008fee:	464e      	mov	r6, r9
 8008ff0:	f10d 09b0 	add.w	r9, sp, #176	; 0xb0
 8008ff4:	eba9 0908 	sub.w	r9, r9, r8
 8008ff8:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8008ffa:	2700      	movs	r7, #0
 8008ffc:	f7ff bad1 	b.w	80085a2 <_svfprintf_r+0x53a>
 8009000:	0800d871 	.word	0x0800d871
 8009004:	0800d861 	.word	0x0800d861
 8009008:	0800d837 	.word	0x0800d837
 800900c:	0800d83b 	.word	0x0800d83b

08009010 <quorem>:
 8009010:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009014:	6903      	ldr	r3, [r0, #16]
 8009016:	690c      	ldr	r4, [r1, #16]
 8009018:	429c      	cmp	r4, r3
 800901a:	4680      	mov	r8, r0
 800901c:	f300 8082 	bgt.w	8009124 <quorem+0x114>
 8009020:	3c01      	subs	r4, #1
 8009022:	f101 0714 	add.w	r7, r1, #20
 8009026:	ea4f 0e84 	mov.w	lr, r4, lsl #2
 800902a:	f100 0614 	add.w	r6, r0, #20
 800902e:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8009032:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8009036:	eb06 030e 	add.w	r3, r6, lr
 800903a:	3501      	adds	r5, #1
 800903c:	eb07 090e 	add.w	r9, r7, lr
 8009040:	9301      	str	r3, [sp, #4]
 8009042:	fbb0 f5f5 	udiv	r5, r0, r5
 8009046:	b395      	cbz	r5, 80090ae <quorem+0x9e>
 8009048:	f04f 0a00 	mov.w	sl, #0
 800904c:	4638      	mov	r0, r7
 800904e:	46b4      	mov	ip, r6
 8009050:	46d3      	mov	fp, sl
 8009052:	f850 2b04 	ldr.w	r2, [r0], #4
 8009056:	b293      	uxth	r3, r2
 8009058:	fb05 a303 	mla	r3, r5, r3, sl
 800905c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009060:	b29b      	uxth	r3, r3
 8009062:	ebab 0303 	sub.w	r3, fp, r3
 8009066:	0c12      	lsrs	r2, r2, #16
 8009068:	f8bc b000 	ldrh.w	fp, [ip]
 800906c:	fb05 a202 	mla	r2, r5, r2, sl
 8009070:	fa13 f38b 	uxtah	r3, r3, fp
 8009074:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8009078:	fa1f fb82 	uxth.w	fp, r2
 800907c:	f8dc 2000 	ldr.w	r2, [ip]
 8009080:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8009084:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009088:	b29b      	uxth	r3, r3
 800908a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800908e:	4581      	cmp	r9, r0
 8009090:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8009094:	f84c 3b04 	str.w	r3, [ip], #4
 8009098:	d2db      	bcs.n	8009052 <quorem+0x42>
 800909a:	f856 300e 	ldr.w	r3, [r6, lr]
 800909e:	b933      	cbnz	r3, 80090ae <quorem+0x9e>
 80090a0:	9b01      	ldr	r3, [sp, #4]
 80090a2:	3b04      	subs	r3, #4
 80090a4:	429e      	cmp	r6, r3
 80090a6:	461a      	mov	r2, r3
 80090a8:	d330      	bcc.n	800910c <quorem+0xfc>
 80090aa:	f8c8 4010 	str.w	r4, [r8, #16]
 80090ae:	4640      	mov	r0, r8
 80090b0:	f001 f93f 	bl	800a332 <__mcmp>
 80090b4:	2800      	cmp	r0, #0
 80090b6:	db25      	blt.n	8009104 <quorem+0xf4>
 80090b8:	3501      	adds	r5, #1
 80090ba:	4630      	mov	r0, r6
 80090bc:	f04f 0e00 	mov.w	lr, #0
 80090c0:	f857 2b04 	ldr.w	r2, [r7], #4
 80090c4:	f8d0 c000 	ldr.w	ip, [r0]
 80090c8:	b293      	uxth	r3, r2
 80090ca:	ebae 0303 	sub.w	r3, lr, r3
 80090ce:	0c12      	lsrs	r2, r2, #16
 80090d0:	fa13 f38c 	uxtah	r3, r3, ip
 80090d4:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 80090d8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80090dc:	b29b      	uxth	r3, r3
 80090de:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80090e2:	45b9      	cmp	r9, r7
 80090e4:	ea4f 4e22 	mov.w	lr, r2, asr #16
 80090e8:	f840 3b04 	str.w	r3, [r0], #4
 80090ec:	d2e8      	bcs.n	80090c0 <quorem+0xb0>
 80090ee:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 80090f2:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 80090f6:	b92a      	cbnz	r2, 8009104 <quorem+0xf4>
 80090f8:	3b04      	subs	r3, #4
 80090fa:	429e      	cmp	r6, r3
 80090fc:	461a      	mov	r2, r3
 80090fe:	d30b      	bcc.n	8009118 <quorem+0x108>
 8009100:	f8c8 4010 	str.w	r4, [r8, #16]
 8009104:	4628      	mov	r0, r5
 8009106:	b003      	add	sp, #12
 8009108:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800910c:	6812      	ldr	r2, [r2, #0]
 800910e:	3b04      	subs	r3, #4
 8009110:	2a00      	cmp	r2, #0
 8009112:	d1ca      	bne.n	80090aa <quorem+0x9a>
 8009114:	3c01      	subs	r4, #1
 8009116:	e7c5      	b.n	80090a4 <quorem+0x94>
 8009118:	6812      	ldr	r2, [r2, #0]
 800911a:	3b04      	subs	r3, #4
 800911c:	2a00      	cmp	r2, #0
 800911e:	d1ef      	bne.n	8009100 <quorem+0xf0>
 8009120:	3c01      	subs	r4, #1
 8009122:	e7ea      	b.n	80090fa <quorem+0xea>
 8009124:	2000      	movs	r0, #0
 8009126:	e7ee      	b.n	8009106 <quorem+0xf6>

08009128 <_dtoa_r>:
 8009128:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800912c:	ec57 6b10 	vmov	r6, r7, d0
 8009130:	b097      	sub	sp, #92	; 0x5c
 8009132:	e9cd 6700 	strd	r6, r7, [sp]
 8009136:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009138:	9107      	str	r1, [sp, #28]
 800913a:	4604      	mov	r4, r0
 800913c:	920a      	str	r2, [sp, #40]	; 0x28
 800913e:	930f      	str	r3, [sp, #60]	; 0x3c
 8009140:	9d20      	ldr	r5, [sp, #128]	; 0x80
 8009142:	b93e      	cbnz	r6, 8009154 <_dtoa_r+0x2c>
 8009144:	2010      	movs	r0, #16
 8009146:	f7fe fd21 	bl	8007b8c <malloc>
 800914a:	6260      	str	r0, [r4, #36]	; 0x24
 800914c:	6046      	str	r6, [r0, #4]
 800914e:	6086      	str	r6, [r0, #8]
 8009150:	6006      	str	r6, [r0, #0]
 8009152:	60c6      	str	r6, [r0, #12]
 8009154:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009156:	6819      	ldr	r1, [r3, #0]
 8009158:	b151      	cbz	r1, 8009170 <_dtoa_r+0x48>
 800915a:	685a      	ldr	r2, [r3, #4]
 800915c:	604a      	str	r2, [r1, #4]
 800915e:	2301      	movs	r3, #1
 8009160:	4093      	lsls	r3, r2
 8009162:	608b      	str	r3, [r1, #8]
 8009164:	4620      	mov	r0, r4
 8009166:	f000 ff0e 	bl	8009f86 <_Bfree>
 800916a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800916c:	2200      	movs	r2, #0
 800916e:	601a      	str	r2, [r3, #0]
 8009170:	9b01      	ldr	r3, [sp, #4]
 8009172:	2b00      	cmp	r3, #0
 8009174:	bfbf      	itttt	lt
 8009176:	2301      	movlt	r3, #1
 8009178:	602b      	strlt	r3, [r5, #0]
 800917a:	9b01      	ldrlt	r3, [sp, #4]
 800917c:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8009180:	bfb2      	itee	lt
 8009182:	9301      	strlt	r3, [sp, #4]
 8009184:	2300      	movge	r3, #0
 8009186:	602b      	strge	r3, [r5, #0]
 8009188:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800918c:	4ba8      	ldr	r3, [pc, #672]	; (8009430 <_dtoa_r+0x308>)
 800918e:	ea33 0308 	bics.w	r3, r3, r8
 8009192:	d11b      	bne.n	80091cc <_dtoa_r+0xa4>
 8009194:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009196:	f242 730f 	movw	r3, #9999	; 0x270f
 800919a:	6013      	str	r3, [r2, #0]
 800919c:	9b00      	ldr	r3, [sp, #0]
 800919e:	b923      	cbnz	r3, 80091aa <_dtoa_r+0x82>
 80091a0:	f3c8 0013 	ubfx	r0, r8, #0, #20
 80091a4:	2800      	cmp	r0, #0
 80091a6:	f000 8578 	beq.w	8009c9a <_dtoa_r+0xb72>
 80091aa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80091ac:	b953      	cbnz	r3, 80091c4 <_dtoa_r+0x9c>
 80091ae:	4ba1      	ldr	r3, [pc, #644]	; (8009434 <_dtoa_r+0x30c>)
 80091b0:	e021      	b.n	80091f6 <_dtoa_r+0xce>
 80091b2:	4ba1      	ldr	r3, [pc, #644]	; (8009438 <_dtoa_r+0x310>)
 80091b4:	9302      	str	r3, [sp, #8]
 80091b6:	3308      	adds	r3, #8
 80091b8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80091ba:	6013      	str	r3, [r2, #0]
 80091bc:	9802      	ldr	r0, [sp, #8]
 80091be:	b017      	add	sp, #92	; 0x5c
 80091c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80091c4:	4b9b      	ldr	r3, [pc, #620]	; (8009434 <_dtoa_r+0x30c>)
 80091c6:	9302      	str	r3, [sp, #8]
 80091c8:	3303      	adds	r3, #3
 80091ca:	e7f5      	b.n	80091b8 <_dtoa_r+0x90>
 80091cc:	e9dd 6700 	ldrd	r6, r7, [sp]
 80091d0:	2200      	movs	r2, #0
 80091d2:	2300      	movs	r3, #0
 80091d4:	4630      	mov	r0, r6
 80091d6:	4639      	mov	r1, r7
 80091d8:	f7f7 fc72 	bl	8000ac0 <__aeabi_dcmpeq>
 80091dc:	4681      	mov	r9, r0
 80091de:	b160      	cbz	r0, 80091fa <_dtoa_r+0xd2>
 80091e0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80091e2:	2301      	movs	r3, #1
 80091e4:	6013      	str	r3, [r2, #0]
 80091e6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80091e8:	2b00      	cmp	r3, #0
 80091ea:	f000 8553 	beq.w	8009c94 <_dtoa_r+0xb6c>
 80091ee:	4b93      	ldr	r3, [pc, #588]	; (800943c <_dtoa_r+0x314>)
 80091f0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80091f2:	6013      	str	r3, [r2, #0]
 80091f4:	3b01      	subs	r3, #1
 80091f6:	9302      	str	r3, [sp, #8]
 80091f8:	e7e0      	b.n	80091bc <_dtoa_r+0x94>
 80091fa:	aa14      	add	r2, sp, #80	; 0x50
 80091fc:	a915      	add	r1, sp, #84	; 0x54
 80091fe:	ec47 6b10 	vmov	d0, r6, r7
 8009202:	4620      	mov	r0, r4
 8009204:	f001 f90d 	bl	800a422 <__d2b>
 8009208:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800920c:	4682      	mov	sl, r0
 800920e:	2d00      	cmp	r5, #0
 8009210:	d07e      	beq.n	8009310 <_dtoa_r+0x1e8>
 8009212:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8009216:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 800921a:	4630      	mov	r0, r6
 800921c:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8009220:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8009224:	f8cd 9048 	str.w	r9, [sp, #72]	; 0x48
 8009228:	2200      	movs	r2, #0
 800922a:	4b85      	ldr	r3, [pc, #532]	; (8009440 <_dtoa_r+0x318>)
 800922c:	f7f7 f82c 	bl	8000288 <__aeabi_dsub>
 8009230:	a379      	add	r3, pc, #484	; (adr r3, 8009418 <_dtoa_r+0x2f0>)
 8009232:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009236:	f7f7 f9db 	bl	80005f0 <__aeabi_dmul>
 800923a:	a379      	add	r3, pc, #484	; (adr r3, 8009420 <_dtoa_r+0x2f8>)
 800923c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009240:	f7f7 f824 	bl	800028c <__adddf3>
 8009244:	4606      	mov	r6, r0
 8009246:	4628      	mov	r0, r5
 8009248:	460f      	mov	r7, r1
 800924a:	f7f7 f96b 	bl	8000524 <__aeabi_i2d>
 800924e:	a376      	add	r3, pc, #472	; (adr r3, 8009428 <_dtoa_r+0x300>)
 8009250:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009254:	f7f7 f9cc 	bl	80005f0 <__aeabi_dmul>
 8009258:	4602      	mov	r2, r0
 800925a:	460b      	mov	r3, r1
 800925c:	4630      	mov	r0, r6
 800925e:	4639      	mov	r1, r7
 8009260:	f7f7 f814 	bl	800028c <__adddf3>
 8009264:	4606      	mov	r6, r0
 8009266:	460f      	mov	r7, r1
 8009268:	f7f7 fc72 	bl	8000b50 <__aeabi_d2iz>
 800926c:	2200      	movs	r2, #0
 800926e:	4683      	mov	fp, r0
 8009270:	2300      	movs	r3, #0
 8009272:	4630      	mov	r0, r6
 8009274:	4639      	mov	r1, r7
 8009276:	f7f7 fc2d 	bl	8000ad4 <__aeabi_dcmplt>
 800927a:	b158      	cbz	r0, 8009294 <_dtoa_r+0x16c>
 800927c:	4658      	mov	r0, fp
 800927e:	f7f7 f951 	bl	8000524 <__aeabi_i2d>
 8009282:	4602      	mov	r2, r0
 8009284:	460b      	mov	r3, r1
 8009286:	4630      	mov	r0, r6
 8009288:	4639      	mov	r1, r7
 800928a:	f7f7 fc19 	bl	8000ac0 <__aeabi_dcmpeq>
 800928e:	b908      	cbnz	r0, 8009294 <_dtoa_r+0x16c>
 8009290:	f10b 3bff 	add.w	fp, fp, #4294967295
 8009294:	f1bb 0f16 	cmp.w	fp, #22
 8009298:	d859      	bhi.n	800934e <_dtoa_r+0x226>
 800929a:	496a      	ldr	r1, [pc, #424]	; (8009444 <_dtoa_r+0x31c>)
 800929c:	eb01 01cb 	add.w	r1, r1, fp, lsl #3
 80092a0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80092a4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80092a8:	f7f7 fc32 	bl	8000b10 <__aeabi_dcmpgt>
 80092ac:	2800      	cmp	r0, #0
 80092ae:	d050      	beq.n	8009352 <_dtoa_r+0x22a>
 80092b0:	f10b 3bff 	add.w	fp, fp, #4294967295
 80092b4:	2300      	movs	r3, #0
 80092b6:	930e      	str	r3, [sp, #56]	; 0x38
 80092b8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80092ba:	1b5d      	subs	r5, r3, r5
 80092bc:	1e6b      	subs	r3, r5, #1
 80092be:	9306      	str	r3, [sp, #24]
 80092c0:	bf45      	ittet	mi
 80092c2:	f1c5 0301 	rsbmi	r3, r5, #1
 80092c6:	9305      	strmi	r3, [sp, #20]
 80092c8:	2300      	movpl	r3, #0
 80092ca:	2300      	movmi	r3, #0
 80092cc:	bf4c      	ite	mi
 80092ce:	9306      	strmi	r3, [sp, #24]
 80092d0:	9305      	strpl	r3, [sp, #20]
 80092d2:	f1bb 0f00 	cmp.w	fp, #0
 80092d6:	db3e      	blt.n	8009356 <_dtoa_r+0x22e>
 80092d8:	9b06      	ldr	r3, [sp, #24]
 80092da:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 80092de:	445b      	add	r3, fp
 80092e0:	9306      	str	r3, [sp, #24]
 80092e2:	2300      	movs	r3, #0
 80092e4:	9308      	str	r3, [sp, #32]
 80092e6:	9b07      	ldr	r3, [sp, #28]
 80092e8:	2b09      	cmp	r3, #9
 80092ea:	f200 80af 	bhi.w	800944c <_dtoa_r+0x324>
 80092ee:	2b05      	cmp	r3, #5
 80092f0:	bfc4      	itt	gt
 80092f2:	3b04      	subgt	r3, #4
 80092f4:	9307      	strgt	r3, [sp, #28]
 80092f6:	9b07      	ldr	r3, [sp, #28]
 80092f8:	f1a3 0302 	sub.w	r3, r3, #2
 80092fc:	bfcc      	ite	gt
 80092fe:	2600      	movgt	r6, #0
 8009300:	2601      	movle	r6, #1
 8009302:	2b03      	cmp	r3, #3
 8009304:	f200 80ae 	bhi.w	8009464 <_dtoa_r+0x33c>
 8009308:	e8df f003 	tbb	[pc, r3]
 800930c:	772f8482 	.word	0x772f8482
 8009310:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009312:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8009314:	441d      	add	r5, r3
 8009316:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800931a:	2b20      	cmp	r3, #32
 800931c:	dd11      	ble.n	8009342 <_dtoa_r+0x21a>
 800931e:	9a00      	ldr	r2, [sp, #0]
 8009320:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8009324:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 8009328:	fa22 f000 	lsr.w	r0, r2, r0
 800932c:	fa08 f303 	lsl.w	r3, r8, r3
 8009330:	4318      	orrs	r0, r3
 8009332:	f7f7 f8e7 	bl	8000504 <__aeabi_ui2d>
 8009336:	2301      	movs	r3, #1
 8009338:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 800933c:	3d01      	subs	r5, #1
 800933e:	9312      	str	r3, [sp, #72]	; 0x48
 8009340:	e772      	b.n	8009228 <_dtoa_r+0x100>
 8009342:	f1c3 0020 	rsb	r0, r3, #32
 8009346:	9b00      	ldr	r3, [sp, #0]
 8009348:	fa03 f000 	lsl.w	r0, r3, r0
 800934c:	e7f1      	b.n	8009332 <_dtoa_r+0x20a>
 800934e:	2301      	movs	r3, #1
 8009350:	e7b1      	b.n	80092b6 <_dtoa_r+0x18e>
 8009352:	900e      	str	r0, [sp, #56]	; 0x38
 8009354:	e7b0      	b.n	80092b8 <_dtoa_r+0x190>
 8009356:	9b05      	ldr	r3, [sp, #20]
 8009358:	eba3 030b 	sub.w	r3, r3, fp
 800935c:	9305      	str	r3, [sp, #20]
 800935e:	f1cb 0300 	rsb	r3, fp, #0
 8009362:	9308      	str	r3, [sp, #32]
 8009364:	2300      	movs	r3, #0
 8009366:	930b      	str	r3, [sp, #44]	; 0x2c
 8009368:	e7bd      	b.n	80092e6 <_dtoa_r+0x1be>
 800936a:	2301      	movs	r3, #1
 800936c:	9309      	str	r3, [sp, #36]	; 0x24
 800936e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009370:	2b00      	cmp	r3, #0
 8009372:	dd7a      	ble.n	800946a <_dtoa_r+0x342>
 8009374:	9304      	str	r3, [sp, #16]
 8009376:	9303      	str	r3, [sp, #12]
 8009378:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800937a:	2200      	movs	r2, #0
 800937c:	606a      	str	r2, [r5, #4]
 800937e:	2104      	movs	r1, #4
 8009380:	f101 0214 	add.w	r2, r1, #20
 8009384:	429a      	cmp	r2, r3
 8009386:	d975      	bls.n	8009474 <_dtoa_r+0x34c>
 8009388:	6869      	ldr	r1, [r5, #4]
 800938a:	4620      	mov	r0, r4
 800938c:	f000 fdc7 	bl	8009f1e <_Balloc>
 8009390:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009392:	6028      	str	r0, [r5, #0]
 8009394:	681b      	ldr	r3, [r3, #0]
 8009396:	9302      	str	r3, [sp, #8]
 8009398:	9b03      	ldr	r3, [sp, #12]
 800939a:	2b0e      	cmp	r3, #14
 800939c:	f200 80e5 	bhi.w	800956a <_dtoa_r+0x442>
 80093a0:	2e00      	cmp	r6, #0
 80093a2:	f000 80e2 	beq.w	800956a <_dtoa_r+0x442>
 80093a6:	ed9d 7b00 	vldr	d7, [sp]
 80093aa:	f1bb 0f00 	cmp.w	fp, #0
 80093ae:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 80093b2:	dd74      	ble.n	800949e <_dtoa_r+0x376>
 80093b4:	4a23      	ldr	r2, [pc, #140]	; (8009444 <_dtoa_r+0x31c>)
 80093b6:	f00b 030f 	and.w	r3, fp, #15
 80093ba:	ea4f 162b 	mov.w	r6, fp, asr #4
 80093be:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80093c2:	06f0      	lsls	r0, r6, #27
 80093c4:	e9d3 8900 	ldrd	r8, r9, [r3]
 80093c8:	d559      	bpl.n	800947e <_dtoa_r+0x356>
 80093ca:	4b1f      	ldr	r3, [pc, #124]	; (8009448 <_dtoa_r+0x320>)
 80093cc:	ec51 0b17 	vmov	r0, r1, d7
 80093d0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80093d4:	f7f7 fa36 	bl	8000844 <__aeabi_ddiv>
 80093d8:	e9cd 0100 	strd	r0, r1, [sp]
 80093dc:	f006 060f 	and.w	r6, r6, #15
 80093e0:	2503      	movs	r5, #3
 80093e2:	4f19      	ldr	r7, [pc, #100]	; (8009448 <_dtoa_r+0x320>)
 80093e4:	2e00      	cmp	r6, #0
 80093e6:	d14c      	bne.n	8009482 <_dtoa_r+0x35a>
 80093e8:	4642      	mov	r2, r8
 80093ea:	464b      	mov	r3, r9
 80093ec:	e9dd 0100 	ldrd	r0, r1, [sp]
 80093f0:	f7f7 fa28 	bl	8000844 <__aeabi_ddiv>
 80093f4:	e9cd 0100 	strd	r0, r1, [sp]
 80093f8:	e06a      	b.n	80094d0 <_dtoa_r+0x3a8>
 80093fa:	2301      	movs	r3, #1
 80093fc:	9309      	str	r3, [sp, #36]	; 0x24
 80093fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009400:	445b      	add	r3, fp
 8009402:	9304      	str	r3, [sp, #16]
 8009404:	3301      	adds	r3, #1
 8009406:	2b01      	cmp	r3, #1
 8009408:	9303      	str	r3, [sp, #12]
 800940a:	bfb8      	it	lt
 800940c:	2301      	movlt	r3, #1
 800940e:	e7b3      	b.n	8009378 <_dtoa_r+0x250>
 8009410:	2300      	movs	r3, #0
 8009412:	e7ab      	b.n	800936c <_dtoa_r+0x244>
 8009414:	2300      	movs	r3, #0
 8009416:	e7f1      	b.n	80093fc <_dtoa_r+0x2d4>
 8009418:	636f4361 	.word	0x636f4361
 800941c:	3fd287a7 	.word	0x3fd287a7
 8009420:	8b60c8b3 	.word	0x8b60c8b3
 8009424:	3fc68a28 	.word	0x3fc68a28
 8009428:	509f79fb 	.word	0x509f79fb
 800942c:	3fd34413 	.word	0x3fd34413
 8009430:	7ff00000 	.word	0x7ff00000
 8009434:	0800d88a 	.word	0x0800d88a
 8009438:	0800d881 	.word	0x0800d881
 800943c:	0800da9a 	.word	0x0800da9a
 8009440:	3ff80000 	.word	0x3ff80000
 8009444:	0800d8b8 	.word	0x0800d8b8
 8009448:	0800d890 	.word	0x0800d890
 800944c:	2601      	movs	r6, #1
 800944e:	2300      	movs	r3, #0
 8009450:	9307      	str	r3, [sp, #28]
 8009452:	9609      	str	r6, [sp, #36]	; 0x24
 8009454:	f04f 33ff 	mov.w	r3, #4294967295
 8009458:	9304      	str	r3, [sp, #16]
 800945a:	9303      	str	r3, [sp, #12]
 800945c:	2200      	movs	r2, #0
 800945e:	2312      	movs	r3, #18
 8009460:	920a      	str	r2, [sp, #40]	; 0x28
 8009462:	e789      	b.n	8009378 <_dtoa_r+0x250>
 8009464:	2301      	movs	r3, #1
 8009466:	9309      	str	r3, [sp, #36]	; 0x24
 8009468:	e7f4      	b.n	8009454 <_dtoa_r+0x32c>
 800946a:	2301      	movs	r3, #1
 800946c:	9304      	str	r3, [sp, #16]
 800946e:	9303      	str	r3, [sp, #12]
 8009470:	461a      	mov	r2, r3
 8009472:	e7f5      	b.n	8009460 <_dtoa_r+0x338>
 8009474:	686a      	ldr	r2, [r5, #4]
 8009476:	3201      	adds	r2, #1
 8009478:	606a      	str	r2, [r5, #4]
 800947a:	0049      	lsls	r1, r1, #1
 800947c:	e780      	b.n	8009380 <_dtoa_r+0x258>
 800947e:	2502      	movs	r5, #2
 8009480:	e7af      	b.n	80093e2 <_dtoa_r+0x2ba>
 8009482:	07f1      	lsls	r1, r6, #31
 8009484:	d508      	bpl.n	8009498 <_dtoa_r+0x370>
 8009486:	4640      	mov	r0, r8
 8009488:	4649      	mov	r1, r9
 800948a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800948e:	f7f7 f8af 	bl	80005f0 <__aeabi_dmul>
 8009492:	3501      	adds	r5, #1
 8009494:	4680      	mov	r8, r0
 8009496:	4689      	mov	r9, r1
 8009498:	1076      	asrs	r6, r6, #1
 800949a:	3708      	adds	r7, #8
 800949c:	e7a2      	b.n	80093e4 <_dtoa_r+0x2bc>
 800949e:	f000 809d 	beq.w	80095dc <_dtoa_r+0x4b4>
 80094a2:	f1cb 0600 	rsb	r6, fp, #0
 80094a6:	4b9f      	ldr	r3, [pc, #636]	; (8009724 <_dtoa_r+0x5fc>)
 80094a8:	4f9f      	ldr	r7, [pc, #636]	; (8009728 <_dtoa_r+0x600>)
 80094aa:	f006 020f 	and.w	r2, r6, #15
 80094ae:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80094b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094b6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80094ba:	f7f7 f899 	bl	80005f0 <__aeabi_dmul>
 80094be:	e9cd 0100 	strd	r0, r1, [sp]
 80094c2:	1136      	asrs	r6, r6, #4
 80094c4:	2300      	movs	r3, #0
 80094c6:	2502      	movs	r5, #2
 80094c8:	2e00      	cmp	r6, #0
 80094ca:	d17c      	bne.n	80095c6 <_dtoa_r+0x49e>
 80094cc:	2b00      	cmp	r3, #0
 80094ce:	d191      	bne.n	80093f4 <_dtoa_r+0x2cc>
 80094d0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80094d2:	2b00      	cmp	r3, #0
 80094d4:	f000 8084 	beq.w	80095e0 <_dtoa_r+0x4b8>
 80094d8:	e9dd 8900 	ldrd	r8, r9, [sp]
 80094dc:	2200      	movs	r2, #0
 80094de:	4b93      	ldr	r3, [pc, #588]	; (800972c <_dtoa_r+0x604>)
 80094e0:	4640      	mov	r0, r8
 80094e2:	4649      	mov	r1, r9
 80094e4:	f7f7 faf6 	bl	8000ad4 <__aeabi_dcmplt>
 80094e8:	2800      	cmp	r0, #0
 80094ea:	d079      	beq.n	80095e0 <_dtoa_r+0x4b8>
 80094ec:	9b03      	ldr	r3, [sp, #12]
 80094ee:	2b00      	cmp	r3, #0
 80094f0:	d076      	beq.n	80095e0 <_dtoa_r+0x4b8>
 80094f2:	9b04      	ldr	r3, [sp, #16]
 80094f4:	2b00      	cmp	r3, #0
 80094f6:	dd34      	ble.n	8009562 <_dtoa_r+0x43a>
 80094f8:	2200      	movs	r2, #0
 80094fa:	4b8d      	ldr	r3, [pc, #564]	; (8009730 <_dtoa_r+0x608>)
 80094fc:	4640      	mov	r0, r8
 80094fe:	4649      	mov	r1, r9
 8009500:	f7f7 f876 	bl	80005f0 <__aeabi_dmul>
 8009504:	e9cd 0100 	strd	r0, r1, [sp]
 8009508:	9e04      	ldr	r6, [sp, #16]
 800950a:	f10b 37ff 	add.w	r7, fp, #4294967295
 800950e:	3501      	adds	r5, #1
 8009510:	4628      	mov	r0, r5
 8009512:	f7f7 f807 	bl	8000524 <__aeabi_i2d>
 8009516:	e9dd 2300 	ldrd	r2, r3, [sp]
 800951a:	f7f7 f869 	bl	80005f0 <__aeabi_dmul>
 800951e:	2200      	movs	r2, #0
 8009520:	4b84      	ldr	r3, [pc, #528]	; (8009734 <_dtoa_r+0x60c>)
 8009522:	f7f6 feb3 	bl	800028c <__adddf3>
 8009526:	4680      	mov	r8, r0
 8009528:	f1a1 7950 	sub.w	r9, r1, #54525952	; 0x3400000
 800952c:	2e00      	cmp	r6, #0
 800952e:	d15a      	bne.n	80095e6 <_dtoa_r+0x4be>
 8009530:	2200      	movs	r2, #0
 8009532:	4b81      	ldr	r3, [pc, #516]	; (8009738 <_dtoa_r+0x610>)
 8009534:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009538:	f7f6 fea6 	bl	8000288 <__aeabi_dsub>
 800953c:	4642      	mov	r2, r8
 800953e:	464b      	mov	r3, r9
 8009540:	e9cd 0100 	strd	r0, r1, [sp]
 8009544:	f7f7 fae4 	bl	8000b10 <__aeabi_dcmpgt>
 8009548:	2800      	cmp	r0, #0
 800954a:	f040 829b 	bne.w	8009a84 <_dtoa_r+0x95c>
 800954e:	4642      	mov	r2, r8
 8009550:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8009554:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009558:	f7f7 fabc 	bl	8000ad4 <__aeabi_dcmplt>
 800955c:	2800      	cmp	r0, #0
 800955e:	f040 828f 	bne.w	8009a80 <_dtoa_r+0x958>
 8009562:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8009566:	e9cd 2300 	strd	r2, r3, [sp]
 800956a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800956c:	2b00      	cmp	r3, #0
 800956e:	f2c0 8150 	blt.w	8009812 <_dtoa_r+0x6ea>
 8009572:	f1bb 0f0e 	cmp.w	fp, #14
 8009576:	f300 814c 	bgt.w	8009812 <_dtoa_r+0x6ea>
 800957a:	4b6a      	ldr	r3, [pc, #424]	; (8009724 <_dtoa_r+0x5fc>)
 800957c:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8009580:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009584:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009586:	2b00      	cmp	r3, #0
 8009588:	f280 80da 	bge.w	8009740 <_dtoa_r+0x618>
 800958c:	9b03      	ldr	r3, [sp, #12]
 800958e:	2b00      	cmp	r3, #0
 8009590:	f300 80d6 	bgt.w	8009740 <_dtoa_r+0x618>
 8009594:	f040 8273 	bne.w	8009a7e <_dtoa_r+0x956>
 8009598:	2200      	movs	r2, #0
 800959a:	4b67      	ldr	r3, [pc, #412]	; (8009738 <_dtoa_r+0x610>)
 800959c:	4640      	mov	r0, r8
 800959e:	4649      	mov	r1, r9
 80095a0:	f7f7 f826 	bl	80005f0 <__aeabi_dmul>
 80095a4:	e9dd 2300 	ldrd	r2, r3, [sp]
 80095a8:	f7f7 faa8 	bl	8000afc <__aeabi_dcmpge>
 80095ac:	9e03      	ldr	r6, [sp, #12]
 80095ae:	4637      	mov	r7, r6
 80095b0:	2800      	cmp	r0, #0
 80095b2:	f040 824a 	bne.w	8009a4a <_dtoa_r+0x922>
 80095b6:	9b02      	ldr	r3, [sp, #8]
 80095b8:	9a02      	ldr	r2, [sp, #8]
 80095ba:	1c5d      	adds	r5, r3, #1
 80095bc:	2331      	movs	r3, #49	; 0x31
 80095be:	7013      	strb	r3, [r2, #0]
 80095c0:	f10b 0b01 	add.w	fp, fp, #1
 80095c4:	e245      	b.n	8009a52 <_dtoa_r+0x92a>
 80095c6:	07f2      	lsls	r2, r6, #31
 80095c8:	d505      	bpl.n	80095d6 <_dtoa_r+0x4ae>
 80095ca:	e9d7 2300 	ldrd	r2, r3, [r7]
 80095ce:	f7f7 f80f 	bl	80005f0 <__aeabi_dmul>
 80095d2:	3501      	adds	r5, #1
 80095d4:	2301      	movs	r3, #1
 80095d6:	1076      	asrs	r6, r6, #1
 80095d8:	3708      	adds	r7, #8
 80095da:	e775      	b.n	80094c8 <_dtoa_r+0x3a0>
 80095dc:	2502      	movs	r5, #2
 80095de:	e777      	b.n	80094d0 <_dtoa_r+0x3a8>
 80095e0:	465f      	mov	r7, fp
 80095e2:	9e03      	ldr	r6, [sp, #12]
 80095e4:	e794      	b.n	8009510 <_dtoa_r+0x3e8>
 80095e6:	9a02      	ldr	r2, [sp, #8]
 80095e8:	4b4e      	ldr	r3, [pc, #312]	; (8009724 <_dtoa_r+0x5fc>)
 80095ea:	4432      	add	r2, r6
 80095ec:	9213      	str	r2, [sp, #76]	; 0x4c
 80095ee:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80095f0:	1e71      	subs	r1, r6, #1
 80095f2:	2a00      	cmp	r2, #0
 80095f4:	d048      	beq.n	8009688 <_dtoa_r+0x560>
 80095f6:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 80095fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095fe:	2000      	movs	r0, #0
 8009600:	494e      	ldr	r1, [pc, #312]	; (800973c <_dtoa_r+0x614>)
 8009602:	f7f7 f91f 	bl	8000844 <__aeabi_ddiv>
 8009606:	4642      	mov	r2, r8
 8009608:	464b      	mov	r3, r9
 800960a:	f7f6 fe3d 	bl	8000288 <__aeabi_dsub>
 800960e:	9d02      	ldr	r5, [sp, #8]
 8009610:	4680      	mov	r8, r0
 8009612:	4689      	mov	r9, r1
 8009614:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009618:	f7f7 fa9a 	bl	8000b50 <__aeabi_d2iz>
 800961c:	4606      	mov	r6, r0
 800961e:	f7f6 ff81 	bl	8000524 <__aeabi_i2d>
 8009622:	4602      	mov	r2, r0
 8009624:	460b      	mov	r3, r1
 8009626:	e9dd 0100 	ldrd	r0, r1, [sp]
 800962a:	f7f6 fe2d 	bl	8000288 <__aeabi_dsub>
 800962e:	3630      	adds	r6, #48	; 0x30
 8009630:	f805 6b01 	strb.w	r6, [r5], #1
 8009634:	4642      	mov	r2, r8
 8009636:	464b      	mov	r3, r9
 8009638:	e9cd 0100 	strd	r0, r1, [sp]
 800963c:	f7f7 fa4a 	bl	8000ad4 <__aeabi_dcmplt>
 8009640:	2800      	cmp	r0, #0
 8009642:	d165      	bne.n	8009710 <_dtoa_r+0x5e8>
 8009644:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009648:	2000      	movs	r0, #0
 800964a:	4938      	ldr	r1, [pc, #224]	; (800972c <_dtoa_r+0x604>)
 800964c:	f7f6 fe1c 	bl	8000288 <__aeabi_dsub>
 8009650:	4642      	mov	r2, r8
 8009652:	464b      	mov	r3, r9
 8009654:	f7f7 fa3e 	bl	8000ad4 <__aeabi_dcmplt>
 8009658:	2800      	cmp	r0, #0
 800965a:	f040 80ba 	bne.w	80097d2 <_dtoa_r+0x6aa>
 800965e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8009660:	429d      	cmp	r5, r3
 8009662:	f43f af7e 	beq.w	8009562 <_dtoa_r+0x43a>
 8009666:	2200      	movs	r2, #0
 8009668:	4b31      	ldr	r3, [pc, #196]	; (8009730 <_dtoa_r+0x608>)
 800966a:	4640      	mov	r0, r8
 800966c:	4649      	mov	r1, r9
 800966e:	f7f6 ffbf 	bl	80005f0 <__aeabi_dmul>
 8009672:	2200      	movs	r2, #0
 8009674:	4680      	mov	r8, r0
 8009676:	4689      	mov	r9, r1
 8009678:	4b2d      	ldr	r3, [pc, #180]	; (8009730 <_dtoa_r+0x608>)
 800967a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800967e:	f7f6 ffb7 	bl	80005f0 <__aeabi_dmul>
 8009682:	e9cd 0100 	strd	r0, r1, [sp]
 8009686:	e7c5      	b.n	8009614 <_dtoa_r+0x4ec>
 8009688:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 800968c:	4642      	mov	r2, r8
 800968e:	464b      	mov	r3, r9
 8009690:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009694:	f7f6 ffac 	bl	80005f0 <__aeabi_dmul>
 8009698:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800969c:	9d02      	ldr	r5, [sp, #8]
 800969e:	e9dd 0100 	ldrd	r0, r1, [sp]
 80096a2:	f7f7 fa55 	bl	8000b50 <__aeabi_d2iz>
 80096a6:	4606      	mov	r6, r0
 80096a8:	f7f6 ff3c 	bl	8000524 <__aeabi_i2d>
 80096ac:	3630      	adds	r6, #48	; 0x30
 80096ae:	4602      	mov	r2, r0
 80096b0:	460b      	mov	r3, r1
 80096b2:	e9dd 0100 	ldrd	r0, r1, [sp]
 80096b6:	f7f6 fde7 	bl	8000288 <__aeabi_dsub>
 80096ba:	f805 6b01 	strb.w	r6, [r5], #1
 80096be:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80096c0:	42ab      	cmp	r3, r5
 80096c2:	4680      	mov	r8, r0
 80096c4:	4689      	mov	r9, r1
 80096c6:	f04f 0200 	mov.w	r2, #0
 80096ca:	d125      	bne.n	8009718 <_dtoa_r+0x5f0>
 80096cc:	4b1b      	ldr	r3, [pc, #108]	; (800973c <_dtoa_r+0x614>)
 80096ce:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80096d2:	f7f6 fddb 	bl	800028c <__adddf3>
 80096d6:	4602      	mov	r2, r0
 80096d8:	460b      	mov	r3, r1
 80096da:	4640      	mov	r0, r8
 80096dc:	4649      	mov	r1, r9
 80096de:	f7f7 fa17 	bl	8000b10 <__aeabi_dcmpgt>
 80096e2:	2800      	cmp	r0, #0
 80096e4:	d175      	bne.n	80097d2 <_dtoa_r+0x6aa>
 80096e6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80096ea:	2000      	movs	r0, #0
 80096ec:	4913      	ldr	r1, [pc, #76]	; (800973c <_dtoa_r+0x614>)
 80096ee:	f7f6 fdcb 	bl	8000288 <__aeabi_dsub>
 80096f2:	4602      	mov	r2, r0
 80096f4:	460b      	mov	r3, r1
 80096f6:	4640      	mov	r0, r8
 80096f8:	4649      	mov	r1, r9
 80096fa:	f7f7 f9eb 	bl	8000ad4 <__aeabi_dcmplt>
 80096fe:	2800      	cmp	r0, #0
 8009700:	f43f af2f 	beq.w	8009562 <_dtoa_r+0x43a>
 8009704:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8009708:	2b30      	cmp	r3, #48	; 0x30
 800970a:	f105 32ff 	add.w	r2, r5, #4294967295
 800970e:	d001      	beq.n	8009714 <_dtoa_r+0x5ec>
 8009710:	46bb      	mov	fp, r7
 8009712:	e04d      	b.n	80097b0 <_dtoa_r+0x688>
 8009714:	4615      	mov	r5, r2
 8009716:	e7f5      	b.n	8009704 <_dtoa_r+0x5dc>
 8009718:	4b05      	ldr	r3, [pc, #20]	; (8009730 <_dtoa_r+0x608>)
 800971a:	f7f6 ff69 	bl	80005f0 <__aeabi_dmul>
 800971e:	e9cd 0100 	strd	r0, r1, [sp]
 8009722:	e7bc      	b.n	800969e <_dtoa_r+0x576>
 8009724:	0800d8b8 	.word	0x0800d8b8
 8009728:	0800d890 	.word	0x0800d890
 800972c:	3ff00000 	.word	0x3ff00000
 8009730:	40240000 	.word	0x40240000
 8009734:	401c0000 	.word	0x401c0000
 8009738:	40140000 	.word	0x40140000
 800973c:	3fe00000 	.word	0x3fe00000
 8009740:	e9dd 6700 	ldrd	r6, r7, [sp]
 8009744:	9d02      	ldr	r5, [sp, #8]
 8009746:	4642      	mov	r2, r8
 8009748:	464b      	mov	r3, r9
 800974a:	4630      	mov	r0, r6
 800974c:	4639      	mov	r1, r7
 800974e:	f7f7 f879 	bl	8000844 <__aeabi_ddiv>
 8009752:	f7f7 f9fd 	bl	8000b50 <__aeabi_d2iz>
 8009756:	9000      	str	r0, [sp, #0]
 8009758:	f7f6 fee4 	bl	8000524 <__aeabi_i2d>
 800975c:	4642      	mov	r2, r8
 800975e:	464b      	mov	r3, r9
 8009760:	f7f6 ff46 	bl	80005f0 <__aeabi_dmul>
 8009764:	4602      	mov	r2, r0
 8009766:	460b      	mov	r3, r1
 8009768:	4630      	mov	r0, r6
 800976a:	4639      	mov	r1, r7
 800976c:	f7f6 fd8c 	bl	8000288 <__aeabi_dsub>
 8009770:	9e00      	ldr	r6, [sp, #0]
 8009772:	9f03      	ldr	r7, [sp, #12]
 8009774:	3630      	adds	r6, #48	; 0x30
 8009776:	f805 6b01 	strb.w	r6, [r5], #1
 800977a:	9e02      	ldr	r6, [sp, #8]
 800977c:	1bae      	subs	r6, r5, r6
 800977e:	42b7      	cmp	r7, r6
 8009780:	4602      	mov	r2, r0
 8009782:	460b      	mov	r3, r1
 8009784:	d138      	bne.n	80097f8 <_dtoa_r+0x6d0>
 8009786:	f7f6 fd81 	bl	800028c <__adddf3>
 800978a:	4606      	mov	r6, r0
 800978c:	460f      	mov	r7, r1
 800978e:	4602      	mov	r2, r0
 8009790:	460b      	mov	r3, r1
 8009792:	4640      	mov	r0, r8
 8009794:	4649      	mov	r1, r9
 8009796:	f7f7 f99d 	bl	8000ad4 <__aeabi_dcmplt>
 800979a:	b9c8      	cbnz	r0, 80097d0 <_dtoa_r+0x6a8>
 800979c:	4632      	mov	r2, r6
 800979e:	463b      	mov	r3, r7
 80097a0:	4640      	mov	r0, r8
 80097a2:	4649      	mov	r1, r9
 80097a4:	f7f7 f98c 	bl	8000ac0 <__aeabi_dcmpeq>
 80097a8:	b110      	cbz	r0, 80097b0 <_dtoa_r+0x688>
 80097aa:	9b00      	ldr	r3, [sp, #0]
 80097ac:	07db      	lsls	r3, r3, #31
 80097ae:	d40f      	bmi.n	80097d0 <_dtoa_r+0x6a8>
 80097b0:	4651      	mov	r1, sl
 80097b2:	4620      	mov	r0, r4
 80097b4:	f000 fbe7 	bl	8009f86 <_Bfree>
 80097b8:	2300      	movs	r3, #0
 80097ba:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80097bc:	702b      	strb	r3, [r5, #0]
 80097be:	f10b 0301 	add.w	r3, fp, #1
 80097c2:	6013      	str	r3, [r2, #0]
 80097c4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80097c6:	2b00      	cmp	r3, #0
 80097c8:	f43f acf8 	beq.w	80091bc <_dtoa_r+0x94>
 80097cc:	601d      	str	r5, [r3, #0]
 80097ce:	e4f5      	b.n	80091bc <_dtoa_r+0x94>
 80097d0:	465f      	mov	r7, fp
 80097d2:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80097d6:	2a39      	cmp	r2, #57	; 0x39
 80097d8:	f105 33ff 	add.w	r3, r5, #4294967295
 80097dc:	d106      	bne.n	80097ec <_dtoa_r+0x6c4>
 80097de:	9a02      	ldr	r2, [sp, #8]
 80097e0:	429a      	cmp	r2, r3
 80097e2:	d107      	bne.n	80097f4 <_dtoa_r+0x6cc>
 80097e4:	2330      	movs	r3, #48	; 0x30
 80097e6:	7013      	strb	r3, [r2, #0]
 80097e8:	3701      	adds	r7, #1
 80097ea:	4613      	mov	r3, r2
 80097ec:	781a      	ldrb	r2, [r3, #0]
 80097ee:	3201      	adds	r2, #1
 80097f0:	701a      	strb	r2, [r3, #0]
 80097f2:	e78d      	b.n	8009710 <_dtoa_r+0x5e8>
 80097f4:	461d      	mov	r5, r3
 80097f6:	e7ec      	b.n	80097d2 <_dtoa_r+0x6aa>
 80097f8:	2200      	movs	r2, #0
 80097fa:	4ba4      	ldr	r3, [pc, #656]	; (8009a8c <_dtoa_r+0x964>)
 80097fc:	f7f6 fef8 	bl	80005f0 <__aeabi_dmul>
 8009800:	2200      	movs	r2, #0
 8009802:	2300      	movs	r3, #0
 8009804:	4606      	mov	r6, r0
 8009806:	460f      	mov	r7, r1
 8009808:	f7f7 f95a 	bl	8000ac0 <__aeabi_dcmpeq>
 800980c:	2800      	cmp	r0, #0
 800980e:	d09a      	beq.n	8009746 <_dtoa_r+0x61e>
 8009810:	e7ce      	b.n	80097b0 <_dtoa_r+0x688>
 8009812:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009814:	2a00      	cmp	r2, #0
 8009816:	f000 80cd 	beq.w	80099b4 <_dtoa_r+0x88c>
 800981a:	9a07      	ldr	r2, [sp, #28]
 800981c:	2a01      	cmp	r2, #1
 800981e:	f300 80af 	bgt.w	8009980 <_dtoa_r+0x858>
 8009822:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8009824:	2a00      	cmp	r2, #0
 8009826:	f000 80a7 	beq.w	8009978 <_dtoa_r+0x850>
 800982a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800982e:	9e08      	ldr	r6, [sp, #32]
 8009830:	9d05      	ldr	r5, [sp, #20]
 8009832:	9a05      	ldr	r2, [sp, #20]
 8009834:	441a      	add	r2, r3
 8009836:	9205      	str	r2, [sp, #20]
 8009838:	9a06      	ldr	r2, [sp, #24]
 800983a:	2101      	movs	r1, #1
 800983c:	441a      	add	r2, r3
 800983e:	4620      	mov	r0, r4
 8009840:	9206      	str	r2, [sp, #24]
 8009842:	f000 fc40 	bl	800a0c6 <__i2b>
 8009846:	4607      	mov	r7, r0
 8009848:	2d00      	cmp	r5, #0
 800984a:	dd0c      	ble.n	8009866 <_dtoa_r+0x73e>
 800984c:	9b06      	ldr	r3, [sp, #24]
 800984e:	2b00      	cmp	r3, #0
 8009850:	dd09      	ble.n	8009866 <_dtoa_r+0x73e>
 8009852:	42ab      	cmp	r3, r5
 8009854:	9a05      	ldr	r2, [sp, #20]
 8009856:	bfa8      	it	ge
 8009858:	462b      	movge	r3, r5
 800985a:	1ad2      	subs	r2, r2, r3
 800985c:	9205      	str	r2, [sp, #20]
 800985e:	9a06      	ldr	r2, [sp, #24]
 8009860:	1aed      	subs	r5, r5, r3
 8009862:	1ad3      	subs	r3, r2, r3
 8009864:	9306      	str	r3, [sp, #24]
 8009866:	9b08      	ldr	r3, [sp, #32]
 8009868:	b1f3      	cbz	r3, 80098a8 <_dtoa_r+0x780>
 800986a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800986c:	2b00      	cmp	r3, #0
 800986e:	f000 80a5 	beq.w	80099bc <_dtoa_r+0x894>
 8009872:	2e00      	cmp	r6, #0
 8009874:	dd10      	ble.n	8009898 <_dtoa_r+0x770>
 8009876:	4639      	mov	r1, r7
 8009878:	4632      	mov	r2, r6
 800987a:	4620      	mov	r0, r4
 800987c:	f000 fcba 	bl	800a1f4 <__pow5mult>
 8009880:	4652      	mov	r2, sl
 8009882:	4601      	mov	r1, r0
 8009884:	4607      	mov	r7, r0
 8009886:	4620      	mov	r0, r4
 8009888:	f000 fc26 	bl	800a0d8 <__multiply>
 800988c:	4651      	mov	r1, sl
 800988e:	4680      	mov	r8, r0
 8009890:	4620      	mov	r0, r4
 8009892:	f000 fb78 	bl	8009f86 <_Bfree>
 8009896:	46c2      	mov	sl, r8
 8009898:	9b08      	ldr	r3, [sp, #32]
 800989a:	1b9a      	subs	r2, r3, r6
 800989c:	d004      	beq.n	80098a8 <_dtoa_r+0x780>
 800989e:	4651      	mov	r1, sl
 80098a0:	4620      	mov	r0, r4
 80098a2:	f000 fca7 	bl	800a1f4 <__pow5mult>
 80098a6:	4682      	mov	sl, r0
 80098a8:	2101      	movs	r1, #1
 80098aa:	4620      	mov	r0, r4
 80098ac:	f000 fc0b 	bl	800a0c6 <__i2b>
 80098b0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80098b2:	2b00      	cmp	r3, #0
 80098b4:	4606      	mov	r6, r0
 80098b6:	f340 8083 	ble.w	80099c0 <_dtoa_r+0x898>
 80098ba:	461a      	mov	r2, r3
 80098bc:	4601      	mov	r1, r0
 80098be:	4620      	mov	r0, r4
 80098c0:	f000 fc98 	bl	800a1f4 <__pow5mult>
 80098c4:	9b07      	ldr	r3, [sp, #28]
 80098c6:	2b01      	cmp	r3, #1
 80098c8:	4606      	mov	r6, r0
 80098ca:	dd7c      	ble.n	80099c6 <_dtoa_r+0x89e>
 80098cc:	f04f 0800 	mov.w	r8, #0
 80098d0:	6933      	ldr	r3, [r6, #16]
 80098d2:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80098d6:	6918      	ldr	r0, [r3, #16]
 80098d8:	f000 fba7 	bl	800a02a <__hi0bits>
 80098dc:	f1c0 0020 	rsb	r0, r0, #32
 80098e0:	9b06      	ldr	r3, [sp, #24]
 80098e2:	4418      	add	r0, r3
 80098e4:	f010 001f 	ands.w	r0, r0, #31
 80098e8:	f000 8096 	beq.w	8009a18 <_dtoa_r+0x8f0>
 80098ec:	f1c0 0320 	rsb	r3, r0, #32
 80098f0:	2b04      	cmp	r3, #4
 80098f2:	f340 8087 	ble.w	8009a04 <_dtoa_r+0x8dc>
 80098f6:	9b05      	ldr	r3, [sp, #20]
 80098f8:	f1c0 001c 	rsb	r0, r0, #28
 80098fc:	4403      	add	r3, r0
 80098fe:	9305      	str	r3, [sp, #20]
 8009900:	9b06      	ldr	r3, [sp, #24]
 8009902:	4405      	add	r5, r0
 8009904:	4403      	add	r3, r0
 8009906:	9306      	str	r3, [sp, #24]
 8009908:	9b05      	ldr	r3, [sp, #20]
 800990a:	2b00      	cmp	r3, #0
 800990c:	dd05      	ble.n	800991a <_dtoa_r+0x7f2>
 800990e:	4651      	mov	r1, sl
 8009910:	461a      	mov	r2, r3
 8009912:	4620      	mov	r0, r4
 8009914:	f000 fcbc 	bl	800a290 <__lshift>
 8009918:	4682      	mov	sl, r0
 800991a:	9b06      	ldr	r3, [sp, #24]
 800991c:	2b00      	cmp	r3, #0
 800991e:	dd05      	ble.n	800992c <_dtoa_r+0x804>
 8009920:	4631      	mov	r1, r6
 8009922:	461a      	mov	r2, r3
 8009924:	4620      	mov	r0, r4
 8009926:	f000 fcb3 	bl	800a290 <__lshift>
 800992a:	4606      	mov	r6, r0
 800992c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800992e:	2b00      	cmp	r3, #0
 8009930:	d074      	beq.n	8009a1c <_dtoa_r+0x8f4>
 8009932:	4631      	mov	r1, r6
 8009934:	4650      	mov	r0, sl
 8009936:	f000 fcfc 	bl	800a332 <__mcmp>
 800993a:	2800      	cmp	r0, #0
 800993c:	da6e      	bge.n	8009a1c <_dtoa_r+0x8f4>
 800993e:	2300      	movs	r3, #0
 8009940:	4651      	mov	r1, sl
 8009942:	220a      	movs	r2, #10
 8009944:	4620      	mov	r0, r4
 8009946:	f000 fb35 	bl	8009fb4 <__multadd>
 800994a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800994c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8009950:	4682      	mov	sl, r0
 8009952:	2b00      	cmp	r3, #0
 8009954:	f000 81a8 	beq.w	8009ca8 <_dtoa_r+0xb80>
 8009958:	2300      	movs	r3, #0
 800995a:	4639      	mov	r1, r7
 800995c:	220a      	movs	r2, #10
 800995e:	4620      	mov	r0, r4
 8009960:	f000 fb28 	bl	8009fb4 <__multadd>
 8009964:	9b04      	ldr	r3, [sp, #16]
 8009966:	2b00      	cmp	r3, #0
 8009968:	4607      	mov	r7, r0
 800996a:	f300 80c8 	bgt.w	8009afe <_dtoa_r+0x9d6>
 800996e:	9b07      	ldr	r3, [sp, #28]
 8009970:	2b02      	cmp	r3, #2
 8009972:	f340 80c4 	ble.w	8009afe <_dtoa_r+0x9d6>
 8009976:	e059      	b.n	8009a2c <_dtoa_r+0x904>
 8009978:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800997a:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800997e:	e756      	b.n	800982e <_dtoa_r+0x706>
 8009980:	9b03      	ldr	r3, [sp, #12]
 8009982:	1e5e      	subs	r6, r3, #1
 8009984:	9b08      	ldr	r3, [sp, #32]
 8009986:	42b3      	cmp	r3, r6
 8009988:	bfbf      	itttt	lt
 800998a:	9b08      	ldrlt	r3, [sp, #32]
 800998c:	9608      	strlt	r6, [sp, #32]
 800998e:	1af2      	sublt	r2, r6, r3
 8009990:	9b0b      	ldrlt	r3, [sp, #44]	; 0x2c
 8009992:	bfb6      	itet	lt
 8009994:	189b      	addlt	r3, r3, r2
 8009996:	1b9e      	subge	r6, r3, r6
 8009998:	930b      	strlt	r3, [sp, #44]	; 0x2c
 800999a:	9b03      	ldr	r3, [sp, #12]
 800999c:	bfb8      	it	lt
 800999e:	2600      	movlt	r6, #0
 80099a0:	2b00      	cmp	r3, #0
 80099a2:	bfb9      	ittee	lt
 80099a4:	9b05      	ldrlt	r3, [sp, #20]
 80099a6:	9a03      	ldrlt	r2, [sp, #12]
 80099a8:	9d05      	ldrge	r5, [sp, #20]
 80099aa:	9b03      	ldrge	r3, [sp, #12]
 80099ac:	bfbc      	itt	lt
 80099ae:	1a9d      	sublt	r5, r3, r2
 80099b0:	2300      	movlt	r3, #0
 80099b2:	e73e      	b.n	8009832 <_dtoa_r+0x70a>
 80099b4:	9e08      	ldr	r6, [sp, #32]
 80099b6:	9d05      	ldr	r5, [sp, #20]
 80099b8:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80099ba:	e745      	b.n	8009848 <_dtoa_r+0x720>
 80099bc:	9a08      	ldr	r2, [sp, #32]
 80099be:	e76e      	b.n	800989e <_dtoa_r+0x776>
 80099c0:	9b07      	ldr	r3, [sp, #28]
 80099c2:	2b01      	cmp	r3, #1
 80099c4:	dc19      	bgt.n	80099fa <_dtoa_r+0x8d2>
 80099c6:	9b00      	ldr	r3, [sp, #0]
 80099c8:	b9bb      	cbnz	r3, 80099fa <_dtoa_r+0x8d2>
 80099ca:	9b01      	ldr	r3, [sp, #4]
 80099cc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80099d0:	b99b      	cbnz	r3, 80099fa <_dtoa_r+0x8d2>
 80099d2:	9b01      	ldr	r3, [sp, #4]
 80099d4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80099d8:	0d1b      	lsrs	r3, r3, #20
 80099da:	051b      	lsls	r3, r3, #20
 80099dc:	b183      	cbz	r3, 8009a00 <_dtoa_r+0x8d8>
 80099de:	9b05      	ldr	r3, [sp, #20]
 80099e0:	3301      	adds	r3, #1
 80099e2:	9305      	str	r3, [sp, #20]
 80099e4:	9b06      	ldr	r3, [sp, #24]
 80099e6:	3301      	adds	r3, #1
 80099e8:	9306      	str	r3, [sp, #24]
 80099ea:	f04f 0801 	mov.w	r8, #1
 80099ee:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80099f0:	2b00      	cmp	r3, #0
 80099f2:	f47f af6d 	bne.w	80098d0 <_dtoa_r+0x7a8>
 80099f6:	2001      	movs	r0, #1
 80099f8:	e772      	b.n	80098e0 <_dtoa_r+0x7b8>
 80099fa:	f04f 0800 	mov.w	r8, #0
 80099fe:	e7f6      	b.n	80099ee <_dtoa_r+0x8c6>
 8009a00:	4698      	mov	r8, r3
 8009a02:	e7f4      	b.n	80099ee <_dtoa_r+0x8c6>
 8009a04:	d080      	beq.n	8009908 <_dtoa_r+0x7e0>
 8009a06:	9a05      	ldr	r2, [sp, #20]
 8009a08:	331c      	adds	r3, #28
 8009a0a:	441a      	add	r2, r3
 8009a0c:	9205      	str	r2, [sp, #20]
 8009a0e:	9a06      	ldr	r2, [sp, #24]
 8009a10:	441a      	add	r2, r3
 8009a12:	441d      	add	r5, r3
 8009a14:	4613      	mov	r3, r2
 8009a16:	e776      	b.n	8009906 <_dtoa_r+0x7de>
 8009a18:	4603      	mov	r3, r0
 8009a1a:	e7f4      	b.n	8009a06 <_dtoa_r+0x8de>
 8009a1c:	9b03      	ldr	r3, [sp, #12]
 8009a1e:	2b00      	cmp	r3, #0
 8009a20:	dc36      	bgt.n	8009a90 <_dtoa_r+0x968>
 8009a22:	9b07      	ldr	r3, [sp, #28]
 8009a24:	2b02      	cmp	r3, #2
 8009a26:	dd33      	ble.n	8009a90 <_dtoa_r+0x968>
 8009a28:	9b03      	ldr	r3, [sp, #12]
 8009a2a:	9304      	str	r3, [sp, #16]
 8009a2c:	9b04      	ldr	r3, [sp, #16]
 8009a2e:	b963      	cbnz	r3, 8009a4a <_dtoa_r+0x922>
 8009a30:	4631      	mov	r1, r6
 8009a32:	2205      	movs	r2, #5
 8009a34:	4620      	mov	r0, r4
 8009a36:	f000 fabd 	bl	8009fb4 <__multadd>
 8009a3a:	4601      	mov	r1, r0
 8009a3c:	4606      	mov	r6, r0
 8009a3e:	4650      	mov	r0, sl
 8009a40:	f000 fc77 	bl	800a332 <__mcmp>
 8009a44:	2800      	cmp	r0, #0
 8009a46:	f73f adb6 	bgt.w	80095b6 <_dtoa_r+0x48e>
 8009a4a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009a4c:	9d02      	ldr	r5, [sp, #8]
 8009a4e:	ea6f 0b03 	mvn.w	fp, r3
 8009a52:	2300      	movs	r3, #0
 8009a54:	9303      	str	r3, [sp, #12]
 8009a56:	4631      	mov	r1, r6
 8009a58:	4620      	mov	r0, r4
 8009a5a:	f000 fa94 	bl	8009f86 <_Bfree>
 8009a5e:	2f00      	cmp	r7, #0
 8009a60:	f43f aea6 	beq.w	80097b0 <_dtoa_r+0x688>
 8009a64:	9b03      	ldr	r3, [sp, #12]
 8009a66:	b12b      	cbz	r3, 8009a74 <_dtoa_r+0x94c>
 8009a68:	42bb      	cmp	r3, r7
 8009a6a:	d003      	beq.n	8009a74 <_dtoa_r+0x94c>
 8009a6c:	4619      	mov	r1, r3
 8009a6e:	4620      	mov	r0, r4
 8009a70:	f000 fa89 	bl	8009f86 <_Bfree>
 8009a74:	4639      	mov	r1, r7
 8009a76:	4620      	mov	r0, r4
 8009a78:	f000 fa85 	bl	8009f86 <_Bfree>
 8009a7c:	e698      	b.n	80097b0 <_dtoa_r+0x688>
 8009a7e:	2600      	movs	r6, #0
 8009a80:	4637      	mov	r7, r6
 8009a82:	e7e2      	b.n	8009a4a <_dtoa_r+0x922>
 8009a84:	46bb      	mov	fp, r7
 8009a86:	4637      	mov	r7, r6
 8009a88:	e595      	b.n	80095b6 <_dtoa_r+0x48e>
 8009a8a:	bf00      	nop
 8009a8c:	40240000 	.word	0x40240000
 8009a90:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009a92:	bb93      	cbnz	r3, 8009afa <_dtoa_r+0x9d2>
 8009a94:	9b03      	ldr	r3, [sp, #12]
 8009a96:	9304      	str	r3, [sp, #16]
 8009a98:	9d02      	ldr	r5, [sp, #8]
 8009a9a:	4631      	mov	r1, r6
 8009a9c:	4650      	mov	r0, sl
 8009a9e:	f7ff fab7 	bl	8009010 <quorem>
 8009aa2:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8009aa6:	f805 9b01 	strb.w	r9, [r5], #1
 8009aaa:	9b02      	ldr	r3, [sp, #8]
 8009aac:	9a04      	ldr	r2, [sp, #16]
 8009aae:	1aeb      	subs	r3, r5, r3
 8009ab0:	429a      	cmp	r2, r3
 8009ab2:	f300 80dc 	bgt.w	8009c6e <_dtoa_r+0xb46>
 8009ab6:	9b02      	ldr	r3, [sp, #8]
 8009ab8:	2a01      	cmp	r2, #1
 8009aba:	bfac      	ite	ge
 8009abc:	189b      	addge	r3, r3, r2
 8009abe:	3301      	addlt	r3, #1
 8009ac0:	4698      	mov	r8, r3
 8009ac2:	2300      	movs	r3, #0
 8009ac4:	9303      	str	r3, [sp, #12]
 8009ac6:	4651      	mov	r1, sl
 8009ac8:	2201      	movs	r2, #1
 8009aca:	4620      	mov	r0, r4
 8009acc:	f000 fbe0 	bl	800a290 <__lshift>
 8009ad0:	4631      	mov	r1, r6
 8009ad2:	4682      	mov	sl, r0
 8009ad4:	f000 fc2d 	bl	800a332 <__mcmp>
 8009ad8:	2800      	cmp	r0, #0
 8009ada:	f300 808d 	bgt.w	8009bf8 <_dtoa_r+0xad0>
 8009ade:	d103      	bne.n	8009ae8 <_dtoa_r+0x9c0>
 8009ae0:	f019 0f01 	tst.w	r9, #1
 8009ae4:	f040 8088 	bne.w	8009bf8 <_dtoa_r+0xad0>
 8009ae8:	4645      	mov	r5, r8
 8009aea:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8009aee:	2b30      	cmp	r3, #48	; 0x30
 8009af0:	f105 32ff 	add.w	r2, r5, #4294967295
 8009af4:	d1af      	bne.n	8009a56 <_dtoa_r+0x92e>
 8009af6:	4615      	mov	r5, r2
 8009af8:	e7f7      	b.n	8009aea <_dtoa_r+0x9c2>
 8009afa:	9b03      	ldr	r3, [sp, #12]
 8009afc:	9304      	str	r3, [sp, #16]
 8009afe:	2d00      	cmp	r5, #0
 8009b00:	dd05      	ble.n	8009b0e <_dtoa_r+0x9e6>
 8009b02:	4639      	mov	r1, r7
 8009b04:	462a      	mov	r2, r5
 8009b06:	4620      	mov	r0, r4
 8009b08:	f000 fbc2 	bl	800a290 <__lshift>
 8009b0c:	4607      	mov	r7, r0
 8009b0e:	f1b8 0f00 	cmp.w	r8, #0
 8009b12:	d04c      	beq.n	8009bae <_dtoa_r+0xa86>
 8009b14:	6879      	ldr	r1, [r7, #4]
 8009b16:	4620      	mov	r0, r4
 8009b18:	f000 fa01 	bl	8009f1e <_Balloc>
 8009b1c:	693a      	ldr	r2, [r7, #16]
 8009b1e:	3202      	adds	r2, #2
 8009b20:	4605      	mov	r5, r0
 8009b22:	0092      	lsls	r2, r2, #2
 8009b24:	f107 010c 	add.w	r1, r7, #12
 8009b28:	300c      	adds	r0, #12
 8009b2a:	f000 f9ed 	bl	8009f08 <memcpy>
 8009b2e:	2201      	movs	r2, #1
 8009b30:	4629      	mov	r1, r5
 8009b32:	4620      	mov	r0, r4
 8009b34:	f000 fbac 	bl	800a290 <__lshift>
 8009b38:	9b00      	ldr	r3, [sp, #0]
 8009b3a:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8009b3e:	9703      	str	r7, [sp, #12]
 8009b40:	f003 0301 	and.w	r3, r3, #1
 8009b44:	4607      	mov	r7, r0
 8009b46:	9305      	str	r3, [sp, #20]
 8009b48:	4631      	mov	r1, r6
 8009b4a:	4650      	mov	r0, sl
 8009b4c:	f7ff fa60 	bl	8009010 <quorem>
 8009b50:	9903      	ldr	r1, [sp, #12]
 8009b52:	4605      	mov	r5, r0
 8009b54:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8009b58:	4650      	mov	r0, sl
 8009b5a:	f000 fbea 	bl	800a332 <__mcmp>
 8009b5e:	463a      	mov	r2, r7
 8009b60:	9000      	str	r0, [sp, #0]
 8009b62:	4631      	mov	r1, r6
 8009b64:	4620      	mov	r0, r4
 8009b66:	f000 fbfe 	bl	800a366 <__mdiff>
 8009b6a:	68c3      	ldr	r3, [r0, #12]
 8009b6c:	4602      	mov	r2, r0
 8009b6e:	bb03      	cbnz	r3, 8009bb2 <_dtoa_r+0xa8a>
 8009b70:	4601      	mov	r1, r0
 8009b72:	9006      	str	r0, [sp, #24]
 8009b74:	4650      	mov	r0, sl
 8009b76:	f000 fbdc 	bl	800a332 <__mcmp>
 8009b7a:	9a06      	ldr	r2, [sp, #24]
 8009b7c:	4603      	mov	r3, r0
 8009b7e:	4611      	mov	r1, r2
 8009b80:	4620      	mov	r0, r4
 8009b82:	9306      	str	r3, [sp, #24]
 8009b84:	f000 f9ff 	bl	8009f86 <_Bfree>
 8009b88:	9b06      	ldr	r3, [sp, #24]
 8009b8a:	b9a3      	cbnz	r3, 8009bb6 <_dtoa_r+0xa8e>
 8009b8c:	9a07      	ldr	r2, [sp, #28]
 8009b8e:	b992      	cbnz	r2, 8009bb6 <_dtoa_r+0xa8e>
 8009b90:	9a05      	ldr	r2, [sp, #20]
 8009b92:	b982      	cbnz	r2, 8009bb6 <_dtoa_r+0xa8e>
 8009b94:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8009b98:	d029      	beq.n	8009bee <_dtoa_r+0xac6>
 8009b9a:	9b00      	ldr	r3, [sp, #0]
 8009b9c:	2b00      	cmp	r3, #0
 8009b9e:	dd01      	ble.n	8009ba4 <_dtoa_r+0xa7c>
 8009ba0:	f105 0931 	add.w	r9, r5, #49	; 0x31
 8009ba4:	f108 0501 	add.w	r5, r8, #1
 8009ba8:	f888 9000 	strb.w	r9, [r8]
 8009bac:	e753      	b.n	8009a56 <_dtoa_r+0x92e>
 8009bae:	4638      	mov	r0, r7
 8009bb0:	e7c2      	b.n	8009b38 <_dtoa_r+0xa10>
 8009bb2:	2301      	movs	r3, #1
 8009bb4:	e7e3      	b.n	8009b7e <_dtoa_r+0xa56>
 8009bb6:	9a00      	ldr	r2, [sp, #0]
 8009bb8:	2a00      	cmp	r2, #0
 8009bba:	db04      	blt.n	8009bc6 <_dtoa_r+0xa9e>
 8009bbc:	d125      	bne.n	8009c0a <_dtoa_r+0xae2>
 8009bbe:	9a07      	ldr	r2, [sp, #28]
 8009bc0:	bb1a      	cbnz	r2, 8009c0a <_dtoa_r+0xae2>
 8009bc2:	9a05      	ldr	r2, [sp, #20]
 8009bc4:	bb0a      	cbnz	r2, 8009c0a <_dtoa_r+0xae2>
 8009bc6:	2b00      	cmp	r3, #0
 8009bc8:	ddec      	ble.n	8009ba4 <_dtoa_r+0xa7c>
 8009bca:	4651      	mov	r1, sl
 8009bcc:	2201      	movs	r2, #1
 8009bce:	4620      	mov	r0, r4
 8009bd0:	f000 fb5e 	bl	800a290 <__lshift>
 8009bd4:	4631      	mov	r1, r6
 8009bd6:	4682      	mov	sl, r0
 8009bd8:	f000 fbab 	bl	800a332 <__mcmp>
 8009bdc:	2800      	cmp	r0, #0
 8009bde:	dc03      	bgt.n	8009be8 <_dtoa_r+0xac0>
 8009be0:	d1e0      	bne.n	8009ba4 <_dtoa_r+0xa7c>
 8009be2:	f019 0f01 	tst.w	r9, #1
 8009be6:	d0dd      	beq.n	8009ba4 <_dtoa_r+0xa7c>
 8009be8:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8009bec:	d1d8      	bne.n	8009ba0 <_dtoa_r+0xa78>
 8009bee:	2339      	movs	r3, #57	; 0x39
 8009bf0:	f888 3000 	strb.w	r3, [r8]
 8009bf4:	f108 0801 	add.w	r8, r8, #1
 8009bf8:	4645      	mov	r5, r8
 8009bfa:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8009bfe:	2b39      	cmp	r3, #57	; 0x39
 8009c00:	f105 32ff 	add.w	r2, r5, #4294967295
 8009c04:	d03b      	beq.n	8009c7e <_dtoa_r+0xb56>
 8009c06:	3301      	adds	r3, #1
 8009c08:	e040      	b.n	8009c8c <_dtoa_r+0xb64>
 8009c0a:	2b00      	cmp	r3, #0
 8009c0c:	f108 0501 	add.w	r5, r8, #1
 8009c10:	dd05      	ble.n	8009c1e <_dtoa_r+0xaf6>
 8009c12:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8009c16:	d0ea      	beq.n	8009bee <_dtoa_r+0xac6>
 8009c18:	f109 0901 	add.w	r9, r9, #1
 8009c1c:	e7c4      	b.n	8009ba8 <_dtoa_r+0xa80>
 8009c1e:	9b02      	ldr	r3, [sp, #8]
 8009c20:	9a04      	ldr	r2, [sp, #16]
 8009c22:	f805 9c01 	strb.w	r9, [r5, #-1]
 8009c26:	1aeb      	subs	r3, r5, r3
 8009c28:	4293      	cmp	r3, r2
 8009c2a:	46a8      	mov	r8, r5
 8009c2c:	f43f af4b 	beq.w	8009ac6 <_dtoa_r+0x99e>
 8009c30:	4651      	mov	r1, sl
 8009c32:	2300      	movs	r3, #0
 8009c34:	220a      	movs	r2, #10
 8009c36:	4620      	mov	r0, r4
 8009c38:	f000 f9bc 	bl	8009fb4 <__multadd>
 8009c3c:	9b03      	ldr	r3, [sp, #12]
 8009c3e:	9903      	ldr	r1, [sp, #12]
 8009c40:	42bb      	cmp	r3, r7
 8009c42:	4682      	mov	sl, r0
 8009c44:	f04f 0300 	mov.w	r3, #0
 8009c48:	f04f 020a 	mov.w	r2, #10
 8009c4c:	4620      	mov	r0, r4
 8009c4e:	d104      	bne.n	8009c5a <_dtoa_r+0xb32>
 8009c50:	f000 f9b0 	bl	8009fb4 <__multadd>
 8009c54:	9003      	str	r0, [sp, #12]
 8009c56:	4607      	mov	r7, r0
 8009c58:	e776      	b.n	8009b48 <_dtoa_r+0xa20>
 8009c5a:	f000 f9ab 	bl	8009fb4 <__multadd>
 8009c5e:	2300      	movs	r3, #0
 8009c60:	9003      	str	r0, [sp, #12]
 8009c62:	220a      	movs	r2, #10
 8009c64:	4639      	mov	r1, r7
 8009c66:	4620      	mov	r0, r4
 8009c68:	f000 f9a4 	bl	8009fb4 <__multadd>
 8009c6c:	e7f3      	b.n	8009c56 <_dtoa_r+0xb2e>
 8009c6e:	4651      	mov	r1, sl
 8009c70:	2300      	movs	r3, #0
 8009c72:	220a      	movs	r2, #10
 8009c74:	4620      	mov	r0, r4
 8009c76:	f000 f99d 	bl	8009fb4 <__multadd>
 8009c7a:	4682      	mov	sl, r0
 8009c7c:	e70d      	b.n	8009a9a <_dtoa_r+0x972>
 8009c7e:	9b02      	ldr	r3, [sp, #8]
 8009c80:	4293      	cmp	r3, r2
 8009c82:	d105      	bne.n	8009c90 <_dtoa_r+0xb68>
 8009c84:	9a02      	ldr	r2, [sp, #8]
 8009c86:	f10b 0b01 	add.w	fp, fp, #1
 8009c8a:	2331      	movs	r3, #49	; 0x31
 8009c8c:	7013      	strb	r3, [r2, #0]
 8009c8e:	e6e2      	b.n	8009a56 <_dtoa_r+0x92e>
 8009c90:	4615      	mov	r5, r2
 8009c92:	e7b2      	b.n	8009bfa <_dtoa_r+0xad2>
 8009c94:	4b09      	ldr	r3, [pc, #36]	; (8009cbc <_dtoa_r+0xb94>)
 8009c96:	f7ff baae 	b.w	80091f6 <_dtoa_r+0xce>
 8009c9a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009c9c:	2b00      	cmp	r3, #0
 8009c9e:	f47f aa88 	bne.w	80091b2 <_dtoa_r+0x8a>
 8009ca2:	4b07      	ldr	r3, [pc, #28]	; (8009cc0 <_dtoa_r+0xb98>)
 8009ca4:	f7ff baa7 	b.w	80091f6 <_dtoa_r+0xce>
 8009ca8:	9b04      	ldr	r3, [sp, #16]
 8009caa:	2b00      	cmp	r3, #0
 8009cac:	f73f aef4 	bgt.w	8009a98 <_dtoa_r+0x970>
 8009cb0:	9b07      	ldr	r3, [sp, #28]
 8009cb2:	2b02      	cmp	r3, #2
 8009cb4:	f77f aef0 	ble.w	8009a98 <_dtoa_r+0x970>
 8009cb8:	e6b8      	b.n	8009a2c <_dtoa_r+0x904>
 8009cba:	bf00      	nop
 8009cbc:	0800da99 	.word	0x0800da99
 8009cc0:	0800d881 	.word	0x0800d881

08009cc4 <_malloc_trim_r>:
 8009cc4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009cc8:	4f25      	ldr	r7, [pc, #148]	; (8009d60 <_malloc_trim_r+0x9c>)
 8009cca:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 8009d6c <_malloc_trim_r+0xa8>
 8009cce:	4689      	mov	r9, r1
 8009cd0:	4606      	mov	r6, r0
 8009cd2:	f7fe f979 	bl	8007fc8 <__malloc_lock>
 8009cd6:	68bb      	ldr	r3, [r7, #8]
 8009cd8:	685d      	ldr	r5, [r3, #4]
 8009cda:	f1a8 0411 	sub.w	r4, r8, #17
 8009cde:	f025 0503 	bic.w	r5, r5, #3
 8009ce2:	eba4 0409 	sub.w	r4, r4, r9
 8009ce6:	442c      	add	r4, r5
 8009ce8:	fbb4 f4f8 	udiv	r4, r4, r8
 8009cec:	3c01      	subs	r4, #1
 8009cee:	fb08 f404 	mul.w	r4, r8, r4
 8009cf2:	4544      	cmp	r4, r8
 8009cf4:	da05      	bge.n	8009d02 <_malloc_trim_r+0x3e>
 8009cf6:	4630      	mov	r0, r6
 8009cf8:	f7fe f96c 	bl	8007fd4 <__malloc_unlock>
 8009cfc:	2000      	movs	r0, #0
 8009cfe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009d02:	2100      	movs	r1, #0
 8009d04:	4630      	mov	r0, r6
 8009d06:	f7fe f96b 	bl	8007fe0 <_sbrk_r>
 8009d0a:	68bb      	ldr	r3, [r7, #8]
 8009d0c:	442b      	add	r3, r5
 8009d0e:	4298      	cmp	r0, r3
 8009d10:	d1f1      	bne.n	8009cf6 <_malloc_trim_r+0x32>
 8009d12:	4261      	negs	r1, r4
 8009d14:	4630      	mov	r0, r6
 8009d16:	f7fe f963 	bl	8007fe0 <_sbrk_r>
 8009d1a:	3001      	adds	r0, #1
 8009d1c:	d110      	bne.n	8009d40 <_malloc_trim_r+0x7c>
 8009d1e:	2100      	movs	r1, #0
 8009d20:	4630      	mov	r0, r6
 8009d22:	f7fe f95d 	bl	8007fe0 <_sbrk_r>
 8009d26:	68ba      	ldr	r2, [r7, #8]
 8009d28:	1a83      	subs	r3, r0, r2
 8009d2a:	2b0f      	cmp	r3, #15
 8009d2c:	dde3      	ble.n	8009cf6 <_malloc_trim_r+0x32>
 8009d2e:	490d      	ldr	r1, [pc, #52]	; (8009d64 <_malloc_trim_r+0xa0>)
 8009d30:	6809      	ldr	r1, [r1, #0]
 8009d32:	1a40      	subs	r0, r0, r1
 8009d34:	490c      	ldr	r1, [pc, #48]	; (8009d68 <_malloc_trim_r+0xa4>)
 8009d36:	f043 0301 	orr.w	r3, r3, #1
 8009d3a:	6008      	str	r0, [r1, #0]
 8009d3c:	6053      	str	r3, [r2, #4]
 8009d3e:	e7da      	b.n	8009cf6 <_malloc_trim_r+0x32>
 8009d40:	68bb      	ldr	r3, [r7, #8]
 8009d42:	4a09      	ldr	r2, [pc, #36]	; (8009d68 <_malloc_trim_r+0xa4>)
 8009d44:	1b2d      	subs	r5, r5, r4
 8009d46:	f045 0501 	orr.w	r5, r5, #1
 8009d4a:	605d      	str	r5, [r3, #4]
 8009d4c:	6813      	ldr	r3, [r2, #0]
 8009d4e:	4630      	mov	r0, r6
 8009d50:	1b1c      	subs	r4, r3, r4
 8009d52:	6014      	str	r4, [r2, #0]
 8009d54:	f7fe f93e 	bl	8007fd4 <__malloc_unlock>
 8009d58:	2001      	movs	r0, #1
 8009d5a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009d5e:	bf00      	nop
 8009d60:	20000014 	.word	0x20000014
 8009d64:	2000041c 	.word	0x2000041c
 8009d68:	2000674c 	.word	0x2000674c
 8009d6c:	00000080 	.word	0x00000080

08009d70 <_free_r>:
 8009d70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009d74:	4604      	mov	r4, r0
 8009d76:	4688      	mov	r8, r1
 8009d78:	2900      	cmp	r1, #0
 8009d7a:	f000 80ab 	beq.w	8009ed4 <_free_r+0x164>
 8009d7e:	f7fe f923 	bl	8007fc8 <__malloc_lock>
 8009d82:	f858 2c04 	ldr.w	r2, [r8, #-4]
 8009d86:	4d54      	ldr	r5, [pc, #336]	; (8009ed8 <_free_r+0x168>)
 8009d88:	f022 0001 	bic.w	r0, r2, #1
 8009d8c:	f1a8 0308 	sub.w	r3, r8, #8
 8009d90:	181f      	adds	r7, r3, r0
 8009d92:	68a9      	ldr	r1, [r5, #8]
 8009d94:	687e      	ldr	r6, [r7, #4]
 8009d96:	428f      	cmp	r7, r1
 8009d98:	f026 0603 	bic.w	r6, r6, #3
 8009d9c:	f002 0201 	and.w	r2, r2, #1
 8009da0:	d11b      	bne.n	8009dda <_free_r+0x6a>
 8009da2:	4430      	add	r0, r6
 8009da4:	b93a      	cbnz	r2, 8009db6 <_free_r+0x46>
 8009da6:	f858 2c08 	ldr.w	r2, [r8, #-8]
 8009daa:	1a9b      	subs	r3, r3, r2
 8009dac:	4410      	add	r0, r2
 8009dae:	6899      	ldr	r1, [r3, #8]
 8009db0:	68da      	ldr	r2, [r3, #12]
 8009db2:	60ca      	str	r2, [r1, #12]
 8009db4:	6091      	str	r1, [r2, #8]
 8009db6:	f040 0201 	orr.w	r2, r0, #1
 8009dba:	605a      	str	r2, [r3, #4]
 8009dbc:	60ab      	str	r3, [r5, #8]
 8009dbe:	4b47      	ldr	r3, [pc, #284]	; (8009edc <_free_r+0x16c>)
 8009dc0:	681b      	ldr	r3, [r3, #0]
 8009dc2:	4298      	cmp	r0, r3
 8009dc4:	d304      	bcc.n	8009dd0 <_free_r+0x60>
 8009dc6:	4b46      	ldr	r3, [pc, #280]	; (8009ee0 <_free_r+0x170>)
 8009dc8:	4620      	mov	r0, r4
 8009dca:	6819      	ldr	r1, [r3, #0]
 8009dcc:	f7ff ff7a 	bl	8009cc4 <_malloc_trim_r>
 8009dd0:	4620      	mov	r0, r4
 8009dd2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009dd6:	f7fe b8fd 	b.w	8007fd4 <__malloc_unlock>
 8009dda:	607e      	str	r6, [r7, #4]
 8009ddc:	2a00      	cmp	r2, #0
 8009dde:	d139      	bne.n	8009e54 <_free_r+0xe4>
 8009de0:	f858 1c08 	ldr.w	r1, [r8, #-8]
 8009de4:	1a5b      	subs	r3, r3, r1
 8009de6:	4408      	add	r0, r1
 8009de8:	6899      	ldr	r1, [r3, #8]
 8009dea:	f105 0e08 	add.w	lr, r5, #8
 8009dee:	4571      	cmp	r1, lr
 8009df0:	d032      	beq.n	8009e58 <_free_r+0xe8>
 8009df2:	f8d3 e00c 	ldr.w	lr, [r3, #12]
 8009df6:	f8c1 e00c 	str.w	lr, [r1, #12]
 8009dfa:	f8ce 1008 	str.w	r1, [lr, #8]
 8009dfe:	19b9      	adds	r1, r7, r6
 8009e00:	6849      	ldr	r1, [r1, #4]
 8009e02:	07c9      	lsls	r1, r1, #31
 8009e04:	d40a      	bmi.n	8009e1c <_free_r+0xac>
 8009e06:	4430      	add	r0, r6
 8009e08:	68b9      	ldr	r1, [r7, #8]
 8009e0a:	bb3a      	cbnz	r2, 8009e5c <_free_r+0xec>
 8009e0c:	4e35      	ldr	r6, [pc, #212]	; (8009ee4 <_free_r+0x174>)
 8009e0e:	42b1      	cmp	r1, r6
 8009e10:	d124      	bne.n	8009e5c <_free_r+0xec>
 8009e12:	616b      	str	r3, [r5, #20]
 8009e14:	612b      	str	r3, [r5, #16]
 8009e16:	2201      	movs	r2, #1
 8009e18:	60d9      	str	r1, [r3, #12]
 8009e1a:	6099      	str	r1, [r3, #8]
 8009e1c:	f040 0101 	orr.w	r1, r0, #1
 8009e20:	6059      	str	r1, [r3, #4]
 8009e22:	5018      	str	r0, [r3, r0]
 8009e24:	2a00      	cmp	r2, #0
 8009e26:	d1d3      	bne.n	8009dd0 <_free_r+0x60>
 8009e28:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8009e2c:	d21a      	bcs.n	8009e64 <_free_r+0xf4>
 8009e2e:	08c0      	lsrs	r0, r0, #3
 8009e30:	1081      	asrs	r1, r0, #2
 8009e32:	2201      	movs	r2, #1
 8009e34:	408a      	lsls	r2, r1
 8009e36:	6869      	ldr	r1, [r5, #4]
 8009e38:	3001      	adds	r0, #1
 8009e3a:	430a      	orrs	r2, r1
 8009e3c:	606a      	str	r2, [r5, #4]
 8009e3e:	eb05 02c0 	add.w	r2, r5, r0, lsl #3
 8009e42:	f855 1030 	ldr.w	r1, [r5, r0, lsl #3]
 8009e46:	6099      	str	r1, [r3, #8]
 8009e48:	3a08      	subs	r2, #8
 8009e4a:	60da      	str	r2, [r3, #12]
 8009e4c:	f845 3030 	str.w	r3, [r5, r0, lsl #3]
 8009e50:	60cb      	str	r3, [r1, #12]
 8009e52:	e7bd      	b.n	8009dd0 <_free_r+0x60>
 8009e54:	2200      	movs	r2, #0
 8009e56:	e7d2      	b.n	8009dfe <_free_r+0x8e>
 8009e58:	2201      	movs	r2, #1
 8009e5a:	e7d0      	b.n	8009dfe <_free_r+0x8e>
 8009e5c:	68fe      	ldr	r6, [r7, #12]
 8009e5e:	60ce      	str	r6, [r1, #12]
 8009e60:	60b1      	str	r1, [r6, #8]
 8009e62:	e7db      	b.n	8009e1c <_free_r+0xac>
 8009e64:	0a42      	lsrs	r2, r0, #9
 8009e66:	2a04      	cmp	r2, #4
 8009e68:	d813      	bhi.n	8009e92 <_free_r+0x122>
 8009e6a:	0982      	lsrs	r2, r0, #6
 8009e6c:	3238      	adds	r2, #56	; 0x38
 8009e6e:	1c51      	adds	r1, r2, #1
 8009e70:	eb05 06c2 	add.w	r6, r5, r2, lsl #3
 8009e74:	f855 1031 	ldr.w	r1, [r5, r1, lsl #3]
 8009e78:	428e      	cmp	r6, r1
 8009e7a:	d124      	bne.n	8009ec6 <_free_r+0x156>
 8009e7c:	2001      	movs	r0, #1
 8009e7e:	1092      	asrs	r2, r2, #2
 8009e80:	fa00 f202 	lsl.w	r2, r0, r2
 8009e84:	6868      	ldr	r0, [r5, #4]
 8009e86:	4302      	orrs	r2, r0
 8009e88:	606a      	str	r2, [r5, #4]
 8009e8a:	60de      	str	r6, [r3, #12]
 8009e8c:	6099      	str	r1, [r3, #8]
 8009e8e:	60b3      	str	r3, [r6, #8]
 8009e90:	e7de      	b.n	8009e50 <_free_r+0xe0>
 8009e92:	2a14      	cmp	r2, #20
 8009e94:	d801      	bhi.n	8009e9a <_free_r+0x12a>
 8009e96:	325b      	adds	r2, #91	; 0x5b
 8009e98:	e7e9      	b.n	8009e6e <_free_r+0xfe>
 8009e9a:	2a54      	cmp	r2, #84	; 0x54
 8009e9c:	d802      	bhi.n	8009ea4 <_free_r+0x134>
 8009e9e:	0b02      	lsrs	r2, r0, #12
 8009ea0:	326e      	adds	r2, #110	; 0x6e
 8009ea2:	e7e4      	b.n	8009e6e <_free_r+0xfe>
 8009ea4:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 8009ea8:	d802      	bhi.n	8009eb0 <_free_r+0x140>
 8009eaa:	0bc2      	lsrs	r2, r0, #15
 8009eac:	3277      	adds	r2, #119	; 0x77
 8009eae:	e7de      	b.n	8009e6e <_free_r+0xfe>
 8009eb0:	f240 5154 	movw	r1, #1364	; 0x554
 8009eb4:	428a      	cmp	r2, r1
 8009eb6:	bf9a      	itte	ls
 8009eb8:	0c82      	lsrls	r2, r0, #18
 8009eba:	327c      	addls	r2, #124	; 0x7c
 8009ebc:	227e      	movhi	r2, #126	; 0x7e
 8009ebe:	e7d6      	b.n	8009e6e <_free_r+0xfe>
 8009ec0:	6889      	ldr	r1, [r1, #8]
 8009ec2:	428e      	cmp	r6, r1
 8009ec4:	d004      	beq.n	8009ed0 <_free_r+0x160>
 8009ec6:	684a      	ldr	r2, [r1, #4]
 8009ec8:	f022 0203 	bic.w	r2, r2, #3
 8009ecc:	4290      	cmp	r0, r2
 8009ece:	d3f7      	bcc.n	8009ec0 <_free_r+0x150>
 8009ed0:	68ce      	ldr	r6, [r1, #12]
 8009ed2:	e7da      	b.n	8009e8a <_free_r+0x11a>
 8009ed4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009ed8:	20000014 	.word	0x20000014
 8009edc:	20000420 	.word	0x20000420
 8009ee0:	2000677c 	.word	0x2000677c
 8009ee4:	2000001c 	.word	0x2000001c

08009ee8 <_localeconv_r>:
 8009ee8:	4b04      	ldr	r3, [pc, #16]	; (8009efc <_localeconv_r+0x14>)
 8009eea:	681b      	ldr	r3, [r3, #0]
 8009eec:	6a18      	ldr	r0, [r3, #32]
 8009eee:	4b04      	ldr	r3, [pc, #16]	; (8009f00 <_localeconv_r+0x18>)
 8009ef0:	2800      	cmp	r0, #0
 8009ef2:	bf08      	it	eq
 8009ef4:	4618      	moveq	r0, r3
 8009ef6:	30f0      	adds	r0, #240	; 0xf0
 8009ef8:	4770      	bx	lr
 8009efa:	bf00      	nop
 8009efc:	20000424 	.word	0x20000424
 8009f00:	20000518 	.word	0x20000518

08009f04 <__retarget_lock_acquire_recursive>:
 8009f04:	4770      	bx	lr

08009f06 <__retarget_lock_release_recursive>:
 8009f06:	4770      	bx	lr

08009f08 <memcpy>:
 8009f08:	b510      	push	{r4, lr}
 8009f0a:	1e43      	subs	r3, r0, #1
 8009f0c:	440a      	add	r2, r1
 8009f0e:	4291      	cmp	r1, r2
 8009f10:	d100      	bne.n	8009f14 <memcpy+0xc>
 8009f12:	bd10      	pop	{r4, pc}
 8009f14:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009f18:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009f1c:	e7f7      	b.n	8009f0e <memcpy+0x6>

08009f1e <_Balloc>:
 8009f1e:	b570      	push	{r4, r5, r6, lr}
 8009f20:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8009f22:	4604      	mov	r4, r0
 8009f24:	460e      	mov	r6, r1
 8009f26:	b93d      	cbnz	r5, 8009f38 <_Balloc+0x1a>
 8009f28:	2010      	movs	r0, #16
 8009f2a:	f7fd fe2f 	bl	8007b8c <malloc>
 8009f2e:	6260      	str	r0, [r4, #36]	; 0x24
 8009f30:	6045      	str	r5, [r0, #4]
 8009f32:	6085      	str	r5, [r0, #8]
 8009f34:	6005      	str	r5, [r0, #0]
 8009f36:	60c5      	str	r5, [r0, #12]
 8009f38:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8009f3a:	68eb      	ldr	r3, [r5, #12]
 8009f3c:	b183      	cbz	r3, 8009f60 <_Balloc+0x42>
 8009f3e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009f40:	68db      	ldr	r3, [r3, #12]
 8009f42:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8009f46:	b9b8      	cbnz	r0, 8009f78 <_Balloc+0x5a>
 8009f48:	2101      	movs	r1, #1
 8009f4a:	fa01 f506 	lsl.w	r5, r1, r6
 8009f4e:	1d6a      	adds	r2, r5, #5
 8009f50:	0092      	lsls	r2, r2, #2
 8009f52:	4620      	mov	r0, r4
 8009f54:	f000 fb2e 	bl	800a5b4 <_calloc_r>
 8009f58:	b160      	cbz	r0, 8009f74 <_Balloc+0x56>
 8009f5a:	6046      	str	r6, [r0, #4]
 8009f5c:	6085      	str	r5, [r0, #8]
 8009f5e:	e00e      	b.n	8009f7e <_Balloc+0x60>
 8009f60:	2221      	movs	r2, #33	; 0x21
 8009f62:	2104      	movs	r1, #4
 8009f64:	4620      	mov	r0, r4
 8009f66:	f000 fb25 	bl	800a5b4 <_calloc_r>
 8009f6a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009f6c:	60e8      	str	r0, [r5, #12]
 8009f6e:	68db      	ldr	r3, [r3, #12]
 8009f70:	2b00      	cmp	r3, #0
 8009f72:	d1e4      	bne.n	8009f3e <_Balloc+0x20>
 8009f74:	2000      	movs	r0, #0
 8009f76:	bd70      	pop	{r4, r5, r6, pc}
 8009f78:	6802      	ldr	r2, [r0, #0]
 8009f7a:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8009f7e:	2300      	movs	r3, #0
 8009f80:	6103      	str	r3, [r0, #16]
 8009f82:	60c3      	str	r3, [r0, #12]
 8009f84:	bd70      	pop	{r4, r5, r6, pc}

08009f86 <_Bfree>:
 8009f86:	b570      	push	{r4, r5, r6, lr}
 8009f88:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8009f8a:	4606      	mov	r6, r0
 8009f8c:	460d      	mov	r5, r1
 8009f8e:	b93c      	cbnz	r4, 8009fa0 <_Bfree+0x1a>
 8009f90:	2010      	movs	r0, #16
 8009f92:	f7fd fdfb 	bl	8007b8c <malloc>
 8009f96:	6270      	str	r0, [r6, #36]	; 0x24
 8009f98:	6044      	str	r4, [r0, #4]
 8009f9a:	6084      	str	r4, [r0, #8]
 8009f9c:	6004      	str	r4, [r0, #0]
 8009f9e:	60c4      	str	r4, [r0, #12]
 8009fa0:	b13d      	cbz	r5, 8009fb2 <_Bfree+0x2c>
 8009fa2:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8009fa4:	686a      	ldr	r2, [r5, #4]
 8009fa6:	68db      	ldr	r3, [r3, #12]
 8009fa8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009fac:	6029      	str	r1, [r5, #0]
 8009fae:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8009fb2:	bd70      	pop	{r4, r5, r6, pc}

08009fb4 <__multadd>:
 8009fb4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009fb8:	690d      	ldr	r5, [r1, #16]
 8009fba:	461f      	mov	r7, r3
 8009fbc:	4606      	mov	r6, r0
 8009fbe:	460c      	mov	r4, r1
 8009fc0:	f101 0e14 	add.w	lr, r1, #20
 8009fc4:	2300      	movs	r3, #0
 8009fc6:	f8de 0000 	ldr.w	r0, [lr]
 8009fca:	b281      	uxth	r1, r0
 8009fcc:	fb02 7101 	mla	r1, r2, r1, r7
 8009fd0:	0c0f      	lsrs	r7, r1, #16
 8009fd2:	0c00      	lsrs	r0, r0, #16
 8009fd4:	fb02 7000 	mla	r0, r2, r0, r7
 8009fd8:	b289      	uxth	r1, r1
 8009fda:	3301      	adds	r3, #1
 8009fdc:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8009fe0:	429d      	cmp	r5, r3
 8009fe2:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8009fe6:	f84e 1b04 	str.w	r1, [lr], #4
 8009fea:	dcec      	bgt.n	8009fc6 <__multadd+0x12>
 8009fec:	b1d7      	cbz	r7, 800a024 <__multadd+0x70>
 8009fee:	68a3      	ldr	r3, [r4, #8]
 8009ff0:	429d      	cmp	r5, r3
 8009ff2:	db12      	blt.n	800a01a <__multadd+0x66>
 8009ff4:	6861      	ldr	r1, [r4, #4]
 8009ff6:	4630      	mov	r0, r6
 8009ff8:	3101      	adds	r1, #1
 8009ffa:	f7ff ff90 	bl	8009f1e <_Balloc>
 8009ffe:	6922      	ldr	r2, [r4, #16]
 800a000:	3202      	adds	r2, #2
 800a002:	f104 010c 	add.w	r1, r4, #12
 800a006:	4680      	mov	r8, r0
 800a008:	0092      	lsls	r2, r2, #2
 800a00a:	300c      	adds	r0, #12
 800a00c:	f7ff ff7c 	bl	8009f08 <memcpy>
 800a010:	4621      	mov	r1, r4
 800a012:	4630      	mov	r0, r6
 800a014:	f7ff ffb7 	bl	8009f86 <_Bfree>
 800a018:	4644      	mov	r4, r8
 800a01a:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a01e:	3501      	adds	r5, #1
 800a020:	615f      	str	r7, [r3, #20]
 800a022:	6125      	str	r5, [r4, #16]
 800a024:	4620      	mov	r0, r4
 800a026:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800a02a <__hi0bits>:
 800a02a:	0c02      	lsrs	r2, r0, #16
 800a02c:	0412      	lsls	r2, r2, #16
 800a02e:	4603      	mov	r3, r0
 800a030:	b9b2      	cbnz	r2, 800a060 <__hi0bits+0x36>
 800a032:	0403      	lsls	r3, r0, #16
 800a034:	2010      	movs	r0, #16
 800a036:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800a03a:	bf04      	itt	eq
 800a03c:	021b      	lsleq	r3, r3, #8
 800a03e:	3008      	addeq	r0, #8
 800a040:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800a044:	bf04      	itt	eq
 800a046:	011b      	lsleq	r3, r3, #4
 800a048:	3004      	addeq	r0, #4
 800a04a:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800a04e:	bf04      	itt	eq
 800a050:	009b      	lsleq	r3, r3, #2
 800a052:	3002      	addeq	r0, #2
 800a054:	2b00      	cmp	r3, #0
 800a056:	db06      	blt.n	800a066 <__hi0bits+0x3c>
 800a058:	005b      	lsls	r3, r3, #1
 800a05a:	d503      	bpl.n	800a064 <__hi0bits+0x3a>
 800a05c:	3001      	adds	r0, #1
 800a05e:	4770      	bx	lr
 800a060:	2000      	movs	r0, #0
 800a062:	e7e8      	b.n	800a036 <__hi0bits+0xc>
 800a064:	2020      	movs	r0, #32
 800a066:	4770      	bx	lr

0800a068 <__lo0bits>:
 800a068:	6803      	ldr	r3, [r0, #0]
 800a06a:	f013 0207 	ands.w	r2, r3, #7
 800a06e:	4601      	mov	r1, r0
 800a070:	d00b      	beq.n	800a08a <__lo0bits+0x22>
 800a072:	07da      	lsls	r2, r3, #31
 800a074:	d423      	bmi.n	800a0be <__lo0bits+0x56>
 800a076:	0798      	lsls	r0, r3, #30
 800a078:	bf49      	itett	mi
 800a07a:	085b      	lsrmi	r3, r3, #1
 800a07c:	089b      	lsrpl	r3, r3, #2
 800a07e:	2001      	movmi	r0, #1
 800a080:	600b      	strmi	r3, [r1, #0]
 800a082:	bf5c      	itt	pl
 800a084:	600b      	strpl	r3, [r1, #0]
 800a086:	2002      	movpl	r0, #2
 800a088:	4770      	bx	lr
 800a08a:	b298      	uxth	r0, r3
 800a08c:	b9a8      	cbnz	r0, 800a0ba <__lo0bits+0x52>
 800a08e:	0c1b      	lsrs	r3, r3, #16
 800a090:	2010      	movs	r0, #16
 800a092:	f013 0fff 	tst.w	r3, #255	; 0xff
 800a096:	bf04      	itt	eq
 800a098:	0a1b      	lsreq	r3, r3, #8
 800a09a:	3008      	addeq	r0, #8
 800a09c:	071a      	lsls	r2, r3, #28
 800a09e:	bf04      	itt	eq
 800a0a0:	091b      	lsreq	r3, r3, #4
 800a0a2:	3004      	addeq	r0, #4
 800a0a4:	079a      	lsls	r2, r3, #30
 800a0a6:	bf04      	itt	eq
 800a0a8:	089b      	lsreq	r3, r3, #2
 800a0aa:	3002      	addeq	r0, #2
 800a0ac:	07da      	lsls	r2, r3, #31
 800a0ae:	d402      	bmi.n	800a0b6 <__lo0bits+0x4e>
 800a0b0:	085b      	lsrs	r3, r3, #1
 800a0b2:	d006      	beq.n	800a0c2 <__lo0bits+0x5a>
 800a0b4:	3001      	adds	r0, #1
 800a0b6:	600b      	str	r3, [r1, #0]
 800a0b8:	4770      	bx	lr
 800a0ba:	4610      	mov	r0, r2
 800a0bc:	e7e9      	b.n	800a092 <__lo0bits+0x2a>
 800a0be:	2000      	movs	r0, #0
 800a0c0:	4770      	bx	lr
 800a0c2:	2020      	movs	r0, #32
 800a0c4:	4770      	bx	lr

0800a0c6 <__i2b>:
 800a0c6:	b510      	push	{r4, lr}
 800a0c8:	460c      	mov	r4, r1
 800a0ca:	2101      	movs	r1, #1
 800a0cc:	f7ff ff27 	bl	8009f1e <_Balloc>
 800a0d0:	2201      	movs	r2, #1
 800a0d2:	6144      	str	r4, [r0, #20]
 800a0d4:	6102      	str	r2, [r0, #16]
 800a0d6:	bd10      	pop	{r4, pc}

0800a0d8 <__multiply>:
 800a0d8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a0dc:	4614      	mov	r4, r2
 800a0de:	690a      	ldr	r2, [r1, #16]
 800a0e0:	6923      	ldr	r3, [r4, #16]
 800a0e2:	429a      	cmp	r2, r3
 800a0e4:	bfb8      	it	lt
 800a0e6:	460b      	movlt	r3, r1
 800a0e8:	4689      	mov	r9, r1
 800a0ea:	bfbc      	itt	lt
 800a0ec:	46a1      	movlt	r9, r4
 800a0ee:	461c      	movlt	r4, r3
 800a0f0:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800a0f4:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800a0f8:	f8d9 3008 	ldr.w	r3, [r9, #8]
 800a0fc:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800a100:	eb07 060a 	add.w	r6, r7, sl
 800a104:	429e      	cmp	r6, r3
 800a106:	bfc8      	it	gt
 800a108:	3101      	addgt	r1, #1
 800a10a:	f7ff ff08 	bl	8009f1e <_Balloc>
 800a10e:	f100 0514 	add.w	r5, r0, #20
 800a112:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800a116:	462b      	mov	r3, r5
 800a118:	2200      	movs	r2, #0
 800a11a:	4543      	cmp	r3, r8
 800a11c:	d316      	bcc.n	800a14c <__multiply+0x74>
 800a11e:	f104 0214 	add.w	r2, r4, #20
 800a122:	f109 0114 	add.w	r1, r9, #20
 800a126:	eb02 038a 	add.w	r3, r2, sl, lsl #2
 800a12a:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800a12e:	9301      	str	r3, [sp, #4]
 800a130:	9c01      	ldr	r4, [sp, #4]
 800a132:	4294      	cmp	r4, r2
 800a134:	4613      	mov	r3, r2
 800a136:	d80c      	bhi.n	800a152 <__multiply+0x7a>
 800a138:	2e00      	cmp	r6, #0
 800a13a:	dd03      	ble.n	800a144 <__multiply+0x6c>
 800a13c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800a140:	2b00      	cmp	r3, #0
 800a142:	d054      	beq.n	800a1ee <__multiply+0x116>
 800a144:	6106      	str	r6, [r0, #16]
 800a146:	b003      	add	sp, #12
 800a148:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a14c:	f843 2b04 	str.w	r2, [r3], #4
 800a150:	e7e3      	b.n	800a11a <__multiply+0x42>
 800a152:	f8b3 a000 	ldrh.w	sl, [r3]
 800a156:	3204      	adds	r2, #4
 800a158:	f1ba 0f00 	cmp.w	sl, #0
 800a15c:	d020      	beq.n	800a1a0 <__multiply+0xc8>
 800a15e:	46ae      	mov	lr, r5
 800a160:	4689      	mov	r9, r1
 800a162:	f04f 0c00 	mov.w	ip, #0
 800a166:	f859 4b04 	ldr.w	r4, [r9], #4
 800a16a:	f8be b000 	ldrh.w	fp, [lr]
 800a16e:	b2a3      	uxth	r3, r4
 800a170:	fb0a b303 	mla	r3, sl, r3, fp
 800a174:	ea4f 4b14 	mov.w	fp, r4, lsr #16
 800a178:	f8de 4000 	ldr.w	r4, [lr]
 800a17c:	4463      	add	r3, ip
 800a17e:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 800a182:	fb0a c40b 	mla	r4, sl, fp, ip
 800a186:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800a18a:	b29b      	uxth	r3, r3
 800a18c:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800a190:	454f      	cmp	r7, r9
 800a192:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 800a196:	f84e 3b04 	str.w	r3, [lr], #4
 800a19a:	d8e4      	bhi.n	800a166 <__multiply+0x8e>
 800a19c:	f8ce c000 	str.w	ip, [lr]
 800a1a0:	f832 9c02 	ldrh.w	r9, [r2, #-2]
 800a1a4:	f1b9 0f00 	cmp.w	r9, #0
 800a1a8:	d01f      	beq.n	800a1ea <__multiply+0x112>
 800a1aa:	682b      	ldr	r3, [r5, #0]
 800a1ac:	46ae      	mov	lr, r5
 800a1ae:	468c      	mov	ip, r1
 800a1b0:	f04f 0a00 	mov.w	sl, #0
 800a1b4:	f8bc 4000 	ldrh.w	r4, [ip]
 800a1b8:	f8be b002 	ldrh.w	fp, [lr, #2]
 800a1bc:	fb09 b404 	mla	r4, r9, r4, fp
 800a1c0:	44a2      	add	sl, r4
 800a1c2:	b29b      	uxth	r3, r3
 800a1c4:	ea43 430a 	orr.w	r3, r3, sl, lsl #16
 800a1c8:	f84e 3b04 	str.w	r3, [lr], #4
 800a1cc:	f85c 3b04 	ldr.w	r3, [ip], #4
 800a1d0:	f8be 4000 	ldrh.w	r4, [lr]
 800a1d4:	0c1b      	lsrs	r3, r3, #16
 800a1d6:	fb09 4303 	mla	r3, r9, r3, r4
 800a1da:	eb03 431a 	add.w	r3, r3, sl, lsr #16
 800a1de:	4567      	cmp	r7, ip
 800a1e0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a1e4:	d8e6      	bhi.n	800a1b4 <__multiply+0xdc>
 800a1e6:	f8ce 3000 	str.w	r3, [lr]
 800a1ea:	3504      	adds	r5, #4
 800a1ec:	e7a0      	b.n	800a130 <__multiply+0x58>
 800a1ee:	3e01      	subs	r6, #1
 800a1f0:	e7a2      	b.n	800a138 <__multiply+0x60>
	...

0800a1f4 <__pow5mult>:
 800a1f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a1f8:	4615      	mov	r5, r2
 800a1fa:	f012 0203 	ands.w	r2, r2, #3
 800a1fe:	4606      	mov	r6, r0
 800a200:	460f      	mov	r7, r1
 800a202:	d007      	beq.n	800a214 <__pow5mult+0x20>
 800a204:	3a01      	subs	r2, #1
 800a206:	4c21      	ldr	r4, [pc, #132]	; (800a28c <__pow5mult+0x98>)
 800a208:	2300      	movs	r3, #0
 800a20a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a20e:	f7ff fed1 	bl	8009fb4 <__multadd>
 800a212:	4607      	mov	r7, r0
 800a214:	10ad      	asrs	r5, r5, #2
 800a216:	d035      	beq.n	800a284 <__pow5mult+0x90>
 800a218:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800a21a:	b93c      	cbnz	r4, 800a22c <__pow5mult+0x38>
 800a21c:	2010      	movs	r0, #16
 800a21e:	f7fd fcb5 	bl	8007b8c <malloc>
 800a222:	6270      	str	r0, [r6, #36]	; 0x24
 800a224:	6044      	str	r4, [r0, #4]
 800a226:	6084      	str	r4, [r0, #8]
 800a228:	6004      	str	r4, [r0, #0]
 800a22a:	60c4      	str	r4, [r0, #12]
 800a22c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800a230:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a234:	b94c      	cbnz	r4, 800a24a <__pow5mult+0x56>
 800a236:	f240 2171 	movw	r1, #625	; 0x271
 800a23a:	4630      	mov	r0, r6
 800a23c:	f7ff ff43 	bl	800a0c6 <__i2b>
 800a240:	2300      	movs	r3, #0
 800a242:	f8c8 0008 	str.w	r0, [r8, #8]
 800a246:	4604      	mov	r4, r0
 800a248:	6003      	str	r3, [r0, #0]
 800a24a:	f04f 0800 	mov.w	r8, #0
 800a24e:	07eb      	lsls	r3, r5, #31
 800a250:	d50a      	bpl.n	800a268 <__pow5mult+0x74>
 800a252:	4639      	mov	r1, r7
 800a254:	4622      	mov	r2, r4
 800a256:	4630      	mov	r0, r6
 800a258:	f7ff ff3e 	bl	800a0d8 <__multiply>
 800a25c:	4639      	mov	r1, r7
 800a25e:	4681      	mov	r9, r0
 800a260:	4630      	mov	r0, r6
 800a262:	f7ff fe90 	bl	8009f86 <_Bfree>
 800a266:	464f      	mov	r7, r9
 800a268:	106d      	asrs	r5, r5, #1
 800a26a:	d00b      	beq.n	800a284 <__pow5mult+0x90>
 800a26c:	6820      	ldr	r0, [r4, #0]
 800a26e:	b938      	cbnz	r0, 800a280 <__pow5mult+0x8c>
 800a270:	4622      	mov	r2, r4
 800a272:	4621      	mov	r1, r4
 800a274:	4630      	mov	r0, r6
 800a276:	f7ff ff2f 	bl	800a0d8 <__multiply>
 800a27a:	6020      	str	r0, [r4, #0]
 800a27c:	f8c0 8000 	str.w	r8, [r0]
 800a280:	4604      	mov	r4, r0
 800a282:	e7e4      	b.n	800a24e <__pow5mult+0x5a>
 800a284:	4638      	mov	r0, r7
 800a286:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a28a:	bf00      	nop
 800a28c:	0800d980 	.word	0x0800d980

0800a290 <__lshift>:
 800a290:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a294:	460c      	mov	r4, r1
 800a296:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a29a:	6923      	ldr	r3, [r4, #16]
 800a29c:	6849      	ldr	r1, [r1, #4]
 800a29e:	eb0a 0903 	add.w	r9, sl, r3
 800a2a2:	68a3      	ldr	r3, [r4, #8]
 800a2a4:	4607      	mov	r7, r0
 800a2a6:	4616      	mov	r6, r2
 800a2a8:	f109 0501 	add.w	r5, r9, #1
 800a2ac:	42ab      	cmp	r3, r5
 800a2ae:	db31      	blt.n	800a314 <__lshift+0x84>
 800a2b0:	4638      	mov	r0, r7
 800a2b2:	f7ff fe34 	bl	8009f1e <_Balloc>
 800a2b6:	2200      	movs	r2, #0
 800a2b8:	4680      	mov	r8, r0
 800a2ba:	f100 0314 	add.w	r3, r0, #20
 800a2be:	4611      	mov	r1, r2
 800a2c0:	4552      	cmp	r2, sl
 800a2c2:	db2a      	blt.n	800a31a <__lshift+0x8a>
 800a2c4:	6920      	ldr	r0, [r4, #16]
 800a2c6:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a2ca:	f104 0114 	add.w	r1, r4, #20
 800a2ce:	f016 021f 	ands.w	r2, r6, #31
 800a2d2:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 800a2d6:	eb01 0e80 	add.w	lr, r1, r0, lsl #2
 800a2da:	d022      	beq.n	800a322 <__lshift+0x92>
 800a2dc:	f1c2 0c20 	rsb	ip, r2, #32
 800a2e0:	2000      	movs	r0, #0
 800a2e2:	680e      	ldr	r6, [r1, #0]
 800a2e4:	4096      	lsls	r6, r2
 800a2e6:	4330      	orrs	r0, r6
 800a2e8:	f843 0b04 	str.w	r0, [r3], #4
 800a2ec:	f851 0b04 	ldr.w	r0, [r1], #4
 800a2f0:	458e      	cmp	lr, r1
 800a2f2:	fa20 f00c 	lsr.w	r0, r0, ip
 800a2f6:	d8f4      	bhi.n	800a2e2 <__lshift+0x52>
 800a2f8:	6018      	str	r0, [r3, #0]
 800a2fa:	b108      	cbz	r0, 800a300 <__lshift+0x70>
 800a2fc:	f109 0502 	add.w	r5, r9, #2
 800a300:	3d01      	subs	r5, #1
 800a302:	4638      	mov	r0, r7
 800a304:	f8c8 5010 	str.w	r5, [r8, #16]
 800a308:	4621      	mov	r1, r4
 800a30a:	f7ff fe3c 	bl	8009f86 <_Bfree>
 800a30e:	4640      	mov	r0, r8
 800a310:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a314:	3101      	adds	r1, #1
 800a316:	005b      	lsls	r3, r3, #1
 800a318:	e7c8      	b.n	800a2ac <__lshift+0x1c>
 800a31a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800a31e:	3201      	adds	r2, #1
 800a320:	e7ce      	b.n	800a2c0 <__lshift+0x30>
 800a322:	3b04      	subs	r3, #4
 800a324:	f851 2b04 	ldr.w	r2, [r1], #4
 800a328:	f843 2f04 	str.w	r2, [r3, #4]!
 800a32c:	458e      	cmp	lr, r1
 800a32e:	d8f9      	bhi.n	800a324 <__lshift+0x94>
 800a330:	e7e6      	b.n	800a300 <__lshift+0x70>

0800a332 <__mcmp>:
 800a332:	6903      	ldr	r3, [r0, #16]
 800a334:	690a      	ldr	r2, [r1, #16]
 800a336:	1a9b      	subs	r3, r3, r2
 800a338:	b530      	push	{r4, r5, lr}
 800a33a:	d10c      	bne.n	800a356 <__mcmp+0x24>
 800a33c:	0092      	lsls	r2, r2, #2
 800a33e:	3014      	adds	r0, #20
 800a340:	3114      	adds	r1, #20
 800a342:	1884      	adds	r4, r0, r2
 800a344:	4411      	add	r1, r2
 800a346:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800a34a:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800a34e:	4295      	cmp	r5, r2
 800a350:	d003      	beq.n	800a35a <__mcmp+0x28>
 800a352:	d305      	bcc.n	800a360 <__mcmp+0x2e>
 800a354:	2301      	movs	r3, #1
 800a356:	4618      	mov	r0, r3
 800a358:	bd30      	pop	{r4, r5, pc}
 800a35a:	42a0      	cmp	r0, r4
 800a35c:	d3f3      	bcc.n	800a346 <__mcmp+0x14>
 800a35e:	e7fa      	b.n	800a356 <__mcmp+0x24>
 800a360:	f04f 33ff 	mov.w	r3, #4294967295
 800a364:	e7f7      	b.n	800a356 <__mcmp+0x24>

0800a366 <__mdiff>:
 800a366:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a36a:	460d      	mov	r5, r1
 800a36c:	4607      	mov	r7, r0
 800a36e:	4611      	mov	r1, r2
 800a370:	4628      	mov	r0, r5
 800a372:	4614      	mov	r4, r2
 800a374:	f7ff ffdd 	bl	800a332 <__mcmp>
 800a378:	1e06      	subs	r6, r0, #0
 800a37a:	d108      	bne.n	800a38e <__mdiff+0x28>
 800a37c:	4631      	mov	r1, r6
 800a37e:	4638      	mov	r0, r7
 800a380:	f7ff fdcd 	bl	8009f1e <_Balloc>
 800a384:	2301      	movs	r3, #1
 800a386:	6103      	str	r3, [r0, #16]
 800a388:	6146      	str	r6, [r0, #20]
 800a38a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a38e:	bfa4      	itt	ge
 800a390:	4623      	movge	r3, r4
 800a392:	462c      	movge	r4, r5
 800a394:	4638      	mov	r0, r7
 800a396:	6861      	ldr	r1, [r4, #4]
 800a398:	bfa6      	itte	ge
 800a39a:	461d      	movge	r5, r3
 800a39c:	2600      	movge	r6, #0
 800a39e:	2601      	movlt	r6, #1
 800a3a0:	f7ff fdbd 	bl	8009f1e <_Balloc>
 800a3a4:	692b      	ldr	r3, [r5, #16]
 800a3a6:	60c6      	str	r6, [r0, #12]
 800a3a8:	6926      	ldr	r6, [r4, #16]
 800a3aa:	f105 0914 	add.w	r9, r5, #20
 800a3ae:	f104 0214 	add.w	r2, r4, #20
 800a3b2:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 800a3b6:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800a3ba:	f100 0514 	add.w	r5, r0, #20
 800a3be:	f04f 0c00 	mov.w	ip, #0
 800a3c2:	f852 ab04 	ldr.w	sl, [r2], #4
 800a3c6:	f859 4b04 	ldr.w	r4, [r9], #4
 800a3ca:	fa1c f18a 	uxtah	r1, ip, sl
 800a3ce:	b2a3      	uxth	r3, r4
 800a3d0:	1ac9      	subs	r1, r1, r3
 800a3d2:	0c23      	lsrs	r3, r4, #16
 800a3d4:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 800a3d8:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800a3dc:	b289      	uxth	r1, r1
 800a3de:	ea4f 4c23 	mov.w	ip, r3, asr #16
 800a3e2:	45c8      	cmp	r8, r9
 800a3e4:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800a3e8:	4696      	mov	lr, r2
 800a3ea:	f845 3b04 	str.w	r3, [r5], #4
 800a3ee:	d8e8      	bhi.n	800a3c2 <__mdiff+0x5c>
 800a3f0:	45be      	cmp	lr, r7
 800a3f2:	d305      	bcc.n	800a400 <__mdiff+0x9a>
 800a3f4:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 800a3f8:	b18b      	cbz	r3, 800a41e <__mdiff+0xb8>
 800a3fa:	6106      	str	r6, [r0, #16]
 800a3fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a400:	f85e 1b04 	ldr.w	r1, [lr], #4
 800a404:	fa1c f381 	uxtah	r3, ip, r1
 800a408:	141a      	asrs	r2, r3, #16
 800a40a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800a40e:	b29b      	uxth	r3, r3
 800a410:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a414:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800a418:	f845 3b04 	str.w	r3, [r5], #4
 800a41c:	e7e8      	b.n	800a3f0 <__mdiff+0x8a>
 800a41e:	3e01      	subs	r6, #1
 800a420:	e7e8      	b.n	800a3f4 <__mdiff+0x8e>

0800a422 <__d2b>:
 800a422:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a426:	460e      	mov	r6, r1
 800a428:	2101      	movs	r1, #1
 800a42a:	ec59 8b10 	vmov	r8, r9, d0
 800a42e:	4615      	mov	r5, r2
 800a430:	f7ff fd75 	bl	8009f1e <_Balloc>
 800a434:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800a438:	4607      	mov	r7, r0
 800a43a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a43e:	bb34      	cbnz	r4, 800a48e <__d2b+0x6c>
 800a440:	9301      	str	r3, [sp, #4]
 800a442:	f1b8 0f00 	cmp.w	r8, #0
 800a446:	d027      	beq.n	800a498 <__d2b+0x76>
 800a448:	a802      	add	r0, sp, #8
 800a44a:	f840 8d08 	str.w	r8, [r0, #-8]!
 800a44e:	f7ff fe0b 	bl	800a068 <__lo0bits>
 800a452:	9900      	ldr	r1, [sp, #0]
 800a454:	b1f0      	cbz	r0, 800a494 <__d2b+0x72>
 800a456:	9a01      	ldr	r2, [sp, #4]
 800a458:	f1c0 0320 	rsb	r3, r0, #32
 800a45c:	fa02 f303 	lsl.w	r3, r2, r3
 800a460:	430b      	orrs	r3, r1
 800a462:	40c2      	lsrs	r2, r0
 800a464:	617b      	str	r3, [r7, #20]
 800a466:	9201      	str	r2, [sp, #4]
 800a468:	9b01      	ldr	r3, [sp, #4]
 800a46a:	61bb      	str	r3, [r7, #24]
 800a46c:	2b00      	cmp	r3, #0
 800a46e:	bf14      	ite	ne
 800a470:	2102      	movne	r1, #2
 800a472:	2101      	moveq	r1, #1
 800a474:	6139      	str	r1, [r7, #16]
 800a476:	b1c4      	cbz	r4, 800a4aa <__d2b+0x88>
 800a478:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800a47c:	4404      	add	r4, r0
 800a47e:	6034      	str	r4, [r6, #0]
 800a480:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800a484:	6028      	str	r0, [r5, #0]
 800a486:	4638      	mov	r0, r7
 800a488:	b003      	add	sp, #12
 800a48a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a48e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a492:	e7d5      	b.n	800a440 <__d2b+0x1e>
 800a494:	6179      	str	r1, [r7, #20]
 800a496:	e7e7      	b.n	800a468 <__d2b+0x46>
 800a498:	a801      	add	r0, sp, #4
 800a49a:	f7ff fde5 	bl	800a068 <__lo0bits>
 800a49e:	9b01      	ldr	r3, [sp, #4]
 800a4a0:	617b      	str	r3, [r7, #20]
 800a4a2:	2101      	movs	r1, #1
 800a4a4:	6139      	str	r1, [r7, #16]
 800a4a6:	3020      	adds	r0, #32
 800a4a8:	e7e5      	b.n	800a476 <__d2b+0x54>
 800a4aa:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800a4ae:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800a4b2:	6030      	str	r0, [r6, #0]
 800a4b4:	6918      	ldr	r0, [r3, #16]
 800a4b6:	f7ff fdb8 	bl	800a02a <__hi0bits>
 800a4ba:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800a4be:	e7e1      	b.n	800a484 <__d2b+0x62>

0800a4c0 <__ssprint_r>:
 800a4c0:	6893      	ldr	r3, [r2, #8]
 800a4c2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a4c6:	4681      	mov	r9, r0
 800a4c8:	460c      	mov	r4, r1
 800a4ca:	4617      	mov	r7, r2
 800a4cc:	2b00      	cmp	r3, #0
 800a4ce:	d060      	beq.n	800a592 <__ssprint_r+0xd2>
 800a4d0:	f04f 0b00 	mov.w	fp, #0
 800a4d4:	f8d2 a000 	ldr.w	sl, [r2]
 800a4d8:	465e      	mov	r6, fp
 800a4da:	b356      	cbz	r6, 800a532 <__ssprint_r+0x72>
 800a4dc:	68a3      	ldr	r3, [r4, #8]
 800a4de:	429e      	cmp	r6, r3
 800a4e0:	d344      	bcc.n	800a56c <__ssprint_r+0xac>
 800a4e2:	89a2      	ldrh	r2, [r4, #12]
 800a4e4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a4e8:	d03e      	beq.n	800a568 <__ssprint_r+0xa8>
 800a4ea:	6825      	ldr	r5, [r4, #0]
 800a4ec:	6921      	ldr	r1, [r4, #16]
 800a4ee:	eba5 0801 	sub.w	r8, r5, r1
 800a4f2:	6965      	ldr	r5, [r4, #20]
 800a4f4:	2302      	movs	r3, #2
 800a4f6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a4fa:	fb95 f5f3 	sdiv	r5, r5, r3
 800a4fe:	f108 0301 	add.w	r3, r8, #1
 800a502:	4433      	add	r3, r6
 800a504:	429d      	cmp	r5, r3
 800a506:	bf38      	it	cc
 800a508:	461d      	movcc	r5, r3
 800a50a:	0553      	lsls	r3, r2, #21
 800a50c:	d546      	bpl.n	800a59c <__ssprint_r+0xdc>
 800a50e:	4629      	mov	r1, r5
 800a510:	4648      	mov	r0, r9
 800a512:	f7fd fb4b 	bl	8007bac <_malloc_r>
 800a516:	b998      	cbnz	r0, 800a540 <__ssprint_r+0x80>
 800a518:	230c      	movs	r3, #12
 800a51a:	f8c9 3000 	str.w	r3, [r9]
 800a51e:	89a3      	ldrh	r3, [r4, #12]
 800a520:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a524:	81a3      	strh	r3, [r4, #12]
 800a526:	2300      	movs	r3, #0
 800a528:	60bb      	str	r3, [r7, #8]
 800a52a:	607b      	str	r3, [r7, #4]
 800a52c:	f04f 30ff 	mov.w	r0, #4294967295
 800a530:	e031      	b.n	800a596 <__ssprint_r+0xd6>
 800a532:	f8da b000 	ldr.w	fp, [sl]
 800a536:	f8da 6004 	ldr.w	r6, [sl, #4]
 800a53a:	f10a 0a08 	add.w	sl, sl, #8
 800a53e:	e7cc      	b.n	800a4da <__ssprint_r+0x1a>
 800a540:	4642      	mov	r2, r8
 800a542:	6921      	ldr	r1, [r4, #16]
 800a544:	9001      	str	r0, [sp, #4]
 800a546:	f7ff fcdf 	bl	8009f08 <memcpy>
 800a54a:	89a2      	ldrh	r2, [r4, #12]
 800a54c:	9b01      	ldr	r3, [sp, #4]
 800a54e:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
 800a552:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800a556:	81a2      	strh	r2, [r4, #12]
 800a558:	6123      	str	r3, [r4, #16]
 800a55a:	6165      	str	r5, [r4, #20]
 800a55c:	4443      	add	r3, r8
 800a55e:	eba5 0508 	sub.w	r5, r5, r8
 800a562:	6023      	str	r3, [r4, #0]
 800a564:	60a5      	str	r5, [r4, #8]
 800a566:	4633      	mov	r3, r6
 800a568:	429e      	cmp	r6, r3
 800a56a:	d200      	bcs.n	800a56e <__ssprint_r+0xae>
 800a56c:	4633      	mov	r3, r6
 800a56e:	461a      	mov	r2, r3
 800a570:	4659      	mov	r1, fp
 800a572:	6820      	ldr	r0, [r4, #0]
 800a574:	9301      	str	r3, [sp, #4]
 800a576:	f000 f85c 	bl	800a632 <memmove>
 800a57a:	68a2      	ldr	r2, [r4, #8]
 800a57c:	9b01      	ldr	r3, [sp, #4]
 800a57e:	1ad2      	subs	r2, r2, r3
 800a580:	60a2      	str	r2, [r4, #8]
 800a582:	6822      	ldr	r2, [r4, #0]
 800a584:	4413      	add	r3, r2
 800a586:	6023      	str	r3, [r4, #0]
 800a588:	68bb      	ldr	r3, [r7, #8]
 800a58a:	1b9e      	subs	r6, r3, r6
 800a58c:	60be      	str	r6, [r7, #8]
 800a58e:	2e00      	cmp	r6, #0
 800a590:	d1cf      	bne.n	800a532 <__ssprint_r+0x72>
 800a592:	2000      	movs	r0, #0
 800a594:	6078      	str	r0, [r7, #4]
 800a596:	b003      	add	sp, #12
 800a598:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a59c:	462a      	mov	r2, r5
 800a59e:	4648      	mov	r0, r9
 800a5a0:	f000 f86a 	bl	800a678 <_realloc_r>
 800a5a4:	4603      	mov	r3, r0
 800a5a6:	2800      	cmp	r0, #0
 800a5a8:	d1d6      	bne.n	800a558 <__ssprint_r+0x98>
 800a5aa:	6921      	ldr	r1, [r4, #16]
 800a5ac:	4648      	mov	r0, r9
 800a5ae:	f7ff fbdf 	bl	8009d70 <_free_r>
 800a5b2:	e7b1      	b.n	800a518 <__ssprint_r+0x58>

0800a5b4 <_calloc_r>:
 800a5b4:	b510      	push	{r4, lr}
 800a5b6:	4351      	muls	r1, r2
 800a5b8:	f7fd faf8 	bl	8007bac <_malloc_r>
 800a5bc:	4604      	mov	r4, r0
 800a5be:	b198      	cbz	r0, 800a5e8 <_calloc_r+0x34>
 800a5c0:	f850 2c04 	ldr.w	r2, [r0, #-4]
 800a5c4:	f022 0203 	bic.w	r2, r2, #3
 800a5c8:	3a04      	subs	r2, #4
 800a5ca:	2a24      	cmp	r2, #36	; 0x24
 800a5cc:	d81b      	bhi.n	800a606 <_calloc_r+0x52>
 800a5ce:	2a13      	cmp	r2, #19
 800a5d0:	d917      	bls.n	800a602 <_calloc_r+0x4e>
 800a5d2:	2100      	movs	r1, #0
 800a5d4:	2a1b      	cmp	r2, #27
 800a5d6:	6001      	str	r1, [r0, #0]
 800a5d8:	6041      	str	r1, [r0, #4]
 800a5da:	d807      	bhi.n	800a5ec <_calloc_r+0x38>
 800a5dc:	f100 0308 	add.w	r3, r0, #8
 800a5e0:	2200      	movs	r2, #0
 800a5e2:	601a      	str	r2, [r3, #0]
 800a5e4:	605a      	str	r2, [r3, #4]
 800a5e6:	609a      	str	r2, [r3, #8]
 800a5e8:	4620      	mov	r0, r4
 800a5ea:	bd10      	pop	{r4, pc}
 800a5ec:	2a24      	cmp	r2, #36	; 0x24
 800a5ee:	6081      	str	r1, [r0, #8]
 800a5f0:	60c1      	str	r1, [r0, #12]
 800a5f2:	bf11      	iteee	ne
 800a5f4:	f100 0310 	addne.w	r3, r0, #16
 800a5f8:	6101      	streq	r1, [r0, #16]
 800a5fa:	f100 0318 	addeq.w	r3, r0, #24
 800a5fe:	6141      	streq	r1, [r0, #20]
 800a600:	e7ee      	b.n	800a5e0 <_calloc_r+0x2c>
 800a602:	4603      	mov	r3, r0
 800a604:	e7ec      	b.n	800a5e0 <_calloc_r+0x2c>
 800a606:	2100      	movs	r1, #0
 800a608:	f000 f82d 	bl	800a666 <memset>
 800a60c:	e7ec      	b.n	800a5e8 <_calloc_r+0x34>

0800a60e <__ascii_mbtowc>:
 800a60e:	b082      	sub	sp, #8
 800a610:	b901      	cbnz	r1, 800a614 <__ascii_mbtowc+0x6>
 800a612:	a901      	add	r1, sp, #4
 800a614:	b142      	cbz	r2, 800a628 <__ascii_mbtowc+0x1a>
 800a616:	b14b      	cbz	r3, 800a62c <__ascii_mbtowc+0x1e>
 800a618:	7813      	ldrb	r3, [r2, #0]
 800a61a:	600b      	str	r3, [r1, #0]
 800a61c:	7812      	ldrb	r2, [r2, #0]
 800a61e:	1c10      	adds	r0, r2, #0
 800a620:	bf18      	it	ne
 800a622:	2001      	movne	r0, #1
 800a624:	b002      	add	sp, #8
 800a626:	4770      	bx	lr
 800a628:	4610      	mov	r0, r2
 800a62a:	e7fb      	b.n	800a624 <__ascii_mbtowc+0x16>
 800a62c:	f06f 0001 	mvn.w	r0, #1
 800a630:	e7f8      	b.n	800a624 <__ascii_mbtowc+0x16>

0800a632 <memmove>:
 800a632:	4288      	cmp	r0, r1
 800a634:	b510      	push	{r4, lr}
 800a636:	eb01 0302 	add.w	r3, r1, r2
 800a63a:	d803      	bhi.n	800a644 <memmove+0x12>
 800a63c:	1e42      	subs	r2, r0, #1
 800a63e:	4299      	cmp	r1, r3
 800a640:	d10c      	bne.n	800a65c <memmove+0x2a>
 800a642:	bd10      	pop	{r4, pc}
 800a644:	4298      	cmp	r0, r3
 800a646:	d2f9      	bcs.n	800a63c <memmove+0xa>
 800a648:	1881      	adds	r1, r0, r2
 800a64a:	1ad2      	subs	r2, r2, r3
 800a64c:	42d3      	cmn	r3, r2
 800a64e:	d100      	bne.n	800a652 <memmove+0x20>
 800a650:	bd10      	pop	{r4, pc}
 800a652:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a656:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800a65a:	e7f7      	b.n	800a64c <memmove+0x1a>
 800a65c:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a660:	f802 4f01 	strb.w	r4, [r2, #1]!
 800a664:	e7eb      	b.n	800a63e <memmove+0xc>

0800a666 <memset>:
 800a666:	4402      	add	r2, r0
 800a668:	4603      	mov	r3, r0
 800a66a:	4293      	cmp	r3, r2
 800a66c:	d100      	bne.n	800a670 <memset+0xa>
 800a66e:	4770      	bx	lr
 800a670:	f803 1b01 	strb.w	r1, [r3], #1
 800a674:	e7f9      	b.n	800a66a <memset+0x4>
	...

0800a678 <_realloc_r>:
 800a678:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a67c:	4682      	mov	sl, r0
 800a67e:	460c      	mov	r4, r1
 800a680:	b929      	cbnz	r1, 800a68e <_realloc_r+0x16>
 800a682:	4611      	mov	r1, r2
 800a684:	b003      	add	sp, #12
 800a686:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a68a:	f7fd ba8f 	b.w	8007bac <_malloc_r>
 800a68e:	9201      	str	r2, [sp, #4]
 800a690:	f7fd fc9a 	bl	8007fc8 <__malloc_lock>
 800a694:	9a01      	ldr	r2, [sp, #4]
 800a696:	f854 5c04 	ldr.w	r5, [r4, #-4]
 800a69a:	f102 080b 	add.w	r8, r2, #11
 800a69e:	f1b8 0f16 	cmp.w	r8, #22
 800a6a2:	f1a4 0908 	sub.w	r9, r4, #8
 800a6a6:	f025 0603 	bic.w	r6, r5, #3
 800a6aa:	d90a      	bls.n	800a6c2 <_realloc_r+0x4a>
 800a6ac:	f038 0807 	bics.w	r8, r8, #7
 800a6b0:	d509      	bpl.n	800a6c6 <_realloc_r+0x4e>
 800a6b2:	230c      	movs	r3, #12
 800a6b4:	f8ca 3000 	str.w	r3, [sl]
 800a6b8:	2700      	movs	r7, #0
 800a6ba:	4638      	mov	r0, r7
 800a6bc:	b003      	add	sp, #12
 800a6be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a6c2:	f04f 0810 	mov.w	r8, #16
 800a6c6:	4590      	cmp	r8, r2
 800a6c8:	d3f3      	bcc.n	800a6b2 <_realloc_r+0x3a>
 800a6ca:	45b0      	cmp	r8, r6
 800a6cc:	f340 8145 	ble.w	800a95a <_realloc_r+0x2e2>
 800a6d0:	4ba8      	ldr	r3, [pc, #672]	; (800a974 <_realloc_r+0x2fc>)
 800a6d2:	f8d3 e008 	ldr.w	lr, [r3, #8]
 800a6d6:	eb09 0106 	add.w	r1, r9, r6
 800a6da:	4571      	cmp	r1, lr
 800a6dc:	469b      	mov	fp, r3
 800a6de:	684b      	ldr	r3, [r1, #4]
 800a6e0:	d005      	beq.n	800a6ee <_realloc_r+0x76>
 800a6e2:	f023 0001 	bic.w	r0, r3, #1
 800a6e6:	4408      	add	r0, r1
 800a6e8:	6840      	ldr	r0, [r0, #4]
 800a6ea:	07c7      	lsls	r7, r0, #31
 800a6ec:	d447      	bmi.n	800a77e <_realloc_r+0x106>
 800a6ee:	f023 0303 	bic.w	r3, r3, #3
 800a6f2:	4571      	cmp	r1, lr
 800a6f4:	eb06 0703 	add.w	r7, r6, r3
 800a6f8:	d119      	bne.n	800a72e <_realloc_r+0xb6>
 800a6fa:	f108 0010 	add.w	r0, r8, #16
 800a6fe:	4287      	cmp	r7, r0
 800a700:	db3f      	blt.n	800a782 <_realloc_r+0x10a>
 800a702:	eb09 0308 	add.w	r3, r9, r8
 800a706:	eba7 0708 	sub.w	r7, r7, r8
 800a70a:	f047 0701 	orr.w	r7, r7, #1
 800a70e:	f8cb 3008 	str.w	r3, [fp, #8]
 800a712:	605f      	str	r7, [r3, #4]
 800a714:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800a718:	f003 0301 	and.w	r3, r3, #1
 800a71c:	ea43 0308 	orr.w	r3, r3, r8
 800a720:	f844 3c04 	str.w	r3, [r4, #-4]
 800a724:	4650      	mov	r0, sl
 800a726:	f7fd fc55 	bl	8007fd4 <__malloc_unlock>
 800a72a:	4627      	mov	r7, r4
 800a72c:	e7c5      	b.n	800a6ba <_realloc_r+0x42>
 800a72e:	45b8      	cmp	r8, r7
 800a730:	dc27      	bgt.n	800a782 <_realloc_r+0x10a>
 800a732:	68cb      	ldr	r3, [r1, #12]
 800a734:	688a      	ldr	r2, [r1, #8]
 800a736:	60d3      	str	r3, [r2, #12]
 800a738:	609a      	str	r2, [r3, #8]
 800a73a:	eba7 0008 	sub.w	r0, r7, r8
 800a73e:	280f      	cmp	r0, #15
 800a740:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800a744:	eb09 0207 	add.w	r2, r9, r7
 800a748:	f240 8109 	bls.w	800a95e <_realloc_r+0x2e6>
 800a74c:	eb09 0108 	add.w	r1, r9, r8
 800a750:	f003 0301 	and.w	r3, r3, #1
 800a754:	ea43 0308 	orr.w	r3, r3, r8
 800a758:	f040 0001 	orr.w	r0, r0, #1
 800a75c:	f8c9 3004 	str.w	r3, [r9, #4]
 800a760:	6048      	str	r0, [r1, #4]
 800a762:	6853      	ldr	r3, [r2, #4]
 800a764:	f043 0301 	orr.w	r3, r3, #1
 800a768:	6053      	str	r3, [r2, #4]
 800a76a:	3108      	adds	r1, #8
 800a76c:	4650      	mov	r0, sl
 800a76e:	f7ff faff 	bl	8009d70 <_free_r>
 800a772:	4650      	mov	r0, sl
 800a774:	f7fd fc2e 	bl	8007fd4 <__malloc_unlock>
 800a778:	f109 0708 	add.w	r7, r9, #8
 800a77c:	e79d      	b.n	800a6ba <_realloc_r+0x42>
 800a77e:	2300      	movs	r3, #0
 800a780:	4619      	mov	r1, r3
 800a782:	07e8      	lsls	r0, r5, #31
 800a784:	f100 8084 	bmi.w	800a890 <_realloc_r+0x218>
 800a788:	f854 5c08 	ldr.w	r5, [r4, #-8]
 800a78c:	eba9 0505 	sub.w	r5, r9, r5
 800a790:	6868      	ldr	r0, [r5, #4]
 800a792:	f020 0003 	bic.w	r0, r0, #3
 800a796:	4430      	add	r0, r6
 800a798:	2900      	cmp	r1, #0
 800a79a:	d076      	beq.n	800a88a <_realloc_r+0x212>
 800a79c:	4571      	cmp	r1, lr
 800a79e:	d150      	bne.n	800a842 <_realloc_r+0x1ca>
 800a7a0:	4403      	add	r3, r0
 800a7a2:	f108 0110 	add.w	r1, r8, #16
 800a7a6:	428b      	cmp	r3, r1
 800a7a8:	db6f      	blt.n	800a88a <_realloc_r+0x212>
 800a7aa:	462f      	mov	r7, r5
 800a7ac:	68ea      	ldr	r2, [r5, #12]
 800a7ae:	f857 1f08 	ldr.w	r1, [r7, #8]!
 800a7b2:	60ca      	str	r2, [r1, #12]
 800a7b4:	6091      	str	r1, [r2, #8]
 800a7b6:	1f32      	subs	r2, r6, #4
 800a7b8:	2a24      	cmp	r2, #36	; 0x24
 800a7ba:	d83b      	bhi.n	800a834 <_realloc_r+0x1bc>
 800a7bc:	2a13      	cmp	r2, #19
 800a7be:	d936      	bls.n	800a82e <_realloc_r+0x1b6>
 800a7c0:	6821      	ldr	r1, [r4, #0]
 800a7c2:	60a9      	str	r1, [r5, #8]
 800a7c4:	6861      	ldr	r1, [r4, #4]
 800a7c6:	60e9      	str	r1, [r5, #12]
 800a7c8:	2a1b      	cmp	r2, #27
 800a7ca:	d81c      	bhi.n	800a806 <_realloc_r+0x18e>
 800a7cc:	f105 0210 	add.w	r2, r5, #16
 800a7d0:	f104 0108 	add.w	r1, r4, #8
 800a7d4:	6808      	ldr	r0, [r1, #0]
 800a7d6:	6010      	str	r0, [r2, #0]
 800a7d8:	6848      	ldr	r0, [r1, #4]
 800a7da:	6050      	str	r0, [r2, #4]
 800a7dc:	6889      	ldr	r1, [r1, #8]
 800a7de:	6091      	str	r1, [r2, #8]
 800a7e0:	eb05 0208 	add.w	r2, r5, r8
 800a7e4:	eba3 0308 	sub.w	r3, r3, r8
 800a7e8:	f043 0301 	orr.w	r3, r3, #1
 800a7ec:	f8cb 2008 	str.w	r2, [fp, #8]
 800a7f0:	6053      	str	r3, [r2, #4]
 800a7f2:	686b      	ldr	r3, [r5, #4]
 800a7f4:	f003 0301 	and.w	r3, r3, #1
 800a7f8:	ea43 0308 	orr.w	r3, r3, r8
 800a7fc:	606b      	str	r3, [r5, #4]
 800a7fe:	4650      	mov	r0, sl
 800a800:	f7fd fbe8 	bl	8007fd4 <__malloc_unlock>
 800a804:	e759      	b.n	800a6ba <_realloc_r+0x42>
 800a806:	68a1      	ldr	r1, [r4, #8]
 800a808:	6129      	str	r1, [r5, #16]
 800a80a:	68e1      	ldr	r1, [r4, #12]
 800a80c:	6169      	str	r1, [r5, #20]
 800a80e:	2a24      	cmp	r2, #36	; 0x24
 800a810:	bf01      	itttt	eq
 800a812:	6922      	ldreq	r2, [r4, #16]
 800a814:	61aa      	streq	r2, [r5, #24]
 800a816:	6960      	ldreq	r0, [r4, #20]
 800a818:	61e8      	streq	r0, [r5, #28]
 800a81a:	bf19      	ittee	ne
 800a81c:	f105 0218 	addne.w	r2, r5, #24
 800a820:	f104 0110 	addne.w	r1, r4, #16
 800a824:	f105 0220 	addeq.w	r2, r5, #32
 800a828:	f104 0118 	addeq.w	r1, r4, #24
 800a82c:	e7d2      	b.n	800a7d4 <_realloc_r+0x15c>
 800a82e:	463a      	mov	r2, r7
 800a830:	4621      	mov	r1, r4
 800a832:	e7cf      	b.n	800a7d4 <_realloc_r+0x15c>
 800a834:	4621      	mov	r1, r4
 800a836:	4638      	mov	r0, r7
 800a838:	9301      	str	r3, [sp, #4]
 800a83a:	f7ff fefa 	bl	800a632 <memmove>
 800a83e:	9b01      	ldr	r3, [sp, #4]
 800a840:	e7ce      	b.n	800a7e0 <_realloc_r+0x168>
 800a842:	18c7      	adds	r7, r0, r3
 800a844:	45b8      	cmp	r8, r7
 800a846:	dc20      	bgt.n	800a88a <_realloc_r+0x212>
 800a848:	68cb      	ldr	r3, [r1, #12]
 800a84a:	688a      	ldr	r2, [r1, #8]
 800a84c:	60d3      	str	r3, [r2, #12]
 800a84e:	609a      	str	r2, [r3, #8]
 800a850:	4628      	mov	r0, r5
 800a852:	68eb      	ldr	r3, [r5, #12]
 800a854:	f850 2f08 	ldr.w	r2, [r0, #8]!
 800a858:	60d3      	str	r3, [r2, #12]
 800a85a:	609a      	str	r2, [r3, #8]
 800a85c:	1f32      	subs	r2, r6, #4
 800a85e:	2a24      	cmp	r2, #36	; 0x24
 800a860:	d842      	bhi.n	800a8e8 <_realloc_r+0x270>
 800a862:	2a13      	cmp	r2, #19
 800a864:	d93e      	bls.n	800a8e4 <_realloc_r+0x26c>
 800a866:	6823      	ldr	r3, [r4, #0]
 800a868:	60ab      	str	r3, [r5, #8]
 800a86a:	6863      	ldr	r3, [r4, #4]
 800a86c:	60eb      	str	r3, [r5, #12]
 800a86e:	2a1b      	cmp	r2, #27
 800a870:	d824      	bhi.n	800a8bc <_realloc_r+0x244>
 800a872:	f105 0010 	add.w	r0, r5, #16
 800a876:	f104 0308 	add.w	r3, r4, #8
 800a87a:	681a      	ldr	r2, [r3, #0]
 800a87c:	6002      	str	r2, [r0, #0]
 800a87e:	685a      	ldr	r2, [r3, #4]
 800a880:	6042      	str	r2, [r0, #4]
 800a882:	689b      	ldr	r3, [r3, #8]
 800a884:	6083      	str	r3, [r0, #8]
 800a886:	46a9      	mov	r9, r5
 800a888:	e757      	b.n	800a73a <_realloc_r+0xc2>
 800a88a:	4580      	cmp	r8, r0
 800a88c:	4607      	mov	r7, r0
 800a88e:	dddf      	ble.n	800a850 <_realloc_r+0x1d8>
 800a890:	4611      	mov	r1, r2
 800a892:	4650      	mov	r0, sl
 800a894:	f7fd f98a 	bl	8007bac <_malloc_r>
 800a898:	4607      	mov	r7, r0
 800a89a:	2800      	cmp	r0, #0
 800a89c:	d0af      	beq.n	800a7fe <_realloc_r+0x186>
 800a89e:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800a8a2:	f023 0301 	bic.w	r3, r3, #1
 800a8a6:	f1a0 0208 	sub.w	r2, r0, #8
 800a8aa:	444b      	add	r3, r9
 800a8ac:	429a      	cmp	r2, r3
 800a8ae:	d11f      	bne.n	800a8f0 <_realloc_r+0x278>
 800a8b0:	f850 7c04 	ldr.w	r7, [r0, #-4]
 800a8b4:	f027 0703 	bic.w	r7, r7, #3
 800a8b8:	4437      	add	r7, r6
 800a8ba:	e73e      	b.n	800a73a <_realloc_r+0xc2>
 800a8bc:	68a3      	ldr	r3, [r4, #8]
 800a8be:	612b      	str	r3, [r5, #16]
 800a8c0:	68e3      	ldr	r3, [r4, #12]
 800a8c2:	616b      	str	r3, [r5, #20]
 800a8c4:	2a24      	cmp	r2, #36	; 0x24
 800a8c6:	bf01      	itttt	eq
 800a8c8:	6923      	ldreq	r3, [r4, #16]
 800a8ca:	61ab      	streq	r3, [r5, #24]
 800a8cc:	6962      	ldreq	r2, [r4, #20]
 800a8ce:	61ea      	streq	r2, [r5, #28]
 800a8d0:	bf19      	ittee	ne
 800a8d2:	f105 0018 	addne.w	r0, r5, #24
 800a8d6:	f104 0310 	addne.w	r3, r4, #16
 800a8da:	f105 0020 	addeq.w	r0, r5, #32
 800a8de:	f104 0318 	addeq.w	r3, r4, #24
 800a8e2:	e7ca      	b.n	800a87a <_realloc_r+0x202>
 800a8e4:	4623      	mov	r3, r4
 800a8e6:	e7c8      	b.n	800a87a <_realloc_r+0x202>
 800a8e8:	4621      	mov	r1, r4
 800a8ea:	f7ff fea2 	bl	800a632 <memmove>
 800a8ee:	e7ca      	b.n	800a886 <_realloc_r+0x20e>
 800a8f0:	1f32      	subs	r2, r6, #4
 800a8f2:	2a24      	cmp	r2, #36	; 0x24
 800a8f4:	d82d      	bhi.n	800a952 <_realloc_r+0x2da>
 800a8f6:	2a13      	cmp	r2, #19
 800a8f8:	d928      	bls.n	800a94c <_realloc_r+0x2d4>
 800a8fa:	6823      	ldr	r3, [r4, #0]
 800a8fc:	6003      	str	r3, [r0, #0]
 800a8fe:	6863      	ldr	r3, [r4, #4]
 800a900:	6043      	str	r3, [r0, #4]
 800a902:	2a1b      	cmp	r2, #27
 800a904:	d80e      	bhi.n	800a924 <_realloc_r+0x2ac>
 800a906:	f100 0308 	add.w	r3, r0, #8
 800a90a:	f104 0208 	add.w	r2, r4, #8
 800a90e:	6811      	ldr	r1, [r2, #0]
 800a910:	6019      	str	r1, [r3, #0]
 800a912:	6851      	ldr	r1, [r2, #4]
 800a914:	6059      	str	r1, [r3, #4]
 800a916:	6892      	ldr	r2, [r2, #8]
 800a918:	609a      	str	r2, [r3, #8]
 800a91a:	4621      	mov	r1, r4
 800a91c:	4650      	mov	r0, sl
 800a91e:	f7ff fa27 	bl	8009d70 <_free_r>
 800a922:	e76c      	b.n	800a7fe <_realloc_r+0x186>
 800a924:	68a3      	ldr	r3, [r4, #8]
 800a926:	6083      	str	r3, [r0, #8]
 800a928:	68e3      	ldr	r3, [r4, #12]
 800a92a:	60c3      	str	r3, [r0, #12]
 800a92c:	2a24      	cmp	r2, #36	; 0x24
 800a92e:	bf01      	itttt	eq
 800a930:	6923      	ldreq	r3, [r4, #16]
 800a932:	6103      	streq	r3, [r0, #16]
 800a934:	6961      	ldreq	r1, [r4, #20]
 800a936:	6141      	streq	r1, [r0, #20]
 800a938:	bf19      	ittee	ne
 800a93a:	f100 0310 	addne.w	r3, r0, #16
 800a93e:	f104 0210 	addne.w	r2, r4, #16
 800a942:	f100 0318 	addeq.w	r3, r0, #24
 800a946:	f104 0218 	addeq.w	r2, r4, #24
 800a94a:	e7e0      	b.n	800a90e <_realloc_r+0x296>
 800a94c:	4603      	mov	r3, r0
 800a94e:	4622      	mov	r2, r4
 800a950:	e7dd      	b.n	800a90e <_realloc_r+0x296>
 800a952:	4621      	mov	r1, r4
 800a954:	f7ff fe6d 	bl	800a632 <memmove>
 800a958:	e7df      	b.n	800a91a <_realloc_r+0x2a2>
 800a95a:	4637      	mov	r7, r6
 800a95c:	e6ed      	b.n	800a73a <_realloc_r+0xc2>
 800a95e:	f003 0301 	and.w	r3, r3, #1
 800a962:	431f      	orrs	r7, r3
 800a964:	f8c9 7004 	str.w	r7, [r9, #4]
 800a968:	6853      	ldr	r3, [r2, #4]
 800a96a:	f043 0301 	orr.w	r3, r3, #1
 800a96e:	6053      	str	r3, [r2, #4]
 800a970:	e6ff      	b.n	800a772 <_realloc_r+0xfa>
 800a972:	bf00      	nop
 800a974:	20000014 	.word	0x20000014

0800a978 <__ascii_wctomb>:
 800a978:	b149      	cbz	r1, 800a98e <__ascii_wctomb+0x16>
 800a97a:	2aff      	cmp	r2, #255	; 0xff
 800a97c:	bf85      	ittet	hi
 800a97e:	238a      	movhi	r3, #138	; 0x8a
 800a980:	6003      	strhi	r3, [r0, #0]
 800a982:	700a      	strbls	r2, [r1, #0]
 800a984:	f04f 30ff 	movhi.w	r0, #4294967295
 800a988:	bf98      	it	ls
 800a98a:	2001      	movls	r0, #1
 800a98c:	4770      	bx	lr
 800a98e:	4608      	mov	r0, r1
 800a990:	4770      	bx	lr
 800a992:	0000      	movs	r0, r0
 800a994:	0000      	movs	r0, r0
	...

0800a998 <sin>:
 800a998:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a99a:	ec51 0b10 	vmov	r0, r1, d0
 800a99e:	4a20      	ldr	r2, [pc, #128]	; (800aa20 <sin+0x88>)
 800a9a0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800a9a4:	4293      	cmp	r3, r2
 800a9a6:	dc07      	bgt.n	800a9b8 <sin+0x20>
 800a9a8:	ed9f 1b1b 	vldr	d1, [pc, #108]	; 800aa18 <sin+0x80>
 800a9ac:	2000      	movs	r0, #0
 800a9ae:	f001 ff0f 	bl	800c7d0 <__kernel_sin>
 800a9b2:	ec51 0b10 	vmov	r0, r1, d0
 800a9b6:	e007      	b.n	800a9c8 <sin+0x30>
 800a9b8:	4a1a      	ldr	r2, [pc, #104]	; (800aa24 <sin+0x8c>)
 800a9ba:	4293      	cmp	r3, r2
 800a9bc:	dd09      	ble.n	800a9d2 <sin+0x3a>
 800a9be:	ee10 2a10 	vmov	r2, s0
 800a9c2:	460b      	mov	r3, r1
 800a9c4:	f7f5 fc60 	bl	8000288 <__aeabi_dsub>
 800a9c8:	ec41 0b10 	vmov	d0, r0, r1
 800a9cc:	b005      	add	sp, #20
 800a9ce:	f85d fb04 	ldr.w	pc, [sp], #4
 800a9d2:	4668      	mov	r0, sp
 800a9d4:	f001 f820 	bl	800ba18 <__ieee754_rem_pio2>
 800a9d8:	f000 0003 	and.w	r0, r0, #3
 800a9dc:	2801      	cmp	r0, #1
 800a9de:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a9e2:	ed9d 0b00 	vldr	d0, [sp]
 800a9e6:	d004      	beq.n	800a9f2 <sin+0x5a>
 800a9e8:	2802      	cmp	r0, #2
 800a9ea:	d005      	beq.n	800a9f8 <sin+0x60>
 800a9ec:	b970      	cbnz	r0, 800aa0c <sin+0x74>
 800a9ee:	2001      	movs	r0, #1
 800a9f0:	e7dd      	b.n	800a9ae <sin+0x16>
 800a9f2:	f001 fab5 	bl	800bf60 <__kernel_cos>
 800a9f6:	e7dc      	b.n	800a9b2 <sin+0x1a>
 800a9f8:	2001      	movs	r0, #1
 800a9fa:	f001 fee9 	bl	800c7d0 <__kernel_sin>
 800a9fe:	ec53 2b10 	vmov	r2, r3, d0
 800aa02:	ee10 0a10 	vmov	r0, s0
 800aa06:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800aa0a:	e7dd      	b.n	800a9c8 <sin+0x30>
 800aa0c:	f001 faa8 	bl	800bf60 <__kernel_cos>
 800aa10:	e7f5      	b.n	800a9fe <sin+0x66>
 800aa12:	bf00      	nop
 800aa14:	f3af 8000 	nop.w
	...
 800aa20:	3fe921fb 	.word	0x3fe921fb
 800aa24:	7fefffff 	.word	0x7fefffff

0800aa28 <log10>:
 800aa28:	b5f0      	push	{r4, r5, r6, r7, lr}
 800aa2a:	ed2d 8b02 	vpush	{d8}
 800aa2e:	b08b      	sub	sp, #44	; 0x2c
 800aa30:	ec55 4b10 	vmov	r4, r5, d0
 800aa34:	f000 fa4c 	bl	800aed0 <__ieee754_log10>
 800aa38:	4b36      	ldr	r3, [pc, #216]	; (800ab14 <log10+0xec>)
 800aa3a:	eeb0 8a40 	vmov.f32	s16, s0
 800aa3e:	eef0 8a60 	vmov.f32	s17, s1
 800aa42:	f993 6000 	ldrsb.w	r6, [r3]
 800aa46:	1c73      	adds	r3, r6, #1
 800aa48:	d05c      	beq.n	800ab04 <log10+0xdc>
 800aa4a:	4622      	mov	r2, r4
 800aa4c:	462b      	mov	r3, r5
 800aa4e:	4620      	mov	r0, r4
 800aa50:	4629      	mov	r1, r5
 800aa52:	f7f6 f867 	bl	8000b24 <__aeabi_dcmpun>
 800aa56:	4607      	mov	r7, r0
 800aa58:	2800      	cmp	r0, #0
 800aa5a:	d153      	bne.n	800ab04 <log10+0xdc>
 800aa5c:	2200      	movs	r2, #0
 800aa5e:	2300      	movs	r3, #0
 800aa60:	4620      	mov	r0, r4
 800aa62:	4629      	mov	r1, r5
 800aa64:	f7f6 f840 	bl	8000ae8 <__aeabi_dcmple>
 800aa68:	2800      	cmp	r0, #0
 800aa6a:	d04b      	beq.n	800ab04 <log10+0xdc>
 800aa6c:	4b2a      	ldr	r3, [pc, #168]	; (800ab18 <log10+0xf0>)
 800aa6e:	9301      	str	r3, [sp, #4]
 800aa70:	9708      	str	r7, [sp, #32]
 800aa72:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800aa76:	e9cd 4504 	strd	r4, r5, [sp, #16]
 800aa7a:	b9a6      	cbnz	r6, 800aaa6 <log10+0x7e>
 800aa7c:	4b27      	ldr	r3, [pc, #156]	; (800ab1c <log10+0xf4>)
 800aa7e:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 800aa82:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800aa86:	4620      	mov	r0, r4
 800aa88:	2200      	movs	r2, #0
 800aa8a:	2300      	movs	r3, #0
 800aa8c:	4629      	mov	r1, r5
 800aa8e:	f7f6 f817 	bl	8000ac0 <__aeabi_dcmpeq>
 800aa92:	bb40      	cbnz	r0, 800aae6 <log10+0xbe>
 800aa94:	2301      	movs	r3, #1
 800aa96:	2e02      	cmp	r6, #2
 800aa98:	9300      	str	r3, [sp, #0]
 800aa9a:	d119      	bne.n	800aad0 <log10+0xa8>
 800aa9c:	f002 fade 	bl	800d05c <__errno>
 800aaa0:	2321      	movs	r3, #33	; 0x21
 800aaa2:	6003      	str	r3, [r0, #0]
 800aaa4:	e019      	b.n	800aada <log10+0xb2>
 800aaa6:	4b1e      	ldr	r3, [pc, #120]	; (800ab20 <log10+0xf8>)
 800aaa8:	2200      	movs	r2, #0
 800aaaa:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800aaae:	4620      	mov	r0, r4
 800aab0:	2200      	movs	r2, #0
 800aab2:	2300      	movs	r3, #0
 800aab4:	4629      	mov	r1, r5
 800aab6:	f7f6 f803 	bl	8000ac0 <__aeabi_dcmpeq>
 800aaba:	2800      	cmp	r0, #0
 800aabc:	d0ea      	beq.n	800aa94 <log10+0x6c>
 800aabe:	2302      	movs	r3, #2
 800aac0:	429e      	cmp	r6, r3
 800aac2:	9300      	str	r3, [sp, #0]
 800aac4:	d111      	bne.n	800aaea <log10+0xc2>
 800aac6:	f002 fac9 	bl	800d05c <__errno>
 800aaca:	2322      	movs	r3, #34	; 0x22
 800aacc:	6003      	str	r3, [r0, #0]
 800aace:	e011      	b.n	800aaf4 <log10+0xcc>
 800aad0:	4668      	mov	r0, sp
 800aad2:	f001 ffcd 	bl	800ca70 <matherr>
 800aad6:	2800      	cmp	r0, #0
 800aad8:	d0e0      	beq.n	800aa9c <log10+0x74>
 800aada:	4812      	ldr	r0, [pc, #72]	; (800ab24 <log10+0xfc>)
 800aadc:	f001 ffcc 	bl	800ca78 <nan>
 800aae0:	ed8d 0b06 	vstr	d0, [sp, #24]
 800aae4:	e006      	b.n	800aaf4 <log10+0xcc>
 800aae6:	2302      	movs	r3, #2
 800aae8:	9300      	str	r3, [sp, #0]
 800aaea:	4668      	mov	r0, sp
 800aaec:	f001 ffc0 	bl	800ca70 <matherr>
 800aaf0:	2800      	cmp	r0, #0
 800aaf2:	d0e8      	beq.n	800aac6 <log10+0x9e>
 800aaf4:	9b08      	ldr	r3, [sp, #32]
 800aaf6:	b11b      	cbz	r3, 800ab00 <log10+0xd8>
 800aaf8:	f002 fab0 	bl	800d05c <__errno>
 800aafc:	9b08      	ldr	r3, [sp, #32]
 800aafe:	6003      	str	r3, [r0, #0]
 800ab00:	ed9d 8b06 	vldr	d8, [sp, #24]
 800ab04:	eeb0 0a48 	vmov.f32	s0, s16
 800ab08:	eef0 0a68 	vmov.f32	s1, s17
 800ab0c:	b00b      	add	sp, #44	; 0x2c
 800ab0e:	ecbd 8b02 	vpop	{d8}
 800ab12:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ab14:	20000684 	.word	0x20000684
 800ab18:	0800da95 	.word	0x0800da95
 800ab1c:	c7efffff 	.word	0xc7efffff
 800ab20:	fff00000 	.word	0xfff00000
 800ab24:	0800d754 	.word	0x0800d754

0800ab28 <pow>:
 800ab28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab2c:	ed2d 8b04 	vpush	{d8-d9}
 800ab30:	b08d      	sub	sp, #52	; 0x34
 800ab32:	ec57 6b10 	vmov	r6, r7, d0
 800ab36:	ec55 4b11 	vmov	r4, r5, d1
 800ab3a:	f000 fa59 	bl	800aff0 <__ieee754_pow>
 800ab3e:	4bae      	ldr	r3, [pc, #696]	; (800adf8 <pow+0x2d0>)
 800ab40:	eeb0 8a40 	vmov.f32	s16, s0
 800ab44:	eef0 8a60 	vmov.f32	s17, s1
 800ab48:	f993 9000 	ldrsb.w	r9, [r3]
 800ab4c:	f1b9 3fff 	cmp.w	r9, #4294967295
 800ab50:	4698      	mov	r8, r3
 800ab52:	d05f      	beq.n	800ac14 <pow+0xec>
 800ab54:	4622      	mov	r2, r4
 800ab56:	462b      	mov	r3, r5
 800ab58:	4620      	mov	r0, r4
 800ab5a:	4629      	mov	r1, r5
 800ab5c:	f7f5 ffe2 	bl	8000b24 <__aeabi_dcmpun>
 800ab60:	4683      	mov	fp, r0
 800ab62:	2800      	cmp	r0, #0
 800ab64:	d156      	bne.n	800ac14 <pow+0xec>
 800ab66:	4632      	mov	r2, r6
 800ab68:	463b      	mov	r3, r7
 800ab6a:	4630      	mov	r0, r6
 800ab6c:	4639      	mov	r1, r7
 800ab6e:	f7f5 ffd9 	bl	8000b24 <__aeabi_dcmpun>
 800ab72:	9001      	str	r0, [sp, #4]
 800ab74:	b1e8      	cbz	r0, 800abb2 <pow+0x8a>
 800ab76:	2200      	movs	r2, #0
 800ab78:	2300      	movs	r3, #0
 800ab7a:	4620      	mov	r0, r4
 800ab7c:	4629      	mov	r1, r5
 800ab7e:	f7f5 ff9f 	bl	8000ac0 <__aeabi_dcmpeq>
 800ab82:	2800      	cmp	r0, #0
 800ab84:	d046      	beq.n	800ac14 <pow+0xec>
 800ab86:	2301      	movs	r3, #1
 800ab88:	9302      	str	r3, [sp, #8]
 800ab8a:	4b9c      	ldr	r3, [pc, #624]	; (800adfc <pow+0x2d4>)
 800ab8c:	9303      	str	r3, [sp, #12]
 800ab8e:	4b9c      	ldr	r3, [pc, #624]	; (800ae00 <pow+0x2d8>)
 800ab90:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 800ab94:	2200      	movs	r2, #0
 800ab96:	f1b9 0f02 	cmp.w	r9, #2
 800ab9a:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800ab9e:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800aba2:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800aba6:	d033      	beq.n	800ac10 <pow+0xe8>
 800aba8:	a802      	add	r0, sp, #8
 800abaa:	f001 ff61 	bl	800ca70 <matherr>
 800abae:	bb48      	cbnz	r0, 800ac04 <pow+0xdc>
 800abb0:	e05e      	b.n	800ac70 <pow+0x148>
 800abb2:	f04f 0a00 	mov.w	sl, #0
 800abb6:	f04f 0b00 	mov.w	fp, #0
 800abba:	4652      	mov	r2, sl
 800abbc:	465b      	mov	r3, fp
 800abbe:	4630      	mov	r0, r6
 800abc0:	4639      	mov	r1, r7
 800abc2:	f7f5 ff7d 	bl	8000ac0 <__aeabi_dcmpeq>
 800abc6:	ec4b ab19 	vmov	d9, sl, fp
 800abca:	2800      	cmp	r0, #0
 800abcc:	d055      	beq.n	800ac7a <pow+0x152>
 800abce:	4652      	mov	r2, sl
 800abd0:	465b      	mov	r3, fp
 800abd2:	4620      	mov	r0, r4
 800abd4:	4629      	mov	r1, r5
 800abd6:	f7f5 ff73 	bl	8000ac0 <__aeabi_dcmpeq>
 800abda:	4680      	mov	r8, r0
 800abdc:	b318      	cbz	r0, 800ac26 <pow+0xfe>
 800abde:	2301      	movs	r3, #1
 800abe0:	9302      	str	r3, [sp, #8]
 800abe2:	4b86      	ldr	r3, [pc, #536]	; (800adfc <pow+0x2d4>)
 800abe4:	9303      	str	r3, [sp, #12]
 800abe6:	9b01      	ldr	r3, [sp, #4]
 800abe8:	930a      	str	r3, [sp, #40]	; 0x28
 800abea:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800abee:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800abf2:	e9cd ab08 	strd	sl, fp, [sp, #32]
 800abf6:	f1b9 0f00 	cmp.w	r9, #0
 800abfa:	d0d5      	beq.n	800aba8 <pow+0x80>
 800abfc:	4b80      	ldr	r3, [pc, #512]	; (800ae00 <pow+0x2d8>)
 800abfe:	2200      	movs	r2, #0
 800ac00:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800ac04:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ac06:	b11b      	cbz	r3, 800ac10 <pow+0xe8>
 800ac08:	f002 fa28 	bl	800d05c <__errno>
 800ac0c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ac0e:	6003      	str	r3, [r0, #0]
 800ac10:	ed9d 8b08 	vldr	d8, [sp, #32]
 800ac14:	eeb0 0a48 	vmov.f32	s0, s16
 800ac18:	eef0 0a68 	vmov.f32	s1, s17
 800ac1c:	b00d      	add	sp, #52	; 0x34
 800ac1e:	ecbd 8b04 	vpop	{d8-d9}
 800ac22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ac26:	ec45 4b10 	vmov	d0, r4, r5
 800ac2a:	f001 fe92 	bl	800c952 <finite>
 800ac2e:	2800      	cmp	r0, #0
 800ac30:	d0f0      	beq.n	800ac14 <pow+0xec>
 800ac32:	4652      	mov	r2, sl
 800ac34:	465b      	mov	r3, fp
 800ac36:	4620      	mov	r0, r4
 800ac38:	4629      	mov	r1, r5
 800ac3a:	f7f5 ff4b 	bl	8000ad4 <__aeabi_dcmplt>
 800ac3e:	2800      	cmp	r0, #0
 800ac40:	d0e8      	beq.n	800ac14 <pow+0xec>
 800ac42:	2301      	movs	r3, #1
 800ac44:	9302      	str	r3, [sp, #8]
 800ac46:	4b6d      	ldr	r3, [pc, #436]	; (800adfc <pow+0x2d4>)
 800ac48:	9303      	str	r3, [sp, #12]
 800ac4a:	4b6b      	ldr	r3, [pc, #428]	; (800adf8 <pow+0x2d0>)
 800ac4c:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
 800ac50:	f993 3000 	ldrsb.w	r3, [r3]
 800ac54:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800ac58:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800ac5c:	b913      	cbnz	r3, 800ac64 <pow+0x13c>
 800ac5e:	e9cd ab08 	strd	sl, fp, [sp, #32]
 800ac62:	e7a1      	b.n	800aba8 <pow+0x80>
 800ac64:	4967      	ldr	r1, [pc, #412]	; (800ae04 <pow+0x2dc>)
 800ac66:	2000      	movs	r0, #0
 800ac68:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800ac6c:	2b02      	cmp	r3, #2
 800ac6e:	d19b      	bne.n	800aba8 <pow+0x80>
 800ac70:	f002 f9f4 	bl	800d05c <__errno>
 800ac74:	2321      	movs	r3, #33	; 0x21
 800ac76:	6003      	str	r3, [r0, #0]
 800ac78:	e7c4      	b.n	800ac04 <pow+0xdc>
 800ac7a:	eeb0 0a48 	vmov.f32	s0, s16
 800ac7e:	eef0 0a68 	vmov.f32	s1, s17
 800ac82:	f001 fe66 	bl	800c952 <finite>
 800ac86:	9001      	str	r0, [sp, #4]
 800ac88:	2800      	cmp	r0, #0
 800ac8a:	f040 808a 	bne.w	800ada2 <pow+0x27a>
 800ac8e:	ec47 6b10 	vmov	d0, r6, r7
 800ac92:	f001 fe5e 	bl	800c952 <finite>
 800ac96:	2800      	cmp	r0, #0
 800ac98:	f000 8083 	beq.w	800ada2 <pow+0x27a>
 800ac9c:	ec45 4b10 	vmov	d0, r4, r5
 800aca0:	f001 fe57 	bl	800c952 <finite>
 800aca4:	2800      	cmp	r0, #0
 800aca6:	d07c      	beq.n	800ada2 <pow+0x27a>
 800aca8:	ec53 2b18 	vmov	r2, r3, d8
 800acac:	ee18 0a10 	vmov	r0, s16
 800acb0:	4619      	mov	r1, r3
 800acb2:	f7f5 ff37 	bl	8000b24 <__aeabi_dcmpun>
 800acb6:	f998 9000 	ldrsb.w	r9, [r8]
 800acba:	4b50      	ldr	r3, [pc, #320]	; (800adfc <pow+0x2d4>)
 800acbc:	b1b0      	cbz	r0, 800acec <pow+0x1c4>
 800acbe:	2201      	movs	r2, #1
 800acc0:	9303      	str	r3, [sp, #12]
 800acc2:	9b01      	ldr	r3, [sp, #4]
 800acc4:	9202      	str	r2, [sp, #8]
 800acc6:	930a      	str	r3, [sp, #40]	; 0x28
 800acc8:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800accc:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800acd0:	f1b9 0f00 	cmp.w	r9, #0
 800acd4:	d0c3      	beq.n	800ac5e <pow+0x136>
 800acd6:	4652      	mov	r2, sl
 800acd8:	465b      	mov	r3, fp
 800acda:	4650      	mov	r0, sl
 800acdc:	4659      	mov	r1, fp
 800acde:	f7f5 fdb1 	bl	8000844 <__aeabi_ddiv>
 800ace2:	f1b9 0f02 	cmp.w	r9, #2
 800ace6:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800acea:	e7c0      	b.n	800ac6e <pow+0x146>
 800acec:	2203      	movs	r2, #3
 800acee:	9202      	str	r2, [sp, #8]
 800acf0:	9303      	str	r3, [sp, #12]
 800acf2:	900a      	str	r0, [sp, #40]	; 0x28
 800acf4:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800acf8:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800acfc:	f1b9 0f00 	cmp.w	r9, #0
 800ad00:	d12c      	bne.n	800ad5c <pow+0x234>
 800ad02:	4b41      	ldr	r3, [pc, #260]	; (800ae08 <pow+0x2e0>)
 800ad04:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 800ad08:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800ad0c:	4630      	mov	r0, r6
 800ad0e:	4652      	mov	r2, sl
 800ad10:	465b      	mov	r3, fp
 800ad12:	4639      	mov	r1, r7
 800ad14:	f7f5 fede 	bl	8000ad4 <__aeabi_dcmplt>
 800ad18:	2800      	cmp	r0, #0
 800ad1a:	d066      	beq.n	800adea <pow+0x2c2>
 800ad1c:	2200      	movs	r2, #0
 800ad1e:	4b3b      	ldr	r3, [pc, #236]	; (800ae0c <pow+0x2e4>)
 800ad20:	4620      	mov	r0, r4
 800ad22:	4629      	mov	r1, r5
 800ad24:	f7f5 fc64 	bl	80005f0 <__aeabi_dmul>
 800ad28:	4604      	mov	r4, r0
 800ad2a:	460d      	mov	r5, r1
 800ad2c:	ec45 4b10 	vmov	d0, r4, r5
 800ad30:	f001 feaa 	bl	800ca88 <rint>
 800ad34:	4620      	mov	r0, r4
 800ad36:	ec53 2b10 	vmov	r2, r3, d0
 800ad3a:	4629      	mov	r1, r5
 800ad3c:	f7f5 fec0 	bl	8000ac0 <__aeabi_dcmpeq>
 800ad40:	b920      	cbnz	r0, 800ad4c <pow+0x224>
 800ad42:	4b33      	ldr	r3, [pc, #204]	; (800ae10 <pow+0x2e8>)
 800ad44:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 800ad48:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800ad4c:	f998 3000 	ldrsb.w	r3, [r8]
 800ad50:	2b02      	cmp	r3, #2
 800ad52:	d14a      	bne.n	800adea <pow+0x2c2>
 800ad54:	f002 f982 	bl	800d05c <__errno>
 800ad58:	2322      	movs	r3, #34	; 0x22
 800ad5a:	e78c      	b.n	800ac76 <pow+0x14e>
 800ad5c:	4b2d      	ldr	r3, [pc, #180]	; (800ae14 <pow+0x2ec>)
 800ad5e:	2200      	movs	r2, #0
 800ad60:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800ad64:	4630      	mov	r0, r6
 800ad66:	4652      	mov	r2, sl
 800ad68:	465b      	mov	r3, fp
 800ad6a:	4639      	mov	r1, r7
 800ad6c:	f7f5 feb2 	bl	8000ad4 <__aeabi_dcmplt>
 800ad70:	2800      	cmp	r0, #0
 800ad72:	d0eb      	beq.n	800ad4c <pow+0x224>
 800ad74:	2200      	movs	r2, #0
 800ad76:	4b25      	ldr	r3, [pc, #148]	; (800ae0c <pow+0x2e4>)
 800ad78:	4620      	mov	r0, r4
 800ad7a:	4629      	mov	r1, r5
 800ad7c:	f7f5 fc38 	bl	80005f0 <__aeabi_dmul>
 800ad80:	4604      	mov	r4, r0
 800ad82:	460d      	mov	r5, r1
 800ad84:	ec45 4b10 	vmov	d0, r4, r5
 800ad88:	f001 fe7e 	bl	800ca88 <rint>
 800ad8c:	4620      	mov	r0, r4
 800ad8e:	ec53 2b10 	vmov	r2, r3, d0
 800ad92:	4629      	mov	r1, r5
 800ad94:	f7f5 fe94 	bl	8000ac0 <__aeabi_dcmpeq>
 800ad98:	2800      	cmp	r0, #0
 800ad9a:	d1d7      	bne.n	800ad4c <pow+0x224>
 800ad9c:	2200      	movs	r2, #0
 800ad9e:	4b19      	ldr	r3, [pc, #100]	; (800ae04 <pow+0x2dc>)
 800ada0:	e7d2      	b.n	800ad48 <pow+0x220>
 800ada2:	2200      	movs	r2, #0
 800ada4:	2300      	movs	r3, #0
 800ada6:	ec51 0b18 	vmov	r0, r1, d8
 800adaa:	f7f5 fe89 	bl	8000ac0 <__aeabi_dcmpeq>
 800adae:	2800      	cmp	r0, #0
 800adb0:	f43f af30 	beq.w	800ac14 <pow+0xec>
 800adb4:	ec47 6b10 	vmov	d0, r6, r7
 800adb8:	f001 fdcb 	bl	800c952 <finite>
 800adbc:	2800      	cmp	r0, #0
 800adbe:	f43f af29 	beq.w	800ac14 <pow+0xec>
 800adc2:	ec45 4b10 	vmov	d0, r4, r5
 800adc6:	f001 fdc4 	bl	800c952 <finite>
 800adca:	2800      	cmp	r0, #0
 800adcc:	f43f af22 	beq.w	800ac14 <pow+0xec>
 800add0:	2304      	movs	r3, #4
 800add2:	9302      	str	r3, [sp, #8]
 800add4:	4b09      	ldr	r3, [pc, #36]	; (800adfc <pow+0x2d4>)
 800add6:	9303      	str	r3, [sp, #12]
 800add8:	2300      	movs	r3, #0
 800adda:	930a      	str	r3, [sp, #40]	; 0x28
 800addc:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800ade0:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800ade4:	ed8d 9b08 	vstr	d9, [sp, #32]
 800ade8:	e7b0      	b.n	800ad4c <pow+0x224>
 800adea:	a802      	add	r0, sp, #8
 800adec:	f001 fe40 	bl	800ca70 <matherr>
 800adf0:	2800      	cmp	r0, #0
 800adf2:	f47f af07 	bne.w	800ac04 <pow+0xdc>
 800adf6:	e7ad      	b.n	800ad54 <pow+0x22c>
 800adf8:	20000684 	.word	0x20000684
 800adfc:	0800da9b 	.word	0x0800da9b
 800ae00:	3ff00000 	.word	0x3ff00000
 800ae04:	fff00000 	.word	0xfff00000
 800ae08:	47efffff 	.word	0x47efffff
 800ae0c:	3fe00000 	.word	0x3fe00000
 800ae10:	c7efffff 	.word	0xc7efffff
 800ae14:	7ff00000 	.word	0x7ff00000

0800ae18 <sqrt>:
 800ae18:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ae1c:	ed2d 8b02 	vpush	{d8}
 800ae20:	b08b      	sub	sp, #44	; 0x2c
 800ae22:	ec55 4b10 	vmov	r4, r5, d0
 800ae26:	f000 ffe9 	bl	800bdfc <__ieee754_sqrt>
 800ae2a:	4b26      	ldr	r3, [pc, #152]	; (800aec4 <sqrt+0xac>)
 800ae2c:	eeb0 8a40 	vmov.f32	s16, s0
 800ae30:	eef0 8a60 	vmov.f32	s17, s1
 800ae34:	f993 6000 	ldrsb.w	r6, [r3]
 800ae38:	1c73      	adds	r3, r6, #1
 800ae3a:	d02a      	beq.n	800ae92 <sqrt+0x7a>
 800ae3c:	4622      	mov	r2, r4
 800ae3e:	462b      	mov	r3, r5
 800ae40:	4620      	mov	r0, r4
 800ae42:	4629      	mov	r1, r5
 800ae44:	f7f5 fe6e 	bl	8000b24 <__aeabi_dcmpun>
 800ae48:	4607      	mov	r7, r0
 800ae4a:	bb10      	cbnz	r0, 800ae92 <sqrt+0x7a>
 800ae4c:	f04f 0800 	mov.w	r8, #0
 800ae50:	f04f 0900 	mov.w	r9, #0
 800ae54:	4642      	mov	r2, r8
 800ae56:	464b      	mov	r3, r9
 800ae58:	4620      	mov	r0, r4
 800ae5a:	4629      	mov	r1, r5
 800ae5c:	f7f5 fe3a 	bl	8000ad4 <__aeabi_dcmplt>
 800ae60:	b1b8      	cbz	r0, 800ae92 <sqrt+0x7a>
 800ae62:	2301      	movs	r3, #1
 800ae64:	9300      	str	r3, [sp, #0]
 800ae66:	4b18      	ldr	r3, [pc, #96]	; (800aec8 <sqrt+0xb0>)
 800ae68:	9301      	str	r3, [sp, #4]
 800ae6a:	9708      	str	r7, [sp, #32]
 800ae6c:	e9cd 4504 	strd	r4, r5, [sp, #16]
 800ae70:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800ae74:	b9b6      	cbnz	r6, 800aea4 <sqrt+0x8c>
 800ae76:	e9cd 8906 	strd	r8, r9, [sp, #24]
 800ae7a:	4668      	mov	r0, sp
 800ae7c:	f001 fdf8 	bl	800ca70 <matherr>
 800ae80:	b1d0      	cbz	r0, 800aeb8 <sqrt+0xa0>
 800ae82:	9b08      	ldr	r3, [sp, #32]
 800ae84:	b11b      	cbz	r3, 800ae8e <sqrt+0x76>
 800ae86:	f002 f8e9 	bl	800d05c <__errno>
 800ae8a:	9b08      	ldr	r3, [sp, #32]
 800ae8c:	6003      	str	r3, [r0, #0]
 800ae8e:	ed9d 8b06 	vldr	d8, [sp, #24]
 800ae92:	eeb0 0a48 	vmov.f32	s0, s16
 800ae96:	eef0 0a68 	vmov.f32	s1, s17
 800ae9a:	b00b      	add	sp, #44	; 0x2c
 800ae9c:	ecbd 8b02 	vpop	{d8}
 800aea0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800aea4:	4642      	mov	r2, r8
 800aea6:	464b      	mov	r3, r9
 800aea8:	4640      	mov	r0, r8
 800aeaa:	4649      	mov	r1, r9
 800aeac:	f7f5 fcca 	bl	8000844 <__aeabi_ddiv>
 800aeb0:	2e02      	cmp	r6, #2
 800aeb2:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800aeb6:	d1e0      	bne.n	800ae7a <sqrt+0x62>
 800aeb8:	f002 f8d0 	bl	800d05c <__errno>
 800aebc:	2321      	movs	r3, #33	; 0x21
 800aebe:	6003      	str	r3, [r0, #0]
 800aec0:	e7df      	b.n	800ae82 <sqrt+0x6a>
 800aec2:	bf00      	nop
 800aec4:	20000684 	.word	0x20000684
 800aec8:	0800da9f 	.word	0x0800da9f
 800aecc:	00000000 	.word	0x00000000

0800aed0 <__ieee754_log10>:
 800aed0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800aed4:	ec55 4b10 	vmov	r4, r5, d0
 800aed8:	f5b5 1f80 	cmp.w	r5, #1048576	; 0x100000
 800aedc:	ee10 2a10 	vmov	r2, s0
 800aee0:	462b      	mov	r3, r5
 800aee2:	da30      	bge.n	800af46 <__ieee754_log10+0x76>
 800aee4:	f025 4100 	bic.w	r1, r5, #2147483648	; 0x80000000
 800aee8:	430a      	orrs	r2, r1
 800aeea:	d10a      	bne.n	800af02 <__ieee754_log10+0x32>
 800aeec:	493c      	ldr	r1, [pc, #240]	; (800afe0 <__ieee754_log10+0x110>)
 800aeee:	2200      	movs	r2, #0
 800aef0:	2300      	movs	r3, #0
 800aef2:	2000      	movs	r0, #0
 800aef4:	f7f5 fca6 	bl	8000844 <__aeabi_ddiv>
 800aef8:	ec41 0b10 	vmov	d0, r0, r1
 800aefc:	b003      	add	sp, #12
 800aefe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800af02:	2d00      	cmp	r5, #0
 800af04:	da09      	bge.n	800af1a <__ieee754_log10+0x4a>
 800af06:	ee10 2a10 	vmov	r2, s0
 800af0a:	462b      	mov	r3, r5
 800af0c:	4620      	mov	r0, r4
 800af0e:	4629      	mov	r1, r5
 800af10:	f7f5 f9ba 	bl	8000288 <__aeabi_dsub>
 800af14:	2200      	movs	r2, #0
 800af16:	2300      	movs	r3, #0
 800af18:	e7ec      	b.n	800aef4 <__ieee754_log10+0x24>
 800af1a:	2200      	movs	r2, #0
 800af1c:	4b31      	ldr	r3, [pc, #196]	; (800afe4 <__ieee754_log10+0x114>)
 800af1e:	4629      	mov	r1, r5
 800af20:	ee10 0a10 	vmov	r0, s0
 800af24:	f7f5 fb64 	bl	80005f0 <__aeabi_dmul>
 800af28:	f06f 0235 	mvn.w	r2, #53	; 0x35
 800af2c:	4604      	mov	r4, r0
 800af2e:	460d      	mov	r5, r1
 800af30:	460b      	mov	r3, r1
 800af32:	492d      	ldr	r1, [pc, #180]	; (800afe8 <__ieee754_log10+0x118>)
 800af34:	428b      	cmp	r3, r1
 800af36:	dd08      	ble.n	800af4a <__ieee754_log10+0x7a>
 800af38:	4622      	mov	r2, r4
 800af3a:	462b      	mov	r3, r5
 800af3c:	4620      	mov	r0, r4
 800af3e:	4629      	mov	r1, r5
 800af40:	f7f5 f9a4 	bl	800028c <__adddf3>
 800af44:	e7d8      	b.n	800aef8 <__ieee754_log10+0x28>
 800af46:	2200      	movs	r2, #0
 800af48:	e7f3      	b.n	800af32 <__ieee754_log10+0x62>
 800af4a:	1518      	asrs	r0, r3, #20
 800af4c:	f2a0 30ff 	subw	r0, r0, #1023	; 0x3ff
 800af50:	4410      	add	r0, r2
 800af52:	ea4f 79d0 	mov.w	r9, r0, lsr #31
 800af56:	4448      	add	r0, r9
 800af58:	f3c3 0813 	ubfx	r8, r3, #0, #20
 800af5c:	f7f5 fae2 	bl	8000524 <__aeabi_i2d>
 800af60:	f5c9 737f 	rsb	r3, r9, #1020	; 0x3fc
 800af64:	3303      	adds	r3, #3
 800af66:	ea48 5503 	orr.w	r5, r8, r3, lsl #20
 800af6a:	ec45 4b10 	vmov	d0, r4, r5
 800af6e:	4606      	mov	r6, r0
 800af70:	460f      	mov	r7, r1
 800af72:	f001 fe8d 	bl	800cc90 <__ieee754_log>
 800af76:	a314      	add	r3, pc, #80	; (adr r3, 800afc8 <__ieee754_log10+0xf8>)
 800af78:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af7c:	4630      	mov	r0, r6
 800af7e:	4639      	mov	r1, r7
 800af80:	ed8d 0b00 	vstr	d0, [sp]
 800af84:	f7f5 fb34 	bl	80005f0 <__aeabi_dmul>
 800af88:	ed9d 0b00 	vldr	d0, [sp]
 800af8c:	4604      	mov	r4, r0
 800af8e:	460d      	mov	r5, r1
 800af90:	a30f      	add	r3, pc, #60	; (adr r3, 800afd0 <__ieee754_log10+0x100>)
 800af92:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af96:	ec51 0b10 	vmov	r0, r1, d0
 800af9a:	f7f5 fb29 	bl	80005f0 <__aeabi_dmul>
 800af9e:	4602      	mov	r2, r0
 800afa0:	460b      	mov	r3, r1
 800afa2:	4620      	mov	r0, r4
 800afa4:	4629      	mov	r1, r5
 800afa6:	f7f5 f971 	bl	800028c <__adddf3>
 800afaa:	a30b      	add	r3, pc, #44	; (adr r3, 800afd8 <__ieee754_log10+0x108>)
 800afac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800afb0:	4604      	mov	r4, r0
 800afb2:	460d      	mov	r5, r1
 800afb4:	4630      	mov	r0, r6
 800afb6:	4639      	mov	r1, r7
 800afb8:	f7f5 fb1a 	bl	80005f0 <__aeabi_dmul>
 800afbc:	4602      	mov	r2, r0
 800afbe:	460b      	mov	r3, r1
 800afc0:	4620      	mov	r0, r4
 800afc2:	4629      	mov	r1, r5
 800afc4:	e7bc      	b.n	800af40 <__ieee754_log10+0x70>
 800afc6:	bf00      	nop
 800afc8:	11f12b36 	.word	0x11f12b36
 800afcc:	3d59fef3 	.word	0x3d59fef3
 800afd0:	1526e50e 	.word	0x1526e50e
 800afd4:	3fdbcb7b 	.word	0x3fdbcb7b
 800afd8:	509f6000 	.word	0x509f6000
 800afdc:	3fd34413 	.word	0x3fd34413
 800afe0:	c3500000 	.word	0xc3500000
 800afe4:	43500000 	.word	0x43500000
 800afe8:	7fefffff 	.word	0x7fefffff
 800afec:	00000000 	.word	0x00000000

0800aff0 <__ieee754_pow>:
 800aff0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aff4:	b091      	sub	sp, #68	; 0x44
 800aff6:	ed8d 1b00 	vstr	d1, [sp]
 800affa:	e89d 0204 	ldmia.w	sp, {r2, r9}
 800affe:	ec57 6b10 	vmov	r6, r7, d0
 800b002:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 800b006:	ea58 0302 	orrs.w	r3, r8, r2
 800b00a:	ee10 aa10 	vmov	sl, s0
 800b00e:	463d      	mov	r5, r7
 800b010:	f000 84bd 	beq.w	800b98e <__ieee754_pow+0x99e>
 800b014:	4b78      	ldr	r3, [pc, #480]	; (800b1f8 <__ieee754_pow+0x208>)
 800b016:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 800b01a:	429c      	cmp	r4, r3
 800b01c:	dc09      	bgt.n	800b032 <__ieee754_pow+0x42>
 800b01e:	d103      	bne.n	800b028 <__ieee754_pow+0x38>
 800b020:	b93e      	cbnz	r6, 800b032 <__ieee754_pow+0x42>
 800b022:	45a0      	cmp	r8, r4
 800b024:	dc0d      	bgt.n	800b042 <__ieee754_pow+0x52>
 800b026:	e001      	b.n	800b02c <__ieee754_pow+0x3c>
 800b028:	4598      	cmp	r8, r3
 800b02a:	dc02      	bgt.n	800b032 <__ieee754_pow+0x42>
 800b02c:	4598      	cmp	r8, r3
 800b02e:	d10e      	bne.n	800b04e <__ieee754_pow+0x5e>
 800b030:	b16a      	cbz	r2, 800b04e <__ieee754_pow+0x5e>
 800b032:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800b036:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800b03a:	ea54 030a 	orrs.w	r3, r4, sl
 800b03e:	f000 84a6 	beq.w	800b98e <__ieee754_pow+0x99e>
 800b042:	486e      	ldr	r0, [pc, #440]	; (800b1fc <__ieee754_pow+0x20c>)
 800b044:	b011      	add	sp, #68	; 0x44
 800b046:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b04a:	f001 bd15 	b.w	800ca78 <nan>
 800b04e:	2d00      	cmp	r5, #0
 800b050:	da53      	bge.n	800b0fa <__ieee754_pow+0x10a>
 800b052:	4b6b      	ldr	r3, [pc, #428]	; (800b200 <__ieee754_pow+0x210>)
 800b054:	4598      	cmp	r8, r3
 800b056:	dc4d      	bgt.n	800b0f4 <__ieee754_pow+0x104>
 800b058:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800b05c:	4598      	cmp	r8, r3
 800b05e:	dd4c      	ble.n	800b0fa <__ieee754_pow+0x10a>
 800b060:	ea4f 5328 	mov.w	r3, r8, asr #20
 800b064:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800b068:	2b14      	cmp	r3, #20
 800b06a:	dd26      	ble.n	800b0ba <__ieee754_pow+0xca>
 800b06c:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800b070:	fa22 f103 	lsr.w	r1, r2, r3
 800b074:	fa01 f303 	lsl.w	r3, r1, r3
 800b078:	429a      	cmp	r2, r3
 800b07a:	d13e      	bne.n	800b0fa <__ieee754_pow+0x10a>
 800b07c:	f001 0101 	and.w	r1, r1, #1
 800b080:	f1c1 0b02 	rsb	fp, r1, #2
 800b084:	2a00      	cmp	r2, #0
 800b086:	d15b      	bne.n	800b140 <__ieee754_pow+0x150>
 800b088:	4b5b      	ldr	r3, [pc, #364]	; (800b1f8 <__ieee754_pow+0x208>)
 800b08a:	4598      	cmp	r8, r3
 800b08c:	d124      	bne.n	800b0d8 <__ieee754_pow+0xe8>
 800b08e:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800b092:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800b096:	ea53 030a 	orrs.w	r3, r3, sl
 800b09a:	f000 8478 	beq.w	800b98e <__ieee754_pow+0x99e>
 800b09e:	4b59      	ldr	r3, [pc, #356]	; (800b204 <__ieee754_pow+0x214>)
 800b0a0:	429c      	cmp	r4, r3
 800b0a2:	dd2d      	ble.n	800b100 <__ieee754_pow+0x110>
 800b0a4:	f1b9 0f00 	cmp.w	r9, #0
 800b0a8:	f280 8475 	bge.w	800b996 <__ieee754_pow+0x9a6>
 800b0ac:	2000      	movs	r0, #0
 800b0ae:	2100      	movs	r1, #0
 800b0b0:	ec41 0b10 	vmov	d0, r0, r1
 800b0b4:	b011      	add	sp, #68	; 0x44
 800b0b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b0ba:	2a00      	cmp	r2, #0
 800b0bc:	d13e      	bne.n	800b13c <__ieee754_pow+0x14c>
 800b0be:	f1c3 0314 	rsb	r3, r3, #20
 800b0c2:	fa48 f103 	asr.w	r1, r8, r3
 800b0c6:	fa01 f303 	lsl.w	r3, r1, r3
 800b0ca:	4598      	cmp	r8, r3
 800b0cc:	f040 846b 	bne.w	800b9a6 <__ieee754_pow+0x9b6>
 800b0d0:	f001 0101 	and.w	r1, r1, #1
 800b0d4:	f1c1 0b02 	rsb	fp, r1, #2
 800b0d8:	4b4b      	ldr	r3, [pc, #300]	; (800b208 <__ieee754_pow+0x218>)
 800b0da:	4598      	cmp	r8, r3
 800b0dc:	d118      	bne.n	800b110 <__ieee754_pow+0x120>
 800b0de:	f1b9 0f00 	cmp.w	r9, #0
 800b0e2:	f280 845c 	bge.w	800b99e <__ieee754_pow+0x9ae>
 800b0e6:	4948      	ldr	r1, [pc, #288]	; (800b208 <__ieee754_pow+0x218>)
 800b0e8:	4632      	mov	r2, r6
 800b0ea:	463b      	mov	r3, r7
 800b0ec:	2000      	movs	r0, #0
 800b0ee:	f7f5 fba9 	bl	8000844 <__aeabi_ddiv>
 800b0f2:	e7dd      	b.n	800b0b0 <__ieee754_pow+0xc0>
 800b0f4:	f04f 0b02 	mov.w	fp, #2
 800b0f8:	e7c4      	b.n	800b084 <__ieee754_pow+0x94>
 800b0fa:	f04f 0b00 	mov.w	fp, #0
 800b0fe:	e7c1      	b.n	800b084 <__ieee754_pow+0x94>
 800b100:	f1b9 0f00 	cmp.w	r9, #0
 800b104:	dad2      	bge.n	800b0ac <__ieee754_pow+0xbc>
 800b106:	e89d 0009 	ldmia.w	sp, {r0, r3}
 800b10a:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800b10e:	e7cf      	b.n	800b0b0 <__ieee754_pow+0xc0>
 800b110:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 800b114:	d106      	bne.n	800b124 <__ieee754_pow+0x134>
 800b116:	4632      	mov	r2, r6
 800b118:	463b      	mov	r3, r7
 800b11a:	4610      	mov	r0, r2
 800b11c:	4619      	mov	r1, r3
 800b11e:	f7f5 fa67 	bl	80005f0 <__aeabi_dmul>
 800b122:	e7c5      	b.n	800b0b0 <__ieee754_pow+0xc0>
 800b124:	4b39      	ldr	r3, [pc, #228]	; (800b20c <__ieee754_pow+0x21c>)
 800b126:	4599      	cmp	r9, r3
 800b128:	d10a      	bne.n	800b140 <__ieee754_pow+0x150>
 800b12a:	2d00      	cmp	r5, #0
 800b12c:	db08      	blt.n	800b140 <__ieee754_pow+0x150>
 800b12e:	ec47 6b10 	vmov	d0, r6, r7
 800b132:	b011      	add	sp, #68	; 0x44
 800b134:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b138:	f000 be60 	b.w	800bdfc <__ieee754_sqrt>
 800b13c:	f04f 0b00 	mov.w	fp, #0
 800b140:	ec47 6b10 	vmov	d0, r6, r7
 800b144:	f001 fbfe 	bl	800c944 <fabs>
 800b148:	ec51 0b10 	vmov	r0, r1, d0
 800b14c:	f1ba 0f00 	cmp.w	sl, #0
 800b150:	d127      	bne.n	800b1a2 <__ieee754_pow+0x1b2>
 800b152:	b124      	cbz	r4, 800b15e <__ieee754_pow+0x16e>
 800b154:	4b2c      	ldr	r3, [pc, #176]	; (800b208 <__ieee754_pow+0x218>)
 800b156:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 800b15a:	429a      	cmp	r2, r3
 800b15c:	d121      	bne.n	800b1a2 <__ieee754_pow+0x1b2>
 800b15e:	f1b9 0f00 	cmp.w	r9, #0
 800b162:	da05      	bge.n	800b170 <__ieee754_pow+0x180>
 800b164:	4602      	mov	r2, r0
 800b166:	460b      	mov	r3, r1
 800b168:	2000      	movs	r0, #0
 800b16a:	4927      	ldr	r1, [pc, #156]	; (800b208 <__ieee754_pow+0x218>)
 800b16c:	f7f5 fb6a 	bl	8000844 <__aeabi_ddiv>
 800b170:	2d00      	cmp	r5, #0
 800b172:	da9d      	bge.n	800b0b0 <__ieee754_pow+0xc0>
 800b174:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800b178:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800b17c:	ea54 030b 	orrs.w	r3, r4, fp
 800b180:	d108      	bne.n	800b194 <__ieee754_pow+0x1a4>
 800b182:	4602      	mov	r2, r0
 800b184:	460b      	mov	r3, r1
 800b186:	4610      	mov	r0, r2
 800b188:	4619      	mov	r1, r3
 800b18a:	f7f5 f87d 	bl	8000288 <__aeabi_dsub>
 800b18e:	4602      	mov	r2, r0
 800b190:	460b      	mov	r3, r1
 800b192:	e7ac      	b.n	800b0ee <__ieee754_pow+0xfe>
 800b194:	f1bb 0f01 	cmp.w	fp, #1
 800b198:	d18a      	bne.n	800b0b0 <__ieee754_pow+0xc0>
 800b19a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b19e:	4619      	mov	r1, r3
 800b1a0:	e786      	b.n	800b0b0 <__ieee754_pow+0xc0>
 800b1a2:	0fed      	lsrs	r5, r5, #31
 800b1a4:	1e6b      	subs	r3, r5, #1
 800b1a6:	930d      	str	r3, [sp, #52]	; 0x34
 800b1a8:	ea5b 0303 	orrs.w	r3, fp, r3
 800b1ac:	d102      	bne.n	800b1b4 <__ieee754_pow+0x1c4>
 800b1ae:	4632      	mov	r2, r6
 800b1b0:	463b      	mov	r3, r7
 800b1b2:	e7e8      	b.n	800b186 <__ieee754_pow+0x196>
 800b1b4:	4b16      	ldr	r3, [pc, #88]	; (800b210 <__ieee754_pow+0x220>)
 800b1b6:	4598      	cmp	r8, r3
 800b1b8:	f340 80fe 	ble.w	800b3b8 <__ieee754_pow+0x3c8>
 800b1bc:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800b1c0:	4598      	cmp	r8, r3
 800b1c2:	dd0a      	ble.n	800b1da <__ieee754_pow+0x1ea>
 800b1c4:	4b0f      	ldr	r3, [pc, #60]	; (800b204 <__ieee754_pow+0x214>)
 800b1c6:	429c      	cmp	r4, r3
 800b1c8:	dc0d      	bgt.n	800b1e6 <__ieee754_pow+0x1f6>
 800b1ca:	f1b9 0f00 	cmp.w	r9, #0
 800b1ce:	f6bf af6d 	bge.w	800b0ac <__ieee754_pow+0xbc>
 800b1d2:	a307      	add	r3, pc, #28	; (adr r3, 800b1f0 <__ieee754_pow+0x200>)
 800b1d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1d8:	e79f      	b.n	800b11a <__ieee754_pow+0x12a>
 800b1da:	4b0e      	ldr	r3, [pc, #56]	; (800b214 <__ieee754_pow+0x224>)
 800b1dc:	429c      	cmp	r4, r3
 800b1de:	ddf4      	ble.n	800b1ca <__ieee754_pow+0x1da>
 800b1e0:	4b09      	ldr	r3, [pc, #36]	; (800b208 <__ieee754_pow+0x218>)
 800b1e2:	429c      	cmp	r4, r3
 800b1e4:	dd18      	ble.n	800b218 <__ieee754_pow+0x228>
 800b1e6:	f1b9 0f00 	cmp.w	r9, #0
 800b1ea:	dcf2      	bgt.n	800b1d2 <__ieee754_pow+0x1e2>
 800b1ec:	e75e      	b.n	800b0ac <__ieee754_pow+0xbc>
 800b1ee:	bf00      	nop
 800b1f0:	8800759c 	.word	0x8800759c
 800b1f4:	7e37e43c 	.word	0x7e37e43c
 800b1f8:	7ff00000 	.word	0x7ff00000
 800b1fc:	0800d754 	.word	0x0800d754
 800b200:	433fffff 	.word	0x433fffff
 800b204:	3fefffff 	.word	0x3fefffff
 800b208:	3ff00000 	.word	0x3ff00000
 800b20c:	3fe00000 	.word	0x3fe00000
 800b210:	41e00000 	.word	0x41e00000
 800b214:	3feffffe 	.word	0x3feffffe
 800b218:	2200      	movs	r2, #0
 800b21a:	4b63      	ldr	r3, [pc, #396]	; (800b3a8 <__ieee754_pow+0x3b8>)
 800b21c:	f7f5 f834 	bl	8000288 <__aeabi_dsub>
 800b220:	a355      	add	r3, pc, #340	; (adr r3, 800b378 <__ieee754_pow+0x388>)
 800b222:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b226:	4604      	mov	r4, r0
 800b228:	460d      	mov	r5, r1
 800b22a:	f7f5 f9e1 	bl	80005f0 <__aeabi_dmul>
 800b22e:	a354      	add	r3, pc, #336	; (adr r3, 800b380 <__ieee754_pow+0x390>)
 800b230:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b234:	4606      	mov	r6, r0
 800b236:	460f      	mov	r7, r1
 800b238:	4620      	mov	r0, r4
 800b23a:	4629      	mov	r1, r5
 800b23c:	f7f5 f9d8 	bl	80005f0 <__aeabi_dmul>
 800b240:	2200      	movs	r2, #0
 800b242:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b246:	4b59      	ldr	r3, [pc, #356]	; (800b3ac <__ieee754_pow+0x3bc>)
 800b248:	4620      	mov	r0, r4
 800b24a:	4629      	mov	r1, r5
 800b24c:	f7f5 f9d0 	bl	80005f0 <__aeabi_dmul>
 800b250:	4602      	mov	r2, r0
 800b252:	460b      	mov	r3, r1
 800b254:	a14c      	add	r1, pc, #304	; (adr r1, 800b388 <__ieee754_pow+0x398>)
 800b256:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b25a:	f7f5 f815 	bl	8000288 <__aeabi_dsub>
 800b25e:	4622      	mov	r2, r4
 800b260:	462b      	mov	r3, r5
 800b262:	f7f5 f9c5 	bl	80005f0 <__aeabi_dmul>
 800b266:	4602      	mov	r2, r0
 800b268:	460b      	mov	r3, r1
 800b26a:	2000      	movs	r0, #0
 800b26c:	4950      	ldr	r1, [pc, #320]	; (800b3b0 <__ieee754_pow+0x3c0>)
 800b26e:	f7f5 f80b 	bl	8000288 <__aeabi_dsub>
 800b272:	4622      	mov	r2, r4
 800b274:	462b      	mov	r3, r5
 800b276:	4680      	mov	r8, r0
 800b278:	4689      	mov	r9, r1
 800b27a:	4620      	mov	r0, r4
 800b27c:	4629      	mov	r1, r5
 800b27e:	f7f5 f9b7 	bl	80005f0 <__aeabi_dmul>
 800b282:	4602      	mov	r2, r0
 800b284:	460b      	mov	r3, r1
 800b286:	4640      	mov	r0, r8
 800b288:	4649      	mov	r1, r9
 800b28a:	f7f5 f9b1 	bl	80005f0 <__aeabi_dmul>
 800b28e:	a340      	add	r3, pc, #256	; (adr r3, 800b390 <__ieee754_pow+0x3a0>)
 800b290:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b294:	f7f5 f9ac 	bl	80005f0 <__aeabi_dmul>
 800b298:	4602      	mov	r2, r0
 800b29a:	460b      	mov	r3, r1
 800b29c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b2a0:	f7f4 fff2 	bl	8000288 <__aeabi_dsub>
 800b2a4:	4602      	mov	r2, r0
 800b2a6:	460b      	mov	r3, r1
 800b2a8:	4604      	mov	r4, r0
 800b2aa:	460d      	mov	r5, r1
 800b2ac:	4630      	mov	r0, r6
 800b2ae:	4639      	mov	r1, r7
 800b2b0:	f7f4 ffec 	bl	800028c <__adddf3>
 800b2b4:	2000      	movs	r0, #0
 800b2b6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b2ba:	4632      	mov	r2, r6
 800b2bc:	463b      	mov	r3, r7
 800b2be:	f7f4 ffe3 	bl	8000288 <__aeabi_dsub>
 800b2c2:	4602      	mov	r2, r0
 800b2c4:	460b      	mov	r3, r1
 800b2c6:	4620      	mov	r0, r4
 800b2c8:	4629      	mov	r1, r5
 800b2ca:	f7f4 ffdd 	bl	8000288 <__aeabi_dsub>
 800b2ce:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b2d0:	f10b 33ff 	add.w	r3, fp, #4294967295
 800b2d4:	4313      	orrs	r3, r2
 800b2d6:	4606      	mov	r6, r0
 800b2d8:	460f      	mov	r7, r1
 800b2da:	f040 81eb 	bne.w	800b6b4 <__ieee754_pow+0x6c4>
 800b2de:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 800b398 <__ieee754_pow+0x3a8>
 800b2e2:	e9dd 4500 	ldrd	r4, r5, [sp]
 800b2e6:	2400      	movs	r4, #0
 800b2e8:	4622      	mov	r2, r4
 800b2ea:	462b      	mov	r3, r5
 800b2ec:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b2f0:	ed8d 7b02 	vstr	d7, [sp, #8]
 800b2f4:	f7f4 ffc8 	bl	8000288 <__aeabi_dsub>
 800b2f8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b2fc:	f7f5 f978 	bl	80005f0 <__aeabi_dmul>
 800b300:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b304:	4680      	mov	r8, r0
 800b306:	4689      	mov	r9, r1
 800b308:	4630      	mov	r0, r6
 800b30a:	4639      	mov	r1, r7
 800b30c:	f7f5 f970 	bl	80005f0 <__aeabi_dmul>
 800b310:	4602      	mov	r2, r0
 800b312:	460b      	mov	r3, r1
 800b314:	4640      	mov	r0, r8
 800b316:	4649      	mov	r1, r9
 800b318:	f7f4 ffb8 	bl	800028c <__adddf3>
 800b31c:	4622      	mov	r2, r4
 800b31e:	462b      	mov	r3, r5
 800b320:	4680      	mov	r8, r0
 800b322:	4689      	mov	r9, r1
 800b324:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b328:	f7f5 f962 	bl	80005f0 <__aeabi_dmul>
 800b32c:	460b      	mov	r3, r1
 800b32e:	4604      	mov	r4, r0
 800b330:	460d      	mov	r5, r1
 800b332:	4602      	mov	r2, r0
 800b334:	4649      	mov	r1, r9
 800b336:	4640      	mov	r0, r8
 800b338:	e9cd 4500 	strd	r4, r5, [sp]
 800b33c:	f7f4 ffa6 	bl	800028c <__adddf3>
 800b340:	4b1c      	ldr	r3, [pc, #112]	; (800b3b4 <__ieee754_pow+0x3c4>)
 800b342:	4299      	cmp	r1, r3
 800b344:	4606      	mov	r6, r0
 800b346:	460f      	mov	r7, r1
 800b348:	468b      	mov	fp, r1
 800b34a:	f340 82f7 	ble.w	800b93c <__ieee754_pow+0x94c>
 800b34e:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800b352:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800b356:	4303      	orrs	r3, r0
 800b358:	f000 81ea 	beq.w	800b730 <__ieee754_pow+0x740>
 800b35c:	a310      	add	r3, pc, #64	; (adr r3, 800b3a0 <__ieee754_pow+0x3b0>)
 800b35e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b362:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b366:	f7f5 f943 	bl	80005f0 <__aeabi_dmul>
 800b36a:	a30d      	add	r3, pc, #52	; (adr r3, 800b3a0 <__ieee754_pow+0x3b0>)
 800b36c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b370:	e6d5      	b.n	800b11e <__ieee754_pow+0x12e>
 800b372:	bf00      	nop
 800b374:	f3af 8000 	nop.w
 800b378:	60000000 	.word	0x60000000
 800b37c:	3ff71547 	.word	0x3ff71547
 800b380:	f85ddf44 	.word	0xf85ddf44
 800b384:	3e54ae0b 	.word	0x3e54ae0b
 800b388:	55555555 	.word	0x55555555
 800b38c:	3fd55555 	.word	0x3fd55555
 800b390:	652b82fe 	.word	0x652b82fe
 800b394:	3ff71547 	.word	0x3ff71547
 800b398:	00000000 	.word	0x00000000
 800b39c:	bff00000 	.word	0xbff00000
 800b3a0:	8800759c 	.word	0x8800759c
 800b3a4:	7e37e43c 	.word	0x7e37e43c
 800b3a8:	3ff00000 	.word	0x3ff00000
 800b3ac:	3fd00000 	.word	0x3fd00000
 800b3b0:	3fe00000 	.word	0x3fe00000
 800b3b4:	408fffff 	.word	0x408fffff
 800b3b8:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 800b3bc:	f04f 0200 	mov.w	r2, #0
 800b3c0:	da05      	bge.n	800b3ce <__ieee754_pow+0x3de>
 800b3c2:	4bd3      	ldr	r3, [pc, #844]	; (800b710 <__ieee754_pow+0x720>)
 800b3c4:	f7f5 f914 	bl	80005f0 <__aeabi_dmul>
 800b3c8:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800b3cc:	460c      	mov	r4, r1
 800b3ce:	1523      	asrs	r3, r4, #20
 800b3d0:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800b3d4:	4413      	add	r3, r2
 800b3d6:	9307      	str	r3, [sp, #28]
 800b3d8:	4bce      	ldr	r3, [pc, #824]	; (800b714 <__ieee754_pow+0x724>)
 800b3da:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800b3de:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800b3e2:	429c      	cmp	r4, r3
 800b3e4:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800b3e8:	dd08      	ble.n	800b3fc <__ieee754_pow+0x40c>
 800b3ea:	4bcb      	ldr	r3, [pc, #812]	; (800b718 <__ieee754_pow+0x728>)
 800b3ec:	429c      	cmp	r4, r3
 800b3ee:	f340 815e 	ble.w	800b6ae <__ieee754_pow+0x6be>
 800b3f2:	9b07      	ldr	r3, [sp, #28]
 800b3f4:	3301      	adds	r3, #1
 800b3f6:	9307      	str	r3, [sp, #28]
 800b3f8:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800b3fc:	f04f 0a00 	mov.w	sl, #0
 800b400:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 800b404:	930c      	str	r3, [sp, #48]	; 0x30
 800b406:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b408:	4bc4      	ldr	r3, [pc, #784]	; (800b71c <__ieee754_pow+0x72c>)
 800b40a:	4413      	add	r3, r2
 800b40c:	ed93 7b00 	vldr	d7, [r3]
 800b410:	4629      	mov	r1, r5
 800b412:	ec53 2b17 	vmov	r2, r3, d7
 800b416:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 800b41a:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800b41e:	f7f4 ff33 	bl	8000288 <__aeabi_dsub>
 800b422:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800b426:	4606      	mov	r6, r0
 800b428:	460f      	mov	r7, r1
 800b42a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800b42e:	f7f4 ff2d 	bl	800028c <__adddf3>
 800b432:	4602      	mov	r2, r0
 800b434:	460b      	mov	r3, r1
 800b436:	2000      	movs	r0, #0
 800b438:	49b9      	ldr	r1, [pc, #740]	; (800b720 <__ieee754_pow+0x730>)
 800b43a:	f7f5 fa03 	bl	8000844 <__aeabi_ddiv>
 800b43e:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 800b442:	4602      	mov	r2, r0
 800b444:	460b      	mov	r3, r1
 800b446:	4630      	mov	r0, r6
 800b448:	4639      	mov	r1, r7
 800b44a:	f7f5 f8d1 	bl	80005f0 <__aeabi_dmul>
 800b44e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b452:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800b456:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800b45a:	2300      	movs	r3, #0
 800b45c:	9302      	str	r3, [sp, #8]
 800b45e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800b462:	106d      	asrs	r5, r5, #1
 800b464:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800b468:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800b46c:	2200      	movs	r2, #0
 800b46e:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 800b472:	4640      	mov	r0, r8
 800b474:	4649      	mov	r1, r9
 800b476:	4614      	mov	r4, r2
 800b478:	461d      	mov	r5, r3
 800b47a:	f7f5 f8b9 	bl	80005f0 <__aeabi_dmul>
 800b47e:	4602      	mov	r2, r0
 800b480:	460b      	mov	r3, r1
 800b482:	4630      	mov	r0, r6
 800b484:	4639      	mov	r1, r7
 800b486:	f7f4 feff 	bl	8000288 <__aeabi_dsub>
 800b48a:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800b48e:	4606      	mov	r6, r0
 800b490:	460f      	mov	r7, r1
 800b492:	4620      	mov	r0, r4
 800b494:	4629      	mov	r1, r5
 800b496:	f7f4 fef7 	bl	8000288 <__aeabi_dsub>
 800b49a:	4602      	mov	r2, r0
 800b49c:	460b      	mov	r3, r1
 800b49e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800b4a2:	f7f4 fef1 	bl	8000288 <__aeabi_dsub>
 800b4a6:	4642      	mov	r2, r8
 800b4a8:	464b      	mov	r3, r9
 800b4aa:	f7f5 f8a1 	bl	80005f0 <__aeabi_dmul>
 800b4ae:	4602      	mov	r2, r0
 800b4b0:	460b      	mov	r3, r1
 800b4b2:	4630      	mov	r0, r6
 800b4b4:	4639      	mov	r1, r7
 800b4b6:	f7f4 fee7 	bl	8000288 <__aeabi_dsub>
 800b4ba:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800b4be:	f7f5 f897 	bl	80005f0 <__aeabi_dmul>
 800b4c2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b4c6:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800b4ca:	4610      	mov	r0, r2
 800b4cc:	4619      	mov	r1, r3
 800b4ce:	f7f5 f88f 	bl	80005f0 <__aeabi_dmul>
 800b4d2:	a37b      	add	r3, pc, #492	; (adr r3, 800b6c0 <__ieee754_pow+0x6d0>)
 800b4d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4d8:	4604      	mov	r4, r0
 800b4da:	460d      	mov	r5, r1
 800b4dc:	f7f5 f888 	bl	80005f0 <__aeabi_dmul>
 800b4e0:	a379      	add	r3, pc, #484	; (adr r3, 800b6c8 <__ieee754_pow+0x6d8>)
 800b4e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4e6:	f7f4 fed1 	bl	800028c <__adddf3>
 800b4ea:	4622      	mov	r2, r4
 800b4ec:	462b      	mov	r3, r5
 800b4ee:	f7f5 f87f 	bl	80005f0 <__aeabi_dmul>
 800b4f2:	a377      	add	r3, pc, #476	; (adr r3, 800b6d0 <__ieee754_pow+0x6e0>)
 800b4f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4f8:	f7f4 fec8 	bl	800028c <__adddf3>
 800b4fc:	4622      	mov	r2, r4
 800b4fe:	462b      	mov	r3, r5
 800b500:	f7f5 f876 	bl	80005f0 <__aeabi_dmul>
 800b504:	a374      	add	r3, pc, #464	; (adr r3, 800b6d8 <__ieee754_pow+0x6e8>)
 800b506:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b50a:	f7f4 febf 	bl	800028c <__adddf3>
 800b50e:	4622      	mov	r2, r4
 800b510:	462b      	mov	r3, r5
 800b512:	f7f5 f86d 	bl	80005f0 <__aeabi_dmul>
 800b516:	a372      	add	r3, pc, #456	; (adr r3, 800b6e0 <__ieee754_pow+0x6f0>)
 800b518:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b51c:	f7f4 feb6 	bl	800028c <__adddf3>
 800b520:	4622      	mov	r2, r4
 800b522:	462b      	mov	r3, r5
 800b524:	f7f5 f864 	bl	80005f0 <__aeabi_dmul>
 800b528:	a36f      	add	r3, pc, #444	; (adr r3, 800b6e8 <__ieee754_pow+0x6f8>)
 800b52a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b52e:	f7f4 fead 	bl	800028c <__adddf3>
 800b532:	4622      	mov	r2, r4
 800b534:	4606      	mov	r6, r0
 800b536:	460f      	mov	r7, r1
 800b538:	462b      	mov	r3, r5
 800b53a:	4620      	mov	r0, r4
 800b53c:	4629      	mov	r1, r5
 800b53e:	f7f5 f857 	bl	80005f0 <__aeabi_dmul>
 800b542:	4602      	mov	r2, r0
 800b544:	460b      	mov	r3, r1
 800b546:	4630      	mov	r0, r6
 800b548:	4639      	mov	r1, r7
 800b54a:	f7f5 f851 	bl	80005f0 <__aeabi_dmul>
 800b54e:	4642      	mov	r2, r8
 800b550:	4604      	mov	r4, r0
 800b552:	460d      	mov	r5, r1
 800b554:	464b      	mov	r3, r9
 800b556:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b55a:	f7f4 fe97 	bl	800028c <__adddf3>
 800b55e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800b562:	f7f5 f845 	bl	80005f0 <__aeabi_dmul>
 800b566:	4622      	mov	r2, r4
 800b568:	462b      	mov	r3, r5
 800b56a:	f7f4 fe8f 	bl	800028c <__adddf3>
 800b56e:	4642      	mov	r2, r8
 800b570:	4606      	mov	r6, r0
 800b572:	460f      	mov	r7, r1
 800b574:	464b      	mov	r3, r9
 800b576:	4640      	mov	r0, r8
 800b578:	4649      	mov	r1, r9
 800b57a:	f7f5 f839 	bl	80005f0 <__aeabi_dmul>
 800b57e:	2200      	movs	r2, #0
 800b580:	4b68      	ldr	r3, [pc, #416]	; (800b724 <__ieee754_pow+0x734>)
 800b582:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800b586:	f7f4 fe81 	bl	800028c <__adddf3>
 800b58a:	4632      	mov	r2, r6
 800b58c:	463b      	mov	r3, r7
 800b58e:	f7f4 fe7d 	bl	800028c <__adddf3>
 800b592:	9802      	ldr	r0, [sp, #8]
 800b594:	460d      	mov	r5, r1
 800b596:	4604      	mov	r4, r0
 800b598:	4602      	mov	r2, r0
 800b59a:	460b      	mov	r3, r1
 800b59c:	4640      	mov	r0, r8
 800b59e:	4649      	mov	r1, r9
 800b5a0:	f7f5 f826 	bl	80005f0 <__aeabi_dmul>
 800b5a4:	2200      	movs	r2, #0
 800b5a6:	4680      	mov	r8, r0
 800b5a8:	4689      	mov	r9, r1
 800b5aa:	4b5e      	ldr	r3, [pc, #376]	; (800b724 <__ieee754_pow+0x734>)
 800b5ac:	4620      	mov	r0, r4
 800b5ae:	4629      	mov	r1, r5
 800b5b0:	f7f4 fe6a 	bl	8000288 <__aeabi_dsub>
 800b5b4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800b5b8:	f7f4 fe66 	bl	8000288 <__aeabi_dsub>
 800b5bc:	4602      	mov	r2, r0
 800b5be:	460b      	mov	r3, r1
 800b5c0:	4630      	mov	r0, r6
 800b5c2:	4639      	mov	r1, r7
 800b5c4:	f7f4 fe60 	bl	8000288 <__aeabi_dsub>
 800b5c8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b5cc:	f7f5 f810 	bl	80005f0 <__aeabi_dmul>
 800b5d0:	4622      	mov	r2, r4
 800b5d2:	4606      	mov	r6, r0
 800b5d4:	460f      	mov	r7, r1
 800b5d6:	462b      	mov	r3, r5
 800b5d8:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800b5dc:	f7f5 f808 	bl	80005f0 <__aeabi_dmul>
 800b5e0:	4602      	mov	r2, r0
 800b5e2:	460b      	mov	r3, r1
 800b5e4:	4630      	mov	r0, r6
 800b5e6:	4639      	mov	r1, r7
 800b5e8:	f7f4 fe50 	bl	800028c <__adddf3>
 800b5ec:	4606      	mov	r6, r0
 800b5ee:	460f      	mov	r7, r1
 800b5f0:	4602      	mov	r2, r0
 800b5f2:	460b      	mov	r3, r1
 800b5f4:	4640      	mov	r0, r8
 800b5f6:	4649      	mov	r1, r9
 800b5f8:	f7f4 fe48 	bl	800028c <__adddf3>
 800b5fc:	9802      	ldr	r0, [sp, #8]
 800b5fe:	a33c      	add	r3, pc, #240	; (adr r3, 800b6f0 <__ieee754_pow+0x700>)
 800b600:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b604:	4604      	mov	r4, r0
 800b606:	460d      	mov	r5, r1
 800b608:	f7f4 fff2 	bl	80005f0 <__aeabi_dmul>
 800b60c:	4642      	mov	r2, r8
 800b60e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800b612:	464b      	mov	r3, r9
 800b614:	4620      	mov	r0, r4
 800b616:	4629      	mov	r1, r5
 800b618:	f7f4 fe36 	bl	8000288 <__aeabi_dsub>
 800b61c:	4602      	mov	r2, r0
 800b61e:	460b      	mov	r3, r1
 800b620:	4630      	mov	r0, r6
 800b622:	4639      	mov	r1, r7
 800b624:	f7f4 fe30 	bl	8000288 <__aeabi_dsub>
 800b628:	a333      	add	r3, pc, #204	; (adr r3, 800b6f8 <__ieee754_pow+0x708>)
 800b62a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b62e:	f7f4 ffdf 	bl	80005f0 <__aeabi_dmul>
 800b632:	a333      	add	r3, pc, #204	; (adr r3, 800b700 <__ieee754_pow+0x710>)
 800b634:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b638:	4606      	mov	r6, r0
 800b63a:	460f      	mov	r7, r1
 800b63c:	4620      	mov	r0, r4
 800b63e:	4629      	mov	r1, r5
 800b640:	f7f4 ffd6 	bl	80005f0 <__aeabi_dmul>
 800b644:	4602      	mov	r2, r0
 800b646:	460b      	mov	r3, r1
 800b648:	4630      	mov	r0, r6
 800b64a:	4639      	mov	r1, r7
 800b64c:	f7f4 fe1e 	bl	800028c <__adddf3>
 800b650:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b652:	4b35      	ldr	r3, [pc, #212]	; (800b728 <__ieee754_pow+0x738>)
 800b654:	4413      	add	r3, r2
 800b656:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b65a:	f7f4 fe17 	bl	800028c <__adddf3>
 800b65e:	4604      	mov	r4, r0
 800b660:	9807      	ldr	r0, [sp, #28]
 800b662:	460d      	mov	r5, r1
 800b664:	f7f4 ff5e 	bl	8000524 <__aeabi_i2d>
 800b668:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b66a:	4b30      	ldr	r3, [pc, #192]	; (800b72c <__ieee754_pow+0x73c>)
 800b66c:	4413      	add	r3, r2
 800b66e:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b672:	4606      	mov	r6, r0
 800b674:	460f      	mov	r7, r1
 800b676:	4622      	mov	r2, r4
 800b678:	462b      	mov	r3, r5
 800b67a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800b67e:	f7f4 fe05 	bl	800028c <__adddf3>
 800b682:	4642      	mov	r2, r8
 800b684:	464b      	mov	r3, r9
 800b686:	f7f4 fe01 	bl	800028c <__adddf3>
 800b68a:	4632      	mov	r2, r6
 800b68c:	463b      	mov	r3, r7
 800b68e:	f7f4 fdfd 	bl	800028c <__adddf3>
 800b692:	9802      	ldr	r0, [sp, #8]
 800b694:	4632      	mov	r2, r6
 800b696:	463b      	mov	r3, r7
 800b698:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b69c:	f7f4 fdf4 	bl	8000288 <__aeabi_dsub>
 800b6a0:	4642      	mov	r2, r8
 800b6a2:	464b      	mov	r3, r9
 800b6a4:	f7f4 fdf0 	bl	8000288 <__aeabi_dsub>
 800b6a8:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800b6ac:	e607      	b.n	800b2be <__ieee754_pow+0x2ce>
 800b6ae:	f04f 0a01 	mov.w	sl, #1
 800b6b2:	e6a5      	b.n	800b400 <__ieee754_pow+0x410>
 800b6b4:	ed9f 7b14 	vldr	d7, [pc, #80]	; 800b708 <__ieee754_pow+0x718>
 800b6b8:	e613      	b.n	800b2e2 <__ieee754_pow+0x2f2>
 800b6ba:	bf00      	nop
 800b6bc:	f3af 8000 	nop.w
 800b6c0:	4a454eef 	.word	0x4a454eef
 800b6c4:	3fca7e28 	.word	0x3fca7e28
 800b6c8:	93c9db65 	.word	0x93c9db65
 800b6cc:	3fcd864a 	.word	0x3fcd864a
 800b6d0:	a91d4101 	.word	0xa91d4101
 800b6d4:	3fd17460 	.word	0x3fd17460
 800b6d8:	518f264d 	.word	0x518f264d
 800b6dc:	3fd55555 	.word	0x3fd55555
 800b6e0:	db6fabff 	.word	0xdb6fabff
 800b6e4:	3fdb6db6 	.word	0x3fdb6db6
 800b6e8:	33333303 	.word	0x33333303
 800b6ec:	3fe33333 	.word	0x3fe33333
 800b6f0:	e0000000 	.word	0xe0000000
 800b6f4:	3feec709 	.word	0x3feec709
 800b6f8:	dc3a03fd 	.word	0xdc3a03fd
 800b6fc:	3feec709 	.word	0x3feec709
 800b700:	145b01f5 	.word	0x145b01f5
 800b704:	be3e2fe0 	.word	0xbe3e2fe0
 800b708:	00000000 	.word	0x00000000
 800b70c:	3ff00000 	.word	0x3ff00000
 800b710:	43400000 	.word	0x43400000
 800b714:	0003988e 	.word	0x0003988e
 800b718:	000bb679 	.word	0x000bb679
 800b71c:	0800daa8 	.word	0x0800daa8
 800b720:	3ff00000 	.word	0x3ff00000
 800b724:	40080000 	.word	0x40080000
 800b728:	0800dac8 	.word	0x0800dac8
 800b72c:	0800dab8 	.word	0x0800dab8
 800b730:	a3b6      	add	r3, pc, #728	; (adr r3, 800ba0c <__ieee754_pow+0xa1c>)
 800b732:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b736:	4640      	mov	r0, r8
 800b738:	4649      	mov	r1, r9
 800b73a:	f7f4 fda7 	bl	800028c <__adddf3>
 800b73e:	4622      	mov	r2, r4
 800b740:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b744:	462b      	mov	r3, r5
 800b746:	4630      	mov	r0, r6
 800b748:	4639      	mov	r1, r7
 800b74a:	f7f4 fd9d 	bl	8000288 <__aeabi_dsub>
 800b74e:	4602      	mov	r2, r0
 800b750:	460b      	mov	r3, r1
 800b752:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b756:	f7f5 f9db 	bl	8000b10 <__aeabi_dcmpgt>
 800b75a:	2800      	cmp	r0, #0
 800b75c:	f47f adfe 	bne.w	800b35c <__ieee754_pow+0x36c>
 800b760:	4aa5      	ldr	r2, [pc, #660]	; (800b9f8 <__ieee754_pow+0xa08>)
 800b762:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800b766:	4293      	cmp	r3, r2
 800b768:	f340 810c 	ble.w	800b984 <__ieee754_pow+0x994>
 800b76c:	151b      	asrs	r3, r3, #20
 800b76e:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800b772:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800b776:	fa4a f303 	asr.w	r3, sl, r3
 800b77a:	445b      	add	r3, fp
 800b77c:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800b780:	4e9e      	ldr	r6, [pc, #632]	; (800b9fc <__ieee754_pow+0xa0c>)
 800b782:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800b786:	4116      	asrs	r6, r2
 800b788:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 800b78c:	2000      	movs	r0, #0
 800b78e:	ea23 0106 	bic.w	r1, r3, r6
 800b792:	f1c2 0214 	rsb	r2, r2, #20
 800b796:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800b79a:	fa4a fa02 	asr.w	sl, sl, r2
 800b79e:	f1bb 0f00 	cmp.w	fp, #0
 800b7a2:	4602      	mov	r2, r0
 800b7a4:	460b      	mov	r3, r1
 800b7a6:	4620      	mov	r0, r4
 800b7a8:	4629      	mov	r1, r5
 800b7aa:	bfb8      	it	lt
 800b7ac:	f1ca 0a00 	rsblt	sl, sl, #0
 800b7b0:	f7f4 fd6a 	bl	8000288 <__aeabi_dsub>
 800b7b4:	e9cd 0100 	strd	r0, r1, [sp]
 800b7b8:	4642      	mov	r2, r8
 800b7ba:	464b      	mov	r3, r9
 800b7bc:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b7c0:	f7f4 fd64 	bl	800028c <__adddf3>
 800b7c4:	2000      	movs	r0, #0
 800b7c6:	a37a      	add	r3, pc, #488	; (adr r3, 800b9b0 <__ieee754_pow+0x9c0>)
 800b7c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7cc:	4604      	mov	r4, r0
 800b7ce:	460d      	mov	r5, r1
 800b7d0:	f7f4 ff0e 	bl	80005f0 <__aeabi_dmul>
 800b7d4:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b7d8:	4606      	mov	r6, r0
 800b7da:	460f      	mov	r7, r1
 800b7dc:	4620      	mov	r0, r4
 800b7de:	4629      	mov	r1, r5
 800b7e0:	f7f4 fd52 	bl	8000288 <__aeabi_dsub>
 800b7e4:	4602      	mov	r2, r0
 800b7e6:	460b      	mov	r3, r1
 800b7e8:	4640      	mov	r0, r8
 800b7ea:	4649      	mov	r1, r9
 800b7ec:	f7f4 fd4c 	bl	8000288 <__aeabi_dsub>
 800b7f0:	a371      	add	r3, pc, #452	; (adr r3, 800b9b8 <__ieee754_pow+0x9c8>)
 800b7f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7f6:	f7f4 fefb 	bl	80005f0 <__aeabi_dmul>
 800b7fa:	a371      	add	r3, pc, #452	; (adr r3, 800b9c0 <__ieee754_pow+0x9d0>)
 800b7fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b800:	4680      	mov	r8, r0
 800b802:	4689      	mov	r9, r1
 800b804:	4620      	mov	r0, r4
 800b806:	4629      	mov	r1, r5
 800b808:	f7f4 fef2 	bl	80005f0 <__aeabi_dmul>
 800b80c:	4602      	mov	r2, r0
 800b80e:	460b      	mov	r3, r1
 800b810:	4640      	mov	r0, r8
 800b812:	4649      	mov	r1, r9
 800b814:	f7f4 fd3a 	bl	800028c <__adddf3>
 800b818:	4604      	mov	r4, r0
 800b81a:	460d      	mov	r5, r1
 800b81c:	4602      	mov	r2, r0
 800b81e:	460b      	mov	r3, r1
 800b820:	4630      	mov	r0, r6
 800b822:	4639      	mov	r1, r7
 800b824:	f7f4 fd32 	bl	800028c <__adddf3>
 800b828:	4632      	mov	r2, r6
 800b82a:	463b      	mov	r3, r7
 800b82c:	4680      	mov	r8, r0
 800b82e:	4689      	mov	r9, r1
 800b830:	f7f4 fd2a 	bl	8000288 <__aeabi_dsub>
 800b834:	4602      	mov	r2, r0
 800b836:	460b      	mov	r3, r1
 800b838:	4620      	mov	r0, r4
 800b83a:	4629      	mov	r1, r5
 800b83c:	f7f4 fd24 	bl	8000288 <__aeabi_dsub>
 800b840:	4642      	mov	r2, r8
 800b842:	4606      	mov	r6, r0
 800b844:	460f      	mov	r7, r1
 800b846:	464b      	mov	r3, r9
 800b848:	4640      	mov	r0, r8
 800b84a:	4649      	mov	r1, r9
 800b84c:	f7f4 fed0 	bl	80005f0 <__aeabi_dmul>
 800b850:	a35d      	add	r3, pc, #372	; (adr r3, 800b9c8 <__ieee754_pow+0x9d8>)
 800b852:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b856:	4604      	mov	r4, r0
 800b858:	460d      	mov	r5, r1
 800b85a:	f7f4 fec9 	bl	80005f0 <__aeabi_dmul>
 800b85e:	a35c      	add	r3, pc, #368	; (adr r3, 800b9d0 <__ieee754_pow+0x9e0>)
 800b860:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b864:	f7f4 fd10 	bl	8000288 <__aeabi_dsub>
 800b868:	4622      	mov	r2, r4
 800b86a:	462b      	mov	r3, r5
 800b86c:	f7f4 fec0 	bl	80005f0 <__aeabi_dmul>
 800b870:	a359      	add	r3, pc, #356	; (adr r3, 800b9d8 <__ieee754_pow+0x9e8>)
 800b872:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b876:	f7f4 fd09 	bl	800028c <__adddf3>
 800b87a:	4622      	mov	r2, r4
 800b87c:	462b      	mov	r3, r5
 800b87e:	f7f4 feb7 	bl	80005f0 <__aeabi_dmul>
 800b882:	a357      	add	r3, pc, #348	; (adr r3, 800b9e0 <__ieee754_pow+0x9f0>)
 800b884:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b888:	f7f4 fcfe 	bl	8000288 <__aeabi_dsub>
 800b88c:	4622      	mov	r2, r4
 800b88e:	462b      	mov	r3, r5
 800b890:	f7f4 feae 	bl	80005f0 <__aeabi_dmul>
 800b894:	a354      	add	r3, pc, #336	; (adr r3, 800b9e8 <__ieee754_pow+0x9f8>)
 800b896:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b89a:	f7f4 fcf7 	bl	800028c <__adddf3>
 800b89e:	4622      	mov	r2, r4
 800b8a0:	462b      	mov	r3, r5
 800b8a2:	f7f4 fea5 	bl	80005f0 <__aeabi_dmul>
 800b8a6:	4602      	mov	r2, r0
 800b8a8:	460b      	mov	r3, r1
 800b8aa:	4640      	mov	r0, r8
 800b8ac:	4649      	mov	r1, r9
 800b8ae:	f7f4 fceb 	bl	8000288 <__aeabi_dsub>
 800b8b2:	4604      	mov	r4, r0
 800b8b4:	460d      	mov	r5, r1
 800b8b6:	4602      	mov	r2, r0
 800b8b8:	460b      	mov	r3, r1
 800b8ba:	4640      	mov	r0, r8
 800b8bc:	4649      	mov	r1, r9
 800b8be:	f7f4 fe97 	bl	80005f0 <__aeabi_dmul>
 800b8c2:	2200      	movs	r2, #0
 800b8c4:	e9cd 0100 	strd	r0, r1, [sp]
 800b8c8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800b8cc:	4620      	mov	r0, r4
 800b8ce:	4629      	mov	r1, r5
 800b8d0:	f7f4 fcda 	bl	8000288 <__aeabi_dsub>
 800b8d4:	4602      	mov	r2, r0
 800b8d6:	460b      	mov	r3, r1
 800b8d8:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b8dc:	f7f4 ffb2 	bl	8000844 <__aeabi_ddiv>
 800b8e0:	4632      	mov	r2, r6
 800b8e2:	4604      	mov	r4, r0
 800b8e4:	460d      	mov	r5, r1
 800b8e6:	463b      	mov	r3, r7
 800b8e8:	4640      	mov	r0, r8
 800b8ea:	4649      	mov	r1, r9
 800b8ec:	f7f4 fe80 	bl	80005f0 <__aeabi_dmul>
 800b8f0:	4632      	mov	r2, r6
 800b8f2:	463b      	mov	r3, r7
 800b8f4:	f7f4 fcca 	bl	800028c <__adddf3>
 800b8f8:	4602      	mov	r2, r0
 800b8fa:	460b      	mov	r3, r1
 800b8fc:	4620      	mov	r0, r4
 800b8fe:	4629      	mov	r1, r5
 800b900:	f7f4 fcc2 	bl	8000288 <__aeabi_dsub>
 800b904:	4642      	mov	r2, r8
 800b906:	464b      	mov	r3, r9
 800b908:	f7f4 fcbe 	bl	8000288 <__aeabi_dsub>
 800b90c:	4602      	mov	r2, r0
 800b90e:	460b      	mov	r3, r1
 800b910:	2000      	movs	r0, #0
 800b912:	493b      	ldr	r1, [pc, #236]	; (800ba00 <__ieee754_pow+0xa10>)
 800b914:	f7f4 fcb8 	bl	8000288 <__aeabi_dsub>
 800b918:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 800b91c:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 800b920:	4602      	mov	r2, r0
 800b922:	460b      	mov	r3, r1
 800b924:	da31      	bge.n	800b98a <__ieee754_pow+0x99a>
 800b926:	4650      	mov	r0, sl
 800b928:	ec43 2b10 	vmov	d0, r2, r3
 800b92c:	f001 f934 	bl	800cb98 <scalbn>
 800b930:	ec51 0b10 	vmov	r0, r1, d0
 800b934:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b938:	f7ff bbf1 	b.w	800b11e <__ieee754_pow+0x12e>
 800b93c:	4b31      	ldr	r3, [pc, #196]	; (800ba04 <__ieee754_pow+0xa14>)
 800b93e:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800b942:	429e      	cmp	r6, r3
 800b944:	f77f af0c 	ble.w	800b760 <__ieee754_pow+0x770>
 800b948:	4b2f      	ldr	r3, [pc, #188]	; (800ba08 <__ieee754_pow+0xa18>)
 800b94a:	440b      	add	r3, r1
 800b94c:	4303      	orrs	r3, r0
 800b94e:	d00b      	beq.n	800b968 <__ieee754_pow+0x978>
 800b950:	a327      	add	r3, pc, #156	; (adr r3, 800b9f0 <__ieee754_pow+0xa00>)
 800b952:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b956:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b95a:	f7f4 fe49 	bl	80005f0 <__aeabi_dmul>
 800b95e:	a324      	add	r3, pc, #144	; (adr r3, 800b9f0 <__ieee754_pow+0xa00>)
 800b960:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b964:	f7ff bbdb 	b.w	800b11e <__ieee754_pow+0x12e>
 800b968:	4622      	mov	r2, r4
 800b96a:	462b      	mov	r3, r5
 800b96c:	f7f4 fc8c 	bl	8000288 <__aeabi_dsub>
 800b970:	4602      	mov	r2, r0
 800b972:	460b      	mov	r3, r1
 800b974:	4640      	mov	r0, r8
 800b976:	4649      	mov	r1, r9
 800b978:	f7f5 f8b6 	bl	8000ae8 <__aeabi_dcmple>
 800b97c:	2800      	cmp	r0, #0
 800b97e:	f43f aeef 	beq.w	800b760 <__ieee754_pow+0x770>
 800b982:	e7e5      	b.n	800b950 <__ieee754_pow+0x960>
 800b984:	f04f 0a00 	mov.w	sl, #0
 800b988:	e716      	b.n	800b7b8 <__ieee754_pow+0x7c8>
 800b98a:	4621      	mov	r1, r4
 800b98c:	e7d2      	b.n	800b934 <__ieee754_pow+0x944>
 800b98e:	2000      	movs	r0, #0
 800b990:	491b      	ldr	r1, [pc, #108]	; (800ba00 <__ieee754_pow+0xa10>)
 800b992:	f7ff bb8d 	b.w	800b0b0 <__ieee754_pow+0xc0>
 800b996:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b99a:	f7ff bb89 	b.w	800b0b0 <__ieee754_pow+0xc0>
 800b99e:	4630      	mov	r0, r6
 800b9a0:	4639      	mov	r1, r7
 800b9a2:	f7ff bb85 	b.w	800b0b0 <__ieee754_pow+0xc0>
 800b9a6:	4693      	mov	fp, r2
 800b9a8:	f7ff bb96 	b.w	800b0d8 <__ieee754_pow+0xe8>
 800b9ac:	f3af 8000 	nop.w
 800b9b0:	00000000 	.word	0x00000000
 800b9b4:	3fe62e43 	.word	0x3fe62e43
 800b9b8:	fefa39ef 	.word	0xfefa39ef
 800b9bc:	3fe62e42 	.word	0x3fe62e42
 800b9c0:	0ca86c39 	.word	0x0ca86c39
 800b9c4:	be205c61 	.word	0xbe205c61
 800b9c8:	72bea4d0 	.word	0x72bea4d0
 800b9cc:	3e663769 	.word	0x3e663769
 800b9d0:	c5d26bf1 	.word	0xc5d26bf1
 800b9d4:	3ebbbd41 	.word	0x3ebbbd41
 800b9d8:	af25de2c 	.word	0xaf25de2c
 800b9dc:	3f11566a 	.word	0x3f11566a
 800b9e0:	16bebd93 	.word	0x16bebd93
 800b9e4:	3f66c16c 	.word	0x3f66c16c
 800b9e8:	5555553e 	.word	0x5555553e
 800b9ec:	3fc55555 	.word	0x3fc55555
 800b9f0:	c2f8f359 	.word	0xc2f8f359
 800b9f4:	01a56e1f 	.word	0x01a56e1f
 800b9f8:	3fe00000 	.word	0x3fe00000
 800b9fc:	000fffff 	.word	0x000fffff
 800ba00:	3ff00000 	.word	0x3ff00000
 800ba04:	4090cbff 	.word	0x4090cbff
 800ba08:	3f6f3400 	.word	0x3f6f3400
 800ba0c:	652b82fe 	.word	0x652b82fe
 800ba10:	3c971547 	.word	0x3c971547
 800ba14:	00000000 	.word	0x00000000

0800ba18 <__ieee754_rem_pio2>:
 800ba18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ba1c:	ec57 6b10 	vmov	r6, r7, d0
 800ba20:	4bc3      	ldr	r3, [pc, #780]	; (800bd30 <__ieee754_rem_pio2+0x318>)
 800ba22:	b08d      	sub	sp, #52	; 0x34
 800ba24:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 800ba28:	4598      	cmp	r8, r3
 800ba2a:	4604      	mov	r4, r0
 800ba2c:	9704      	str	r7, [sp, #16]
 800ba2e:	dc07      	bgt.n	800ba40 <__ieee754_rem_pio2+0x28>
 800ba30:	2200      	movs	r2, #0
 800ba32:	2300      	movs	r3, #0
 800ba34:	ed84 0b00 	vstr	d0, [r4]
 800ba38:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800ba3c:	2500      	movs	r5, #0
 800ba3e:	e027      	b.n	800ba90 <__ieee754_rem_pio2+0x78>
 800ba40:	4bbc      	ldr	r3, [pc, #752]	; (800bd34 <__ieee754_rem_pio2+0x31c>)
 800ba42:	4598      	cmp	r8, r3
 800ba44:	dc75      	bgt.n	800bb32 <__ieee754_rem_pio2+0x11a>
 800ba46:	9b04      	ldr	r3, [sp, #16]
 800ba48:	4dbb      	ldr	r5, [pc, #748]	; (800bd38 <__ieee754_rem_pio2+0x320>)
 800ba4a:	2b00      	cmp	r3, #0
 800ba4c:	ee10 0a10 	vmov	r0, s0
 800ba50:	a3a9      	add	r3, pc, #676	; (adr r3, 800bcf8 <__ieee754_rem_pio2+0x2e0>)
 800ba52:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba56:	4639      	mov	r1, r7
 800ba58:	dd36      	ble.n	800bac8 <__ieee754_rem_pio2+0xb0>
 800ba5a:	f7f4 fc15 	bl	8000288 <__aeabi_dsub>
 800ba5e:	45a8      	cmp	r8, r5
 800ba60:	4606      	mov	r6, r0
 800ba62:	460f      	mov	r7, r1
 800ba64:	d018      	beq.n	800ba98 <__ieee754_rem_pio2+0x80>
 800ba66:	a3a6      	add	r3, pc, #664	; (adr r3, 800bd00 <__ieee754_rem_pio2+0x2e8>)
 800ba68:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba6c:	f7f4 fc0c 	bl	8000288 <__aeabi_dsub>
 800ba70:	4602      	mov	r2, r0
 800ba72:	460b      	mov	r3, r1
 800ba74:	e9c4 2300 	strd	r2, r3, [r4]
 800ba78:	4630      	mov	r0, r6
 800ba7a:	4639      	mov	r1, r7
 800ba7c:	f7f4 fc04 	bl	8000288 <__aeabi_dsub>
 800ba80:	a39f      	add	r3, pc, #636	; (adr r3, 800bd00 <__ieee754_rem_pio2+0x2e8>)
 800ba82:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba86:	f7f4 fbff 	bl	8000288 <__aeabi_dsub>
 800ba8a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800ba8e:	2501      	movs	r5, #1
 800ba90:	4628      	mov	r0, r5
 800ba92:	b00d      	add	sp, #52	; 0x34
 800ba94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ba98:	a39b      	add	r3, pc, #620	; (adr r3, 800bd08 <__ieee754_rem_pio2+0x2f0>)
 800ba9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba9e:	f7f4 fbf3 	bl	8000288 <__aeabi_dsub>
 800baa2:	a39b      	add	r3, pc, #620	; (adr r3, 800bd10 <__ieee754_rem_pio2+0x2f8>)
 800baa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800baa8:	4606      	mov	r6, r0
 800baaa:	460f      	mov	r7, r1
 800baac:	f7f4 fbec 	bl	8000288 <__aeabi_dsub>
 800bab0:	4602      	mov	r2, r0
 800bab2:	460b      	mov	r3, r1
 800bab4:	e9c4 2300 	strd	r2, r3, [r4]
 800bab8:	4630      	mov	r0, r6
 800baba:	4639      	mov	r1, r7
 800babc:	f7f4 fbe4 	bl	8000288 <__aeabi_dsub>
 800bac0:	a393      	add	r3, pc, #588	; (adr r3, 800bd10 <__ieee754_rem_pio2+0x2f8>)
 800bac2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bac6:	e7de      	b.n	800ba86 <__ieee754_rem_pio2+0x6e>
 800bac8:	f7f4 fbe0 	bl	800028c <__adddf3>
 800bacc:	45a8      	cmp	r8, r5
 800bace:	4606      	mov	r6, r0
 800bad0:	460f      	mov	r7, r1
 800bad2:	d016      	beq.n	800bb02 <__ieee754_rem_pio2+0xea>
 800bad4:	a38a      	add	r3, pc, #552	; (adr r3, 800bd00 <__ieee754_rem_pio2+0x2e8>)
 800bad6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bada:	f7f4 fbd7 	bl	800028c <__adddf3>
 800bade:	4602      	mov	r2, r0
 800bae0:	460b      	mov	r3, r1
 800bae2:	e9c4 2300 	strd	r2, r3, [r4]
 800bae6:	4630      	mov	r0, r6
 800bae8:	4639      	mov	r1, r7
 800baea:	f7f4 fbcd 	bl	8000288 <__aeabi_dsub>
 800baee:	a384      	add	r3, pc, #528	; (adr r3, 800bd00 <__ieee754_rem_pio2+0x2e8>)
 800baf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800baf4:	f7f4 fbca 	bl	800028c <__adddf3>
 800baf8:	f04f 35ff 	mov.w	r5, #4294967295
 800bafc:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800bb00:	e7c6      	b.n	800ba90 <__ieee754_rem_pio2+0x78>
 800bb02:	a381      	add	r3, pc, #516	; (adr r3, 800bd08 <__ieee754_rem_pio2+0x2f0>)
 800bb04:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb08:	f7f4 fbc0 	bl	800028c <__adddf3>
 800bb0c:	a380      	add	r3, pc, #512	; (adr r3, 800bd10 <__ieee754_rem_pio2+0x2f8>)
 800bb0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb12:	4606      	mov	r6, r0
 800bb14:	460f      	mov	r7, r1
 800bb16:	f7f4 fbb9 	bl	800028c <__adddf3>
 800bb1a:	4602      	mov	r2, r0
 800bb1c:	460b      	mov	r3, r1
 800bb1e:	e9c4 2300 	strd	r2, r3, [r4]
 800bb22:	4630      	mov	r0, r6
 800bb24:	4639      	mov	r1, r7
 800bb26:	f7f4 fbaf 	bl	8000288 <__aeabi_dsub>
 800bb2a:	a379      	add	r3, pc, #484	; (adr r3, 800bd10 <__ieee754_rem_pio2+0x2f8>)
 800bb2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb30:	e7e0      	b.n	800baf4 <__ieee754_rem_pio2+0xdc>
 800bb32:	4b82      	ldr	r3, [pc, #520]	; (800bd3c <__ieee754_rem_pio2+0x324>)
 800bb34:	4598      	cmp	r8, r3
 800bb36:	f300 80d0 	bgt.w	800bcda <__ieee754_rem_pio2+0x2c2>
 800bb3a:	f000 ff03 	bl	800c944 <fabs>
 800bb3e:	ec57 6b10 	vmov	r6, r7, d0
 800bb42:	ee10 0a10 	vmov	r0, s0
 800bb46:	a374      	add	r3, pc, #464	; (adr r3, 800bd18 <__ieee754_rem_pio2+0x300>)
 800bb48:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb4c:	4639      	mov	r1, r7
 800bb4e:	f7f4 fd4f 	bl	80005f0 <__aeabi_dmul>
 800bb52:	2200      	movs	r2, #0
 800bb54:	4b7a      	ldr	r3, [pc, #488]	; (800bd40 <__ieee754_rem_pio2+0x328>)
 800bb56:	f7f4 fb99 	bl	800028c <__adddf3>
 800bb5a:	f7f4 fff9 	bl	8000b50 <__aeabi_d2iz>
 800bb5e:	4605      	mov	r5, r0
 800bb60:	f7f4 fce0 	bl	8000524 <__aeabi_i2d>
 800bb64:	a364      	add	r3, pc, #400	; (adr r3, 800bcf8 <__ieee754_rem_pio2+0x2e0>)
 800bb66:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb6a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bb6e:	f7f4 fd3f 	bl	80005f0 <__aeabi_dmul>
 800bb72:	4602      	mov	r2, r0
 800bb74:	460b      	mov	r3, r1
 800bb76:	4630      	mov	r0, r6
 800bb78:	4639      	mov	r1, r7
 800bb7a:	f7f4 fb85 	bl	8000288 <__aeabi_dsub>
 800bb7e:	a360      	add	r3, pc, #384	; (adr r3, 800bd00 <__ieee754_rem_pio2+0x2e8>)
 800bb80:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb84:	4682      	mov	sl, r0
 800bb86:	468b      	mov	fp, r1
 800bb88:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bb8c:	f7f4 fd30 	bl	80005f0 <__aeabi_dmul>
 800bb90:	2d1f      	cmp	r5, #31
 800bb92:	4606      	mov	r6, r0
 800bb94:	460f      	mov	r7, r1
 800bb96:	dc2a      	bgt.n	800bbee <__ieee754_rem_pio2+0x1d6>
 800bb98:	1e6a      	subs	r2, r5, #1
 800bb9a:	4b6a      	ldr	r3, [pc, #424]	; (800bd44 <__ieee754_rem_pio2+0x32c>)
 800bb9c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bba0:	4598      	cmp	r8, r3
 800bba2:	d024      	beq.n	800bbee <__ieee754_rem_pio2+0x1d6>
 800bba4:	4632      	mov	r2, r6
 800bba6:	463b      	mov	r3, r7
 800bba8:	4650      	mov	r0, sl
 800bbaa:	4659      	mov	r1, fp
 800bbac:	f7f4 fb6c 	bl	8000288 <__aeabi_dsub>
 800bbb0:	e9c4 0100 	strd	r0, r1, [r4]
 800bbb4:	e9d4 8900 	ldrd	r8, r9, [r4]
 800bbb8:	4650      	mov	r0, sl
 800bbba:	4642      	mov	r2, r8
 800bbbc:	464b      	mov	r3, r9
 800bbbe:	4659      	mov	r1, fp
 800bbc0:	f7f4 fb62 	bl	8000288 <__aeabi_dsub>
 800bbc4:	463b      	mov	r3, r7
 800bbc6:	4632      	mov	r2, r6
 800bbc8:	f7f4 fb5e 	bl	8000288 <__aeabi_dsub>
 800bbcc:	9b04      	ldr	r3, [sp, #16]
 800bbce:	2b00      	cmp	r3, #0
 800bbd0:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800bbd4:	f6bf af5c 	bge.w	800ba90 <__ieee754_rem_pio2+0x78>
 800bbd8:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800bbdc:	6063      	str	r3, [r4, #4]
 800bbde:	f8c4 8000 	str.w	r8, [r4]
 800bbe2:	60a0      	str	r0, [r4, #8]
 800bbe4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800bbe8:	60e3      	str	r3, [r4, #12]
 800bbea:	426d      	negs	r5, r5
 800bbec:	e750      	b.n	800ba90 <__ieee754_rem_pio2+0x78>
 800bbee:	4632      	mov	r2, r6
 800bbf0:	463b      	mov	r3, r7
 800bbf2:	4650      	mov	r0, sl
 800bbf4:	4659      	mov	r1, fp
 800bbf6:	f7f4 fb47 	bl	8000288 <__aeabi_dsub>
 800bbfa:	ea4f 5228 	mov.w	r2, r8, asr #20
 800bbfe:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800bc02:	1ad3      	subs	r3, r2, r3
 800bc04:	2b10      	cmp	r3, #16
 800bc06:	e9c4 0100 	strd	r0, r1, [r4]
 800bc0a:	9205      	str	r2, [sp, #20]
 800bc0c:	ddd2      	ble.n	800bbb4 <__ieee754_rem_pio2+0x19c>
 800bc0e:	a33e      	add	r3, pc, #248	; (adr r3, 800bd08 <__ieee754_rem_pio2+0x2f0>)
 800bc10:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc14:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bc18:	f7f4 fcea 	bl	80005f0 <__aeabi_dmul>
 800bc1c:	4606      	mov	r6, r0
 800bc1e:	460f      	mov	r7, r1
 800bc20:	4602      	mov	r2, r0
 800bc22:	460b      	mov	r3, r1
 800bc24:	4650      	mov	r0, sl
 800bc26:	4659      	mov	r1, fp
 800bc28:	f7f4 fb2e 	bl	8000288 <__aeabi_dsub>
 800bc2c:	4602      	mov	r2, r0
 800bc2e:	460b      	mov	r3, r1
 800bc30:	4680      	mov	r8, r0
 800bc32:	4689      	mov	r9, r1
 800bc34:	4650      	mov	r0, sl
 800bc36:	4659      	mov	r1, fp
 800bc38:	f7f4 fb26 	bl	8000288 <__aeabi_dsub>
 800bc3c:	4632      	mov	r2, r6
 800bc3e:	463b      	mov	r3, r7
 800bc40:	f7f4 fb22 	bl	8000288 <__aeabi_dsub>
 800bc44:	a332      	add	r3, pc, #200	; (adr r3, 800bd10 <__ieee754_rem_pio2+0x2f8>)
 800bc46:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc4a:	4606      	mov	r6, r0
 800bc4c:	460f      	mov	r7, r1
 800bc4e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bc52:	f7f4 fccd 	bl	80005f0 <__aeabi_dmul>
 800bc56:	4632      	mov	r2, r6
 800bc58:	463b      	mov	r3, r7
 800bc5a:	f7f4 fb15 	bl	8000288 <__aeabi_dsub>
 800bc5e:	4602      	mov	r2, r0
 800bc60:	460b      	mov	r3, r1
 800bc62:	4606      	mov	r6, r0
 800bc64:	460f      	mov	r7, r1
 800bc66:	4640      	mov	r0, r8
 800bc68:	4649      	mov	r1, r9
 800bc6a:	f7f4 fb0d 	bl	8000288 <__aeabi_dsub>
 800bc6e:	9a05      	ldr	r2, [sp, #20]
 800bc70:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800bc74:	1ad3      	subs	r3, r2, r3
 800bc76:	2b31      	cmp	r3, #49	; 0x31
 800bc78:	e9c4 0100 	strd	r0, r1, [r4]
 800bc7c:	dd2a      	ble.n	800bcd4 <__ieee754_rem_pio2+0x2bc>
 800bc7e:	a328      	add	r3, pc, #160	; (adr r3, 800bd20 <__ieee754_rem_pio2+0x308>)
 800bc80:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc84:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bc88:	f7f4 fcb2 	bl	80005f0 <__aeabi_dmul>
 800bc8c:	4606      	mov	r6, r0
 800bc8e:	460f      	mov	r7, r1
 800bc90:	4602      	mov	r2, r0
 800bc92:	460b      	mov	r3, r1
 800bc94:	4640      	mov	r0, r8
 800bc96:	4649      	mov	r1, r9
 800bc98:	f7f4 faf6 	bl	8000288 <__aeabi_dsub>
 800bc9c:	4602      	mov	r2, r0
 800bc9e:	460b      	mov	r3, r1
 800bca0:	4682      	mov	sl, r0
 800bca2:	468b      	mov	fp, r1
 800bca4:	4640      	mov	r0, r8
 800bca6:	4649      	mov	r1, r9
 800bca8:	f7f4 faee 	bl	8000288 <__aeabi_dsub>
 800bcac:	4632      	mov	r2, r6
 800bcae:	463b      	mov	r3, r7
 800bcb0:	f7f4 faea 	bl	8000288 <__aeabi_dsub>
 800bcb4:	a31c      	add	r3, pc, #112	; (adr r3, 800bd28 <__ieee754_rem_pio2+0x310>)
 800bcb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bcba:	4606      	mov	r6, r0
 800bcbc:	460f      	mov	r7, r1
 800bcbe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bcc2:	f7f4 fc95 	bl	80005f0 <__aeabi_dmul>
 800bcc6:	4632      	mov	r2, r6
 800bcc8:	463b      	mov	r3, r7
 800bcca:	f7f4 fadd 	bl	8000288 <__aeabi_dsub>
 800bcce:	4606      	mov	r6, r0
 800bcd0:	460f      	mov	r7, r1
 800bcd2:	e767      	b.n	800bba4 <__ieee754_rem_pio2+0x18c>
 800bcd4:	46c2      	mov	sl, r8
 800bcd6:	46cb      	mov	fp, r9
 800bcd8:	e76c      	b.n	800bbb4 <__ieee754_rem_pio2+0x19c>
 800bcda:	4b1b      	ldr	r3, [pc, #108]	; (800bd48 <__ieee754_rem_pio2+0x330>)
 800bcdc:	4598      	cmp	r8, r3
 800bcde:	dd35      	ble.n	800bd4c <__ieee754_rem_pio2+0x334>
 800bce0:	ee10 2a10 	vmov	r2, s0
 800bce4:	463b      	mov	r3, r7
 800bce6:	4630      	mov	r0, r6
 800bce8:	4639      	mov	r1, r7
 800bcea:	f7f4 facd 	bl	8000288 <__aeabi_dsub>
 800bcee:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800bcf2:	e9c4 0100 	strd	r0, r1, [r4]
 800bcf6:	e6a1      	b.n	800ba3c <__ieee754_rem_pio2+0x24>
 800bcf8:	54400000 	.word	0x54400000
 800bcfc:	3ff921fb 	.word	0x3ff921fb
 800bd00:	1a626331 	.word	0x1a626331
 800bd04:	3dd0b461 	.word	0x3dd0b461
 800bd08:	1a600000 	.word	0x1a600000
 800bd0c:	3dd0b461 	.word	0x3dd0b461
 800bd10:	2e037073 	.word	0x2e037073
 800bd14:	3ba3198a 	.word	0x3ba3198a
 800bd18:	6dc9c883 	.word	0x6dc9c883
 800bd1c:	3fe45f30 	.word	0x3fe45f30
 800bd20:	2e000000 	.word	0x2e000000
 800bd24:	3ba3198a 	.word	0x3ba3198a
 800bd28:	252049c1 	.word	0x252049c1
 800bd2c:	397b839a 	.word	0x397b839a
 800bd30:	3fe921fb 	.word	0x3fe921fb
 800bd34:	4002d97b 	.word	0x4002d97b
 800bd38:	3ff921fb 	.word	0x3ff921fb
 800bd3c:	413921fb 	.word	0x413921fb
 800bd40:	3fe00000 	.word	0x3fe00000
 800bd44:	0800dad8 	.word	0x0800dad8
 800bd48:	7fefffff 	.word	0x7fefffff
 800bd4c:	ea4f 5528 	mov.w	r5, r8, asr #20
 800bd50:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 800bd54:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 800bd58:	4630      	mov	r0, r6
 800bd5a:	460f      	mov	r7, r1
 800bd5c:	f7f4 fef8 	bl	8000b50 <__aeabi_d2iz>
 800bd60:	f7f4 fbe0 	bl	8000524 <__aeabi_i2d>
 800bd64:	4602      	mov	r2, r0
 800bd66:	460b      	mov	r3, r1
 800bd68:	4630      	mov	r0, r6
 800bd6a:	4639      	mov	r1, r7
 800bd6c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800bd70:	f7f4 fa8a 	bl	8000288 <__aeabi_dsub>
 800bd74:	2200      	movs	r2, #0
 800bd76:	4b1f      	ldr	r3, [pc, #124]	; (800bdf4 <__ieee754_rem_pio2+0x3dc>)
 800bd78:	f7f4 fc3a 	bl	80005f0 <__aeabi_dmul>
 800bd7c:	460f      	mov	r7, r1
 800bd7e:	4606      	mov	r6, r0
 800bd80:	f7f4 fee6 	bl	8000b50 <__aeabi_d2iz>
 800bd84:	f7f4 fbce 	bl	8000524 <__aeabi_i2d>
 800bd88:	4602      	mov	r2, r0
 800bd8a:	460b      	mov	r3, r1
 800bd8c:	4630      	mov	r0, r6
 800bd8e:	4639      	mov	r1, r7
 800bd90:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800bd94:	f7f4 fa78 	bl	8000288 <__aeabi_dsub>
 800bd98:	2200      	movs	r2, #0
 800bd9a:	4b16      	ldr	r3, [pc, #88]	; (800bdf4 <__ieee754_rem_pio2+0x3dc>)
 800bd9c:	f7f4 fc28 	bl	80005f0 <__aeabi_dmul>
 800bda0:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800bda4:	f10d 0930 	add.w	r9, sp, #48	; 0x30
 800bda8:	f04f 0803 	mov.w	r8, #3
 800bdac:	2600      	movs	r6, #0
 800bdae:	2700      	movs	r7, #0
 800bdb0:	4632      	mov	r2, r6
 800bdb2:	463b      	mov	r3, r7
 800bdb4:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 800bdb8:	f108 3aff 	add.w	sl, r8, #4294967295
 800bdbc:	f7f4 fe80 	bl	8000ac0 <__aeabi_dcmpeq>
 800bdc0:	b9b0      	cbnz	r0, 800bdf0 <__ieee754_rem_pio2+0x3d8>
 800bdc2:	4b0d      	ldr	r3, [pc, #52]	; (800bdf8 <__ieee754_rem_pio2+0x3e0>)
 800bdc4:	9301      	str	r3, [sp, #4]
 800bdc6:	2302      	movs	r3, #2
 800bdc8:	9300      	str	r3, [sp, #0]
 800bdca:	462a      	mov	r2, r5
 800bdcc:	4643      	mov	r3, r8
 800bdce:	4621      	mov	r1, r4
 800bdd0:	a806      	add	r0, sp, #24
 800bdd2:	f000 f9ad 	bl	800c130 <__kernel_rem_pio2>
 800bdd6:	9b04      	ldr	r3, [sp, #16]
 800bdd8:	2b00      	cmp	r3, #0
 800bdda:	4605      	mov	r5, r0
 800bddc:	f6bf ae58 	bge.w	800ba90 <__ieee754_rem_pio2+0x78>
 800bde0:	6863      	ldr	r3, [r4, #4]
 800bde2:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800bde6:	6063      	str	r3, [r4, #4]
 800bde8:	68e3      	ldr	r3, [r4, #12]
 800bdea:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800bdee:	e6fb      	b.n	800bbe8 <__ieee754_rem_pio2+0x1d0>
 800bdf0:	46d0      	mov	r8, sl
 800bdf2:	e7dd      	b.n	800bdb0 <__ieee754_rem_pio2+0x398>
 800bdf4:	41700000 	.word	0x41700000
 800bdf8:	0800db58 	.word	0x0800db58

0800bdfc <__ieee754_sqrt>:
 800bdfc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800be00:	ec55 4b10 	vmov	r4, r5, d0
 800be04:	4e54      	ldr	r6, [pc, #336]	; (800bf58 <__ieee754_sqrt+0x15c>)
 800be06:	43ae      	bics	r6, r5
 800be08:	ee10 0a10 	vmov	r0, s0
 800be0c:	462b      	mov	r3, r5
 800be0e:	462a      	mov	r2, r5
 800be10:	4621      	mov	r1, r4
 800be12:	d113      	bne.n	800be3c <__ieee754_sqrt+0x40>
 800be14:	ee10 2a10 	vmov	r2, s0
 800be18:	462b      	mov	r3, r5
 800be1a:	ee10 0a10 	vmov	r0, s0
 800be1e:	4629      	mov	r1, r5
 800be20:	f7f4 fbe6 	bl	80005f0 <__aeabi_dmul>
 800be24:	4602      	mov	r2, r0
 800be26:	460b      	mov	r3, r1
 800be28:	4620      	mov	r0, r4
 800be2a:	4629      	mov	r1, r5
 800be2c:	f7f4 fa2e 	bl	800028c <__adddf3>
 800be30:	4604      	mov	r4, r0
 800be32:	460d      	mov	r5, r1
 800be34:	ec45 4b10 	vmov	d0, r4, r5
 800be38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800be3c:	2d00      	cmp	r5, #0
 800be3e:	dc10      	bgt.n	800be62 <__ieee754_sqrt+0x66>
 800be40:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800be44:	4330      	orrs	r0, r6
 800be46:	d0f5      	beq.n	800be34 <__ieee754_sqrt+0x38>
 800be48:	b15d      	cbz	r5, 800be62 <__ieee754_sqrt+0x66>
 800be4a:	ee10 2a10 	vmov	r2, s0
 800be4e:	462b      	mov	r3, r5
 800be50:	4620      	mov	r0, r4
 800be52:	4629      	mov	r1, r5
 800be54:	f7f4 fa18 	bl	8000288 <__aeabi_dsub>
 800be58:	4602      	mov	r2, r0
 800be5a:	460b      	mov	r3, r1
 800be5c:	f7f4 fcf2 	bl	8000844 <__aeabi_ddiv>
 800be60:	e7e6      	b.n	800be30 <__ieee754_sqrt+0x34>
 800be62:	151b      	asrs	r3, r3, #20
 800be64:	d10c      	bne.n	800be80 <__ieee754_sqrt+0x84>
 800be66:	2a00      	cmp	r2, #0
 800be68:	d06d      	beq.n	800bf46 <__ieee754_sqrt+0x14a>
 800be6a:	2000      	movs	r0, #0
 800be6c:	02d6      	lsls	r6, r2, #11
 800be6e:	d56e      	bpl.n	800bf4e <__ieee754_sqrt+0x152>
 800be70:	1e44      	subs	r4, r0, #1
 800be72:	1b1b      	subs	r3, r3, r4
 800be74:	f1c0 0420 	rsb	r4, r0, #32
 800be78:	fa21 f404 	lsr.w	r4, r1, r4
 800be7c:	4322      	orrs	r2, r4
 800be7e:	4081      	lsls	r1, r0
 800be80:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800be84:	f3c2 0213 	ubfx	r2, r2, #0, #20
 800be88:	07dd      	lsls	r5, r3, #31
 800be8a:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800be8e:	bf42      	ittt	mi
 800be90:	0052      	lslmi	r2, r2, #1
 800be92:	eb02 72d1 	addmi.w	r2, r2, r1, lsr #31
 800be96:	0049      	lslmi	r1, r1, #1
 800be98:	1058      	asrs	r0, r3, #1
 800be9a:	2500      	movs	r5, #0
 800be9c:	eb02 73d1 	add.w	r3, r2, r1, lsr #31
 800bea0:	441a      	add	r2, r3
 800bea2:	0049      	lsls	r1, r1, #1
 800bea4:	2316      	movs	r3, #22
 800bea6:	462c      	mov	r4, r5
 800bea8:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 800beac:	19a7      	adds	r7, r4, r6
 800beae:	4297      	cmp	r7, r2
 800beb0:	bfde      	ittt	le
 800beb2:	1bd2      	suble	r2, r2, r7
 800beb4:	19bc      	addle	r4, r7, r6
 800beb6:	19ad      	addle	r5, r5, r6
 800beb8:	0052      	lsls	r2, r2, #1
 800beba:	3b01      	subs	r3, #1
 800bebc:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 800bec0:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800bec4:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800bec8:	d1f0      	bne.n	800beac <__ieee754_sqrt+0xb0>
 800beca:	f04f 0e20 	mov.w	lr, #32
 800bece:	469c      	mov	ip, r3
 800bed0:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800bed4:	42a2      	cmp	r2, r4
 800bed6:	eb06 070c 	add.w	r7, r6, ip
 800beda:	dc02      	bgt.n	800bee2 <__ieee754_sqrt+0xe6>
 800bedc:	d112      	bne.n	800bf04 <__ieee754_sqrt+0x108>
 800bede:	428f      	cmp	r7, r1
 800bee0:	d810      	bhi.n	800bf04 <__ieee754_sqrt+0x108>
 800bee2:	2f00      	cmp	r7, #0
 800bee4:	eb07 0c06 	add.w	ip, r7, r6
 800bee8:	da34      	bge.n	800bf54 <__ieee754_sqrt+0x158>
 800beea:	f1bc 0f00 	cmp.w	ip, #0
 800beee:	db31      	blt.n	800bf54 <__ieee754_sqrt+0x158>
 800bef0:	f104 0801 	add.w	r8, r4, #1
 800bef4:	1b12      	subs	r2, r2, r4
 800bef6:	428f      	cmp	r7, r1
 800bef8:	bf88      	it	hi
 800befa:	f102 32ff 	addhi.w	r2, r2, #4294967295
 800befe:	1bc9      	subs	r1, r1, r7
 800bf00:	4433      	add	r3, r6
 800bf02:	4644      	mov	r4, r8
 800bf04:	eb02 77d1 	add.w	r7, r2, r1, lsr #31
 800bf08:	f1be 0e01 	subs.w	lr, lr, #1
 800bf0c:	443a      	add	r2, r7
 800bf0e:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800bf12:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800bf16:	d1dd      	bne.n	800bed4 <__ieee754_sqrt+0xd8>
 800bf18:	430a      	orrs	r2, r1
 800bf1a:	d006      	beq.n	800bf2a <__ieee754_sqrt+0x12e>
 800bf1c:	1c5c      	adds	r4, r3, #1
 800bf1e:	bf13      	iteet	ne
 800bf20:	3301      	addne	r3, #1
 800bf22:	3501      	addeq	r5, #1
 800bf24:	4673      	moveq	r3, lr
 800bf26:	f023 0301 	bicne.w	r3, r3, #1
 800bf2a:	106a      	asrs	r2, r5, #1
 800bf2c:	085b      	lsrs	r3, r3, #1
 800bf2e:	07e9      	lsls	r1, r5, #31
 800bf30:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 800bf34:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 800bf38:	bf48      	it	mi
 800bf3a:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 800bf3e:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 800bf42:	461c      	mov	r4, r3
 800bf44:	e776      	b.n	800be34 <__ieee754_sqrt+0x38>
 800bf46:	0aca      	lsrs	r2, r1, #11
 800bf48:	3b15      	subs	r3, #21
 800bf4a:	0549      	lsls	r1, r1, #21
 800bf4c:	e78b      	b.n	800be66 <__ieee754_sqrt+0x6a>
 800bf4e:	0052      	lsls	r2, r2, #1
 800bf50:	3001      	adds	r0, #1
 800bf52:	e78b      	b.n	800be6c <__ieee754_sqrt+0x70>
 800bf54:	46a0      	mov	r8, r4
 800bf56:	e7cd      	b.n	800bef4 <__ieee754_sqrt+0xf8>
 800bf58:	7ff00000 	.word	0x7ff00000
 800bf5c:	00000000 	.word	0x00000000

0800bf60 <__kernel_cos>:
 800bf60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bf64:	ec59 8b10 	vmov	r8, r9, d0
 800bf68:	f029 4700 	bic.w	r7, r9, #2147483648	; 0x80000000
 800bf6c:	b085      	sub	sp, #20
 800bf6e:	f1b7 5f79 	cmp.w	r7, #1044381696	; 0x3e400000
 800bf72:	ed8d 1b00 	vstr	d1, [sp]
 800bf76:	da07      	bge.n	800bf88 <__kernel_cos+0x28>
 800bf78:	ee10 0a10 	vmov	r0, s0
 800bf7c:	4649      	mov	r1, r9
 800bf7e:	f7f4 fde7 	bl	8000b50 <__aeabi_d2iz>
 800bf82:	2800      	cmp	r0, #0
 800bf84:	f000 80aa 	beq.w	800c0dc <__kernel_cos+0x17c>
 800bf88:	4642      	mov	r2, r8
 800bf8a:	464b      	mov	r3, r9
 800bf8c:	4640      	mov	r0, r8
 800bf8e:	4649      	mov	r1, r9
 800bf90:	f7f4 fb2e 	bl	80005f0 <__aeabi_dmul>
 800bf94:	a359      	add	r3, pc, #356	; (adr r3, 800c0fc <__kernel_cos+0x19c>)
 800bf96:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf9a:	4604      	mov	r4, r0
 800bf9c:	460d      	mov	r5, r1
 800bf9e:	f7f4 fb27 	bl	80005f0 <__aeabi_dmul>
 800bfa2:	a358      	add	r3, pc, #352	; (adr r3, 800c104 <__kernel_cos+0x1a4>)
 800bfa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bfa8:	f7f4 f970 	bl	800028c <__adddf3>
 800bfac:	4622      	mov	r2, r4
 800bfae:	462b      	mov	r3, r5
 800bfb0:	f7f4 fb1e 	bl	80005f0 <__aeabi_dmul>
 800bfb4:	a355      	add	r3, pc, #340	; (adr r3, 800c10c <__kernel_cos+0x1ac>)
 800bfb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bfba:	f7f4 f965 	bl	8000288 <__aeabi_dsub>
 800bfbe:	4622      	mov	r2, r4
 800bfc0:	462b      	mov	r3, r5
 800bfc2:	f7f4 fb15 	bl	80005f0 <__aeabi_dmul>
 800bfc6:	a353      	add	r3, pc, #332	; (adr r3, 800c114 <__kernel_cos+0x1b4>)
 800bfc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bfcc:	f7f4 f95e 	bl	800028c <__adddf3>
 800bfd0:	4622      	mov	r2, r4
 800bfd2:	462b      	mov	r3, r5
 800bfd4:	f7f4 fb0c 	bl	80005f0 <__aeabi_dmul>
 800bfd8:	a350      	add	r3, pc, #320	; (adr r3, 800c11c <__kernel_cos+0x1bc>)
 800bfda:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bfde:	f7f4 f953 	bl	8000288 <__aeabi_dsub>
 800bfe2:	4622      	mov	r2, r4
 800bfe4:	462b      	mov	r3, r5
 800bfe6:	f7f4 fb03 	bl	80005f0 <__aeabi_dmul>
 800bfea:	a34e      	add	r3, pc, #312	; (adr r3, 800c124 <__kernel_cos+0x1c4>)
 800bfec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bff0:	f7f4 f94c 	bl	800028c <__adddf3>
 800bff4:	462b      	mov	r3, r5
 800bff6:	4622      	mov	r2, r4
 800bff8:	f7f4 fafa 	bl	80005f0 <__aeabi_dmul>
 800bffc:	4b3a      	ldr	r3, [pc, #232]	; (800c0e8 <__kernel_cos+0x188>)
 800bffe:	429f      	cmp	r7, r3
 800c000:	4682      	mov	sl, r0
 800c002:	468b      	mov	fp, r1
 800c004:	dc2c      	bgt.n	800c060 <__kernel_cos+0x100>
 800c006:	2200      	movs	r2, #0
 800c008:	4b38      	ldr	r3, [pc, #224]	; (800c0ec <__kernel_cos+0x18c>)
 800c00a:	4620      	mov	r0, r4
 800c00c:	4629      	mov	r1, r5
 800c00e:	f7f4 faef 	bl	80005f0 <__aeabi_dmul>
 800c012:	4652      	mov	r2, sl
 800c014:	4606      	mov	r6, r0
 800c016:	460f      	mov	r7, r1
 800c018:	465b      	mov	r3, fp
 800c01a:	4620      	mov	r0, r4
 800c01c:	4629      	mov	r1, r5
 800c01e:	f7f4 fae7 	bl	80005f0 <__aeabi_dmul>
 800c022:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c026:	4604      	mov	r4, r0
 800c028:	460d      	mov	r5, r1
 800c02a:	4640      	mov	r0, r8
 800c02c:	4649      	mov	r1, r9
 800c02e:	f7f4 fadf 	bl	80005f0 <__aeabi_dmul>
 800c032:	4602      	mov	r2, r0
 800c034:	460b      	mov	r3, r1
 800c036:	4620      	mov	r0, r4
 800c038:	4629      	mov	r1, r5
 800c03a:	f7f4 f925 	bl	8000288 <__aeabi_dsub>
 800c03e:	4602      	mov	r2, r0
 800c040:	460b      	mov	r3, r1
 800c042:	4630      	mov	r0, r6
 800c044:	4639      	mov	r1, r7
 800c046:	f7f4 f91f 	bl	8000288 <__aeabi_dsub>
 800c04a:	460b      	mov	r3, r1
 800c04c:	4928      	ldr	r1, [pc, #160]	; (800c0f0 <__kernel_cos+0x190>)
 800c04e:	4602      	mov	r2, r0
 800c050:	2000      	movs	r0, #0
 800c052:	f7f4 f919 	bl	8000288 <__aeabi_dsub>
 800c056:	ec41 0b10 	vmov	d0, r0, r1
 800c05a:	b005      	add	sp, #20
 800c05c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c060:	4b24      	ldr	r3, [pc, #144]	; (800c0f4 <__kernel_cos+0x194>)
 800c062:	4923      	ldr	r1, [pc, #140]	; (800c0f0 <__kernel_cos+0x190>)
 800c064:	429f      	cmp	r7, r3
 800c066:	bfd7      	itett	le
 800c068:	f5a7 1300 	suble.w	r3, r7, #2097152	; 0x200000
 800c06c:	4f22      	ldrgt	r7, [pc, #136]	; (800c0f8 <__kernel_cos+0x198>)
 800c06e:	2200      	movle	r2, #0
 800c070:	4616      	movle	r6, r2
 800c072:	bfd4      	ite	le
 800c074:	461f      	movle	r7, r3
 800c076:	2600      	movgt	r6, #0
 800c078:	4632      	mov	r2, r6
 800c07a:	463b      	mov	r3, r7
 800c07c:	2000      	movs	r0, #0
 800c07e:	f7f4 f903 	bl	8000288 <__aeabi_dsub>
 800c082:	2200      	movs	r2, #0
 800c084:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c088:	4b18      	ldr	r3, [pc, #96]	; (800c0ec <__kernel_cos+0x18c>)
 800c08a:	4620      	mov	r0, r4
 800c08c:	4629      	mov	r1, r5
 800c08e:	f7f4 faaf 	bl	80005f0 <__aeabi_dmul>
 800c092:	4632      	mov	r2, r6
 800c094:	463b      	mov	r3, r7
 800c096:	f7f4 f8f7 	bl	8000288 <__aeabi_dsub>
 800c09a:	4652      	mov	r2, sl
 800c09c:	4606      	mov	r6, r0
 800c09e:	460f      	mov	r7, r1
 800c0a0:	465b      	mov	r3, fp
 800c0a2:	4620      	mov	r0, r4
 800c0a4:	4629      	mov	r1, r5
 800c0a6:	f7f4 faa3 	bl	80005f0 <__aeabi_dmul>
 800c0aa:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c0ae:	4604      	mov	r4, r0
 800c0b0:	460d      	mov	r5, r1
 800c0b2:	4640      	mov	r0, r8
 800c0b4:	4649      	mov	r1, r9
 800c0b6:	f7f4 fa9b 	bl	80005f0 <__aeabi_dmul>
 800c0ba:	4602      	mov	r2, r0
 800c0bc:	460b      	mov	r3, r1
 800c0be:	4620      	mov	r0, r4
 800c0c0:	4629      	mov	r1, r5
 800c0c2:	f7f4 f8e1 	bl	8000288 <__aeabi_dsub>
 800c0c6:	4602      	mov	r2, r0
 800c0c8:	460b      	mov	r3, r1
 800c0ca:	4630      	mov	r0, r6
 800c0cc:	4639      	mov	r1, r7
 800c0ce:	f7f4 f8db 	bl	8000288 <__aeabi_dsub>
 800c0d2:	4602      	mov	r2, r0
 800c0d4:	460b      	mov	r3, r1
 800c0d6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c0da:	e7ba      	b.n	800c052 <__kernel_cos+0xf2>
 800c0dc:	2000      	movs	r0, #0
 800c0de:	4904      	ldr	r1, [pc, #16]	; (800c0f0 <__kernel_cos+0x190>)
 800c0e0:	e7b9      	b.n	800c056 <__kernel_cos+0xf6>
 800c0e2:	bf00      	nop
 800c0e4:	f3af 8000 	nop.w
 800c0e8:	3fd33332 	.word	0x3fd33332
 800c0ec:	3fe00000 	.word	0x3fe00000
 800c0f0:	3ff00000 	.word	0x3ff00000
 800c0f4:	3fe90000 	.word	0x3fe90000
 800c0f8:	3fd20000 	.word	0x3fd20000
 800c0fc:	be8838d4 	.word	0xbe8838d4
 800c100:	bda8fae9 	.word	0xbda8fae9
 800c104:	bdb4b1c4 	.word	0xbdb4b1c4
 800c108:	3e21ee9e 	.word	0x3e21ee9e
 800c10c:	809c52ad 	.word	0x809c52ad
 800c110:	3e927e4f 	.word	0x3e927e4f
 800c114:	19cb1590 	.word	0x19cb1590
 800c118:	3efa01a0 	.word	0x3efa01a0
 800c11c:	16c15177 	.word	0x16c15177
 800c120:	3f56c16c 	.word	0x3f56c16c
 800c124:	5555554c 	.word	0x5555554c
 800c128:	3fa55555 	.word	0x3fa55555
 800c12c:	00000000 	.word	0x00000000

0800c130 <__kernel_rem_pio2>:
 800c130:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c134:	ed2d 8b02 	vpush	{d8}
 800c138:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 800c13c:	1ed4      	subs	r4, r2, #3
 800c13e:	9306      	str	r3, [sp, #24]
 800c140:	9102      	str	r1, [sp, #8]
 800c142:	4bc3      	ldr	r3, [pc, #780]	; (800c450 <__kernel_rem_pio2+0x320>)
 800c144:	99a4      	ldr	r1, [sp, #656]	; 0x290
 800c146:	9009      	str	r0, [sp, #36]	; 0x24
 800c148:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800c14c:	9300      	str	r3, [sp, #0]
 800c14e:	9b06      	ldr	r3, [sp, #24]
 800c150:	3b01      	subs	r3, #1
 800c152:	9304      	str	r3, [sp, #16]
 800c154:	2318      	movs	r3, #24
 800c156:	fb94 f4f3 	sdiv	r4, r4, r3
 800c15a:	f06f 0317 	mvn.w	r3, #23
 800c15e:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 800c162:	fb04 3303 	mla	r3, r4, r3, r3
 800c166:	eb03 0a02 	add.w	sl, r3, r2
 800c16a:	9b00      	ldr	r3, [sp, #0]
 800c16c:	9a04      	ldr	r2, [sp, #16]
 800c16e:	ed9f 8bb4 	vldr	d8, [pc, #720]	; 800c440 <__kernel_rem_pio2+0x310>
 800c172:	eb03 0802 	add.w	r8, r3, r2
 800c176:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 800c178:	1aa7      	subs	r7, r4, r2
 800c17a:	ae20      	add	r6, sp, #128	; 0x80
 800c17c:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800c180:	2500      	movs	r5, #0
 800c182:	4545      	cmp	r5, r8
 800c184:	dd13      	ble.n	800c1ae <__kernel_rem_pio2+0x7e>
 800c186:	ed9f 8bae 	vldr	d8, [pc, #696]	; 800c440 <__kernel_rem_pio2+0x310>
 800c18a:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 800c18e:	2600      	movs	r6, #0
 800c190:	9b00      	ldr	r3, [sp, #0]
 800c192:	429e      	cmp	r6, r3
 800c194:	dc32      	bgt.n	800c1fc <__kernel_rem_pio2+0xcc>
 800c196:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c198:	9303      	str	r3, [sp, #12]
 800c19a:	9b06      	ldr	r3, [sp, #24]
 800c19c:	199d      	adds	r5, r3, r6
 800c19e:	ab20      	add	r3, sp, #128	; 0x80
 800c1a0:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800c1a4:	9308      	str	r3, [sp, #32]
 800c1a6:	ec59 8b18 	vmov	r8, r9, d8
 800c1aa:	2700      	movs	r7, #0
 800c1ac:	e01f      	b.n	800c1ee <__kernel_rem_pio2+0xbe>
 800c1ae:	42ef      	cmn	r7, r5
 800c1b0:	d407      	bmi.n	800c1c2 <__kernel_rem_pio2+0x92>
 800c1b2:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800c1b6:	f7f4 f9b5 	bl	8000524 <__aeabi_i2d>
 800c1ba:	e8e6 0102 	strd	r0, r1, [r6], #8
 800c1be:	3501      	adds	r5, #1
 800c1c0:	e7df      	b.n	800c182 <__kernel_rem_pio2+0x52>
 800c1c2:	ec51 0b18 	vmov	r0, r1, d8
 800c1c6:	e7f8      	b.n	800c1ba <__kernel_rem_pio2+0x8a>
 800c1c8:	9908      	ldr	r1, [sp, #32]
 800c1ca:	9d03      	ldr	r5, [sp, #12]
 800c1cc:	e971 2302 	ldrd	r2, r3, [r1, #-8]!
 800c1d0:	9108      	str	r1, [sp, #32]
 800c1d2:	e8f5 0102 	ldrd	r0, r1, [r5], #8
 800c1d6:	9503      	str	r5, [sp, #12]
 800c1d8:	f7f4 fa0a 	bl	80005f0 <__aeabi_dmul>
 800c1dc:	4602      	mov	r2, r0
 800c1de:	460b      	mov	r3, r1
 800c1e0:	4640      	mov	r0, r8
 800c1e2:	4649      	mov	r1, r9
 800c1e4:	f7f4 f852 	bl	800028c <__adddf3>
 800c1e8:	3701      	adds	r7, #1
 800c1ea:	4680      	mov	r8, r0
 800c1ec:	4689      	mov	r9, r1
 800c1ee:	9b04      	ldr	r3, [sp, #16]
 800c1f0:	429f      	cmp	r7, r3
 800c1f2:	dde9      	ble.n	800c1c8 <__kernel_rem_pio2+0x98>
 800c1f4:	e8eb 8902 	strd	r8, r9, [fp], #8
 800c1f8:	3601      	adds	r6, #1
 800c1fa:	e7c9      	b.n	800c190 <__kernel_rem_pio2+0x60>
 800c1fc:	9b00      	ldr	r3, [sp, #0]
 800c1fe:	9f00      	ldr	r7, [sp, #0]
 800c200:	aa0c      	add	r2, sp, #48	; 0x30
 800c202:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800c206:	930b      	str	r3, [sp, #44]	; 0x2c
 800c208:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 800c20a:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800c20e:	930a      	str	r3, [sp, #40]	; 0x28
 800c210:	ab98      	add	r3, sp, #608	; 0x260
 800c212:	f107 5b00 	add.w	fp, r7, #536870912	; 0x20000000
 800c216:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800c21a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800c21e:	e953 8928 	ldrd	r8, r9, [r3, #-160]	; 0xa0
 800c222:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800c226:	9308      	str	r3, [sp, #32]
 800c228:	9a08      	ldr	r2, [sp, #32]
 800c22a:	ab98      	add	r3, sp, #608	; 0x260
 800c22c:	4413      	add	r3, r2
 800c22e:	f1a3 0b98 	sub.w	fp, r3, #152	; 0x98
 800c232:	2600      	movs	r6, #0
 800c234:	1bbb      	subs	r3, r7, r6
 800c236:	2b00      	cmp	r3, #0
 800c238:	dc77      	bgt.n	800c32a <__kernel_rem_pio2+0x1fa>
 800c23a:	ec49 8b10 	vmov	d0, r8, r9
 800c23e:	4650      	mov	r0, sl
 800c240:	f000 fcaa 	bl	800cb98 <scalbn>
 800c244:	ec55 4b10 	vmov	r4, r5, d0
 800c248:	2200      	movs	r2, #0
 800c24a:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800c24e:	ee10 0a10 	vmov	r0, s0
 800c252:	4629      	mov	r1, r5
 800c254:	f7f4 f9cc 	bl	80005f0 <__aeabi_dmul>
 800c258:	ec41 0b10 	vmov	d0, r0, r1
 800c25c:	f000 fb84 	bl	800c968 <floor>
 800c260:	2200      	movs	r2, #0
 800c262:	ec51 0b10 	vmov	r0, r1, d0
 800c266:	4b7b      	ldr	r3, [pc, #492]	; (800c454 <__kernel_rem_pio2+0x324>)
 800c268:	f7f4 f9c2 	bl	80005f0 <__aeabi_dmul>
 800c26c:	4602      	mov	r2, r0
 800c26e:	460b      	mov	r3, r1
 800c270:	4620      	mov	r0, r4
 800c272:	4629      	mov	r1, r5
 800c274:	f7f4 f808 	bl	8000288 <__aeabi_dsub>
 800c278:	460d      	mov	r5, r1
 800c27a:	4604      	mov	r4, r0
 800c27c:	f7f4 fc68 	bl	8000b50 <__aeabi_d2iz>
 800c280:	9003      	str	r0, [sp, #12]
 800c282:	f7f4 f94f 	bl	8000524 <__aeabi_i2d>
 800c286:	4602      	mov	r2, r0
 800c288:	460b      	mov	r3, r1
 800c28a:	4620      	mov	r0, r4
 800c28c:	4629      	mov	r1, r5
 800c28e:	f7f3 fffb 	bl	8000288 <__aeabi_dsub>
 800c292:	f1ba 0f00 	cmp.w	sl, #0
 800c296:	4680      	mov	r8, r0
 800c298:	4689      	mov	r9, r1
 800c29a:	dd6b      	ble.n	800c374 <__kernel_rem_pio2+0x244>
 800c29c:	1e7a      	subs	r2, r7, #1
 800c29e:	ab0c      	add	r3, sp, #48	; 0x30
 800c2a0:	f1ca 0118 	rsb	r1, sl, #24
 800c2a4:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800c2a8:	9c03      	ldr	r4, [sp, #12]
 800c2aa:	fa40 f301 	asr.w	r3, r0, r1
 800c2ae:	441c      	add	r4, r3
 800c2b0:	408b      	lsls	r3, r1
 800c2b2:	1ac0      	subs	r0, r0, r3
 800c2b4:	ab0c      	add	r3, sp, #48	; 0x30
 800c2b6:	9403      	str	r4, [sp, #12]
 800c2b8:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800c2bc:	f1ca 0317 	rsb	r3, sl, #23
 800c2c0:	fa40 fb03 	asr.w	fp, r0, r3
 800c2c4:	f1bb 0f00 	cmp.w	fp, #0
 800c2c8:	dd62      	ble.n	800c390 <__kernel_rem_pio2+0x260>
 800c2ca:	9b03      	ldr	r3, [sp, #12]
 800c2cc:	2200      	movs	r2, #0
 800c2ce:	3301      	adds	r3, #1
 800c2d0:	9303      	str	r3, [sp, #12]
 800c2d2:	4614      	mov	r4, r2
 800c2d4:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800c2d8:	4297      	cmp	r7, r2
 800c2da:	f300 8089 	bgt.w	800c3f0 <__kernel_rem_pio2+0x2c0>
 800c2de:	f1ba 0f00 	cmp.w	sl, #0
 800c2e2:	dd07      	ble.n	800c2f4 <__kernel_rem_pio2+0x1c4>
 800c2e4:	f1ba 0f01 	cmp.w	sl, #1
 800c2e8:	f000 8096 	beq.w	800c418 <__kernel_rem_pio2+0x2e8>
 800c2ec:	f1ba 0f02 	cmp.w	sl, #2
 800c2f0:	f000 809c 	beq.w	800c42c <__kernel_rem_pio2+0x2fc>
 800c2f4:	f1bb 0f02 	cmp.w	fp, #2
 800c2f8:	d14a      	bne.n	800c390 <__kernel_rem_pio2+0x260>
 800c2fa:	4642      	mov	r2, r8
 800c2fc:	464b      	mov	r3, r9
 800c2fe:	2000      	movs	r0, #0
 800c300:	4955      	ldr	r1, [pc, #340]	; (800c458 <__kernel_rem_pio2+0x328>)
 800c302:	f7f3 ffc1 	bl	8000288 <__aeabi_dsub>
 800c306:	4680      	mov	r8, r0
 800c308:	4689      	mov	r9, r1
 800c30a:	2c00      	cmp	r4, #0
 800c30c:	d040      	beq.n	800c390 <__kernel_rem_pio2+0x260>
 800c30e:	4650      	mov	r0, sl
 800c310:	ed9f 0b4d 	vldr	d0, [pc, #308]	; 800c448 <__kernel_rem_pio2+0x318>
 800c314:	f000 fc40 	bl	800cb98 <scalbn>
 800c318:	4640      	mov	r0, r8
 800c31a:	4649      	mov	r1, r9
 800c31c:	ec53 2b10 	vmov	r2, r3, d0
 800c320:	f7f3 ffb2 	bl	8000288 <__aeabi_dsub>
 800c324:	4680      	mov	r8, r0
 800c326:	4689      	mov	r9, r1
 800c328:	e032      	b.n	800c390 <__kernel_rem_pio2+0x260>
 800c32a:	2200      	movs	r2, #0
 800c32c:	4b4b      	ldr	r3, [pc, #300]	; (800c45c <__kernel_rem_pio2+0x32c>)
 800c32e:	4640      	mov	r0, r8
 800c330:	4649      	mov	r1, r9
 800c332:	f7f4 f95d 	bl	80005f0 <__aeabi_dmul>
 800c336:	f7f4 fc0b 	bl	8000b50 <__aeabi_d2iz>
 800c33a:	f7f4 f8f3 	bl	8000524 <__aeabi_i2d>
 800c33e:	2200      	movs	r2, #0
 800c340:	4b47      	ldr	r3, [pc, #284]	; (800c460 <__kernel_rem_pio2+0x330>)
 800c342:	4604      	mov	r4, r0
 800c344:	460d      	mov	r5, r1
 800c346:	f7f4 f953 	bl	80005f0 <__aeabi_dmul>
 800c34a:	4602      	mov	r2, r0
 800c34c:	460b      	mov	r3, r1
 800c34e:	4640      	mov	r0, r8
 800c350:	4649      	mov	r1, r9
 800c352:	f7f3 ff99 	bl	8000288 <__aeabi_dsub>
 800c356:	f7f4 fbfb 	bl	8000b50 <__aeabi_d2iz>
 800c35a:	ab0c      	add	r3, sp, #48	; 0x30
 800c35c:	4629      	mov	r1, r5
 800c35e:	f843 0026 	str.w	r0, [r3, r6, lsl #2]
 800c362:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 800c366:	4620      	mov	r0, r4
 800c368:	f7f3 ff90 	bl	800028c <__adddf3>
 800c36c:	3601      	adds	r6, #1
 800c36e:	4680      	mov	r8, r0
 800c370:	4689      	mov	r9, r1
 800c372:	e75f      	b.n	800c234 <__kernel_rem_pio2+0x104>
 800c374:	d106      	bne.n	800c384 <__kernel_rem_pio2+0x254>
 800c376:	1e7b      	subs	r3, r7, #1
 800c378:	aa0c      	add	r2, sp, #48	; 0x30
 800c37a:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800c37e:	ea4f 5be0 	mov.w	fp, r0, asr #23
 800c382:	e79f      	b.n	800c2c4 <__kernel_rem_pio2+0x194>
 800c384:	2200      	movs	r2, #0
 800c386:	4b37      	ldr	r3, [pc, #220]	; (800c464 <__kernel_rem_pio2+0x334>)
 800c388:	f7f4 fbb8 	bl	8000afc <__aeabi_dcmpge>
 800c38c:	bb68      	cbnz	r0, 800c3ea <__kernel_rem_pio2+0x2ba>
 800c38e:	4683      	mov	fp, r0
 800c390:	2200      	movs	r2, #0
 800c392:	2300      	movs	r3, #0
 800c394:	4640      	mov	r0, r8
 800c396:	4649      	mov	r1, r9
 800c398:	f7f4 fb92 	bl	8000ac0 <__aeabi_dcmpeq>
 800c39c:	2800      	cmp	r0, #0
 800c39e:	f000 80c1 	beq.w	800c524 <__kernel_rem_pio2+0x3f4>
 800c3a2:	1e7c      	subs	r4, r7, #1
 800c3a4:	4623      	mov	r3, r4
 800c3a6:	2200      	movs	r2, #0
 800c3a8:	9900      	ldr	r1, [sp, #0]
 800c3aa:	428b      	cmp	r3, r1
 800c3ac:	da5c      	bge.n	800c468 <__kernel_rem_pio2+0x338>
 800c3ae:	2a00      	cmp	r2, #0
 800c3b0:	f040 808b 	bne.w	800c4ca <__kernel_rem_pio2+0x39a>
 800c3b4:	2401      	movs	r4, #1
 800c3b6:	f06f 0203 	mvn.w	r2, #3
 800c3ba:	fb02 f304 	mul.w	r3, r2, r4
 800c3be:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800c3c0:	58cb      	ldr	r3, [r1, r3]
 800c3c2:	2b00      	cmp	r3, #0
 800c3c4:	d056      	beq.n	800c474 <__kernel_rem_pio2+0x344>
 800c3c6:	9b08      	ldr	r3, [sp, #32]
 800c3c8:	aa98      	add	r2, sp, #608	; 0x260
 800c3ca:	4413      	add	r3, r2
 800c3cc:	f1a3 0b90 	sub.w	fp, r3, #144	; 0x90
 800c3d0:	9b06      	ldr	r3, [sp, #24]
 800c3d2:	19dd      	adds	r5, r3, r7
 800c3d4:	ab20      	add	r3, sp, #128	; 0x80
 800c3d6:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800c3da:	19e3      	adds	r3, r4, r7
 800c3dc:	1c7e      	adds	r6, r7, #1
 800c3de:	9303      	str	r3, [sp, #12]
 800c3e0:	9b03      	ldr	r3, [sp, #12]
 800c3e2:	429e      	cmp	r6, r3
 800c3e4:	dd48      	ble.n	800c478 <__kernel_rem_pio2+0x348>
 800c3e6:	461f      	mov	r7, r3
 800c3e8:	e712      	b.n	800c210 <__kernel_rem_pio2+0xe0>
 800c3ea:	f04f 0b02 	mov.w	fp, #2
 800c3ee:	e76c      	b.n	800c2ca <__kernel_rem_pio2+0x19a>
 800c3f0:	ab0c      	add	r3, sp, #48	; 0x30
 800c3f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c3f6:	b94c      	cbnz	r4, 800c40c <__kernel_rem_pio2+0x2dc>
 800c3f8:	b12b      	cbz	r3, 800c406 <__kernel_rem_pio2+0x2d6>
 800c3fa:	a80c      	add	r0, sp, #48	; 0x30
 800c3fc:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800c400:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 800c404:	2301      	movs	r3, #1
 800c406:	3201      	adds	r2, #1
 800c408:	461c      	mov	r4, r3
 800c40a:	e765      	b.n	800c2d8 <__kernel_rem_pio2+0x1a8>
 800c40c:	a80c      	add	r0, sp, #48	; 0x30
 800c40e:	1acb      	subs	r3, r1, r3
 800c410:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 800c414:	4623      	mov	r3, r4
 800c416:	e7f6      	b.n	800c406 <__kernel_rem_pio2+0x2d6>
 800c418:	1e7a      	subs	r2, r7, #1
 800c41a:	ab0c      	add	r3, sp, #48	; 0x30
 800c41c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c420:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800c424:	a90c      	add	r1, sp, #48	; 0x30
 800c426:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800c42a:	e763      	b.n	800c2f4 <__kernel_rem_pio2+0x1c4>
 800c42c:	1e7a      	subs	r2, r7, #1
 800c42e:	ab0c      	add	r3, sp, #48	; 0x30
 800c430:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c434:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800c438:	e7f4      	b.n	800c424 <__kernel_rem_pio2+0x2f4>
 800c43a:	bf00      	nop
 800c43c:	f3af 8000 	nop.w
	...
 800c44c:	3ff00000 	.word	0x3ff00000
 800c450:	0800dca0 	.word	0x0800dca0
 800c454:	40200000 	.word	0x40200000
 800c458:	3ff00000 	.word	0x3ff00000
 800c45c:	3e700000 	.word	0x3e700000
 800c460:	41700000 	.word	0x41700000
 800c464:	3fe00000 	.word	0x3fe00000
 800c468:	a90c      	add	r1, sp, #48	; 0x30
 800c46a:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800c46e:	3b01      	subs	r3, #1
 800c470:	430a      	orrs	r2, r1
 800c472:	e799      	b.n	800c3a8 <__kernel_rem_pio2+0x278>
 800c474:	3401      	adds	r4, #1
 800c476:	e7a0      	b.n	800c3ba <__kernel_rem_pio2+0x28a>
 800c478:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c47a:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800c47e:	f7f4 f851 	bl	8000524 <__aeabi_i2d>
 800c482:	e8e5 0102 	strd	r0, r1, [r5], #8
 800c486:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c488:	9508      	str	r5, [sp, #32]
 800c48a:	461c      	mov	r4, r3
 800c48c:	2700      	movs	r7, #0
 800c48e:	f04f 0800 	mov.w	r8, #0
 800c492:	f04f 0900 	mov.w	r9, #0
 800c496:	9b04      	ldr	r3, [sp, #16]
 800c498:	429f      	cmp	r7, r3
 800c49a:	dd03      	ble.n	800c4a4 <__kernel_rem_pio2+0x374>
 800c49c:	e8eb 8902 	strd	r8, r9, [fp], #8
 800c4a0:	3601      	adds	r6, #1
 800c4a2:	e79d      	b.n	800c3e0 <__kernel_rem_pio2+0x2b0>
 800c4a4:	9908      	ldr	r1, [sp, #32]
 800c4a6:	e971 2302 	ldrd	r2, r3, [r1, #-8]!
 800c4aa:	9108      	str	r1, [sp, #32]
 800c4ac:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 800c4b0:	f7f4 f89e 	bl	80005f0 <__aeabi_dmul>
 800c4b4:	4602      	mov	r2, r0
 800c4b6:	460b      	mov	r3, r1
 800c4b8:	4640      	mov	r0, r8
 800c4ba:	4649      	mov	r1, r9
 800c4bc:	f7f3 fee6 	bl	800028c <__adddf3>
 800c4c0:	3701      	adds	r7, #1
 800c4c2:	4680      	mov	r8, r0
 800c4c4:	4689      	mov	r9, r1
 800c4c6:	e7e6      	b.n	800c496 <__kernel_rem_pio2+0x366>
 800c4c8:	3c01      	subs	r4, #1
 800c4ca:	ab0c      	add	r3, sp, #48	; 0x30
 800c4cc:	f1aa 0a18 	sub.w	sl, sl, #24
 800c4d0:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800c4d4:	2b00      	cmp	r3, #0
 800c4d6:	d0f7      	beq.n	800c4c8 <__kernel_rem_pio2+0x398>
 800c4d8:	4650      	mov	r0, sl
 800c4da:	ed9f 0bb5 	vldr	d0, [pc, #724]	; 800c7b0 <__kernel_rem_pio2+0x680>
 800c4de:	f000 fb5b 	bl	800cb98 <scalbn>
 800c4e2:	00e5      	lsls	r5, r4, #3
 800c4e4:	ab98      	add	r3, sp, #608	; 0x260
 800c4e6:	eb03 0905 	add.w	r9, r3, r5
 800c4ea:	ec57 6b10 	vmov	r6, r7, d0
 800c4ee:	f1a9 0998 	sub.w	r9, r9, #152	; 0x98
 800c4f2:	46a0      	mov	r8, r4
 800c4f4:	f1b8 0f00 	cmp.w	r8, #0
 800c4f8:	da4d      	bge.n	800c596 <__kernel_rem_pio2+0x466>
 800c4fa:	ed9f 8baf 	vldr	d8, [pc, #700]	; 800c7b8 <__kernel_rem_pio2+0x688>
 800c4fe:	f50d 7a90 	add.w	sl, sp, #288	; 0x120
 800c502:	2300      	movs	r3, #0
 800c504:	9304      	str	r3, [sp, #16]
 800c506:	4657      	mov	r7, sl
 800c508:	9b04      	ldr	r3, [sp, #16]
 800c50a:	ebb4 0903 	subs.w	r9, r4, r3
 800c50e:	d476      	bmi.n	800c5fe <__kernel_rem_pio2+0x4ce>
 800c510:	4bab      	ldr	r3, [pc, #684]	; (800c7c0 <__kernel_rem_pio2+0x690>)
 800c512:	461e      	mov	r6, r3
 800c514:	ab70      	add	r3, sp, #448	; 0x1c0
 800c516:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 800c51a:	ed8d 8b06 	vstr	d8, [sp, #24]
 800c51e:	f04f 0800 	mov.w	r8, #0
 800c522:	e05e      	b.n	800c5e2 <__kernel_rem_pio2+0x4b2>
 800c524:	f1ca 0000 	rsb	r0, sl, #0
 800c528:	ec49 8b10 	vmov	d0, r8, r9
 800c52c:	f000 fb34 	bl	800cb98 <scalbn>
 800c530:	ec55 4b10 	vmov	r4, r5, d0
 800c534:	2200      	movs	r2, #0
 800c536:	4ba3      	ldr	r3, [pc, #652]	; (800c7c4 <__kernel_rem_pio2+0x694>)
 800c538:	ee10 0a10 	vmov	r0, s0
 800c53c:	4629      	mov	r1, r5
 800c53e:	f7f4 fadd 	bl	8000afc <__aeabi_dcmpge>
 800c542:	b1f8      	cbz	r0, 800c584 <__kernel_rem_pio2+0x454>
 800c544:	2200      	movs	r2, #0
 800c546:	4ba0      	ldr	r3, [pc, #640]	; (800c7c8 <__kernel_rem_pio2+0x698>)
 800c548:	4620      	mov	r0, r4
 800c54a:	4629      	mov	r1, r5
 800c54c:	f7f4 f850 	bl	80005f0 <__aeabi_dmul>
 800c550:	f7f4 fafe 	bl	8000b50 <__aeabi_d2iz>
 800c554:	4606      	mov	r6, r0
 800c556:	f7f3 ffe5 	bl	8000524 <__aeabi_i2d>
 800c55a:	2200      	movs	r2, #0
 800c55c:	4b99      	ldr	r3, [pc, #612]	; (800c7c4 <__kernel_rem_pio2+0x694>)
 800c55e:	f7f4 f847 	bl	80005f0 <__aeabi_dmul>
 800c562:	460b      	mov	r3, r1
 800c564:	4602      	mov	r2, r0
 800c566:	4629      	mov	r1, r5
 800c568:	4620      	mov	r0, r4
 800c56a:	f7f3 fe8d 	bl	8000288 <__aeabi_dsub>
 800c56e:	f7f4 faef 	bl	8000b50 <__aeabi_d2iz>
 800c572:	1c7c      	adds	r4, r7, #1
 800c574:	ab0c      	add	r3, sp, #48	; 0x30
 800c576:	f10a 0a18 	add.w	sl, sl, #24
 800c57a:	f843 0027 	str.w	r0, [r3, r7, lsl #2]
 800c57e:	f843 6024 	str.w	r6, [r3, r4, lsl #2]
 800c582:	e7a9      	b.n	800c4d8 <__kernel_rem_pio2+0x3a8>
 800c584:	4620      	mov	r0, r4
 800c586:	4629      	mov	r1, r5
 800c588:	f7f4 fae2 	bl	8000b50 <__aeabi_d2iz>
 800c58c:	ab0c      	add	r3, sp, #48	; 0x30
 800c58e:	463c      	mov	r4, r7
 800c590:	f843 0027 	str.w	r0, [r3, r7, lsl #2]
 800c594:	e7a0      	b.n	800c4d8 <__kernel_rem_pio2+0x3a8>
 800c596:	ab0c      	add	r3, sp, #48	; 0x30
 800c598:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800c59c:	f7f3 ffc2 	bl	8000524 <__aeabi_i2d>
 800c5a0:	4632      	mov	r2, r6
 800c5a2:	463b      	mov	r3, r7
 800c5a4:	f7f4 f824 	bl	80005f0 <__aeabi_dmul>
 800c5a8:	2200      	movs	r2, #0
 800c5aa:	e969 0102 	strd	r0, r1, [r9, #-8]!
 800c5ae:	4b86      	ldr	r3, [pc, #536]	; (800c7c8 <__kernel_rem_pio2+0x698>)
 800c5b0:	4630      	mov	r0, r6
 800c5b2:	4639      	mov	r1, r7
 800c5b4:	f7f4 f81c 	bl	80005f0 <__aeabi_dmul>
 800c5b8:	f108 38ff 	add.w	r8, r8, #4294967295
 800c5bc:	4606      	mov	r6, r0
 800c5be:	460f      	mov	r7, r1
 800c5c0:	e798      	b.n	800c4f4 <__kernel_rem_pio2+0x3c4>
 800c5c2:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 800c5c6:	e8f6 0102 	ldrd	r0, r1, [r6], #8
 800c5ca:	f7f4 f811 	bl	80005f0 <__aeabi_dmul>
 800c5ce:	4602      	mov	r2, r0
 800c5d0:	460b      	mov	r3, r1
 800c5d2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c5d6:	f7f3 fe59 	bl	800028c <__adddf3>
 800c5da:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800c5de:	f108 0801 	add.w	r8, r8, #1
 800c5e2:	9b00      	ldr	r3, [sp, #0]
 800c5e4:	4598      	cmp	r8, r3
 800c5e6:	dc02      	bgt.n	800c5ee <__kernel_rem_pio2+0x4be>
 800c5e8:	9b04      	ldr	r3, [sp, #16]
 800c5ea:	4598      	cmp	r8, r3
 800c5ec:	dde9      	ble.n	800c5c2 <__kernel_rem_pio2+0x492>
 800c5ee:	9b04      	ldr	r3, [sp, #16]
 800c5f0:	ed9d 7b06 	vldr	d7, [sp, #24]
 800c5f4:	3301      	adds	r3, #1
 800c5f6:	ecaa 7b02 	vstmia	sl!, {d7}
 800c5fa:	9304      	str	r3, [sp, #16]
 800c5fc:	e784      	b.n	800c508 <__kernel_rem_pio2+0x3d8>
 800c5fe:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 800c600:	2b03      	cmp	r3, #3
 800c602:	d85d      	bhi.n	800c6c0 <__kernel_rem_pio2+0x590>
 800c604:	e8df f003 	tbb	[pc, r3]
 800c608:	0226264b 	.word	0x0226264b
 800c60c:	ab98      	add	r3, sp, #608	; 0x260
 800c60e:	441d      	add	r5, r3
 800c610:	f5a5 759c 	sub.w	r5, r5, #312	; 0x138
 800c614:	462e      	mov	r6, r5
 800c616:	46a2      	mov	sl, r4
 800c618:	f1ba 0f00 	cmp.w	sl, #0
 800c61c:	dc6e      	bgt.n	800c6fc <__kernel_rem_pio2+0x5cc>
 800c61e:	462e      	mov	r6, r5
 800c620:	46a2      	mov	sl, r4
 800c622:	f1ba 0f01 	cmp.w	sl, #1
 800c626:	f300 808a 	bgt.w	800c73e <__kernel_rem_pio2+0x60e>
 800c62a:	2000      	movs	r0, #0
 800c62c:	2100      	movs	r1, #0
 800c62e:	2c01      	cmp	r4, #1
 800c630:	f300 80a6 	bgt.w	800c780 <__kernel_rem_pio2+0x650>
 800c634:	f1bb 0f00 	cmp.w	fp, #0
 800c638:	f040 80a8 	bne.w	800c78c <__kernel_rem_pio2+0x65c>
 800c63c:	e9dd 2348 	ldrd	r2, r3, [sp, #288]	; 0x120
 800c640:	9c02      	ldr	r4, [sp, #8]
 800c642:	e9c4 2300 	strd	r2, r3, [r4]
 800c646:	e9dd 234a 	ldrd	r2, r3, [sp, #296]	; 0x128
 800c64a:	e9c4 0104 	strd	r0, r1, [r4, #16]
 800c64e:	e9c4 2302 	strd	r2, r3, [r4, #8]
 800c652:	e035      	b.n	800c6c0 <__kernel_rem_pio2+0x590>
 800c654:	3508      	adds	r5, #8
 800c656:	ab48      	add	r3, sp, #288	; 0x120
 800c658:	441d      	add	r5, r3
 800c65a:	4626      	mov	r6, r4
 800c65c:	2000      	movs	r0, #0
 800c65e:	2100      	movs	r1, #0
 800c660:	2e00      	cmp	r6, #0
 800c662:	da3c      	bge.n	800c6de <__kernel_rem_pio2+0x5ae>
 800c664:	f1bb 0f00 	cmp.w	fp, #0
 800c668:	d03f      	beq.n	800c6ea <__kernel_rem_pio2+0x5ba>
 800c66a:	4602      	mov	r2, r0
 800c66c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c670:	9d02      	ldr	r5, [sp, #8]
 800c672:	e9c5 2300 	strd	r2, r3, [r5]
 800c676:	4602      	mov	r2, r0
 800c678:	460b      	mov	r3, r1
 800c67a:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 800c67e:	f7f3 fe03 	bl	8000288 <__aeabi_dsub>
 800c682:	ae4a      	add	r6, sp, #296	; 0x128
 800c684:	2501      	movs	r5, #1
 800c686:	42ac      	cmp	r4, r5
 800c688:	da32      	bge.n	800c6f0 <__kernel_rem_pio2+0x5c0>
 800c68a:	f1bb 0f00 	cmp.w	fp, #0
 800c68e:	d002      	beq.n	800c696 <__kernel_rem_pio2+0x566>
 800c690:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c694:	4619      	mov	r1, r3
 800c696:	9b02      	ldr	r3, [sp, #8]
 800c698:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800c69c:	e010      	b.n	800c6c0 <__kernel_rem_pio2+0x590>
 800c69e:	ab98      	add	r3, sp, #608	; 0x260
 800c6a0:	441d      	add	r5, r3
 800c6a2:	f5a5 759c 	sub.w	r5, r5, #312	; 0x138
 800c6a6:	2000      	movs	r0, #0
 800c6a8:	2100      	movs	r1, #0
 800c6aa:	2c00      	cmp	r4, #0
 800c6ac:	da11      	bge.n	800c6d2 <__kernel_rem_pio2+0x5a2>
 800c6ae:	f1bb 0f00 	cmp.w	fp, #0
 800c6b2:	d002      	beq.n	800c6ba <__kernel_rem_pio2+0x58a>
 800c6b4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c6b8:	4619      	mov	r1, r3
 800c6ba:	9b02      	ldr	r3, [sp, #8]
 800c6bc:	e9c3 0100 	strd	r0, r1, [r3]
 800c6c0:	9b03      	ldr	r3, [sp, #12]
 800c6c2:	f003 0007 	and.w	r0, r3, #7
 800c6c6:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 800c6ca:	ecbd 8b02 	vpop	{d8}
 800c6ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c6d2:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 800c6d6:	f7f3 fdd9 	bl	800028c <__adddf3>
 800c6da:	3c01      	subs	r4, #1
 800c6dc:	e7e5      	b.n	800c6aa <__kernel_rem_pio2+0x57a>
 800c6de:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 800c6e2:	f7f3 fdd3 	bl	800028c <__adddf3>
 800c6e6:	3e01      	subs	r6, #1
 800c6e8:	e7ba      	b.n	800c660 <__kernel_rem_pio2+0x530>
 800c6ea:	4602      	mov	r2, r0
 800c6ec:	460b      	mov	r3, r1
 800c6ee:	e7bf      	b.n	800c670 <__kernel_rem_pio2+0x540>
 800c6f0:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 800c6f4:	f7f3 fdca 	bl	800028c <__adddf3>
 800c6f8:	3501      	adds	r5, #1
 800c6fa:	e7c4      	b.n	800c686 <__kernel_rem_pio2+0x556>
 800c6fc:	ed16 7b02 	vldr	d7, [r6, #-8]
 800c700:	e956 8904 	ldrd	r8, r9, [r6, #-16]
 800c704:	ec53 2b17 	vmov	r2, r3, d7
 800c708:	4640      	mov	r0, r8
 800c70a:	4649      	mov	r1, r9
 800c70c:	ed8d 7b00 	vstr	d7, [sp]
 800c710:	f7f3 fdbc 	bl	800028c <__adddf3>
 800c714:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c718:	4602      	mov	r2, r0
 800c71a:	460b      	mov	r3, r1
 800c71c:	4640      	mov	r0, r8
 800c71e:	4649      	mov	r1, r9
 800c720:	f7f3 fdb2 	bl	8000288 <__aeabi_dsub>
 800c724:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c728:	f7f3 fdb0 	bl	800028c <__adddf3>
 800c72c:	ed9d 7b04 	vldr	d7, [sp, #16]
 800c730:	e966 0102 	strd	r0, r1, [r6, #-8]!
 800c734:	f10a 3aff 	add.w	sl, sl, #4294967295
 800c738:	ed06 7b02 	vstr	d7, [r6, #-8]
 800c73c:	e76c      	b.n	800c618 <__kernel_rem_pio2+0x4e8>
 800c73e:	ed16 7b02 	vldr	d7, [r6, #-8]
 800c742:	e956 8904 	ldrd	r8, r9, [r6, #-16]
 800c746:	ec53 2b17 	vmov	r2, r3, d7
 800c74a:	4640      	mov	r0, r8
 800c74c:	4649      	mov	r1, r9
 800c74e:	ed8d 7b00 	vstr	d7, [sp]
 800c752:	f7f3 fd9b 	bl	800028c <__adddf3>
 800c756:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c75a:	4602      	mov	r2, r0
 800c75c:	460b      	mov	r3, r1
 800c75e:	4640      	mov	r0, r8
 800c760:	4649      	mov	r1, r9
 800c762:	f7f3 fd91 	bl	8000288 <__aeabi_dsub>
 800c766:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c76a:	f7f3 fd8f 	bl	800028c <__adddf3>
 800c76e:	ed9d 7b04 	vldr	d7, [sp, #16]
 800c772:	e966 0102 	strd	r0, r1, [r6, #-8]!
 800c776:	f10a 3aff 	add.w	sl, sl, #4294967295
 800c77a:	ed06 7b02 	vstr	d7, [r6, #-8]
 800c77e:	e750      	b.n	800c622 <__kernel_rem_pio2+0x4f2>
 800c780:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 800c784:	f7f3 fd82 	bl	800028c <__adddf3>
 800c788:	3c01      	subs	r4, #1
 800c78a:	e750      	b.n	800c62e <__kernel_rem_pio2+0x4fe>
 800c78c:	9a02      	ldr	r2, [sp, #8]
 800c78e:	683b      	ldr	r3, [r7, #0]
 800c790:	6013      	str	r3, [r2, #0]
 800c792:	687b      	ldr	r3, [r7, #4]
 800c794:	6110      	str	r0, [r2, #16]
 800c796:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800c79a:	6053      	str	r3, [r2, #4]
 800c79c:	68bb      	ldr	r3, [r7, #8]
 800c79e:	6093      	str	r3, [r2, #8]
 800c7a0:	68fb      	ldr	r3, [r7, #12]
 800c7a2:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800c7a6:	60d3      	str	r3, [r2, #12]
 800c7a8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c7ac:	6153      	str	r3, [r2, #20]
 800c7ae:	e787      	b.n	800c6c0 <__kernel_rem_pio2+0x590>
 800c7b0:	00000000 	.word	0x00000000
 800c7b4:	3ff00000 	.word	0x3ff00000
	...
 800c7c0:	0800dc60 	.word	0x0800dc60
 800c7c4:	41700000 	.word	0x41700000
 800c7c8:	3e700000 	.word	0x3e700000
 800c7cc:	00000000 	.word	0x00000000

0800c7d0 <__kernel_sin>:
 800c7d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c7d4:	ec55 4b10 	vmov	r4, r5, d0
 800c7d8:	b085      	sub	sp, #20
 800c7da:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800c7de:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800c7e2:	ed8d 1b00 	vstr	d1, [sp]
 800c7e6:	9002      	str	r0, [sp, #8]
 800c7e8:	da06      	bge.n	800c7f8 <__kernel_sin+0x28>
 800c7ea:	ee10 0a10 	vmov	r0, s0
 800c7ee:	4629      	mov	r1, r5
 800c7f0:	f7f4 f9ae 	bl	8000b50 <__aeabi_d2iz>
 800c7f4:	2800      	cmp	r0, #0
 800c7f6:	d051      	beq.n	800c89c <__kernel_sin+0xcc>
 800c7f8:	4622      	mov	r2, r4
 800c7fa:	462b      	mov	r3, r5
 800c7fc:	4620      	mov	r0, r4
 800c7fe:	4629      	mov	r1, r5
 800c800:	f7f3 fef6 	bl	80005f0 <__aeabi_dmul>
 800c804:	4682      	mov	sl, r0
 800c806:	468b      	mov	fp, r1
 800c808:	4602      	mov	r2, r0
 800c80a:	460b      	mov	r3, r1
 800c80c:	4620      	mov	r0, r4
 800c80e:	4629      	mov	r1, r5
 800c810:	f7f3 feee 	bl	80005f0 <__aeabi_dmul>
 800c814:	a341      	add	r3, pc, #260	; (adr r3, 800c91c <__kernel_sin+0x14c>)
 800c816:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c81a:	4680      	mov	r8, r0
 800c81c:	4689      	mov	r9, r1
 800c81e:	4650      	mov	r0, sl
 800c820:	4659      	mov	r1, fp
 800c822:	f7f3 fee5 	bl	80005f0 <__aeabi_dmul>
 800c826:	a33f      	add	r3, pc, #252	; (adr r3, 800c924 <__kernel_sin+0x154>)
 800c828:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c82c:	f7f3 fd2c 	bl	8000288 <__aeabi_dsub>
 800c830:	4652      	mov	r2, sl
 800c832:	465b      	mov	r3, fp
 800c834:	f7f3 fedc 	bl	80005f0 <__aeabi_dmul>
 800c838:	a33c      	add	r3, pc, #240	; (adr r3, 800c92c <__kernel_sin+0x15c>)
 800c83a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c83e:	f7f3 fd25 	bl	800028c <__adddf3>
 800c842:	4652      	mov	r2, sl
 800c844:	465b      	mov	r3, fp
 800c846:	f7f3 fed3 	bl	80005f0 <__aeabi_dmul>
 800c84a:	a33a      	add	r3, pc, #232	; (adr r3, 800c934 <__kernel_sin+0x164>)
 800c84c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c850:	f7f3 fd1a 	bl	8000288 <__aeabi_dsub>
 800c854:	4652      	mov	r2, sl
 800c856:	465b      	mov	r3, fp
 800c858:	f7f3 feca 	bl	80005f0 <__aeabi_dmul>
 800c85c:	a337      	add	r3, pc, #220	; (adr r3, 800c93c <__kernel_sin+0x16c>)
 800c85e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c862:	f7f3 fd13 	bl	800028c <__adddf3>
 800c866:	9b02      	ldr	r3, [sp, #8]
 800c868:	4606      	mov	r6, r0
 800c86a:	460f      	mov	r7, r1
 800c86c:	b9db      	cbnz	r3, 800c8a6 <__kernel_sin+0xd6>
 800c86e:	4602      	mov	r2, r0
 800c870:	460b      	mov	r3, r1
 800c872:	4650      	mov	r0, sl
 800c874:	4659      	mov	r1, fp
 800c876:	f7f3 febb 	bl	80005f0 <__aeabi_dmul>
 800c87a:	a325      	add	r3, pc, #148	; (adr r3, 800c910 <__kernel_sin+0x140>)
 800c87c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c880:	f7f3 fd02 	bl	8000288 <__aeabi_dsub>
 800c884:	4642      	mov	r2, r8
 800c886:	464b      	mov	r3, r9
 800c888:	f7f3 feb2 	bl	80005f0 <__aeabi_dmul>
 800c88c:	4602      	mov	r2, r0
 800c88e:	460b      	mov	r3, r1
 800c890:	4620      	mov	r0, r4
 800c892:	4629      	mov	r1, r5
 800c894:	f7f3 fcfa 	bl	800028c <__adddf3>
 800c898:	4604      	mov	r4, r0
 800c89a:	460d      	mov	r5, r1
 800c89c:	ec45 4b10 	vmov	d0, r4, r5
 800c8a0:	b005      	add	sp, #20
 800c8a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c8a6:	2200      	movs	r2, #0
 800c8a8:	4b1b      	ldr	r3, [pc, #108]	; (800c918 <__kernel_sin+0x148>)
 800c8aa:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c8ae:	f7f3 fe9f 	bl	80005f0 <__aeabi_dmul>
 800c8b2:	4632      	mov	r2, r6
 800c8b4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c8b8:	463b      	mov	r3, r7
 800c8ba:	4640      	mov	r0, r8
 800c8bc:	4649      	mov	r1, r9
 800c8be:	f7f3 fe97 	bl	80005f0 <__aeabi_dmul>
 800c8c2:	4602      	mov	r2, r0
 800c8c4:	460b      	mov	r3, r1
 800c8c6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c8ca:	f7f3 fcdd 	bl	8000288 <__aeabi_dsub>
 800c8ce:	4652      	mov	r2, sl
 800c8d0:	465b      	mov	r3, fp
 800c8d2:	f7f3 fe8d 	bl	80005f0 <__aeabi_dmul>
 800c8d6:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c8da:	f7f3 fcd5 	bl	8000288 <__aeabi_dsub>
 800c8de:	a30c      	add	r3, pc, #48	; (adr r3, 800c910 <__kernel_sin+0x140>)
 800c8e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c8e4:	4606      	mov	r6, r0
 800c8e6:	460f      	mov	r7, r1
 800c8e8:	4640      	mov	r0, r8
 800c8ea:	4649      	mov	r1, r9
 800c8ec:	f7f3 fe80 	bl	80005f0 <__aeabi_dmul>
 800c8f0:	4602      	mov	r2, r0
 800c8f2:	460b      	mov	r3, r1
 800c8f4:	4630      	mov	r0, r6
 800c8f6:	4639      	mov	r1, r7
 800c8f8:	f7f3 fcc8 	bl	800028c <__adddf3>
 800c8fc:	4602      	mov	r2, r0
 800c8fe:	460b      	mov	r3, r1
 800c900:	4620      	mov	r0, r4
 800c902:	4629      	mov	r1, r5
 800c904:	f7f3 fcc0 	bl	8000288 <__aeabi_dsub>
 800c908:	e7c6      	b.n	800c898 <__kernel_sin+0xc8>
 800c90a:	bf00      	nop
 800c90c:	f3af 8000 	nop.w
 800c910:	55555549 	.word	0x55555549
 800c914:	3fc55555 	.word	0x3fc55555
 800c918:	3fe00000 	.word	0x3fe00000
 800c91c:	5acfd57c 	.word	0x5acfd57c
 800c920:	3de5d93a 	.word	0x3de5d93a
 800c924:	8a2b9ceb 	.word	0x8a2b9ceb
 800c928:	3e5ae5e6 	.word	0x3e5ae5e6
 800c92c:	57b1fe7d 	.word	0x57b1fe7d
 800c930:	3ec71de3 	.word	0x3ec71de3
 800c934:	19c161d5 	.word	0x19c161d5
 800c938:	3f2a01a0 	.word	0x3f2a01a0
 800c93c:	1110f8a6 	.word	0x1110f8a6
 800c940:	3f811111 	.word	0x3f811111

0800c944 <fabs>:
 800c944:	ec53 2b10 	vmov	r2, r3, d0
 800c948:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800c94c:	ec43 2b10 	vmov	d0, r2, r3
 800c950:	4770      	bx	lr

0800c952 <finite>:
 800c952:	ee10 3a90 	vmov	r3, s1
 800c956:	f043 4000 	orr.w	r0, r3, #2147483648	; 0x80000000
 800c95a:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800c95e:	0fc0      	lsrs	r0, r0, #31
 800c960:	4770      	bx	lr
 800c962:	0000      	movs	r0, r0
 800c964:	0000      	movs	r0, r0
	...

0800c968 <floor>:
 800c968:	ec51 0b10 	vmov	r0, r1, d0
 800c96c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c970:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800c974:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 800c978:	2e13      	cmp	r6, #19
 800c97a:	ee10 8a10 	vmov	r8, s0
 800c97e:	460c      	mov	r4, r1
 800c980:	ee10 5a10 	vmov	r5, s0
 800c984:	dc35      	bgt.n	800c9f2 <floor+0x8a>
 800c986:	2e00      	cmp	r6, #0
 800c988:	da17      	bge.n	800c9ba <floor+0x52>
 800c98a:	a335      	add	r3, pc, #212	; (adr r3, 800ca60 <floor+0xf8>)
 800c98c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c990:	f7f3 fc7c 	bl	800028c <__adddf3>
 800c994:	2200      	movs	r2, #0
 800c996:	2300      	movs	r3, #0
 800c998:	f7f4 f8ba 	bl	8000b10 <__aeabi_dcmpgt>
 800c99c:	b150      	cbz	r0, 800c9b4 <floor+0x4c>
 800c99e:	2c00      	cmp	r4, #0
 800c9a0:	da5a      	bge.n	800ca58 <floor+0xf0>
 800c9a2:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800c9a6:	ea53 0308 	orrs.w	r3, r3, r8
 800c9aa:	4b2f      	ldr	r3, [pc, #188]	; (800ca68 <floor+0x100>)
 800c9ac:	f04f 0500 	mov.w	r5, #0
 800c9b0:	bf18      	it	ne
 800c9b2:	461c      	movne	r4, r3
 800c9b4:	4621      	mov	r1, r4
 800c9b6:	4628      	mov	r0, r5
 800c9b8:	e025      	b.n	800ca06 <floor+0x9e>
 800c9ba:	4f2c      	ldr	r7, [pc, #176]	; (800ca6c <floor+0x104>)
 800c9bc:	4137      	asrs	r7, r6
 800c9be:	ea01 0307 	and.w	r3, r1, r7
 800c9c2:	4303      	orrs	r3, r0
 800c9c4:	d01f      	beq.n	800ca06 <floor+0x9e>
 800c9c6:	a326      	add	r3, pc, #152	; (adr r3, 800ca60 <floor+0xf8>)
 800c9c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c9cc:	f7f3 fc5e 	bl	800028c <__adddf3>
 800c9d0:	2200      	movs	r2, #0
 800c9d2:	2300      	movs	r3, #0
 800c9d4:	f7f4 f89c 	bl	8000b10 <__aeabi_dcmpgt>
 800c9d8:	2800      	cmp	r0, #0
 800c9da:	d0eb      	beq.n	800c9b4 <floor+0x4c>
 800c9dc:	2c00      	cmp	r4, #0
 800c9de:	bfbe      	ittt	lt
 800c9e0:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800c9e4:	fa43 f606 	asrlt.w	r6, r3, r6
 800c9e8:	19a4      	addlt	r4, r4, r6
 800c9ea:	ea24 0407 	bic.w	r4, r4, r7
 800c9ee:	2500      	movs	r5, #0
 800c9f0:	e7e0      	b.n	800c9b4 <floor+0x4c>
 800c9f2:	2e33      	cmp	r6, #51	; 0x33
 800c9f4:	dd0b      	ble.n	800ca0e <floor+0xa6>
 800c9f6:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800c9fa:	d104      	bne.n	800ca06 <floor+0x9e>
 800c9fc:	ee10 2a10 	vmov	r2, s0
 800ca00:	460b      	mov	r3, r1
 800ca02:	f7f3 fc43 	bl	800028c <__adddf3>
 800ca06:	ec41 0b10 	vmov	d0, r0, r1
 800ca0a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ca0e:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800ca12:	f04f 33ff 	mov.w	r3, #4294967295
 800ca16:	fa23 f707 	lsr.w	r7, r3, r7
 800ca1a:	4238      	tst	r0, r7
 800ca1c:	d0f3      	beq.n	800ca06 <floor+0x9e>
 800ca1e:	a310      	add	r3, pc, #64	; (adr r3, 800ca60 <floor+0xf8>)
 800ca20:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca24:	f7f3 fc32 	bl	800028c <__adddf3>
 800ca28:	2200      	movs	r2, #0
 800ca2a:	2300      	movs	r3, #0
 800ca2c:	f7f4 f870 	bl	8000b10 <__aeabi_dcmpgt>
 800ca30:	2800      	cmp	r0, #0
 800ca32:	d0bf      	beq.n	800c9b4 <floor+0x4c>
 800ca34:	2c00      	cmp	r4, #0
 800ca36:	da02      	bge.n	800ca3e <floor+0xd6>
 800ca38:	2e14      	cmp	r6, #20
 800ca3a:	d103      	bne.n	800ca44 <floor+0xdc>
 800ca3c:	3401      	adds	r4, #1
 800ca3e:	ea25 0507 	bic.w	r5, r5, r7
 800ca42:	e7b7      	b.n	800c9b4 <floor+0x4c>
 800ca44:	2301      	movs	r3, #1
 800ca46:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800ca4a:	fa03 f606 	lsl.w	r6, r3, r6
 800ca4e:	4435      	add	r5, r6
 800ca50:	45a8      	cmp	r8, r5
 800ca52:	bf88      	it	hi
 800ca54:	18e4      	addhi	r4, r4, r3
 800ca56:	e7f2      	b.n	800ca3e <floor+0xd6>
 800ca58:	2500      	movs	r5, #0
 800ca5a:	462c      	mov	r4, r5
 800ca5c:	e7aa      	b.n	800c9b4 <floor+0x4c>
 800ca5e:	bf00      	nop
 800ca60:	8800759c 	.word	0x8800759c
 800ca64:	7e37e43c 	.word	0x7e37e43c
 800ca68:	bff00000 	.word	0xbff00000
 800ca6c:	000fffff 	.word	0x000fffff

0800ca70 <matherr>:
 800ca70:	2000      	movs	r0, #0
 800ca72:	4770      	bx	lr
 800ca74:	0000      	movs	r0, r0
	...

0800ca78 <nan>:
 800ca78:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800ca80 <nan+0x8>
 800ca7c:	4770      	bx	lr
 800ca7e:	bf00      	nop
 800ca80:	00000000 	.word	0x00000000
 800ca84:	7ff80000 	.word	0x7ff80000

0800ca88 <rint>:
 800ca88:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ca8a:	ec51 0b10 	vmov	r0, r1, d0
 800ca8e:	f3c1 540a 	ubfx	r4, r1, #20, #11
 800ca92:	f2a4 36ff 	subw	r6, r4, #1023	; 0x3ff
 800ca96:	2e13      	cmp	r6, #19
 800ca98:	ee10 7a10 	vmov	r7, s0
 800ca9c:	460b      	mov	r3, r1
 800ca9e:	4602      	mov	r2, r0
 800caa0:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 800caa4:	dc58      	bgt.n	800cb58 <rint+0xd0>
 800caa6:	2e00      	cmp	r6, #0
 800caa8:	da2b      	bge.n	800cb02 <rint+0x7a>
 800caaa:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 800caae:	4302      	orrs	r2, r0
 800cab0:	d023      	beq.n	800cafa <rint+0x72>
 800cab2:	f3c1 0213 	ubfx	r2, r1, #0, #20
 800cab6:	4302      	orrs	r2, r0
 800cab8:	4251      	negs	r1, r2
 800caba:	4311      	orrs	r1, r2
 800cabc:	0b09      	lsrs	r1, r1, #12
 800cabe:	0c5b      	lsrs	r3, r3, #17
 800cac0:	f401 2100 	and.w	r1, r1, #524288	; 0x80000
 800cac4:	045b      	lsls	r3, r3, #17
 800cac6:	ea41 0703 	orr.w	r7, r1, r3
 800caca:	4b31      	ldr	r3, [pc, #196]	; (800cb90 <rint+0x108>)
 800cacc:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800cad0:	4639      	mov	r1, r7
 800cad2:	e9d3 6700 	ldrd	r6, r7, [r3]
 800cad6:	ee10 0a10 	vmov	r0, s0
 800cada:	4632      	mov	r2, r6
 800cadc:	463b      	mov	r3, r7
 800cade:	f7f3 fbd5 	bl	800028c <__adddf3>
 800cae2:	e9cd 0100 	strd	r0, r1, [sp]
 800cae6:	463b      	mov	r3, r7
 800cae8:	4632      	mov	r2, r6
 800caea:	e9dd 0100 	ldrd	r0, r1, [sp]
 800caee:	f7f3 fbcb 	bl	8000288 <__aeabi_dsub>
 800caf2:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800caf6:	ea43 71c5 	orr.w	r1, r3, r5, lsl #31
 800cafa:	ec41 0b10 	vmov	d0, r0, r1
 800cafe:	b003      	add	sp, #12
 800cb00:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cb02:	4c24      	ldr	r4, [pc, #144]	; (800cb94 <rint+0x10c>)
 800cb04:	4134      	asrs	r4, r6
 800cb06:	ea01 0704 	and.w	r7, r1, r4
 800cb0a:	4307      	orrs	r7, r0
 800cb0c:	d0f5      	beq.n	800cafa <rint+0x72>
 800cb0e:	0861      	lsrs	r1, r4, #1
 800cb10:	ea03 0001 	and.w	r0, r3, r1
 800cb14:	4302      	orrs	r2, r0
 800cb16:	d00b      	beq.n	800cb30 <rint+0xa8>
 800cb18:	ea23 0101 	bic.w	r1, r3, r1
 800cb1c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800cb20:	2e13      	cmp	r6, #19
 800cb22:	fa43 f306 	asr.w	r3, r3, r6
 800cb26:	bf0c      	ite	eq
 800cb28:	f04f 4200 	moveq.w	r2, #2147483648	; 0x80000000
 800cb2c:	2200      	movne	r2, #0
 800cb2e:	430b      	orrs	r3, r1
 800cb30:	4619      	mov	r1, r3
 800cb32:	4b17      	ldr	r3, [pc, #92]	; (800cb90 <rint+0x108>)
 800cb34:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800cb38:	e9d5 4500 	ldrd	r4, r5, [r5]
 800cb3c:	4610      	mov	r0, r2
 800cb3e:	462b      	mov	r3, r5
 800cb40:	4622      	mov	r2, r4
 800cb42:	f7f3 fba3 	bl	800028c <__adddf3>
 800cb46:	e9cd 0100 	strd	r0, r1, [sp]
 800cb4a:	4622      	mov	r2, r4
 800cb4c:	462b      	mov	r3, r5
 800cb4e:	e9dd 0100 	ldrd	r0, r1, [sp]
 800cb52:	f7f3 fb99 	bl	8000288 <__aeabi_dsub>
 800cb56:	e7d0      	b.n	800cafa <rint+0x72>
 800cb58:	2e33      	cmp	r6, #51	; 0x33
 800cb5a:	dd08      	ble.n	800cb6e <rint+0xe6>
 800cb5c:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800cb60:	d1cb      	bne.n	800cafa <rint+0x72>
 800cb62:	ee10 2a10 	vmov	r2, s0
 800cb66:	460b      	mov	r3, r1
 800cb68:	f7f3 fb90 	bl	800028c <__adddf3>
 800cb6c:	e7c5      	b.n	800cafa <rint+0x72>
 800cb6e:	f2a4 4613 	subw	r6, r4, #1043	; 0x413
 800cb72:	f04f 34ff 	mov.w	r4, #4294967295
 800cb76:	40f4      	lsrs	r4, r6
 800cb78:	4220      	tst	r0, r4
 800cb7a:	d0be      	beq.n	800cafa <rint+0x72>
 800cb7c:	0861      	lsrs	r1, r4, #1
 800cb7e:	420f      	tst	r7, r1
 800cb80:	bf1f      	itttt	ne
 800cb82:	f04f 4280 	movne.w	r2, #1073741824	; 0x40000000
 800cb86:	ea27 0101 	bicne.w	r1, r7, r1
 800cb8a:	4132      	asrne	r2, r6
 800cb8c:	430a      	orrne	r2, r1
 800cb8e:	e7cf      	b.n	800cb30 <rint+0xa8>
 800cb90:	0800dcb0 	.word	0x0800dcb0
 800cb94:	000fffff 	.word	0x000fffff

0800cb98 <scalbn>:
 800cb98:	b570      	push	{r4, r5, r6, lr}
 800cb9a:	ec55 4b10 	vmov	r4, r5, d0
 800cb9e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800cba2:	4606      	mov	r6, r0
 800cba4:	462b      	mov	r3, r5
 800cba6:	b9b2      	cbnz	r2, 800cbd6 <scalbn+0x3e>
 800cba8:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800cbac:	4323      	orrs	r3, r4
 800cbae:	d03c      	beq.n	800cc2a <scalbn+0x92>
 800cbb0:	2200      	movs	r2, #0
 800cbb2:	4b33      	ldr	r3, [pc, #204]	; (800cc80 <scalbn+0xe8>)
 800cbb4:	4629      	mov	r1, r5
 800cbb6:	ee10 0a10 	vmov	r0, s0
 800cbba:	f7f3 fd19 	bl	80005f0 <__aeabi_dmul>
 800cbbe:	4a31      	ldr	r2, [pc, #196]	; (800cc84 <scalbn+0xec>)
 800cbc0:	4296      	cmp	r6, r2
 800cbc2:	4604      	mov	r4, r0
 800cbc4:	460d      	mov	r5, r1
 800cbc6:	460b      	mov	r3, r1
 800cbc8:	da13      	bge.n	800cbf2 <scalbn+0x5a>
 800cbca:	a329      	add	r3, pc, #164	; (adr r3, 800cc70 <scalbn+0xd8>)
 800cbcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cbd0:	f7f3 fd0e 	bl	80005f0 <__aeabi_dmul>
 800cbd4:	e00a      	b.n	800cbec <scalbn+0x54>
 800cbd6:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800cbda:	428a      	cmp	r2, r1
 800cbdc:	d10c      	bne.n	800cbf8 <scalbn+0x60>
 800cbde:	ee10 2a10 	vmov	r2, s0
 800cbe2:	462b      	mov	r3, r5
 800cbe4:	4620      	mov	r0, r4
 800cbe6:	4629      	mov	r1, r5
 800cbe8:	f7f3 fb50 	bl	800028c <__adddf3>
 800cbec:	4604      	mov	r4, r0
 800cbee:	460d      	mov	r5, r1
 800cbf0:	e01b      	b.n	800cc2a <scalbn+0x92>
 800cbf2:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800cbf6:	3a36      	subs	r2, #54	; 0x36
 800cbf8:	4432      	add	r2, r6
 800cbfa:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800cbfe:	428a      	cmp	r2, r1
 800cc00:	dd0b      	ble.n	800cc1a <scalbn+0x82>
 800cc02:	ec45 4b11 	vmov	d1, r4, r5
 800cc06:	ed9f 0b1c 	vldr	d0, [pc, #112]	; 800cc78 <scalbn+0xe0>
 800cc0a:	f000 fa19 	bl	800d040 <copysign>
 800cc0e:	a31a      	add	r3, pc, #104	; (adr r3, 800cc78 <scalbn+0xe0>)
 800cc10:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc14:	ec51 0b10 	vmov	r0, r1, d0
 800cc18:	e7da      	b.n	800cbd0 <scalbn+0x38>
 800cc1a:	2a00      	cmp	r2, #0
 800cc1c:	dd08      	ble.n	800cc30 <scalbn+0x98>
 800cc1e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800cc22:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800cc26:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800cc2a:	ec45 4b10 	vmov	d0, r4, r5
 800cc2e:	bd70      	pop	{r4, r5, r6, pc}
 800cc30:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800cc34:	da0d      	bge.n	800cc52 <scalbn+0xba>
 800cc36:	f24c 3350 	movw	r3, #50000	; 0xc350
 800cc3a:	429e      	cmp	r6, r3
 800cc3c:	ec45 4b11 	vmov	d1, r4, r5
 800cc40:	dce1      	bgt.n	800cc06 <scalbn+0x6e>
 800cc42:	ed9f 0b0b 	vldr	d0, [pc, #44]	; 800cc70 <scalbn+0xd8>
 800cc46:	f000 f9fb 	bl	800d040 <copysign>
 800cc4a:	a309      	add	r3, pc, #36	; (adr r3, 800cc70 <scalbn+0xd8>)
 800cc4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc50:	e7e0      	b.n	800cc14 <scalbn+0x7c>
 800cc52:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800cc56:	3236      	adds	r2, #54	; 0x36
 800cc58:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800cc5c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800cc60:	4620      	mov	r0, r4
 800cc62:	4629      	mov	r1, r5
 800cc64:	2200      	movs	r2, #0
 800cc66:	4b08      	ldr	r3, [pc, #32]	; (800cc88 <scalbn+0xf0>)
 800cc68:	e7b2      	b.n	800cbd0 <scalbn+0x38>
 800cc6a:	bf00      	nop
 800cc6c:	f3af 8000 	nop.w
 800cc70:	c2f8f359 	.word	0xc2f8f359
 800cc74:	01a56e1f 	.word	0x01a56e1f
 800cc78:	8800759c 	.word	0x8800759c
 800cc7c:	7e37e43c 	.word	0x7e37e43c
 800cc80:	43500000 	.word	0x43500000
 800cc84:	ffff3cb0 	.word	0xffff3cb0
 800cc88:	3c900000 	.word	0x3c900000
 800cc8c:	00000000 	.word	0x00000000

0800cc90 <__ieee754_log>:
 800cc90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cc94:	ec51 0b10 	vmov	r0, r1, d0
 800cc98:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800cc9c:	b087      	sub	sp, #28
 800cc9e:	ee10 3a10 	vmov	r3, s0
 800cca2:	460d      	mov	r5, r1
 800cca4:	da27      	bge.n	800ccf6 <__ieee754_log+0x66>
 800cca6:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 800ccaa:	4313      	orrs	r3, r2
 800ccac:	d10a      	bne.n	800ccc4 <__ieee754_log+0x34>
 800ccae:	49cc      	ldr	r1, [pc, #816]	; (800cfe0 <__ieee754_log+0x350>)
 800ccb0:	2200      	movs	r2, #0
 800ccb2:	2300      	movs	r3, #0
 800ccb4:	2000      	movs	r0, #0
 800ccb6:	f7f3 fdc5 	bl	8000844 <__aeabi_ddiv>
 800ccba:	ec41 0b10 	vmov	d0, r0, r1
 800ccbe:	b007      	add	sp, #28
 800ccc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ccc4:	2900      	cmp	r1, #0
 800ccc6:	da07      	bge.n	800ccd8 <__ieee754_log+0x48>
 800ccc8:	ee10 2a10 	vmov	r2, s0
 800cccc:	460b      	mov	r3, r1
 800ccce:	f7f3 fadb 	bl	8000288 <__aeabi_dsub>
 800ccd2:	2200      	movs	r2, #0
 800ccd4:	2300      	movs	r3, #0
 800ccd6:	e7ee      	b.n	800ccb6 <__ieee754_log+0x26>
 800ccd8:	4bc2      	ldr	r3, [pc, #776]	; (800cfe4 <__ieee754_log+0x354>)
 800ccda:	2200      	movs	r2, #0
 800ccdc:	f7f3 fc88 	bl	80005f0 <__aeabi_dmul>
 800cce0:	f06f 0335 	mvn.w	r3, #53	; 0x35
 800cce4:	460d      	mov	r5, r1
 800cce6:	4ac0      	ldr	r2, [pc, #768]	; (800cfe8 <__ieee754_log+0x358>)
 800cce8:	4295      	cmp	r5, r2
 800ccea:	dd06      	ble.n	800ccfa <__ieee754_log+0x6a>
 800ccec:	4602      	mov	r2, r0
 800ccee:	460b      	mov	r3, r1
 800ccf0:	f7f3 facc 	bl	800028c <__adddf3>
 800ccf4:	e7e1      	b.n	800ccba <__ieee754_log+0x2a>
 800ccf6:	2300      	movs	r3, #0
 800ccf8:	e7f5      	b.n	800cce6 <__ieee754_log+0x56>
 800ccfa:	152c      	asrs	r4, r5, #20
 800ccfc:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800cd00:	f3c5 0513 	ubfx	r5, r5, #0, #20
 800cd04:	441c      	add	r4, r3
 800cd06:	f505 2315 	add.w	r3, r5, #610304	; 0x95000
 800cd0a:	f603 7364 	addw	r3, r3, #3940	; 0xf64
 800cd0e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800cd12:	f083 527f 	eor.w	r2, r3, #1069547520	; 0x3fc00000
 800cd16:	f482 1240 	eor.w	r2, r2, #3145728	; 0x300000
 800cd1a:	ea42 0105 	orr.w	r1, r2, r5
 800cd1e:	eb04 5413 	add.w	r4, r4, r3, lsr #20
 800cd22:	2200      	movs	r2, #0
 800cd24:	4bb1      	ldr	r3, [pc, #708]	; (800cfec <__ieee754_log+0x35c>)
 800cd26:	f7f3 faaf 	bl	8000288 <__aeabi_dsub>
 800cd2a:	1cab      	adds	r3, r5, #2
 800cd2c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800cd30:	2b02      	cmp	r3, #2
 800cd32:	4682      	mov	sl, r0
 800cd34:	468b      	mov	fp, r1
 800cd36:	f04f 0200 	mov.w	r2, #0
 800cd3a:	dc5b      	bgt.n	800cdf4 <__ieee754_log+0x164>
 800cd3c:	2300      	movs	r3, #0
 800cd3e:	f7f3 febf 	bl	8000ac0 <__aeabi_dcmpeq>
 800cd42:	b1d0      	cbz	r0, 800cd7a <__ieee754_log+0xea>
 800cd44:	2c00      	cmp	r4, #0
 800cd46:	f000 8170 	beq.w	800d02a <__ieee754_log+0x39a>
 800cd4a:	4620      	mov	r0, r4
 800cd4c:	f7f3 fbea 	bl	8000524 <__aeabi_i2d>
 800cd50:	a38f      	add	r3, pc, #572	; (adr r3, 800cf90 <__ieee754_log+0x300>)
 800cd52:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd56:	4606      	mov	r6, r0
 800cd58:	460f      	mov	r7, r1
 800cd5a:	f7f3 fc49 	bl	80005f0 <__aeabi_dmul>
 800cd5e:	a38e      	add	r3, pc, #568	; (adr r3, 800cf98 <__ieee754_log+0x308>)
 800cd60:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd64:	4604      	mov	r4, r0
 800cd66:	460d      	mov	r5, r1
 800cd68:	4630      	mov	r0, r6
 800cd6a:	4639      	mov	r1, r7
 800cd6c:	f7f3 fc40 	bl	80005f0 <__aeabi_dmul>
 800cd70:	4602      	mov	r2, r0
 800cd72:	460b      	mov	r3, r1
 800cd74:	4620      	mov	r0, r4
 800cd76:	4629      	mov	r1, r5
 800cd78:	e7ba      	b.n	800ccf0 <__ieee754_log+0x60>
 800cd7a:	a389      	add	r3, pc, #548	; (adr r3, 800cfa0 <__ieee754_log+0x310>)
 800cd7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd80:	4650      	mov	r0, sl
 800cd82:	4659      	mov	r1, fp
 800cd84:	f7f3 fc34 	bl	80005f0 <__aeabi_dmul>
 800cd88:	4602      	mov	r2, r0
 800cd8a:	460b      	mov	r3, r1
 800cd8c:	2000      	movs	r0, #0
 800cd8e:	4998      	ldr	r1, [pc, #608]	; (800cff0 <__ieee754_log+0x360>)
 800cd90:	f7f3 fa7a 	bl	8000288 <__aeabi_dsub>
 800cd94:	4652      	mov	r2, sl
 800cd96:	4606      	mov	r6, r0
 800cd98:	460f      	mov	r7, r1
 800cd9a:	465b      	mov	r3, fp
 800cd9c:	4650      	mov	r0, sl
 800cd9e:	4659      	mov	r1, fp
 800cda0:	f7f3 fc26 	bl	80005f0 <__aeabi_dmul>
 800cda4:	4602      	mov	r2, r0
 800cda6:	460b      	mov	r3, r1
 800cda8:	4630      	mov	r0, r6
 800cdaa:	4639      	mov	r1, r7
 800cdac:	f7f3 fc20 	bl	80005f0 <__aeabi_dmul>
 800cdb0:	4606      	mov	r6, r0
 800cdb2:	460f      	mov	r7, r1
 800cdb4:	b934      	cbnz	r4, 800cdc4 <__ieee754_log+0x134>
 800cdb6:	4602      	mov	r2, r0
 800cdb8:	460b      	mov	r3, r1
 800cdba:	4650      	mov	r0, sl
 800cdbc:	4659      	mov	r1, fp
 800cdbe:	f7f3 fa63 	bl	8000288 <__aeabi_dsub>
 800cdc2:	e77a      	b.n	800ccba <__ieee754_log+0x2a>
 800cdc4:	4620      	mov	r0, r4
 800cdc6:	f7f3 fbad 	bl	8000524 <__aeabi_i2d>
 800cdca:	a371      	add	r3, pc, #452	; (adr r3, 800cf90 <__ieee754_log+0x300>)
 800cdcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cdd0:	4680      	mov	r8, r0
 800cdd2:	4689      	mov	r9, r1
 800cdd4:	f7f3 fc0c 	bl	80005f0 <__aeabi_dmul>
 800cdd8:	a36f      	add	r3, pc, #444	; (adr r3, 800cf98 <__ieee754_log+0x308>)
 800cdda:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cdde:	4604      	mov	r4, r0
 800cde0:	460d      	mov	r5, r1
 800cde2:	4640      	mov	r0, r8
 800cde4:	4649      	mov	r1, r9
 800cde6:	f7f3 fc03 	bl	80005f0 <__aeabi_dmul>
 800cdea:	4602      	mov	r2, r0
 800cdec:	460b      	mov	r3, r1
 800cdee:	4630      	mov	r0, r6
 800cdf0:	4639      	mov	r1, r7
 800cdf2:	e0b2      	b.n	800cf5a <__ieee754_log+0x2ca>
 800cdf4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800cdf8:	f7f3 fa48 	bl	800028c <__adddf3>
 800cdfc:	4602      	mov	r2, r0
 800cdfe:	460b      	mov	r3, r1
 800ce00:	4650      	mov	r0, sl
 800ce02:	4659      	mov	r1, fp
 800ce04:	f7f3 fd1e 	bl	8000844 <__aeabi_ddiv>
 800ce08:	e9cd 0100 	strd	r0, r1, [sp]
 800ce0c:	4620      	mov	r0, r4
 800ce0e:	f7f3 fb89 	bl	8000524 <__aeabi_i2d>
 800ce12:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ce16:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ce1a:	4610      	mov	r0, r2
 800ce1c:	4619      	mov	r1, r3
 800ce1e:	f7f3 fbe7 	bl	80005f0 <__aeabi_dmul>
 800ce22:	4602      	mov	r2, r0
 800ce24:	460b      	mov	r3, r1
 800ce26:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ce2a:	f7f3 fbe1 	bl	80005f0 <__aeabi_dmul>
 800ce2e:	a35e      	add	r3, pc, #376	; (adr r3, 800cfa8 <__ieee754_log+0x318>)
 800ce30:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce34:	4606      	mov	r6, r0
 800ce36:	460f      	mov	r7, r1
 800ce38:	f7f3 fbda 	bl	80005f0 <__aeabi_dmul>
 800ce3c:	a35c      	add	r3, pc, #368	; (adr r3, 800cfb0 <__ieee754_log+0x320>)
 800ce3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce42:	f7f3 fa23 	bl	800028c <__adddf3>
 800ce46:	4632      	mov	r2, r6
 800ce48:	463b      	mov	r3, r7
 800ce4a:	f7f3 fbd1 	bl	80005f0 <__aeabi_dmul>
 800ce4e:	a35a      	add	r3, pc, #360	; (adr r3, 800cfb8 <__ieee754_log+0x328>)
 800ce50:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce54:	f7f3 fa1a 	bl	800028c <__adddf3>
 800ce58:	4632      	mov	r2, r6
 800ce5a:	463b      	mov	r3, r7
 800ce5c:	f7f3 fbc8 	bl	80005f0 <__aeabi_dmul>
 800ce60:	a357      	add	r3, pc, #348	; (adr r3, 800cfc0 <__ieee754_log+0x330>)
 800ce62:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce66:	f7f3 fa11 	bl	800028c <__adddf3>
 800ce6a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ce6e:	f7f3 fbbf 	bl	80005f0 <__aeabi_dmul>
 800ce72:	a355      	add	r3, pc, #340	; (adr r3, 800cfc8 <__ieee754_log+0x338>)
 800ce74:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce78:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ce7c:	4630      	mov	r0, r6
 800ce7e:	4639      	mov	r1, r7
 800ce80:	f7f3 fbb6 	bl	80005f0 <__aeabi_dmul>
 800ce84:	a352      	add	r3, pc, #328	; (adr r3, 800cfd0 <__ieee754_log+0x340>)
 800ce86:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce8a:	f7f3 f9ff 	bl	800028c <__adddf3>
 800ce8e:	4632      	mov	r2, r6
 800ce90:	463b      	mov	r3, r7
 800ce92:	f7f3 fbad 	bl	80005f0 <__aeabi_dmul>
 800ce96:	a350      	add	r3, pc, #320	; (adr r3, 800cfd8 <__ieee754_log+0x348>)
 800ce98:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce9c:	f7f3 f9f6 	bl	800028c <__adddf3>
 800cea0:	4632      	mov	r2, r6
 800cea2:	463b      	mov	r3, r7
 800cea4:	f7f3 fba4 	bl	80005f0 <__aeabi_dmul>
 800cea8:	f5a5 28c2 	sub.w	r8, r5, #397312	; 0x61000
 800ceac:	4602      	mov	r2, r0
 800ceae:	460b      	mov	r3, r1
 800ceb0:	f5c5 25d7 	rsb	r5, r5, #440320	; 0x6b800
 800ceb4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ceb8:	f7f3 f9e8 	bl	800028c <__adddf3>
 800cebc:	f2a8 487a 	subw	r8, r8, #1146	; 0x47a
 800cec0:	3551      	adds	r5, #81	; 0x51
 800cec2:	ea45 0508 	orr.w	r5, r5, r8
 800cec6:	2d00      	cmp	r5, #0
 800cec8:	4606      	mov	r6, r0
 800ceca:	460f      	mov	r7, r1
 800cecc:	dd50      	ble.n	800cf70 <__ieee754_log+0x2e0>
 800cece:	2200      	movs	r2, #0
 800ced0:	4b47      	ldr	r3, [pc, #284]	; (800cff0 <__ieee754_log+0x360>)
 800ced2:	4650      	mov	r0, sl
 800ced4:	4659      	mov	r1, fp
 800ced6:	f7f3 fb8b 	bl	80005f0 <__aeabi_dmul>
 800ceda:	4652      	mov	r2, sl
 800cedc:	465b      	mov	r3, fp
 800cede:	f7f3 fb87 	bl	80005f0 <__aeabi_dmul>
 800cee2:	4680      	mov	r8, r0
 800cee4:	4689      	mov	r9, r1
 800cee6:	b994      	cbnz	r4, 800cf0e <__ieee754_log+0x27e>
 800cee8:	4602      	mov	r2, r0
 800ceea:	460b      	mov	r3, r1
 800ceec:	4630      	mov	r0, r6
 800ceee:	4639      	mov	r1, r7
 800cef0:	f7f3 f9cc 	bl	800028c <__adddf3>
 800cef4:	e9dd 2300 	ldrd	r2, r3, [sp]
 800cef8:	f7f3 fb7a 	bl	80005f0 <__aeabi_dmul>
 800cefc:	4602      	mov	r2, r0
 800cefe:	460b      	mov	r3, r1
 800cf00:	4640      	mov	r0, r8
 800cf02:	4649      	mov	r1, r9
 800cf04:	f7f3 f9c0 	bl	8000288 <__aeabi_dsub>
 800cf08:	4602      	mov	r2, r0
 800cf0a:	460b      	mov	r3, r1
 800cf0c:	e755      	b.n	800cdba <__ieee754_log+0x12a>
 800cf0e:	a320      	add	r3, pc, #128	; (adr r3, 800cf90 <__ieee754_log+0x300>)
 800cf10:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf14:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cf18:	f7f3 fb6a 	bl	80005f0 <__aeabi_dmul>
 800cf1c:	4642      	mov	r2, r8
 800cf1e:	464b      	mov	r3, r9
 800cf20:	4604      	mov	r4, r0
 800cf22:	460d      	mov	r5, r1
 800cf24:	4630      	mov	r0, r6
 800cf26:	4639      	mov	r1, r7
 800cf28:	f7f3 f9b0 	bl	800028c <__adddf3>
 800cf2c:	e9dd 2300 	ldrd	r2, r3, [sp]
 800cf30:	f7f3 fb5e 	bl	80005f0 <__aeabi_dmul>
 800cf34:	a318      	add	r3, pc, #96	; (adr r3, 800cf98 <__ieee754_log+0x308>)
 800cf36:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf3a:	4606      	mov	r6, r0
 800cf3c:	460f      	mov	r7, r1
 800cf3e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cf42:	f7f3 fb55 	bl	80005f0 <__aeabi_dmul>
 800cf46:	4602      	mov	r2, r0
 800cf48:	460b      	mov	r3, r1
 800cf4a:	4630      	mov	r0, r6
 800cf4c:	4639      	mov	r1, r7
 800cf4e:	f7f3 f99d 	bl	800028c <__adddf3>
 800cf52:	4602      	mov	r2, r0
 800cf54:	460b      	mov	r3, r1
 800cf56:	4640      	mov	r0, r8
 800cf58:	4649      	mov	r1, r9
 800cf5a:	f7f3 f995 	bl	8000288 <__aeabi_dsub>
 800cf5e:	4652      	mov	r2, sl
 800cf60:	465b      	mov	r3, fp
 800cf62:	f7f3 f991 	bl	8000288 <__aeabi_dsub>
 800cf66:	4602      	mov	r2, r0
 800cf68:	460b      	mov	r3, r1
 800cf6a:	4620      	mov	r0, r4
 800cf6c:	4629      	mov	r1, r5
 800cf6e:	e726      	b.n	800cdbe <__ieee754_log+0x12e>
 800cf70:	2c00      	cmp	r4, #0
 800cf72:	d13f      	bne.n	800cff4 <__ieee754_log+0x364>
 800cf74:	4602      	mov	r2, r0
 800cf76:	460b      	mov	r3, r1
 800cf78:	4650      	mov	r0, sl
 800cf7a:	4659      	mov	r1, fp
 800cf7c:	f7f3 f984 	bl	8000288 <__aeabi_dsub>
 800cf80:	e9dd 2300 	ldrd	r2, r3, [sp]
 800cf84:	f7f3 fb34 	bl	80005f0 <__aeabi_dmul>
 800cf88:	e7be      	b.n	800cf08 <__ieee754_log+0x278>
 800cf8a:	bf00      	nop
 800cf8c:	f3af 8000 	nop.w
 800cf90:	fee00000 	.word	0xfee00000
 800cf94:	3fe62e42 	.word	0x3fe62e42
 800cf98:	35793c76 	.word	0x35793c76
 800cf9c:	3dea39ef 	.word	0x3dea39ef
 800cfa0:	55555555 	.word	0x55555555
 800cfa4:	3fd55555 	.word	0x3fd55555
 800cfa8:	df3e5244 	.word	0xdf3e5244
 800cfac:	3fc2f112 	.word	0x3fc2f112
 800cfb0:	96cb03de 	.word	0x96cb03de
 800cfb4:	3fc74664 	.word	0x3fc74664
 800cfb8:	94229359 	.word	0x94229359
 800cfbc:	3fd24924 	.word	0x3fd24924
 800cfc0:	55555593 	.word	0x55555593
 800cfc4:	3fe55555 	.word	0x3fe55555
 800cfc8:	d078c69f 	.word	0xd078c69f
 800cfcc:	3fc39a09 	.word	0x3fc39a09
 800cfd0:	1d8e78af 	.word	0x1d8e78af
 800cfd4:	3fcc71c5 	.word	0x3fcc71c5
 800cfd8:	9997fa04 	.word	0x9997fa04
 800cfdc:	3fd99999 	.word	0x3fd99999
 800cfe0:	c3500000 	.word	0xc3500000
 800cfe4:	43500000 	.word	0x43500000
 800cfe8:	7fefffff 	.word	0x7fefffff
 800cfec:	3ff00000 	.word	0x3ff00000
 800cff0:	3fe00000 	.word	0x3fe00000
 800cff4:	a30e      	add	r3, pc, #56	; (adr r3, 800d030 <__ieee754_log+0x3a0>)
 800cff6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cffa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cffe:	f7f3 faf7 	bl	80005f0 <__aeabi_dmul>
 800d002:	4632      	mov	r2, r6
 800d004:	463b      	mov	r3, r7
 800d006:	4604      	mov	r4, r0
 800d008:	460d      	mov	r5, r1
 800d00a:	4650      	mov	r0, sl
 800d00c:	4659      	mov	r1, fp
 800d00e:	f7f3 f93b 	bl	8000288 <__aeabi_dsub>
 800d012:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d016:	f7f3 faeb 	bl	80005f0 <__aeabi_dmul>
 800d01a:	a307      	add	r3, pc, #28	; (adr r3, 800d038 <__ieee754_log+0x3a8>)
 800d01c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d020:	4606      	mov	r6, r0
 800d022:	460f      	mov	r7, r1
 800d024:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d028:	e6dd      	b.n	800cde6 <__ieee754_log+0x156>
 800d02a:	2000      	movs	r0, #0
 800d02c:	2100      	movs	r1, #0
 800d02e:	e644      	b.n	800ccba <__ieee754_log+0x2a>
 800d030:	fee00000 	.word	0xfee00000
 800d034:	3fe62e42 	.word	0x3fe62e42
 800d038:	35793c76 	.word	0x35793c76
 800d03c:	3dea39ef 	.word	0x3dea39ef

0800d040 <copysign>:
 800d040:	ec53 2b10 	vmov	r2, r3, d0
 800d044:	ee11 0a90 	vmov	r0, s3
 800d048:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800d04c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 800d050:	ea41 0300 	orr.w	r3, r1, r0
 800d054:	ec43 2b10 	vmov	d0, r2, r3
 800d058:	4770      	bx	lr
	...

0800d05c <__errno>:
 800d05c:	4b01      	ldr	r3, [pc, #4]	; (800d064 <__errno+0x8>)
 800d05e:	6818      	ldr	r0, [r3, #0]
 800d060:	4770      	bx	lr
 800d062:	bf00      	nop
 800d064:	20000424 	.word	0x20000424

0800d068 <_sbrk>:
 800d068:	4b04      	ldr	r3, [pc, #16]	; (800d07c <_sbrk+0x14>)
 800d06a:	6819      	ldr	r1, [r3, #0]
 800d06c:	4602      	mov	r2, r0
 800d06e:	b909      	cbnz	r1, 800d074 <_sbrk+0xc>
 800d070:	4903      	ldr	r1, [pc, #12]	; (800d080 <_sbrk+0x18>)
 800d072:	6019      	str	r1, [r3, #0]
 800d074:	6818      	ldr	r0, [r3, #0]
 800d076:	4402      	add	r2, r0
 800d078:	601a      	str	r2, [r3, #0]
 800d07a:	4770      	bx	lr
 800d07c:	20006780 	.word	0x20006780
 800d080:	2000f140 	.word	0x2000f140

0800d084 <_init>:
 800d084:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d086:	bf00      	nop
 800d088:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d08a:	bc08      	pop	{r3}
 800d08c:	469e      	mov	lr, r3
 800d08e:	4770      	bx	lr

0800d090 <_fini>:
 800d090:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d092:	bf00      	nop
 800d094:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d096:	bc08      	pop	{r3}
 800d098:	469e      	mov	lr, r3
 800d09a:	4770      	bx	lr
